"use strict";(self.webpackChunk_weblif_fast_ui=self.webpackChunk_weblif_fast_ui||[]).push([[8466],{39398:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_CaretDownOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/CaretDownOutlined.js
// This icon file is generated automatically.
var CaretDownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "outlined" };
/* harmony default export */ var asn_CaretDownOutlined = (CaretDownOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var CaretDownOutlined_CaretDownOutlined = function CaretDownOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_CaretDownOutlined
  }));
};
CaretDownOutlined_CaretDownOutlined.displayName = 'CaretDownOutlined';
/* harmony default export */ var icons_CaretDownOutlined = (/*#__PURE__*/react.forwardRef(CaretDownOutlined_CaretDownOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzOTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLDBCQUEwQixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQiw2SEFBNkgsR0FBRztBQUMxUiwwREFBZSxpQkFBaUIsRUFBQzs7Ozs7QUNGb0M7QUFDckU7QUFDQTtBQUMrQjtBQUNtRDtBQUNwQztBQUM5QyxJQUFJLG1DQUFpQjtBQUNyQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUscUJBQW9CO0FBQzlCLEdBQUc7QUFDSDtBQUNBLG1DQUFpQjtBQUNqQix5RUFBNEIsZ0JBQWdCLENBQUMsbUNBQWlCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DYXJldERvd25PdXRsaW5lZC5qcz83ZGRmIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DYXJldERvd25PdXRsaW5lZC5qcz8yNDZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIENhcmV0RG93bk91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk04NDAuNCAzMDBIMTgzLjZjLTE5LjcgMC0zMC43IDIwLjgtMTguNSAzNWwzMjguNCAzODAuOGM5LjQgMTAuOSAyNy41IDEwLjkgMzcgMEw4NTguOSAzMzVjMTIuMi0xNC4yIDEuMi0zNS0xOC41LTM1elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiY2FyZXQtZG93blwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ2FyZXREb3duT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDYXJldERvd25PdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DYXJldERvd25PdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIENhcmV0RG93bk91dGxpbmVkID0gZnVuY3Rpb24gQ2FyZXREb3duT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENhcmV0RG93bk91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5DYXJldERvd25PdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDYXJldERvd25PdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDYXJldERvd25PdXRsaW5lZCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///39398
`)},10010:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_CaretUpOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js
// This icon file is generated automatically.
var CaretUpOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" } }] }, "name": "caret-up", "theme": "outlined" };
/* harmony default export */ var asn_CaretUpOutlined = (CaretUpOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var CaretUpOutlined_CaretUpOutlined = function CaretUpOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_CaretUpOutlined
  }));
};
CaretUpOutlined_CaretUpOutlined.displayName = 'CaretUpOutlined';
/* harmony default export */ var icons_CaretUpOutlined = (/*#__PURE__*/react.forwardRef(CaretUpOutlined_CaretUpOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwMTAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHdCQUF3QixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQiw4SEFBOEgsR0FBRztBQUN6Uix3REFBZSxlQUFlLEVBQUM7Ozs7O0FDRnNDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDK0M7QUFDaEM7QUFDOUMsSUFBSSwrQkFBZTtBQUNuQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUsbUJBQWtCO0FBQzVCLEdBQUc7QUFDSDtBQUNBLCtCQUFlO0FBQ2YsdUVBQTRCLGdCQUFnQixDQUFDLCtCQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DYXJldFVwT3V0bGluZWQuanM/NDZlYyIsIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2FyZXRVcE91dGxpbmVkLmpzPzFiZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2FyZXRVcE91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk04NTguOSA2ODlMNTMwLjUgMzA4LjJjLTkuNC0xMC45LTI3LjUtMTAuOS0zNyAwTDE2NS4xIDY4OWMtMTIuMiAxNC4yLTEuMiAzNSAxOC41IDM1aDY1Ni44YzE5LjcgMCAzMC43LTIwLjggMTguNS0zNXpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNhcmV0LXVwXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBDYXJldFVwT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDYXJldFVwT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2FyZXRVcE91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgQ2FyZXRVcE91dGxpbmVkID0gZnVuY3Rpb24gQ2FyZXRVcE91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDYXJldFVwT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkNhcmV0VXBPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDYXJldFVwT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2FyZXRVcE91dGxpbmVkKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///10010
`)},48689:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_DeleteOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js
// This icon file is generated automatically.
var DeleteOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" } }] }, "name": "delete", "theme": "outlined" };
/* harmony default export */ var asn_DeleteOutlined = (DeleteOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/DeleteOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var DeleteOutlined_DeleteOutlined = function DeleteOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_DeleteOutlined
  }));
};
DeleteOutlined_DeleteOutlined.displayName = 'DeleteOutlined';
/* harmony default export */ var icons_DeleteOutlined = (/*#__PURE__*/react.forwardRef(DeleteOutlined_DeleteOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2ODkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHVCQUF1QixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQiw4VkFBOFYsR0FBRztBQUN4Zix1REFBZSxjQUFjLEVBQUM7Ozs7O0FDRnVDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDNkM7QUFDOUI7QUFDOUMsSUFBSSw2QkFBYztBQUNsQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUsa0JBQWlCO0FBQzNCLEdBQUc7QUFDSDtBQUNBLDZCQUFjO0FBQ2Qsc0VBQTRCLGdCQUFnQixDQUFDLDZCQUFjLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9EZWxldGVPdXRsaW5lZC5qcz85ODlhIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9EZWxldGVPdXRsaW5lZC5qcz80ZGQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIERlbGV0ZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0zNjAgMTg0aC04YzQuNCAwIDgtMy42IDgtOHY4aDMwNHYtOGMwIDQuNCAzLjYgOCA4IDhoLTh2NzJoNzJ2LTgwYzAtMzUuMy0yOC43LTY0LTY0LTY0SDM1MmMtMzUuMyAwLTY0IDI4LjctNjQgNjR2ODBoNzJ2LTcyem01MDQgNzJIMTYwYy0xNy43IDAtMzIgMTQuMy0zMiAzMnYzMmMwIDQuNCAzLjYgOCA4IDhoNjAuNGwyNC43IDUyM2MxLjYgMzQuMSAyOS44IDYxIDYzLjkgNjFoNDU0YzM0LjIgMCA2Mi4zLTI2LjggNjMuOS02MWwyNC43LTUyM0g4ODhjNC40IDAgOC0zLjYgOC04di0zMmMwLTE3LjctMTQuMy0zMi0zMi0zMnpNNzMxLjMgODQwSDI5Mi43bC0yNC4yLTUxMmg0ODdsLTI0LjIgNTEyelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZGVsZXRlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBEZWxldGVPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERlbGV0ZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0RlbGV0ZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgRGVsZXRlT3V0bGluZWQgPSBmdW5jdGlvbiBEZWxldGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogRGVsZXRlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkRlbGV0ZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0RlbGV0ZU91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKERlbGV0ZU91dGxpbmVkKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///48689
`)},23430:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_DownloadOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/DownloadOutlined.js
// This icon file is generated automatically.
var DownloadOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" } }] }, "name": "download", "theme": "outlined" };
/* harmony default export */ var asn_DownloadOutlined = (DownloadOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/DownloadOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var DownloadOutlined_DownloadOutlined = function DownloadOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_DownloadOutlined
  }));
};
DownloadOutlined_DownloadOutlined.displayName = 'DownloadOutlined';
/* harmony default export */ var icons_DownloadOutlined = (/*#__PURE__*/react.forwardRef(DownloadOutlined_DownloadOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM0MzAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHlCQUF5QixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQix3VEFBd1QsR0FBRztBQUNwZCx5REFBZSxnQkFBZ0IsRUFBQzs7Ozs7QUNGcUM7QUFDckU7QUFDQTtBQUMrQjtBQUNpRDtBQUNsQztBQUM5QyxJQUFJLGlDQUFnQjtBQUNwQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUsb0JBQW1CO0FBQzdCLEdBQUc7QUFDSDtBQUNBLGlDQUFnQjtBQUNoQix3RUFBNEIsZ0JBQWdCLENBQUMsaUNBQWdCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Eb3dubG9hZE91dGxpbmVkLmpzP2M4N2EiLCJ3ZWJwYWNrOi8vQHdlYmxpZi9mYXN0LXVpLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Rvd25sb2FkT3V0bGluZWQuanM/OTc4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBEb3dubG9hZE91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MDUuNyA2NjFhOCA4IDAgMDAxMi42IDBsMTEyLTE0MS43YzQuMS01LjIuNC0xMi45LTYuMy0xMi45aC03NC4xVjE2OGMwLTQuNC0zLjYtOC04LThoLTYwYy00LjQgMC04IDMuNi04IDh2MzM4LjNINDAwYy02LjcgMC0xMC40IDcuNy02LjMgMTIuOWwxMTIgMTQxLjh6TTg3OCA2MjZoLTYwYy00LjQgMC04IDMuNi04IDh2MTU0SDIxNFY2MzRjMC00LjQtMy42LTgtOC04aC02MGMtNC40IDAtOCAzLjYtOCA4djE5OGMwIDE3LjcgMTQuMyAzMiAzMiAzMmg2ODRjMTcuNyAwIDMyLTE0LjMgMzItMzJWNjM0YzAtNC40LTMuNi04LTgtOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImRvd25sb2FkXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBEb3dubG9hZE91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRG93bmxvYWRPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Eb3dubG9hZE91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgRG93bmxvYWRPdXRsaW5lZCA9IGZ1bmN0aW9uIERvd25sb2FkT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IERvd25sb2FkT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkRvd25sb2FkT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnRG93bmxvYWRPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihEb3dubG9hZE91dGxpbmVkKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///23430
`)},15360:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_FileTextOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/FileTextOutlined.js
// This icon file is generated automatically.
var FileTextOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494zM504 618H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM312 490v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8z" } }] }, "name": "file-text", "theme": "outlined" };
/* harmony default export */ var asn_FileTextOutlined = (FileTextOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/FileTextOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var FileTextOutlined_FileTextOutlined = function FileTextOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_FileTextOutlined
  }));
};
FileTextOutlined_FileTextOutlined.displayName = 'FileTextOutlined';
/* harmony default export */ var icons_FileTextOutlined = (/*#__PURE__*/react.forwardRef(FileTextOutlined_FileTextOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzNjAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHlCQUF5QixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQixzYUFBc2EsR0FBRztBQUNsa0IseURBQWUsZ0JBQWdCLEVBQUM7Ozs7O0FDRnFDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDaUQ7QUFDbEM7QUFDOUMsSUFBSSxpQ0FBZ0I7QUFDcEIsc0JBQXNCLG1CQUFtQixDQUFDLHVCQUFRLEVBQUUsZ0NBQWEsQ0FBQyxnQ0FBYSxHQUFHLFlBQVk7QUFDOUY7QUFDQSxVQUFVLG9CQUFtQjtBQUM3QixHQUFHO0FBQ0g7QUFDQSxpQ0FBZ0I7QUFDaEIsd0VBQTRCLGdCQUFnQixDQUFDLGlDQUFnQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHdlYmxpZi9mYXN0LXVpLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRmlsZVRleHRPdXRsaW5lZC5qcz85NzgzIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9GaWxlVGV4dE91dGxpbmVkLmpzPzQ5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgRmlsZVRleHRPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNODU0LjYgMjg4LjZMNjM5LjQgNzMuNGMtNi02LTE0LjEtOS40LTIyLjYtOS40SDE5MmMtMTcuNyAwLTMyIDE0LjMtMzIgMzJ2ODMyYzAgMTcuNyAxNC4zIDMyIDMyIDMyaDY0MGMxNy43IDAgMzItMTQuMyAzMi0zMlYzMTEuM2MwLTguNS0zLjQtMTYuNy05LjQtMjIuN3pNNzkwLjIgMzI2SDYwMlYxMzcuOEw3OTAuMiAzMjZ6bTEuOCA1NjJIMjMyVjEzNmgzMDJ2MjE2YTQyIDQyIDAgMDA0MiA0MmgyMTZ2NDk0ek01MDQgNjE4SDMyMGMtNC40IDAtOCAzLjYtOCA4djQ4YzAgNC40IDMuNiA4IDggOGgxODRjNC40IDAgOC0zLjYgOC04di00OGMwLTQuNC0zLjYtOC04LTh6TTMxMiA0OTB2NDhjMCA0LjQgMy42IDggOCA4aDM4NGM0LjQgMCA4LTMuNiA4LTh2LTQ4YzAtNC40LTMuNi04LTgtOEgzMjBjLTQuNCAwLTggMy42LTggOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImZpbGUtdGV4dFwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRmlsZVRleHRPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpbGVUZXh0T3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRmlsZVRleHRPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEZpbGVUZXh0T3V0bGluZWQgPSBmdW5jdGlvbiBGaWxlVGV4dE91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBGaWxlVGV4dE91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5GaWxlVGV4dE91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0ZpbGVUZXh0T3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoRmlsZVRleHRPdXRsaW5lZCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///15360
`)},58895:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_FileTwoTone; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/FileTwoTone.js
// This icon file is generated automatically.
var FileTwoTone = { "icon": function render(primaryColor, secondaryColor) { return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M534 352V136H232v752h560V394H576a42 42 0 01-42-42z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0042 42h216v494z", "fill": primaryColor } }] }; }, "name": "file", "theme": "twotone" };
/* harmony default export */ var asn_FileTwoTone = (FileTwoTone);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/FileTwoTone.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var FileTwoTone_FileTwoTone = function FileTwoTone(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_FileTwoTone
  }));
};
FileTwoTone_FileTwoTone.displayName = 'FileTwoTone';
/* harmony default export */ var icons_FileTwoTone = (/*#__PURE__*/react.forwardRef(FileTwoTone_FileTwoTone));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg4OTUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLG9CQUFvQix3REFBd0QsU0FBUyx5QkFBeUIsa0RBQWtELGlCQUFpQiwwQkFBMEIscUZBQXFGLElBQUksMEJBQTBCLDBRQUEwUSxNQUFNO0FBQzlrQixvREFBZSxXQUFXLEVBQUM7Ozs7O0FDRjBDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDdUM7QUFDeEI7QUFDOUMsSUFBSSx1QkFBVztBQUNmLHNCQUFzQixtQkFBbUIsQ0FBQyx1QkFBUSxFQUFFLGdDQUFhLENBQUMsZ0NBQWEsR0FBRyxZQUFZO0FBQzlGO0FBQ0EsVUFBVSxlQUFjO0FBQ3hCLEdBQUc7QUFDSDtBQUNBLHVCQUFXO0FBQ1gsbUVBQTRCLGdCQUFnQixDQUFDLHVCQUFXLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9GaWxlVHdvVG9uZS5qcz8zNzNlIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9GaWxlVHdvVG9uZS5qcz85NGMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEZpbGVUd29Ub25lID0geyBcImljb25cIjogZnVuY3Rpb24gcmVuZGVyKHByaW1hcnlDb2xvciwgc2Vjb25kYXJ5Q29sb3IpIHsgcmV0dXJuIHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTM0IDM1MlYxMzZIMjMydjc1Mmg1NjBWMzk0SDU3NmE0MiA0MiAwIDAxLTQyLTQyelwiLCBcImZpbGxcIjogc2Vjb25kYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTg1NC42IDI4OC42TDYzOS40IDczLjRjLTYtNi0xNC4xLTkuNC0yMi42LTkuNEgxOTJjLTE3LjcgMC0zMiAxNC4zLTMyIDMydjgzMmMwIDE3LjcgMTQuMyAzMiAzMiAzMmg2NDBjMTcuNyAwIDMyLTE0LjMgMzItMzJWMzExLjNjMC04LjUtMy40LTE2LjctOS40LTIyLjd6TTYwMiAxMzcuOEw3OTAuMiAzMjZINjAyVjEzNy44ek03OTIgODg4SDIzMlYxMzZoMzAydjIxNmE0MiA0MiAwIDAwNDIgNDJoMjE2djQ5NHpcIiwgXCJmaWxsXCI6IHByaW1hcnlDb2xvciB9IH1dIH07IH0sIFwibmFtZVwiOiBcImZpbGVcIiwgXCJ0aGVtZVwiOiBcInR3b3RvbmVcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRmlsZVR3b1RvbmU7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGaWxlVHdvVG9uZVN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9GaWxlVHdvVG9uZVwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEZpbGVUd29Ub25lID0gZnVuY3Rpb24gRmlsZVR3b1RvbmUocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEZpbGVUd29Ub25lU3ZnXG4gIH0pKTtcbn07XG5GaWxlVHdvVG9uZS5kaXNwbGF5TmFtZSA9ICdGaWxlVHdvVG9uZSc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihGaWxlVHdvVG9uZSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///58895
`)},99982:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_FilterFilled; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/FilterFilled.js
// This icon file is generated automatically.
var FilterFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z" } }] }, "name": "filter", "theme": "filled" };
/* harmony default export */ var asn_FilterFilled = (FilterFilled);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/FilterFilled.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var FilterFilled_FilterFilled = function FilterFilled(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_FilterFilled
  }));
};
FilterFilled_FilterFilled.displayName = 'FilterFilled';
/* harmony default export */ var icons_FilterFilled = (/*#__PURE__*/react.forwardRef(FilterFilled_FilterFilled));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk5ODIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHFCQUFxQixVQUFVLHlCQUF5QixrREFBa0QsaUJBQWlCLDBCQUEwQixvTEFBb0wsR0FBRztBQUM1VSxxREFBZSxZQUFZLEVBQUM7Ozs7O0FDRnlDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDeUM7QUFDMUI7QUFDOUMsSUFBSSx5QkFBWTtBQUNoQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUsZ0JBQWU7QUFDekIsR0FBRztBQUNIO0FBQ0EseUJBQVk7QUFDWixvRUFBNEIsZ0JBQWdCLENBQUMseUJBQVksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0ZpbHRlckZpbGxlZC5qcz8wMzNkIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9GaWx0ZXJGaWxsZWQuanM/MDgzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBGaWx0ZXJGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTM0OSA4MzhjMCAxNy43IDE0LjIgMzIgMzEuOCAzMmgyNjIuNGMxNy42IDAgMzEuOC0xNC4zIDMxLjgtMzJWNjQySDM0OXYxOTZ6bTUzMS4xLTY4NEgxNDMuOWMtMjQuNSAwLTM5LjggMjYuNy0yNy41IDQ4bDIyMS4zIDM3NmgzNDguOGwyMjEuMy0zNzZjMTIuMS0yMS4zLTMuMi00OC0yNy43LTQ4elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZmlsdGVyXCIsIFwidGhlbWVcIjogXCJmaWxsZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRmlsdGVyRmlsbGVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmlsdGVyRmlsbGVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0ZpbHRlckZpbGxlZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEZpbHRlckZpbGxlZCA9IGZ1bmN0aW9uIEZpbHRlckZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogRmlsdGVyRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5GaWx0ZXJGaWxsZWQuZGlzcGxheU5hbWUgPSAnRmlsdGVyRmlsbGVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEZpbHRlckZpbGxlZCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///99982
`)},5392:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_PaperClipOutlined; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/PaperClipOutlined.js
// This icon file is generated automatically.
var PaperClipOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z" } }] }, "name": "paper-clip", "theme": "outlined" };
/* harmony default export */ var asn_PaperClipOutlined = (PaperClipOutlined);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/PaperClipOutlined.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var PaperClipOutlined_PaperClipOutlined = function PaperClipOutlined(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_PaperClipOutlined
  }));
};
PaperClipOutlined_PaperClipOutlined.displayName = 'PaperClipOutlined';
/* harmony default export */ var icons_PaperClipOutlined = (/*#__PURE__*/react.forwardRef(PaperClipOutlined_PaperClipOutlined));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM5Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0EsMEJBQTBCLFVBQVUseUJBQXlCLGtEQUFrRCxpQkFBaUIsMEJBQTBCLGcwQkFBZzBCLEdBQUc7QUFDNzlCLDBEQUFlLGlCQUFpQixFQUFDOzs7OztBQ0ZvQztBQUNyRTtBQUNBO0FBQytCO0FBQ21EO0FBQ3BDO0FBQzlDLElBQUksbUNBQWlCO0FBQ3JCLHNCQUFzQixtQkFBbUIsQ0FBQyx1QkFBUSxFQUFFLGdDQUFhLENBQUMsZ0NBQWEsR0FBRyxZQUFZO0FBQzlGO0FBQ0EsVUFBVSxxQkFBb0I7QUFDOUIsR0FBRztBQUNIO0FBQ0EsbUNBQWlCO0FBQ2pCLHlFQUE0QixnQkFBZ0IsQ0FBQyxtQ0FBaUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1BhcGVyQ2xpcE91dGxpbmVkLmpzPzNiZjciLCJ3ZWJwYWNrOi8vQHdlYmxpZi9mYXN0LXVpLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1BhcGVyQ2xpcE91dGxpbmVkLmpzPzdhNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgUGFwZXJDbGlwT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTc3OS4zIDE5Ni42Yy05NC4yLTk0LjItMjQ3LjYtOTQuMi0zNDEuNyAwbC0yNjEgMjYwLjhjLTEuNyAxLjctMi42IDQtMi42IDYuNHMuOSA0LjcgMi42IDYuNGwzNi45IDM2LjlhOSA5IDAgMDAxMi43IDBsMjYxLTI2MC44YzMyLjQtMzIuNCA3NS41LTUwLjIgMTIxLjMtNTAuMnM4OC45IDE3LjggMTIxLjIgNTAuMmMzMi40IDMyLjQgNTAuMiA3NS41IDUwLjIgMTIxLjIgMCA0NS44LTE3LjggODguOC01MC4yIDEyMS4ybC0yNjYgMjY1LjktNDMuMSA0My4xYy00MC4zIDQwLjMtMTA1LjggNDAuMy0xNDYuMSAwLTE5LjUtMTkuNS0zMC4yLTQ1LjQtMzAuMi03M3MxMC43LTUzLjUgMzAuMi03M2wyNjMuOS0yNjMuOGM2LjctNi42IDE1LjUtMTAuMyAyNC45LTEwLjNoLjFjOS40IDAgMTguMSAzLjcgMjQuNyAxMC4zIDYuNyA2LjcgMTAuMyAxNS41IDEwLjMgMjQuOSAwIDkuMy0zLjcgMTguMS0xMC4zIDI0LjdMMzcyLjQgNjUzYy0xLjcgMS43LTIuNiA0LTIuNiA2LjRzLjkgNC43IDIuNiA2LjRsMzYuOSAzNi45YTkgOSAwIDAwMTIuNyAwbDIxNS42LTIxNS42YzE5LjktMTkuOSAzMC44LTQ2LjMgMzAuOC03NC40cy0xMS01NC42LTMwLjgtNzQuNGMtNDEuMS00MS4xLTEwNy45LTQxLTE0OSAwTDQ2MyAzNjQgMjI0LjggNjAyLjFBMTcyLjIyIDE3Mi4yMiAwIDAwMTc0IDcyNC44YzAgNDYuMyAxOC4xIDg5LjggNTAuOCAxMjIuNSAzMy45IDMzLjggNzguMyA1MC43IDEyMi43IDUwLjcgNDQuNCAwIDg4LjgtMTYuOSAxMjIuNi01MC43bDMwOS4yLTMwOUM4MjQuOCA0OTIuNyA4NTAgNDMyIDg1MCAzNjcuNWMuMS02NC42LTI1LjEtMTI1LjMtNzAuNy0xNzAuOXpcIiB9IH1dIH0sIFwibmFtZVwiOiBcInBhcGVyLWNsaXBcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyQ2xpcE91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUGFwZXJDbGlwT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vUGFwZXJDbGlwT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcbnZhciBQYXBlckNsaXBPdXRsaW5lZCA9IGZ1bmN0aW9uIFBhcGVyQ2xpcE91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBQYXBlckNsaXBPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuUGFwZXJDbGlwT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnUGFwZXJDbGlwT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoUGFwZXJDbGlwT3V0bGluZWQpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///5392
`)},82543:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`
// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ icons_PictureTwoTone; }
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/PictureTwoTone.js
// This icon file is generated automatically.
var PictureTwoTone = { "icon": function render(primaryColor, secondaryColor) { return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z", "fill": primaryColor } }, { "tag": "path", "attrs": { "d": "M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 110 176 88 88 0 010-176z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M276 368a28 28 0 1056 0 28 28 0 10-56 0z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z", "fill": primaryColor } }] }; }, "name": "picture", "theme": "twotone" };
/* harmony default export */ var asn_PictureTwoTone = (PictureTwoTone);

// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js
var AntdIcon = __webpack_require__(13401);
;// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/PictureTwoTone.js

// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY



var PictureTwoTone_PictureTwoTone = function PictureTwoTone(props, ref) {
  return /*#__PURE__*/react.createElement(AntdIcon/* default */.Z, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    ref: ref,
    icon: asn_PictureTwoTone
  }));
};
PictureTwoTone_PictureTwoTone.displayName = 'PictureTwoTone';
/* harmony default export */ var icons_PictureTwoTone = (/*#__PURE__*/react.forwardRef(PictureTwoTone_PictureTwoTone));//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1NDMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLHVCQUF1Qix3REFBd0QsU0FBUyx5QkFBeUIsa0RBQWtELGlCQUFpQiwwQkFBMEIsK1RBQStULElBQUksMEJBQTBCLDZGQUE2RixJQUFJLDBCQUEwQix1TEFBdUwsSUFBSSwwQkFBMEIsMkVBQTJFLElBQUksMEJBQTBCLGlKQUFpSixNQUFNO0FBQzNuQyx1REFBZSxjQUFjLEVBQUM7Ozs7O0FDRnVDO0FBQ3JFO0FBQ0E7QUFDK0I7QUFDNkM7QUFDOUI7QUFDOUMsSUFBSSw2QkFBYztBQUNsQixzQkFBc0IsbUJBQW1CLENBQUMsdUJBQVEsRUFBRSxnQ0FBYSxDQUFDLGdDQUFhLEdBQUcsWUFBWTtBQUM5RjtBQUNBLFVBQVUsa0JBQWlCO0FBQzNCLEdBQUc7QUFDSDtBQUNBLDZCQUFjO0FBQ2Qsc0VBQTRCLGdCQUFnQixDQUFDLDZCQUFjLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2VibGlmL2Zhc3QtdWkvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9QaWN0dXJlVHdvVG9uZS5qcz83ZjEzIiwid2VicGFjazovL0B3ZWJsaWYvZmFzdC11aS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9QaWN0dXJlVHdvVG9uZS5qcz84YjhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIFBpY3R1cmVUd29Ub25lID0geyBcImljb25cIjogZnVuY3Rpb24gcmVuZGVyKHByaW1hcnlDb2xvciwgc2Vjb25kYXJ5Q29sb3IpIHsgcmV0dXJuIHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTI4IDE2MEg5NmMtMTcuNyAwLTMyIDE0LjMtMzIgMzJ2NjQwYzAgMTcuNyAxNC4zIDMyIDMyIDMyaDgzMmMxNy43IDAgMzItMTQuMyAzMi0zMlYxOTJjMC0xNy43LTE0LjMtMzItMzItMzJ6bS00MCA2MzJIMTM2di0zOS45bDEzOC41LTE2NC4zIDE1MC4xIDE3OEw2NTguMSA0ODkgODg4IDc2MS42Vjc5MnptMC0xMjkuOEw2NjQuMiAzOTYuOGMtMy4yLTMuOC05LTMuOC0xMi4yIDBMNDI0LjYgNjY2LjRsLTE0NC0xNzAuN2MtMy4yLTMuOC05LTMuOC0xMi4yIDBMMTM2IDY1Mi43VjIzMmg3NTJ2NDMwLjJ6XCIsIFwiZmlsbFwiOiBwcmltYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQyNC42IDc2NS44bC0xNTAuMS0xNzhMMTM2IDc1Mi4xVjc5Mmg3NTJ2LTMwLjRMNjU4LjEgNDg5elwiLCBcImZpbGxcIjogc2Vjb25kYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTEzNiA2NTIuN2wxMzIuNC0xNTdjMy4yLTMuOCA5LTMuOCAxMi4yIDBsMTQ0IDE3MC43TDY1MiAzOTYuOGMzLjItMy44IDktMy44IDEyLjIgMEw4ODggNjYyLjJWMjMySDEzNnY0MjAuN3pNMzA0IDI4MGE4OCA4OCAwIDExMCAxNzYgODggODggMCAwMTAtMTc2elwiLCBcImZpbGxcIjogc2Vjb25kYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTI3NiAzNjhhMjggMjggMCAxMDU2IDAgMjggMjggMCAxMC01NiAwelwiLCBcImZpbGxcIjogc2Vjb25kYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTMwNCA0NTZhODggODggMCAxMDAtMTc2IDg4IDg4IDAgMDAwIDE3NnptMC0xMTZjMTUuNSAwIDI4IDEyLjUgMjggMjhzLTEyLjUgMjgtMjggMjgtMjgtMTIuNS0yOC0yOCAxMi41LTI4IDI4LTI4elwiLCBcImZpbGxcIjogcHJpbWFyeUNvbG9yIH0gfV0gfTsgfSwgXCJuYW1lXCI6IFwicGljdHVyZVwiLCBcInRoZW1lXCI6IFwidHdvdG9uZVwiIH07XG5leHBvcnQgZGVmYXVsdCBQaWN0dXJlVHdvVG9uZTtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBpY3R1cmVUd29Ub25lU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1BpY3R1cmVUd29Ub25lXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgUGljdHVyZVR3b1RvbmUgPSBmdW5jdGlvbiBQaWN0dXJlVHdvVG9uZShwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogUGljdHVyZVR3b1RvbmVTdmdcbiAgfSkpO1xufTtcblBpY3R1cmVUd29Ub25lLmRpc3BsYXlOYW1lID0gJ1BpY3R1cmVUd29Ub25lJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFBpY3R1cmVUd29Ub25lKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///82543
`)},88466:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(`// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Affix": function() { return /* reexport */ affix/* default */.Z; },
  "Alert": function() { return /* reexport */ es_alert/* default */.Z; },
  "Anchor": function() { return /* reexport */ es_anchor/* default */.Z; },
  "App": function() { return /* reexport */ app; },
  "AutoComplete": function() { return /* reexport */ auto_complete/* default */.Z; },
  "Avatar": function() { return /* reexport */ avatar/* default */.C; },
  "BackTop": function() { return /* reexport */ back_top/* default */.Z; },
  "Badge": function() { return /* reexport */ badge/* default */.Z; },
  "Breadcrumb": function() { return /* reexport */ breadcrumb/* default */.Z; },
  "Button": function() { return /* reexport */ es_button/* default */.ZP; },
  "Calendar": function() { return /* reexport */ calendar; },
  "Card": function() { return /* reexport */ card/* default */.Z; },
  "Carousel": function() { return /* reexport */ carousel/* default */.Z; },
  "Cascader": function() { return /* reexport */ cascader/* default */.Z; },
  "Checkbox": function() { return /* reexport */ es_checkbox/* default */.Z; },
  "Col": function() { return /* reexport */ col/* default */.Z; },
  "Collapse": function() { return /* reexport */ collapse/* default */.Z; },
  "ConfigProvider": function() { return /* reexport */ config_provider/* default */.ZP; },
  "DatePicker": function() { return /* reexport */ date_picker; },
  "Descriptions": function() { return /* reexport */ descriptions/* default */.Z; },
  "Divider": function() { return /* reexport */ divider/* default */.Z; },
  "Drawer": function() { return /* reexport */ drawer/* default */.Z; },
  "Dropdown": function() { return /* reexport */ es_dropdown/* default */.Z; },
  "Empty": function() { return /* reexport */ empty/* default */.Z; },
  "FloatButton": function() { return /* reexport */ float_button; },
  "Form": function() { return /* reexport */ es_form/* default */.Z; },
  "Grid": function() { return /* reexport */ grid; },
  "Image": function() { return /* reexport */ es_image/* default */.Z; },
  "Input": function() { return /* reexport */ input/* default */.Z; },
  "InputNumber": function() { return /* reexport */ input_number/* default */.Z; },
  "Layout": function() { return /* reexport */ es_layout; },
  "List": function() { return /* reexport */ list/* default */.ZP; },
  "Mentions": function() { return /* reexport */ mentions; },
  "Menu": function() { return /* reexport */ es_menu/* default */.Z; },
  "Modal": function() { return /* reexport */ modal/* default */.Z; },
  "Pagination": function() { return /* reexport */ es_pagination/* default */.Z; },
  "Popconfirm": function() { return /* reexport */ popconfirm/* default */.Z; },
  "Popover": function() { return /* reexport */ popover/* default */.Z; },
  "Progress": function() { return /* reexport */ progress/* default */.Z; },
  "QRCode": function() { return /* reexport */ qrcode/* default */.Z; },
  "Radio": function() { return /* reexport */ es_radio/* default */.ZP; },
  "Rate": function() { return /* reexport */ rate/* default */.Z; },
  "Result": function() { return /* reexport */ result/* default */.ZP; },
  "Row": function() { return /* reexport */ row/* default */.Z; },
  "Segmented": function() { return /* reexport */ segmented; },
  "Select": function() { return /* reexport */ es_select/* default */.Z; },
  "Skeleton": function() { return /* reexport */ skeleton/* default */.Z; },
  "Slider": function() { return /* reexport */ slider/* default */.Z; },
  "Space": function() { return /* reexport */ space/* default */.Z; },
  "Spin": function() { return /* reexport */ spin/* default */.Z; },
  "Statistic": function() { return /* reexport */ es_statistic/* default */.Z; },
  "Steps": function() { return /* reexport */ steps/* default */.Z; },
  "Switch": function() { return /* reexport */ es_switch/* default */.Z; },
  "Table": function() { return /* reexport */ table; },
  "Tabs": function() { return /* reexport */ tabs/* default */.Z; },
  "Tag": function() { return /* reexport */ tag/* default */.Z; },
  "TimePicker": function() { return /* reexport */ time_picker; },
  "Timeline": function() { return /* reexport */ timeline/* default */.Z; },
  "Tooltip": function() { return /* reexport */ es_tooltip/* default */.Z; },
  "Tour": function() { return /* reexport */ tour; },
  "Transfer": function() { return /* reexport */ transfer; },
  "Tree": function() { return /* reexport */ tree/* default */.Z; },
  "TreeSelect": function() { return /* reexport */ tree_select; },
  "Typography": function() { return /* reexport */ typography/* default */.Z; },
  "Upload": function() { return /* reexport */ es_upload; },
  "Watermark": function() { return /* reexport */ watermark; },
  "message": function() { return /* reexport */ message/* default */.ZP; },
  "notification": function() { return /* reexport */ notification/* default */.Z; },
  "theme": function() { return /* reexport */ theme/* default */.Z; },
  "version": function() { return /* reexport */ version/* default */.Z; }
});

// EXTERNAL MODULE: ./node_modules/antd/es/affix/index.js + 2 modules
var affix = __webpack_require__(30291);
// EXTERNAL MODULE: ./node_modules/antd/es/alert/index.js + 2 modules
var es_alert = __webpack_require__(99138);
// EXTERNAL MODULE: ./node_modules/antd/es/anchor/index.js + 4 modules
var es_anchor = __webpack_require__(36569);
// EXTERNAL MODULE: ./node_modules/antd/es/auto-complete/index.js
var auto_complete = __webpack_require__(49288);
// EXTERNAL MODULE: ./node_modules/antd/es/avatar/index.js + 4 modules
var avatar = __webpack_require__(98293);
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(94184);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react/index.js
var react = __webpack_require__(62435);
// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/context.js
var context = __webpack_require__(53124);
// EXTERNAL MODULE: ./node_modules/@ant-design/cssinjs/es/index.js + 21 modules
var es = __webpack_require__(24599);
// EXTERNAL MODULE: ./node_modules/antd/es/theme/util/genComponentStyleHook.js
var genComponentStyleHook = __webpack_require__(67968);
// EXTERNAL MODULE: ./node_modules/antd/es/theme/util/statistic.js
var statistic = __webpack_require__(45503);
// EXTERNAL MODULE: ./node_modules/antd/es/style/motion/fade.js
var fade = __webpack_require__(16932);
// EXTERNAL MODULE: ./node_modules/antd/es/style/index.js
var style = __webpack_require__(14747);
// EXTERNAL MODULE: ./node_modules/antd/es/style/motion/motion.js
var motion = __webpack_require__(93590);
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/style/index.js





const initFloatButtonGroupMotion = token => {
  const {
    componentCls,
    floatButtonSize,
    motionDurationSlow,
    motionEaseInOutCirc
  } = token;
  const groupPrefixCls = \`\${componentCls}-group\`;
  const moveDownIn = new es/* Keyframes */.E4('antFloatButtonMoveDownIn', {
    '0%': {
      transform: \`translate3d(0, \${floatButtonSize}px, 0)\`,
      transformOrigin: '0 0',
      opacity: 0
    },
    '100%': {
      transform: 'translate3d(0, 0, 0)',
      transformOrigin: '0 0',
      opacity: 1
    }
  });
  const moveDownOut = new es/* Keyframes */.E4('antFloatButtonMoveDownOut', {
    '0%': {
      transform: 'translate3d(0, 0, 0)',
      transformOrigin: '0 0',
      opacity: 1
    },
    '100%': {
      transform: \`translate3d(0, \${floatButtonSize}px, 0)\`,
      transformOrigin: '0 0',
      opacity: 0
    }
  });
  return [{
    [\`\${groupPrefixCls}-wrap\`]: Object.assign({}, (0,motion/* initMotion */.R)(\`\${groupPrefixCls}-wrap\`, moveDownIn, moveDownOut, motionDurationSlow, true))
  }, {
    [\`\${groupPrefixCls}-wrap\`]: {
      [\`
          &\${groupPrefixCls}-wrap-enter,
          &\${groupPrefixCls}-wrap-appear
        \`]: {
        opacity: 0,
        animationTimingFunction: motionEaseInOutCirc
      },
      [\`&\${groupPrefixCls}-wrap-leave\`]: {
        animationTimingFunction: motionEaseInOutCirc
      }
    }
  }];
};
// ============================== Group ==============================
const floatButtonGroupStyle = token => {
  const {
    componentCls,
    floatButtonSize,
    margin,
    borderRadiusLG
  } = token;
  const groupPrefixCls = \`\${componentCls}-group\`;
  return {
    [groupPrefixCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      zIndex: 99,
      display: 'block',
      border: 'none',
      position: 'fixed',
      width: floatButtonSize,
      height: 'auto',
      boxShadow: 'none',
      minHeight: floatButtonSize,
      insetInlineEnd: token.floatButtonInsetInlineEnd,
      insetBlockEnd: token.floatButtonInsetBlockEnd,
      borderRadius: borderRadiusLG,
      [\`\${groupPrefixCls}-wrap\`]: {
        zIndex: -1,
        display: 'block',
        position: 'relative',
        marginBottom: margin
      },
      [\`&\${groupPrefixCls}-rtl\`]: {
        direction: 'rtl'
      },
      [componentCls]: {
        position: 'static'
      }
    }),
    [\`\${groupPrefixCls}-circle\`]: {
      [\`\${componentCls}-circle:not(:last-child)\`]: {
        marginBottom: token.margin,
        [\`\${componentCls}-body\`]: {
          width: floatButtonSize,
          height: floatButtonSize
        }
      }
    },
    [\`\${groupPrefixCls}-square\`]: {
      [\`\${componentCls}-square\`]: {
        borderRadius: 0,
        padding: 0,
        '&:first-child': {
          borderStartStartRadius: borderRadiusLG,
          borderStartEndRadius: borderRadiusLG
        },
        '&:last-child': {
          borderEndStartRadius: borderRadiusLG,
          borderEndEndRadius: borderRadiusLG
        },
        '&:not(:last-child)': {
          borderBottom: \`\${token.lineWidth}px \${token.lineType} \${token.colorSplit}\`
        }
      },
      [\`\${groupPrefixCls}-wrap\`]: {
        display: 'block',
        borderRadius: borderRadiusLG,
        boxShadow: token.boxShadowSecondary,
        overflow: 'hidden',
        [\`\${componentCls}-square\`]: {
          boxShadow: 'none',
          marginTop: 0,
          borderRadius: 0,
          padding: token.paddingXXS,
          '&:first-child': {
            borderStartStartRadius: borderRadiusLG,
            borderStartEndRadius: borderRadiusLG
          },
          '&:last-child': {
            borderEndStartRadius: borderRadiusLG,
            borderEndEndRadius: borderRadiusLG
          },
          '&:not(:last-child)': {
            borderBottom: \`\${token.lineWidth}px \${token.lineType} \${token.colorSplit}\`
          },
          [\`\${componentCls}-body\`]: {
            width: floatButtonSize - token.paddingXXS * 2,
            height: floatButtonSize - token.paddingXXS * 2
          }
        }
      }
    },
    [\`\${groupPrefixCls}-circle-shadow\`]: {
      boxShadow: 'none'
    },
    [\`\${groupPrefixCls}-square-shadow\`]: {
      boxShadow: token.boxShadowSecondary,
      [\`\${componentCls}-square\`]: {
        boxShadow: 'none',
        padding: token.paddingXXS,
        [\`\${componentCls}-body\`]: {
          width: floatButtonSize - token.paddingXXS * 2,
          height: floatButtonSize - token.paddingXXS * 2
        }
      }
    }
  };
};
// ============================== Shared ==============================
const sharedFloatButtonStyle = token => {
  const {
    componentCls,
    floatButtonIconSize,
    floatButtonSize,
    borderRadiusLG
  } = token;
  return {
    [componentCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      border: 'none',
      position: 'fixed',
      cursor: 'pointer',
      overflow: 'hidden',
      zIndex: 99,
      display: 'block',
      justifyContent: 'center',
      alignItems: 'center',
      width: floatButtonSize,
      height: floatButtonSize,
      insetInlineEnd: token.floatButtonInsetInlineEnd,
      insetBlockEnd: token.floatButtonInsetBlockEnd,
      boxShadow: token.boxShadowSecondary,
      // Pure Panel
      '&-pure': {
        position: 'relative',
        inset: 'auto'
      },
      '&:empty': {
        display: 'none'
      },
      [\`\${componentCls}-body\`]: {
        width: '100%',
        height: '100%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        transition: \`all \${token.motionDurationMid}\`,
        [\`\${componentCls}-content\`]: {
          overflow: 'hidden',
          textAlign: 'center',
          minHeight: floatButtonSize,
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          padding: \`2px 4px\`,
          [\`\${componentCls}-icon\`]: {
            textAlign: 'center',
            margin: 'auto',
            width: floatButtonIconSize,
            fontSize: floatButtonIconSize,
            lineHeight: 1
          }
        }
      }
    }),
    [\`\${componentCls}-circle\`]: {
      height: floatButtonSize,
      borderRadius: '50%',
      [\`\${componentCls}-body\`]: {
        borderRadius: '50%'
      }
    },
    [\`\${componentCls}-square\`]: {
      height: 'auto',
      minHeight: floatButtonSize,
      borderRadius: borderRadiusLG,
      [\`\${componentCls}-body\`]: {
        height: 'auto',
        borderRadius: token.borderRadiusSM
      }
    },
    [\`\${componentCls}-default\`]: {
      backgroundColor: token.floatButtonBackgroundColor,
      transition: \`background-color \${token.motionDurationMid}\`,
      [\`\${componentCls}-body\`]: {
        backgroundColor: token.floatButtonBackgroundColor,
        transition: \`background-color \${token.motionDurationMid}\`,
        '&:hover': {
          backgroundColor: token.colorFillContent
        },
        [\`\${componentCls}-content\`]: {
          [\`\${componentCls}-icon\`]: {
            color: token.colorText
          },
          [\`\${componentCls}-description\`]: {
            display: 'flex',
            alignItems: 'center',
            lineHeight: \`\${token.fontSizeLG}px\`,
            color: token.colorText,
            fontSize: token.fontSizeSM
          }
        }
      }
    },
    [\`\${componentCls}-primary\`]: {
      backgroundColor: token.colorPrimary,
      [\`\${componentCls}-body\`]: {
        backgroundColor: token.colorPrimary,
        transition: \`background-color \${token.motionDurationMid}\`,
        '&:hover': {
          backgroundColor: token.colorPrimaryHover
        },
        [\`\${componentCls}-content\`]: {
          [\`\${componentCls}-icon\`]: {
            color: token.colorTextLightSolid
          },
          [\`\${componentCls}-description\`]: {
            display: 'flex',
            alignItems: 'center',
            lineHeight: \`\${token.fontSizeLG}px\`,
            color: token.colorTextLightSolid,
            fontSize: token.fontSizeSM
          }
        }
      }
    }
  };
};
// ============================== Export ==============================
/* harmony default export */ var float_button_style = ((0,genComponentStyleHook/* default */.Z)('FloatButton', token => {
  const {
    colorTextLightSolid,
    colorBgElevated,
    controlHeightLG,
    marginXXL,
    marginLG,
    fontSize,
    fontSizeIcon,
    controlItemBgHover
  } = token;
  const floatButtonToken = (0,statistic/* merge */.TS)(token, {
    floatButtonBackgroundColor: colorBgElevated,
    floatButtonColor: colorTextLightSolid,
    floatButtonHoverBackgroundColor: controlItemBgHover,
    floatButtonFontSize: fontSize,
    floatButtonIconSize: fontSizeIcon * 1.5,
    floatButtonSize: controlHeightLG,
    floatButtonInsetBlockEnd: marginXXL,
    floatButtonInsetInlineEnd: marginLG
  });
  return [floatButtonGroupStyle(floatButtonToken), sharedFloatButtonStyle(floatButtonToken), (0,fade/* initFadeMotion */.J$)(token), initFloatButtonGroupMotion(floatButtonToken)];
}));
// EXTERNAL MODULE: ./node_modules/antd/es/tooltip/index.js + 3 modules
var es_tooltip = __webpack_require__(83062);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/FileTextOutlined.js + 1 modules
var FileTextOutlined = __webpack_require__(15360);
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/FloatButtonContent.js



const FloatButtonContent = props => {
  const {
    icon,
    description,
    prefixCls,
    className
  } = props;
  const defaultElement = /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-icon\`
  }, /*#__PURE__*/react.createElement(FileTextOutlined/* default */.Z, null));
  return /*#__PURE__*/react.createElement("div", {
    onClick: props.onClick,
    onFocus: props.onFocus,
    onMouseEnter: props.onMouseEnter,
    onMouseLeave: props.onMouseLeave,
    className: classnames_default()(className, \`\${prefixCls}-content\`)
  }, icon || description ? /*#__PURE__*/react.createElement(react.Fragment, null, icon && /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-icon\`
  }, icon), description && /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-description\`
  }, description)) : defaultElement);
};
/* harmony default export */ var float_button_FloatButtonContent = (/*#__PURE__*/(0,react.memo)(FloatButtonContent));
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/context.js

const FloatButtonGroupContext = /*#__PURE__*/react.createContext(undefined);
const {
  Provider: FloatButtonGroupProvider
} = FloatButtonGroupContext;
/* harmony default export */ var float_button_context = (FloatButtonGroupContext);
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/FloatButton.js
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};








const floatButtonPrefixCls = 'float-btn';
const FloatButton = (props, ref) => {
  const {
      prefixCls: customizePrefixCls,
      className,
      type = 'default',
      shape = 'circle',
      icon,
      description,
      tooltip
    } = props,
    restProps = __rest(props, ["prefixCls", "className", "type", "shape", "icon", "description", "tooltip"]);
  const {
    getPrefixCls,
    direction
  } = (0,react.useContext)(context/* ConfigContext */.E_);
  const groupShape = (0,react.useContext)(float_button_context);
  const prefixCls = getPrefixCls(floatButtonPrefixCls, customizePrefixCls);
  const [wrapSSR, hashId] = float_button_style(prefixCls);
  const mergeShape = groupShape || shape;
  const classString = classnames_default()(hashId, prefixCls, className, \`\${prefixCls}-\${type}\`, \`\${prefixCls}-\${mergeShape}\`, {
    [\`\${prefixCls}-rtl\`]: direction === 'rtl'
  });
  const contentProps = (0,react.useMemo)(() => ({
    prefixCls,
    description,
    icon,
    type
  }), [prefixCls, description, icon, type]);
  const buttonNode = /*#__PURE__*/react.createElement(es_tooltip/* default */.Z, {
    title: tooltip,
    placement: "left"
  }, /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-body\`
  }, /*#__PURE__*/react.createElement(float_button_FloatButtonContent, Object.assign({}, contentProps))));
  if (false) {}
  return wrapSSR(props.href ? /*#__PURE__*/react.createElement("a", Object.assign({
    ref: ref
  }, restProps, {
    className: classString
  }), buttonNode) : /*#__PURE__*/react.createElement("button", Object.assign({
    ref: ref
  }, restProps, {
    className: classString,
    type: "button"
  }), buttonNode));
};
if (false) {}
const ForwardFloatButton = /*#__PURE__*/react.forwardRef(FloatButton);
/* harmony default export */ var float_button_FloatButton = (ForwardFloatButton);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/CloseOutlined.js + 1 modules
var CloseOutlined = __webpack_require__(97937);
// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 11 modules
var rc_motion_es = __webpack_require__(62874);
// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js
var useMergedState = __webpack_require__(21770);
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/FloatButtonGroup.js










const FloatButtonGroup = props => {
  const {
    prefixCls: customizePrefixCls,
    className,
    style,
    shape = 'circle',
    type = 'default',
    icon = /*#__PURE__*/react.createElement(FileTextOutlined/* default */.Z, null),
    closeIcon = /*#__PURE__*/react.createElement(CloseOutlined/* default */.Z, null),
    description,
    trigger,
    children,
    onOpenChange
  } = props;
  const {
    direction,
    getPrefixCls
  } = (0,react.useContext)(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls(floatButtonPrefixCls, customizePrefixCls);
  const [wrapSSR, hashId] = float_button_style(prefixCls);
  const groupPrefixCls = \`\${prefixCls}-group\`;
  const groupCls = classnames_default()(groupPrefixCls, hashId, className, {
    [\`\${groupPrefixCls}-rtl\`]: direction === 'rtl',
    [\`\${groupPrefixCls}-\${shape}\`]: shape,
    [\`\${groupPrefixCls}-\${shape}-shadow\`]: !trigger
  });
  const wrapperCls = classnames_default()(hashId, \`\${groupPrefixCls}-wrap\`);
  const [open, setOpen] = (0,useMergedState/* default */.Z)(false, {
    value: props.open
  });
  const floatButtonGroupRef = (0,react.useRef)(null);
  const floatButtonRef = (0,react.useRef)(null);
  const hoverAction = (0,react.useMemo)(() => {
    const hoverTypeAction = {
      onMouseEnter() {
        setOpen(true);
        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(true);
      },
      onMouseLeave() {
        setOpen(false);
        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(false);
      }
    };
    return trigger === 'hover' ? hoverTypeAction : {};
  }, [trigger]);
  const handleOpenChange = () => {
    setOpen(prevState => {
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(!prevState);
      return !prevState;
    });
  };
  const onClick = (0,react.useCallback)(e => {
    var _a, _b;
    if ((_a = floatButtonGroupRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) {
      if ((_b = floatButtonRef.current) === null || _b === void 0 ? void 0 : _b.contains(e.target)) {
        handleOpenChange();
      }
      return;
    }
    setOpen(false);
    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(false);
  }, [trigger]);
  (0,react.useEffect)(() => {
    if (trigger === 'click') {
      document.addEventListener('click', onClick);
      return () => {
        document.removeEventListener('click', onClick);
      };
    }
  }, [trigger]);
  return wrapSSR( /*#__PURE__*/react.createElement(FloatButtonGroupProvider, {
    value: shape
  }, /*#__PURE__*/react.createElement("div", Object.assign({
    ref: floatButtonGroupRef,
    className: groupCls,
    style: style
  }, hoverAction), trigger && ['click', 'hover'].includes(trigger) ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(rc_motion_es/* default */.Z, {
    visible: open,
    motionName: \`\${groupPrefixCls}-wrap\`
  }, _ref => {
    let {
      className: motionClassName
    } = _ref;
    return /*#__PURE__*/react.createElement("div", {
      className: classnames_default()(motionClassName, wrapperCls)
    }, children);
  }), /*#__PURE__*/react.createElement(float_button_FloatButton, {
    ref: floatButtonRef,
    type: type,
    shape: shape,
    icon: open ? closeIcon : icon,
    description: description
  })) : children)));
};
/* harmony default export */ var float_button_FloatButtonGroup = (/*#__PURE__*/(0,react.memo)(FloatButtonGroup));
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/VerticalAlignTopOutlined.js + 1 modules
var VerticalAlignTopOutlined = __webpack_require__(62635);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/getScroll.js
var getScroll = __webpack_require__(66367);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/scrollTo.js + 1 modules
var scrollTo = __webpack_require__(58375);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/throttleByAnimationFrame.js
var throttleByAnimationFrame = __webpack_require__(48783);
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/BackTop.js
var BackTop_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};











const BackTop = props => {
  const {
      prefixCls: customizePrefixCls,
      className = '',
      type = 'default',
      shape = 'circle',
      visibilityHeight = 400,
      icon = /*#__PURE__*/react.createElement(VerticalAlignTopOutlined/* default */.Z, null),
      target,
      onClick,
      duration = 450
    } = props,
    restProps = BackTop_rest(props, ["prefixCls", "className", "type", "shape", "visibilityHeight", "icon", "target", "onClick", "duration"]);
  const [visible, setVisible] = (0,react.useState)(visibilityHeight === 0);
  const ref = (0,react.useRef)(null);
  const getDefaultTarget = () => ref.current && ref.current.ownerDocument ? ref.current.ownerDocument : window;
  const handleScroll = (0,throttleByAnimationFrame/* default */.Z)(e => {
    const scrollTop = (0,getScroll/* default */.Z)(e.target, true);
    setVisible(scrollTop >= visibilityHeight);
  });
  (0,react.useEffect)(() => {
    const getTarget = target || getDefaultTarget;
    const container = getTarget();
    handleScroll({
      target: container
    });
    container === null || container === void 0 ? void 0 : container.addEventListener('scroll', handleScroll);
    return () => {
      handleScroll.cancel();
      container === null || container === void 0 ? void 0 : container.removeEventListener('scroll', handleScroll);
    };
  }, [target]);
  const scrollToTop = e => {
    (0,scrollTo/* default */.Z)(0, {
      getContainer: target || getDefaultTarget,
      duration
    });
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  };
  const {
    getPrefixCls
  } = (0,react.useContext)(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls(floatButtonPrefixCls, customizePrefixCls);
  const rootPrefixCls = getPrefixCls();
  const [wrapSSR] = float_button_style(prefixCls);
  const groupShape = (0,react.useContext)(float_button_context);
  const mergeShape = groupShape || shape;
  const contentProps = Object.assign({
    prefixCls,
    icon,
    type,
    shape: mergeShape
  }, restProps);
  return wrapSSR( /*#__PURE__*/react.createElement(rc_motion_es/* default */.Z, {
    visible: visible,
    motionName: \`\${rootPrefixCls}-fade\`
  }, _ref => {
    let {
      className: motionClassName
    } = _ref;
    return /*#__PURE__*/react.createElement(float_button_FloatButton, Object.assign({
      ref: ref
    }, contentProps, {
      onClick: scrollToTop,
      className: classnames_default()(className, motionClassName)
    }));
  }));
};
if (false) {}
/* harmony default export */ var float_button_BackTop = (/*#__PURE__*/(0,react.memo)(BackTop));
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/PurePanel.js
var PurePanel_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/no-array-index-key */






const PureFloatButton = _a => {
  var {
      backTop
    } = _a,
    props = PurePanel_rest(_a, ["backTop"]);
  return backTop ? /*#__PURE__*/react.createElement(float_button_BackTop, Object.assign({}, props, {
    visibilityHeight: 0
  })) : /*#__PURE__*/react.createElement(float_button_FloatButton, Object.assign({}, props));
};
function PurePanel(_a) {
  var {
      className,
      items
    } = _a,
    props = PurePanel_rest(_a, ["className", "items"]);
  const {
    prefixCls: customizePrefixCls
  } = props;
  const {
    getPrefixCls
  } = react.useContext(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls(floatButtonPrefixCls, customizePrefixCls);
  const pureCls = \`\${prefixCls}-pure\`;
  if (items) {
    return /*#__PURE__*/react.createElement(float_button_FloatButtonGroup, Object.assign({
      className: classnames_default()(className, pureCls)
    }, props), items.map((item, index) => /*#__PURE__*/react.createElement(PureFloatButton, Object.assign({
      key: index
    }, item))));
  }
  return /*#__PURE__*/react.createElement(PureFloatButton, Object.assign({
    className: classnames_default()(className, pureCls)
  }, props));
}
/* harmony default export */ var float_button_PurePanel = (/*#__PURE__*/react.memo(PurePanel));
;// CONCATENATED MODULE: ./node_modules/antd/es/float-button/index.js




float_button_FloatButton.BackTop = float_button_BackTop;
float_button_FloatButton.Group = float_button_FloatButtonGroup;
float_button_FloatButton._InternalPanelDoNotUseOrYouWillBeFired = float_button_PurePanel;
/* harmony default export */ var float_button = (float_button_FloatButton);
// EXTERNAL MODULE: ./node_modules/antd/es/back-top/index.js + 1 modules
var back_top = __webpack_require__(80093);
// EXTERNAL MODULE: ./node_modules/antd/es/badge/index.js + 4 modules
var badge = __webpack_require__(53575);
// EXTERNAL MODULE: ./node_modules/antd/es/breadcrumb/index.js + 4 modules
var breadcrumb = __webpack_require__(75527);
// EXTERNAL MODULE: ./node_modules/antd/es/button/index.js
var es_button = __webpack_require__(71577);
// EXTERNAL MODULE: ./node_modules/dayjs/dayjs.min.js
var dayjs_min = __webpack_require__(27484);
var dayjs_min_default = /*#__PURE__*/__webpack_require__.n(dayjs_min);
// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js
var es_warning = __webpack_require__(80334);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/weekday.js
var weekday = __webpack_require__(72540);
var weekday_default = /*#__PURE__*/__webpack_require__.n(weekday);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/localeData.js
var localeData = __webpack_require__(96036);
var localeData_default = /*#__PURE__*/__webpack_require__.n(localeData);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/weekOfYear.js
var weekOfYear = __webpack_require__(55183);
var weekOfYear_default = /*#__PURE__*/__webpack_require__.n(weekOfYear);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/weekYear.js
var weekYear = __webpack_require__(172);
var weekYear_default = /*#__PURE__*/__webpack_require__.n(weekYear);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/advancedFormat.js
var advancedFormat = __webpack_require__(28734);
var advancedFormat_default = /*#__PURE__*/__webpack_require__.n(advancedFormat);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/customParseFormat.js
var customParseFormat = __webpack_require__(10285);
var customParseFormat_default = /*#__PURE__*/__webpack_require__.n(customParseFormat);
;// CONCATENATED MODULE: ./node_modules/antd/node_modules/rc-picker/es/generate/dayjs.js








dayjs_min_default().extend((customParseFormat_default()));
dayjs_min_default().extend((advancedFormat_default()));
dayjs_min_default().extend((weekday_default()));
dayjs_min_default().extend((localeData_default()));
dayjs_min_default().extend((weekOfYear_default()));
dayjs_min_default().extend((weekYear_default()));
dayjs_min_default().extend(function (o, c) {
  // todo support Wo (ISO week)
  var proto = c.prototype;
  var oldFormat = proto.format;
  proto.format = function f(formatStr) {
    var str = (formatStr || '').replace('Wo', 'wo');
    return oldFormat.bind(this)(str);
  };
});
var localeMap = {
  // ar_EG:
  // az_AZ:
  // bg_BG:
  bn_BD: 'bn-bd',
  by_BY: 'be',
  // ca_ES:
  // cs_CZ:
  // da_DK:
  // de_DE:
  // el_GR:
  en_GB: 'en-gb',
  en_US: 'en',
  // es_ES:
  // et_EE:
  // fa_IR:
  // fi_FI:
  fr_BE: 'fr',
  // todo: dayjs has no fr_BE locale, use fr at present
  fr_CA: 'fr-ca',
  // fr_FR:
  // ga_IE:
  // gl_ES:
  // he_IL:
  // hi_IN:
  // hr_HR:
  // hu_HU:
  hy_AM: 'hy-am',
  // id_ID:
  // is_IS:
  // it_IT:
  // ja_JP:
  // ka_GE:
  // kk_KZ:
  // km_KH:
  kmr_IQ: 'ku',
  // kn_IN:
  // ko_KR:
  // ku_IQ: // previous ku in antd
  // lt_LT:
  // lv_LV:
  // mk_MK:
  // ml_IN:
  // mn_MN:
  // ms_MY:
  // nb_NO:
  // ne_NP:
  nl_BE: 'nl-be',
  // nl_NL:
  // pl_PL:
  pt_BR: 'pt-br',
  // pt_PT:
  // ro_RO:
  // ru_RU:
  // sk_SK:
  // sl_SI:
  // sr_RS:
  // sv_SE:
  // ta_IN:
  // th_TH:
  // tr_TR:
  // uk_UA:
  // ur_PK:
  // vi_VN:
  zh_CN: 'zh-cn',
  zh_HK: 'zh-hk',
  zh_TW: 'zh-tw'
};
var parseLocale = function parseLocale(locale) {
  var mapLocale = localeMap[locale];
  return mapLocale || locale.split('_')[0];
};
var parseNoMatchNotice = function parseNoMatchNotice() {
  /* istanbul ignore next */
  (0,es_warning/* noteOnce */.ET)(false, 'Not match any format. Please help to fire a issue about this.');
};
var generateConfig = {
  // get
  getNow: function getNow() {
    return dayjs_min_default()();
  },
  getFixedDate: function getFixedDate(string) {
    return dayjs_min_default()(string, ['YYYY-M-DD', 'YYYY-MM-DD']);
  },
  getEndDate: function getEndDate(date) {
    return date.endOf('month');
  },
  getWeekDay: function getWeekDay(date) {
    var clone = date.locale('en');
    return clone.weekday() + clone.localeData().firstDayOfWeek();
  },
  getYear: function getYear(date) {
    return date.year();
  },
  getMonth: function getMonth(date) {
    return date.month();
  },
  getDate: function getDate(date) {
    return date.date();
  },
  getHour: function getHour(date) {
    return date.hour();
  },
  getMinute: function getMinute(date) {
    return date.minute();
  },
  getSecond: function getSecond(date) {
    return date.second();
  },
  // set
  addYear: function addYear(date, diff) {
    return date.add(diff, 'year');
  },
  addMonth: function addMonth(date, diff) {
    return date.add(diff, 'month');
  },
  addDate: function addDate(date, diff) {
    return date.add(diff, 'day');
  },
  setYear: function setYear(date, year) {
    return date.year(year);
  },
  setMonth: function setMonth(date, month) {
    return date.month(month);
  },
  setDate: function setDate(date, num) {
    return date.date(num);
  },
  setHour: function setHour(date, hour) {
    return date.hour(hour);
  },
  setMinute: function setMinute(date, minute) {
    return date.minute(minute);
  },
  setSecond: function setSecond(date, second) {
    return date.second(second);
  },
  // Compare
  isAfter: function isAfter(date1, date2) {
    return date1.isAfter(date2);
  },
  isValidate: function isValidate(date) {
    return date.isValid();
  },
  locale: {
    getWeekFirstDay: function getWeekFirstDay(locale) {
      return dayjs_min_default()().locale(parseLocale(locale)).localeData().firstDayOfWeek();
    },
    getWeekFirstDate: function getWeekFirstDate(locale, date) {
      return date.locale(parseLocale(locale)).weekday(0);
    },
    getWeek: function getWeek(locale, date) {
      return date.locale(parseLocale(locale)).week();
    },
    getShortWeekDays: function getShortWeekDays(locale) {
      return dayjs_min_default()().locale(parseLocale(locale)).localeData().weekdaysMin();
    },
    getShortMonths: function getShortMonths(locale) {
      return dayjs_min_default()().locale(parseLocale(locale)).localeData().monthsShort();
    },
    format: function format(locale, date, _format) {
      return date.locale(parseLocale(locale)).format(_format);
    },
    parse: function parse(locale, text, formats) {
      var localeStr = parseLocale(locale);
      for (var i = 0; i < formats.length; i += 1) {
        var format = formats[i];
        var formatText = text;
        if (format.includes('wo') || format.includes('Wo')) {
          // parse Wo
          var year = formatText.split('-')[0];
          var weekStr = formatText.split('-')[1];
          var firstWeek = dayjs_min_default()(year, 'YYYY').startOf('year').locale(localeStr);
          for (var j = 0; j <= 52; j += 1) {
            var nextWeek = firstWeek.add(j, 'week');
            if (nextWeek.format('Wo') === weekStr) {
              return nextWeek;
            }
          }
          parseNoMatchNotice();
          return null;
        }
        var date = dayjs_min_default()(formatText, format, true).locale(localeStr);
        if (date.isValid()) {
          return date;
        }
      }
      if (text) {
        parseNoMatchNotice();
      }
      return null;
    }
  }
};
/* harmony default export */ var dayjs = (generateConfig);
// EXTERNAL MODULE: ./node_modules/antd/es/calendar/generateCalendar.js + 2 modules
var generateCalendar = __webpack_require__(98101);
;// CONCATENATED MODULE: ./node_modules/antd/es/calendar/index.js


const Calendar = (0,generateCalendar/* default */.Z)(dayjs);
/* harmony default export */ var calendar = (Calendar);
// EXTERNAL MODULE: ./node_modules/antd/es/card/index.js + 4 modules
var card = __webpack_require__(4393);
// EXTERNAL MODULE: ./node_modules/antd/es/carousel/index.js + 10 modules
var carousel = __webpack_require__(91978);
// EXTERNAL MODULE: ./node_modules/antd/es/cascader/index.js + 18 modules
var cascader = __webpack_require__(69606);
// EXTERNAL MODULE: ./node_modules/antd/es/checkbox/index.js + 2 modules
var es_checkbox = __webpack_require__(32808);
// EXTERNAL MODULE: ./node_modules/antd/es/col/index.js
var col = __webpack_require__(15746);
// EXTERNAL MODULE: ./node_modules/antd/es/collapse/index.js + 7 modules
var collapse = __webpack_require__(15045);
// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/index.js + 4 modules
var config_provider = __webpack_require__(58720);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/PurePanel.js
var _util_PurePanel = __webpack_require__(8745);
// EXTERNAL MODULE: ./node_modules/antd/es/date-picker/generatePicker/index.js + 4 modules
var generatePicker = __webpack_require__(44123);
;// CONCATENATED MODULE: ./node_modules/antd/es/date-picker/index.js



const DatePicker = (0,generatePicker/* default */.ZP)(dayjs);
// We don't care debug panel
/* istanbul ignore next */
const date_picker_PurePanel = (0,_util_PurePanel/* default */.Z)(DatePicker, 'picker');
DatePicker._InternalPanelDoNotUseOrYouWillBeFired = date_picker_PurePanel;
/* harmony default export */ var date_picker = (DatePicker);
// EXTERNAL MODULE: ./node_modules/antd/es/descriptions/index.js + 4 modules
var descriptions = __webpack_require__(27511);
// EXTERNAL MODULE: ./node_modules/antd/es/divider/index.js + 1 modules
var divider = __webpack_require__(96074);
// EXTERNAL MODULE: ./node_modules/antd/es/drawer/index.js + 9 modules
var drawer = __webpack_require__(85265);
// EXTERNAL MODULE: ./node_modules/antd/es/dropdown/index.js
var es_dropdown = __webpack_require__(13013);
// EXTERNAL MODULE: ./node_modules/antd/es/empty/index.js + 3 modules
var empty = __webpack_require__(32983);
// EXTERNAL MODULE: ./node_modules/antd/es/form/index.js + 18 modules
var es_form = __webpack_require__(96108);
// EXTERNAL MODULE: ./node_modules/antd/es/grid/hooks/useBreakpoint.js
var useBreakpoint = __webpack_require__(25378);
;// CONCATENATED MODULE: ./node_modules/antd/es/grid/index.js



// Do not export params
function grid_useBreakpoint() {
  return (0,useBreakpoint/* default */.Z)();
}

/* harmony default export */ var grid = ({
  useBreakpoint: grid_useBreakpoint
});
// EXTERNAL MODULE: ./node_modules/antd/es/image/index.js + 10 modules
var es_image = __webpack_require__(72235);
// EXTERNAL MODULE: ./node_modules/antd/es/input/index.js + 3 modules
var input = __webpack_require__(69677);
// EXTERNAL MODULE: ./node_modules/antd/es/input-number/index.js + 11 modules
var input_number = __webpack_require__(17376);
// EXTERNAL MODULE: ./node_modules/antd/es/layout/layout.js + 2 modules
var layout = __webpack_require__(84321);
// EXTERNAL MODULE: ./node_modules/antd/es/layout/Sider.js + 1 modules
var Sider = __webpack_require__(5210);
;// CONCATENATED MODULE: ./node_modules/antd/es/layout/index.js


const Layout = layout/* default */.ZP;
Layout.Header = layout/* Header */.h4;
Layout.Footer = layout/* Footer */.$_;
Layout.Content = layout/* Content */.VY;
Layout.Sider = Sider/* default */.Z;
/* harmony default export */ var es_layout = (Layout);
// EXTERNAL MODULE: ./node_modules/antd/es/list/index.js + 2 modules
var list = __webpack_require__(51158);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(87462);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules
var slicedToArray = __webpack_require__(97685);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js
var objectSpread2 = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules
var objectWithoutProperties = __webpack_require__(91);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js
var Children_toArray = __webpack_require__(50344);
// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js
var KeyCode = __webpack_require__(15105);
// EXTERNAL MODULE: ./node_modules/rc-textarea/es/index.js + 2 modules
var rc_textarea_es = __webpack_require__(57239);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
var classCallCheck = __webpack_require__(15671);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
var createClass = __webpack_require__(43144);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules
var inherits = __webpack_require__(32531);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules
var createSuper = __webpack_require__(73568);
// EXTERNAL MODULE: ./node_modules/rc-trigger/es/index.js + 15 modules
var rc_trigger_es = __webpack_require__(81263);
// EXTERNAL MODULE: ./node_modules/rc-menu/es/index.js + 24 modules
var rc_menu_es = __webpack_require__(97868);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/MentionsContext.js
/* tslint:disable: no-object-literal-type-assertion */

// We will never use default, here only to fix TypeScript warning
var MentionsContext = /*#__PURE__*/react.createContext(null);
/* harmony default export */ var es_MentionsContext = (MentionsContext);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/DropdownMenu.js



/**
 * We only use Menu to display the candidate.
 * The focus is controlled by textarea to make accessibility easy.
 */
function DropdownMenu(props) {
  var _React$useContext = react.useContext(es_MentionsContext),
    notFoundContent = _React$useContext.notFoundContent,
    activeIndex = _React$useContext.activeIndex,
    setActiveIndex = _React$useContext.setActiveIndex,
    selectOption = _React$useContext.selectOption,
    onFocus = _React$useContext.onFocus,
    onBlur = _React$useContext.onBlur;
  var prefixCls = props.prefixCls,
    options = props.options;
  var activeOption = options[activeIndex] || {};
  return /*#__PURE__*/react.createElement(rc_menu_es/* default */.ZP, {
    prefixCls: "".concat(prefixCls, "-menu"),
    activeKey: activeOption.key,
    onSelect: function onSelect(_ref) {
      var key = _ref.key;
      var option = options.find(function (_ref2) {
        var optionKey = _ref2.key;
        return optionKey === key;
      });
      selectOption(option);
    },
    onFocus: onFocus,
    onBlur: onBlur
  }, options.map(function (option, index) {
    var key = option.key,
      disabled = option.disabled,
      className = option.className,
      style = option.style,
      label = option.label;
    return /*#__PURE__*/react.createElement(rc_menu_es/* MenuItem */.sN, {
      key: key,
      disabled: disabled,
      className: className,
      style: style,
      onMouseEnter: function onMouseEnter() {
        setActiveIndex(index);
      }
    }, label);
  }), !options.length && /*#__PURE__*/react.createElement(rc_menu_es/* MenuItem */.sN, {
    disabled: true
  }, notFoundContent));
}
/* harmony default export */ var es_DropdownMenu = (DropdownMenu);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/KeywordTrigger.js







var BUILT_IN_PLACEMENTS = {
  bottomRight: {
    points: ['tl', 'br'],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  bottomLeft: {
    points: ['tr', 'bl'],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topRight: {
    points: ['bl', 'tr'],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topLeft: {
    points: ['br', 'tl'],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  }
};
var KeywordTrigger = /*#__PURE__*/function (_React$Component) {
  (0,inherits/* default */.Z)(KeywordTrigger, _React$Component);
  var _super = (0,createSuper/* default */.Z)(KeywordTrigger);
  function KeywordTrigger() {
    var _this;
    (0,classCallCheck/* default */.Z)(this, KeywordTrigger);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.getDropdownPrefix = function () {
      return "".concat(_this.props.prefixCls, "-dropdown");
    };
    _this.getDropdownElement = function () {
      var options = _this.props.options;
      return /*#__PURE__*/react.createElement(es_DropdownMenu, {
        prefixCls: _this.getDropdownPrefix(),
        options: options
      });
    };
    _this.getDropDownPlacement = function () {
      var _this$props = _this.props,
        placement = _this$props.placement,
        direction = _this$props.direction;
      var popupPlacement;
      if (direction === 'rtl') {
        popupPlacement = placement === 'top' ? 'topLeft' : 'bottomLeft';
      } else {
        popupPlacement = placement === 'top' ? 'topRight' : 'bottomRight';
      }
      return popupPlacement;
    };
    return _this;
  }
  (0,createClass/* default */.Z)(KeywordTrigger, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        children = _this$props2.children,
        visible = _this$props2.visible,
        transitionName = _this$props2.transitionName,
        getPopupContainer = _this$props2.getPopupContainer;
      var popupElement = this.getDropdownElement();
      return /*#__PURE__*/react.createElement(rc_trigger_es/* default */.Z, {
        prefixCls: this.getDropdownPrefix(),
        popupVisible: visible,
        popup: popupElement,
        popupPlacement: this.getDropDownPlacement(),
        popupTransitionName: transitionName,
        builtinPlacements: BUILT_IN_PLACEMENTS,
        getPopupContainer: getPopupContainer,
        popupClassName: this.props.dropdownClassName
      }, children);
    }
  }]);
  return KeywordTrigger;
}(react.Component);
/* harmony default export */ var es_KeywordTrigger = (KeywordTrigger);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/Option.js
var Option = function Option() {
  return null;
};
/* harmony default export */ var es_Option = (Option);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/util.js
/**
 * Cut input selection into 2 part and return text before selection start
 */
function getBeforeSelectionText(input) {
  var selectionStart = input.selectionStart;
  return input.value.slice(0, selectionStart);
}
/**
 * Find the last match prefix index
 */
function getLastMeasureIndex(text, prefix) {
  return prefix.reduce(function (lastMatch, prefixStr) {
    var lastIndex = text.lastIndexOf(prefixStr);
    if (lastIndex > lastMatch.location) {
      return {
        location: lastIndex,
        prefix: prefixStr
      };
    }
    return lastMatch;
  }, {
    location: -1,
    prefix: ''
  });
}
function lower(char) {
  return (char || '').toLowerCase();
}
function reduceText(text, targetText, split) {
  var firstChar = text[0];
  if (!firstChar || firstChar === split) {
    return text;
  }
  // Reuse rest text as it can
  var restText = text;
  var targetTextLen = targetText.length;
  for (var i = 0; i < targetTextLen; i += 1) {
    if (lower(restText[i]) !== lower(targetText[i])) {
      restText = restText.slice(i);
      break;
    } else if (i === targetTextLen - 1) {
      restText = restText.slice(targetTextLen);
    }
  }
  return restText;
}
/**
 * Paint targetText into current text:
 *  text: little@litest
 *  targetText: light
 *  => little @light test
 */
function replaceWithMeasure(text, measureConfig) {
  var measureLocation = measureConfig.measureLocation,
    prefix = measureConfig.prefix,
    targetText = measureConfig.targetText,
    selectionStart = measureConfig.selectionStart,
    split = measureConfig.split;
  // Before text will append one space if have other text
  var beforeMeasureText = text.slice(0, measureLocation);
  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {
    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);
  }
  if (beforeMeasureText) {
    beforeMeasureText = "".concat(beforeMeasureText).concat(split);
  }
  // Cut duplicate string with current targetText
  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);
  if (restText.slice(0, split.length) === split) {
    restText = restText.slice(split.length);
  }
  var connectedStartText = "".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);
  return {
    text: "".concat(connectedStartText).concat(restText),
    selectionLocation: connectedStartText.length
  };
}
function setInputSelection(input, location) {
  input.setSelectionRange(location, location);
  /**
   * Reset caret into view.
   * Since this function always called by user control, it's safe to focus element.
   */
  input.blur();
  input.focus();
}
function validateSearch(text, props) {
  var split = props.split;
  return !split || text.indexOf(split) === -1;
}
function filterOption(input, _ref) {
  var _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value;
  var lowerCase = input.toLowerCase();
  return value.toLowerCase().indexOf(lowerCase) !== -1;
}
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/hooks/useEffectState.js


/**
 * Trigger a callback on state change
 */
function useEffectState() {
  var _useState = (0,react.useState)({
      id: 0,
      callback: null
    }),
    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),
    effectId = _useState2[0],
    setEffectId = _useState2[1];
  var update = (0,react.useCallback)(function (callback) {
    setEffectId(function (_ref) {
      var id = _ref.id;
      return {
        id: id + 1,
        callback: callback
      };
    });
  }, []);
  (0,react.useEffect)(function () {
    var _effectId$callback;
    (_effectId$callback = effectId.callback) === null || _effectId$callback === void 0 ? void 0 : _effectId$callback.call(effectId);
  }, [effectId]);
  return update;
}
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/Mentions.js




var _excluded = ["prefixCls", "className", "style", "prefix", "split", "notFoundContent", "value", "defaultValue", "children", "options", "open", "validateSearch", "filterOption", "onChange", "onKeyDown", "onKeyUp", "onPressEnter", "onSearch", "onSelect", "onFocus", "onBlur", "transitionName", "placement", "direction", "getPopupContainer", "dropdownClassName"];












var Mentions = /*#__PURE__*/react.forwardRef(function (props, ref) {
  var prefixCls = props.prefixCls,
    className = props.className,
    style = props.style,
    prefix = props.prefix,
    split = props.split,
    notFoundContent = props.notFoundContent,
    value = props.value,
    defaultValue = props.defaultValue,
    children = props.children,
    options = props.options,
    open = props.open,
    validateSearch = props.validateSearch,
    filterOption = props.filterOption,
    onChange = props.onChange,
    onKeyDown = props.onKeyDown,
    onKeyUp = props.onKeyUp,
    onPressEnter = props.onPressEnter,
    onSearch = props.onSearch,
    onSelect = props.onSelect,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    transitionName = props.transitionName,
    placement = props.placement,
    direction = props.direction,
    getPopupContainer = props.getPopupContainer,
    dropdownClassName = props.dropdownClassName,
    restProps = (0,objectWithoutProperties/* default */.Z)(props, _excluded);
  var mergedPrefix = Array.isArray(prefix) ? prefix : [prefix];
  var mergedProps = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), {}, {
    prefix: mergedPrefix
  });
  // =============================== Refs ===============================
  var textareaRef = (0,react.useRef)(null);
  var measureRef = (0,react.useRef)(null);
  var getTextArea = function getTextArea() {
    var _textareaRef$current, _textareaRef$current$;
    return (_textareaRef$current = textareaRef.current) === null || _textareaRef$current === void 0 ? void 0 : (_textareaRef$current$ = _textareaRef$current.resizableTextArea) === null || _textareaRef$current$ === void 0 ? void 0 : _textareaRef$current$.textArea;
  };
  react.useImperativeHandle(ref, function () {
    var _textareaRef$current4, _textareaRef$current5;
    return {
      focus: function focus() {
        var _textareaRef$current2;
        return (_textareaRef$current2 = textareaRef.current) === null || _textareaRef$current2 === void 0 ? void 0 : _textareaRef$current2.focus();
      },
      blur: function blur() {
        var _textareaRef$current3;
        return (_textareaRef$current3 = textareaRef.current) === null || _textareaRef$current3 === void 0 ? void 0 : _textareaRef$current3.blur();
      },
      textarea: (_textareaRef$current4 = textareaRef.current) === null || _textareaRef$current4 === void 0 ? void 0 : (_textareaRef$current5 = _textareaRef$current4.resizableTextArea) === null || _textareaRef$current5 === void 0 ? void 0 : _textareaRef$current5.textArea
    };
  });
  // ============================== State ===============================
  var _useState = (0,react.useState)(false),
    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),
    measuring = _useState2[0],
    setMeasuring = _useState2[1];
  var _useState3 = (0,react.useState)(''),
    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),
    measureText = _useState4[0],
    setMeasureText = _useState4[1];
  var _useState5 = (0,react.useState)(''),
    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),
    measurePrefix = _useState6[0],
    setMeasurePrefix = _useState6[1];
  var _useState7 = (0,react.useState)(0),
    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),
    measureLocation = _useState8[0],
    setMeasureLocation = _useState8[1];
  var _useState9 = (0,react.useState)(0),
    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),
    activeIndex = _useState10[0],
    setActiveIndex = _useState10[1];
  var _useState11 = (0,react.useState)(false),
    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),
    isFocus = _useState12[0],
    setIsFocus = _useState12[1];
  // ============================== Value ===============================
  var _useMergedState = (0,useMergedState/* default */.Z)('', {
      defaultValue: defaultValue,
      value: value
    }),
    _useMergedState2 = (0,slicedToArray/* default */.Z)(_useMergedState, 2),
    mergedValue = _useMergedState2[0],
    setMergedValue = _useMergedState2[1];
  // =============================== Open ===============================
  (0,react.useEffect)(function () {
    // Sync measure div top with textarea for rc-trigger usage
    if (measuring && measureRef.current) {
      measureRef.current.scrollTop = getTextArea().scrollTop;
    }
  }, [measuring]);
  var _React$useMemo = react.useMemo(function () {
      if (open) {
        if (false) {}
        for (var i = 0; i < mergedPrefix.length; i += 1) {
          var curPrefix = mergedPrefix[i];
          var index = mergedValue.lastIndexOf(curPrefix);
          if (index >= 0) {
            return [true, '', curPrefix, index];
          }
        }
      }
      return [measuring, measureText, measurePrefix, measureLocation];
    }, [open, measuring, mergedPrefix, mergedValue, measureText, measurePrefix, measureLocation]),
    _React$useMemo2 = (0,slicedToArray/* default */.Z)(_React$useMemo, 4),
    mergedMeasuring = _React$useMemo2[0],
    mergedMeasureText = _React$useMemo2[1],
    mergedMeasurePrefix = _React$useMemo2[2],
    mergedMeasureLocation = _React$useMemo2[3];
  // ============================== Option ==============================
  var getOptions = react.useCallback(function (targetMeasureText) {
    var list;
    if (options && options.length > 0) {
      list = options.map(function (item) {
        var _item$key;
        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, item), {}, {
          key: (_item$key = item === null || item === void 0 ? void 0 : item.key) !== null && _item$key !== void 0 ? _item$key : item.value
        });
      });
    } else {
      list = (0,Children_toArray/* default */.Z)(children).map(function (_ref) {
        var optionProps = _ref.props,
          key = _ref.key;
        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, optionProps), {}, {
          label: optionProps.children,
          key: key || optionProps.value
        });
      });
    }
    return list.filter(function (option) {
      /** Return all result if \`filterOption\` is false. */
      if (filterOption === false) {
        return true;
      }
      return filterOption(targetMeasureText, option);
    });
  }, [children, options, filterOption]);
  var mergedOptions = react.useMemo(function () {
    return getOptions(mergedMeasureText);
  }, [getOptions, mergedMeasureText]);
  // ============================= Measure ==============================
  // Mark that we will reset input selection to target position when user select option
  var onSelectionEffect = useEffectState();
  var startMeasure = function startMeasure(nextMeasureText, nextMeasurePrefix, nextMeasureLocation) {
    setMeasuring(true);
    setMeasureText(nextMeasureText);
    setMeasurePrefix(nextMeasurePrefix);
    setMeasureLocation(nextMeasureLocation);
    setActiveIndex(0);
  };
  var stopMeasure = function stopMeasure(callback) {
    setMeasuring(false);
    setMeasureLocation(0);
    setMeasureText('');
    onSelectionEffect(callback);
  };
  // ============================== Change ==============================
  var triggerChange = function triggerChange(nextValue) {
    setMergedValue(nextValue);
    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);
  };
  var onInternalChange = function onInternalChange(_ref2) {
    var nextValue = _ref2.target.value;
    triggerChange(nextValue);
  };
  var selectOption = function selectOption(option) {
    var _getTextArea;
    var _option$value = option.value,
      mentionValue = _option$value === void 0 ? '' : _option$value;
    var _replaceWithMeasure = replaceWithMeasure(mergedValue, {
        measureLocation: mergedMeasureLocation,
        targetText: mentionValue,
        prefix: mergedMeasurePrefix,
        selectionStart: (_getTextArea = getTextArea()) === null || _getTextArea === void 0 ? void 0 : _getTextArea.selectionStart,
        split: split
      }),
      text = _replaceWithMeasure.text,
      selectionLocation = _replaceWithMeasure.selectionLocation;
    triggerChange(text);
    stopMeasure(function () {
      // We need restore the selection position
      setInputSelection(getTextArea(), selectionLocation);
    });
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(option, mergedMeasurePrefix);
  };
  // ============================= KeyEvent =============================
  // Check if hit the measure keyword
  var onInternalKeyDown = function onInternalKeyDown(event) {
    var which = event.which;
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
    // Skip if not measuring
    if (!mergedMeasuring) {
      return;
    }
    if (which === KeyCode/* default.UP */.Z.UP || which === KeyCode/* default.DOWN */.Z.DOWN) {
      // Control arrow function
      var optionLen = mergedOptions.length;
      var offset = which === KeyCode/* default.UP */.Z.UP ? -1 : 1;
      var newActiveIndex = (activeIndex + offset + optionLen) % optionLen;
      setActiveIndex(newActiveIndex);
      event.preventDefault();
    } else if (which === KeyCode/* default.ESC */.Z.ESC) {
      stopMeasure();
    } else if (which === KeyCode/* default.ENTER */.Z.ENTER) {
      // Measure hit
      event.preventDefault();
      if (!mergedOptions.length) {
        stopMeasure();
        return;
      }
      var option = mergedOptions[activeIndex];
      selectOption(option);
    }
  };
  /**
   * When to start measure:
   * 1. When user press \`prefix\`
   * 2. When measureText !== prevMeasureText
   *  - If measure hit
   *  - If measuring
   *
   * When to stop measure:
   * 1. Selection is out of range
   * 2. Contains \`space\`
   * 3. ESC or select one
   */
  var onInternalKeyUp = function onInternalKeyUp(event) {
    var key = event.key,
      which = event.which;
    var target = event.target;
    var selectionStartText = getBeforeSelectionText(target);
    var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, mergedPrefix),
      measureIndex = _getLastMeasureIndex.location,
      nextMeasurePrefix = _getLastMeasureIndex.prefix;
    // If the client implements an onKeyUp handler, call it
    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(event);
    // Skip if match the white key list
    if ([KeyCode/* default.ESC */.Z.ESC, KeyCode/* default.UP */.Z.UP, KeyCode/* default.DOWN */.Z.DOWN, KeyCode/* default.ENTER */.Z.ENTER].indexOf(which) !== -1) {
      return;
    }
    if (measureIndex !== -1) {
      var nextMeasureText = selectionStartText.slice(measureIndex + nextMeasurePrefix.length);
      var validateMeasure = validateSearch(nextMeasureText, mergedProps);
      var matchOption = !!getOptions(nextMeasureText).length;
      if (validateMeasure) {
        if (key === nextMeasurePrefix || key === 'Shift' || mergedMeasuring || nextMeasureText !== mergedMeasureText && matchOption) {
          startMeasure(nextMeasureText, nextMeasurePrefix, measureIndex);
        }
      } else if (mergedMeasuring) {
        // Stop if measureText is invalidate
        stopMeasure();
      }
      /**
       * We will trigger \`onSearch\` to developer since they may use for async update.
       * If met \`space\` means user finished searching.
       */
      if (onSearch && validateMeasure) {
        onSearch(nextMeasureText, nextMeasurePrefix);
      }
    } else if (mergedMeasuring) {
      stopMeasure();
    }
  };
  var onInternalPressEnter = function onInternalPressEnter(event) {
    if (!mergedMeasuring && onPressEnter) {
      onPressEnter(event);
    }
  };
  // ============================ Focus Blur ============================
  var focusRef = (0,react.useRef)();
  var onInternalFocus = function onInternalFocus(event) {
    window.clearTimeout(focusRef.current);
    if (!isFocus && event && onFocus) {
      onFocus(event);
    }
    setIsFocus(true);
  };
  var onInternalBlur = function onInternalBlur(event) {
    focusRef.current = window.setTimeout(function () {
      setIsFocus(false);
      stopMeasure();
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
    }, 0);
  };
  var onDropdownFocus = function onDropdownFocus() {
    onInternalFocus();
  };
  var onDropdownBlur = function onDropdownBlur() {
    onInternalBlur();
  };
  // ============================== Render ==============================
  return /*#__PURE__*/react.createElement("div", {
    className: classnames_default()(prefixCls, className),
    style: style
  }, /*#__PURE__*/react.createElement(rc_textarea_es/* default */.Z, (0,esm_extends/* default */.Z)({
    ref: textareaRef,
    value: mergedValue
  }, restProps, {
    onChange: onInternalChange,
    onKeyDown: onInternalKeyDown,
    onKeyUp: onInternalKeyUp,
    onPressEnter: onInternalPressEnter,
    onFocus: onInternalFocus,
    onBlur: onInternalBlur
  })), mergedMeasuring && /*#__PURE__*/react.createElement("div", {
    ref: measureRef,
    className: "".concat(prefixCls, "-measure")
  }, mergedValue.slice(0, mergedMeasureLocation), /*#__PURE__*/react.createElement(es_MentionsContext.Provider, {
    value: {
      notFoundContent: notFoundContent,
      activeIndex: activeIndex,
      setActiveIndex: setActiveIndex,
      selectOption: selectOption,
      onFocus: onDropdownFocus,
      onBlur: onDropdownBlur
    }
  }, /*#__PURE__*/react.createElement(es_KeywordTrigger, {
    prefixCls: prefixCls,
    transitionName: transitionName,
    placement: placement,
    direction: direction,
    options: mergedOptions,
    visible: true,
    getPopupContainer: getPopupContainer,
    dropdownClassName: dropdownClassName
  }, /*#__PURE__*/react.createElement("span", null, mergedMeasurePrefix))), mergedValue.slice(mergedMeasureLocation + mergedMeasurePrefix.length)));
});
Mentions.defaultProps = {
  prefixCls: 'rc-mentions',
  prefix: '@',
  split: ' ',
  validateSearch: validateSearch,
  filterOption: filterOption,
  notFoundContent: 'Not Found',
  rows: 1
};
Mentions.Option = es_Option;
/* harmony default export */ var es_Mentions = (Mentions);
;// CONCATENATED MODULE: ./node_modules/rc-mentions/es/index.js

/* harmony default export */ var rc_mentions_es = (es_Mentions);
// EXTERNAL MODULE: ./node_modules/rc-util/es/ref.js
var es_ref = __webpack_require__(42550);
// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/defaultRenderEmpty.js
var defaultRenderEmpty = __webpack_require__(88258);
// EXTERNAL MODULE: ./node_modules/antd/es/form/context.js
var form_context = __webpack_require__(65223);
// EXTERNAL MODULE: ./node_modules/antd/es/spin/index.js + 1 modules
var spin = __webpack_require__(57953);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/statusUtils.js
var statusUtils = __webpack_require__(9708);
// EXTERNAL MODULE: ./node_modules/antd/es/input/style/index.js
var input_style = __webpack_require__(47673);
;// CONCATENATED MODULE: ./node_modules/antd/es/mentions/style/index.js



const genMentionsStyle = token => {
  const {
    componentCls,
    colorTextDisabled,
    controlItemBgHover,
    controlPaddingHorizontal,
    colorText,
    motionDurationSlow,
    lineHeight,
    controlHeight,
    inputPaddingHorizontal,
    inputPaddingVertical,
    fontSize,
    colorBgElevated,
    borderRadiusLG,
    boxShadowSecondary
  } = token;
  const itemPaddingVertical = Math.round((token.controlHeight - token.fontSize * token.lineHeight) / 2);
  return {
    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), (0,input_style/* genBasicInputStyle */.ik)(token)), {
      position: 'relative',
      display: 'inline-block',
      height: 'auto',
      padding: 0,
      overflow: 'hidden',
      lineHeight,
      whiteSpace: 'pre-wrap',
      verticalAlign: 'bottom'
    }), (0,input_style/* genStatusStyle */.bi)(token, componentCls)), {
      '&-disabled': {
        '> textarea': Object.assign({}, (0,input_style/* genDisabledStyle */.Xy)(token))
      },
      '&-focused': Object.assign({}, (0,input_style/* genActiveStyle */.M1)(token)),
      [\`&-affix-wrapper \${componentCls}-suffix\`]: {
        position: 'absolute',
        top: 0,
        insetInlineEnd: inputPaddingHorizontal,
        bottom: 0,
        zIndex: 1,
        display: 'inline-flex',
        alignItems: 'center',
        margin: 'auto'
      },
      // ================= Input Area =================
      [\`> textarea, \${componentCls}-measure\`]: {
        color: colorText,
        boxSizing: 'border-box',
        minHeight: controlHeight - 2,
        margin: 0,
        padding: \`\${inputPaddingVertical}px \${inputPaddingHorizontal}px\`,
        overflow: 'inherit',
        overflowX: 'hidden',
        overflowY: 'auto',
        fontWeight: 'inherit',
        fontSize: 'inherit',
        fontFamily: 'inherit',
        fontStyle: 'inherit',
        fontVariant: 'inherit',
        fontSizeAdjust: 'inherit',
        fontStretch: 'inherit',
        lineHeight: 'inherit',
        direction: 'inherit',
        letterSpacing: 'inherit',
        whiteSpace: 'inherit',
        textAlign: 'inherit',
        verticalAlign: 'top',
        wordWrap: 'break-word',
        wordBreak: 'inherit',
        tabSize: 'inherit'
      },
      '> textarea': Object.assign({
        width: '100%',
        border: 'none',
        outline: 'none',
        resize: 'none',
        backgroundColor: 'inherit'
      }, (0,input_style/* genPlaceholderStyle */.nz)(token.colorTextPlaceholder)),
      [\`\${componentCls}-measure\`]: {
        position: 'absolute',
        top: 0,
        insetInlineEnd: 0,
        bottom: 0,
        insetInlineStart: 0,
        zIndex: -1,
        color: 'transparent',
        pointerEvents: 'none',
        '> span': {
          display: 'inline-block',
          minHeight: '1em'
        }
      },
      // ================== Dropdown ==================
      '&-dropdown': Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
        position: 'absolute',
        top: -9999,
        insetInlineStart: -9999,
        zIndex: token.zIndexPopup,
        boxSizing: 'border-box',
        fontSize,
        fontVariant: 'initial',
        backgroundColor: colorBgElevated,
        borderRadius: borderRadiusLG,
        outline: 'none',
        boxShadow: boxShadowSecondary,
        '&-hidden': {
          display: 'none'
        },
        [\`\${componentCls}-dropdown-menu\`]: {
          maxHeight: token.dropdownHeight,
          marginBottom: 0,
          paddingInlineStart: 0,
          overflow: 'auto',
          listStyle: 'none',
          outline: 'none',
          '&-item': Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
            position: 'relative',
            display: 'block',
            minWidth: token.controlItemWidth,
            padding: \`\${itemPaddingVertical}px \${controlPaddingHorizontal}px\`,
            color: colorText,
            fontWeight: 'normal',
            lineHeight,
            cursor: 'pointer',
            transition: \`background \${motionDurationSlow} ease\`,
            '&:hover': {
              backgroundColor: controlItemBgHover
            },
            '&:first-child': {
              borderStartStartRadius: borderRadiusLG,
              borderStartEndRadius: borderRadiusLG,
              borderEndStartRadius: 0,
              borderEndEndRadius: 0
            },
            '&:last-child': {
              borderStartStartRadius: 0,
              borderStartEndRadius: 0,
              borderEndStartRadius: borderRadiusLG,
              borderEndEndRadius: borderRadiusLG
            },
            '&-disabled': {
              color: colorTextDisabled,
              cursor: 'not-allowed',
              '&:hover': {
                color: colorTextDisabled,
                backgroundColor: controlItemBgHover,
                cursor: 'not-allowed'
              }
            },
            '&-selected': {
              color: colorText,
              fontWeight: token.fontWeightStrong,
              backgroundColor: controlItemBgHover
            },
            '&-active': {
              backgroundColor: controlItemBgHover
            }
          })
        }
      })
    })
  };
};
// ============================== Export ==============================
/* harmony default export */ var mentions_style = ((0,genComponentStyleHook/* default */.Z)('Mentions', token => {
  const mentionsToken = (0,input_style/* initInputToken */.e5)(token);
  return [genMentionsStyle(mentionsToken)];
}, token => ({
  dropdownHeight: 250,
  controlItemWidth: 100,
  zIndexPopup: token.zIndexPopupBase + 50
})));
;// CONCATENATED MODULE: ./node_modules/antd/es/mentions/index.js
var mentions_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};



// eslint-disable-next-line import/no-named-as-default









const {
  Option: mentions_Option
} = rc_mentions_es;
function loadingFilterOption() {
  return true;
}
const InternalMentions = (_a, ref) => {
  var {
      prefixCls: customizePrefixCls,
      className,
      disabled,
      loading,
      filterOption,
      children,
      notFoundContent,
      options,
      status: customStatus,
      popupClassName
    } = _a,
    restProps = mentions_rest(_a, ["prefixCls", "className", "disabled", "loading", "filterOption", "children", "notFoundContent", "options", "status", "popupClassName"]);
  const [focused, setFocused] = react.useState(false);
  const innerRef = react.useRef();
  const mergedRef = (0,es_ref/* composeRef */.sQ)(ref, innerRef);
  // =================== Warning =====================
  if (false) {}
  const {
    getPrefixCls,
    renderEmpty,
    direction
  } = react.useContext(context/* ConfigContext */.E_);
  const {
    status: contextStatus,
    hasFeedback,
    feedbackIcon
  } = react.useContext(form_context/* FormItemInputContext */.aM);
  const mergedStatus = (0,statusUtils/* getMergedStatus */.F)(contextStatus, customStatus);
  const onFocus = function () {
    if (restProps.onFocus) {
      restProps.onFocus.apply(restProps, arguments);
    }
    setFocused(true);
  };
  const onBlur = function () {
    if (restProps.onBlur) {
      restProps.onBlur.apply(restProps, arguments);
    }
    setFocused(false);
  };
  const notFoundContentEle = react.useMemo(() => {
    if (notFoundContent !== undefined) {
      return notFoundContent;
    }
    return (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Select')) || /*#__PURE__*/react.createElement(defaultRenderEmpty/* default */.Z, {
      componentName: "Select"
    });
  }, [notFoundContent, renderEmpty]);
  const getOptions = () => {
    if (loading) {
      return /*#__PURE__*/react.createElement(mentions_Option, {
        value: "ANTD_SEARCHING",
        disabled: true
      }, /*#__PURE__*/react.createElement(spin/* default */.Z, {
        size: "small"
      }));
    }
    return children;
  };
  const mergedOptions = loading ? [{
    value: 'ANTD_SEARCHING',
    disabled: true,
    label: /*#__PURE__*/react.createElement(spin/* default */.Z, {
      size: "small"
    })
  }] : options;
  const mentionsfilterOption = loading ? loadingFilterOption : filterOption;
  const prefixCls = getPrefixCls('mentions', customizePrefixCls);
  // Style
  const [wrapSSR, hashId] = mentions_style(prefixCls);
  const mergedClassName = classnames_default()({
    [\`\${prefixCls}-disabled\`]: disabled,
    [\`\${prefixCls}-focused\`]: focused,
    [\`\${prefixCls}-rtl\`]: direction === 'rtl'
  }, (0,statusUtils/* getStatusClassNames */.Z)(prefixCls, mergedStatus), !hasFeedback && className, hashId);
  const mentions = /*#__PURE__*/react.createElement(rc_mentions_es, Object.assign({
    prefixCls: prefixCls,
    notFoundContent: notFoundContentEle,
    className: mergedClassName,
    disabled: disabled,
    direction: direction
  }, restProps, {
    filterOption: mentionsfilterOption,
    onFocus: onFocus,
    onBlur: onBlur,
    dropdownClassName: classnames_default()(popupClassName, hashId),
    ref: mergedRef,
    options: mergedOptions
  }), getOptions());
  if (hasFeedback) {
    return /*#__PURE__*/react.createElement("div", {
      className: classnames_default()(\`\${prefixCls}-affix-wrapper\`, (0,statusUtils/* getStatusClassNames */.Z)(\`\${prefixCls}-affix-wrapper\`, mergedStatus, hasFeedback), className, hashId)
    }, mentions, /*#__PURE__*/react.createElement("span", {
      className: \`\${prefixCls}-suffix\`
    }, feedbackIcon));
  }
  return wrapSSR(mentions);
};
const mentions_Mentions = /*#__PURE__*/react.forwardRef(InternalMentions);
if (false) {}
mentions_Mentions.Option = mentions_Option;
// We don't care debug panel
/* istanbul ignore next */
const mentions_PurePanel = (0,_util_PurePanel/* default */.Z)(mentions_Mentions, 'mentions');
mentions_Mentions._InternalPanelDoNotUseOrYouWillBeFired = mentions_PurePanel;
mentions_Mentions.getMentions = function () {
  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    prefix = '@',
    split = ' '
  } = config;
  const prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return value.split(split).map(function () {
    let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let hitPrefix = null;
    prefixList.some(prefixStr => {
      const startStr = str.slice(0, prefixStr.length);
      if (startStr === prefixStr) {
        hitPrefix = prefixStr;
        return true;
      }
      return false;
    });
    if (hitPrefix !== null) {
      return {
        prefix: hitPrefix,
        value: str.slice(hitPrefix.length)
      };
    }
    return null;
  }).filter(entity => !!entity && !!entity.value);
};
/* harmony default export */ var mentions = (mentions_Mentions);
// EXTERNAL MODULE: ./node_modules/antd/es/menu/index.js + 11 modules
var es_menu = __webpack_require__(68508);
// EXTERNAL MODULE: ./node_modules/antd/es/message/index.js
var message = __webpack_require__(45360);
// EXTERNAL MODULE: ./node_modules/antd/es/modal/index.js
var modal = __webpack_require__(48165);
// EXTERNAL MODULE: ./node_modules/antd/es/notification/index.js
var notification = __webpack_require__(26855);
// EXTERNAL MODULE: ./node_modules/antd/es/pagination/index.js + 9 modules
var es_pagination = __webpack_require__(8417);
// EXTERNAL MODULE: ./node_modules/antd/es/popconfirm/index.js + 2 modules
var popconfirm = __webpack_require__(86738);
// EXTERNAL MODULE: ./node_modules/antd/es/popover/index.js
var popover = __webpack_require__(55241);
// EXTERNAL MODULE: ./node_modules/antd/es/progress/index.js + 11 modules
var progress = __webpack_require__(69814);
// EXTERNAL MODULE: ./node_modules/antd/es/radio/index.js
var es_radio = __webpack_require__(55742);
// EXTERNAL MODULE: ./node_modules/antd/es/rate/index.js + 5 modules
var rate = __webpack_require__(34913);
// EXTERNAL MODULE: ./node_modules/antd/es/result/index.js + 4 modules
var result = __webpack_require__(59720);
// EXTERNAL MODULE: ./node_modules/antd/es/row/index.js
var row = __webpack_require__(71230);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
var defineProperty = __webpack_require__(4942);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
var esm_typeof = __webpack_require__(71002);
// EXTERNAL MODULE: ./node_modules/rc-util/es/omit.js
var omit = __webpack_require__(98423);
// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useLayoutEffect.js
var useLayoutEffect = __webpack_require__(8410);
;// CONCATENATED MODULE: ./node_modules/rc-segmented/es/MotionThumb.js








var calcThumbStyle = function calcThumbStyle(targetElement) {
  return targetElement ? {
    left: targetElement.offsetLeft,
    width: targetElement.clientWidth
  } : null;
};

var toPX = function toPX(value) {
  return value !== undefined ? "".concat(value, "px") : undefined;
};

function MotionThumb(props) {
  var prefixCls = props.prefixCls,
      containerRef = props.containerRef,
      value = props.value,
      getValueIndex = props.getValueIndex,
      motionName = props.motionName,
      onMotionStart = props.onMotionStart,
      onMotionEnd = props.onMotionEnd;
  var thumbRef = react.useRef(null);

  var _React$useState = react.useState(value),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      prevValue = _React$useState2[0],
      setPrevValue = _React$useState2[1]; // =========================== Effect ===========================


  var findValueElement = function findValueElement(val) {
    var _containerRef$current;

    var index = getValueIndex(val);
    var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelectorAll(".".concat(prefixCls, "-item"))[index];
    return ele;
  };

  var _React$useState3 = react.useState(null),
      _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),
      prevStyle = _React$useState4[0],
      setPrevStyle = _React$useState4[1];

  var _React$useState5 = react.useState(null),
      _React$useState6 = (0,slicedToArray/* default */.Z)(_React$useState5, 2),
      nextStyle = _React$useState6[0],
      setNextStyle = _React$useState6[1];

  (0,useLayoutEffect/* default */.Z)(function () {
    if (prevValue !== value) {
      var prev = findValueElement(prevValue);
      var next = findValueElement(value);
      var calcPrevStyle = calcThumbStyle(prev);
      var calcNextStyle = calcThumbStyle(next);
      setPrevValue(value);
      setPrevStyle(calcPrevStyle);
      setNextStyle(calcNextStyle);

      if (prev && next) {
        onMotionStart();
      } else {
        onMotionEnd();
      }
    }
  }, [value]); // =========================== Motion ===========================

  var onAppearStart = function onAppearStart() {
    return {
      transform: "translateX(var(--thumb-start-left))",
      width: "var(--thumb-start-width)"
    };
  };

  var onAppearActive = function onAppearActive() {
    return {
      transform: "translateX(var(--thumb-active-left))",
      width: "var(--thumb-active-width)"
    };
  };

  var onAppearEnd = function onAppearEnd() {
    setPrevStyle(null);
    setNextStyle(null);
    onMotionEnd();
  }; // =========================== Render ===========================
  // No need motion when nothing exist in queue


  if (!prevStyle || !nextStyle) {
    return null;
  }

  return /*#__PURE__*/react.createElement(rc_motion_es/* default */.Z, {
    visible: true,
    motionName: motionName,
    motionAppear: true,
    onAppearStart: onAppearStart,
    onAppearActive: onAppearActive,
    onAppearEnd: onAppearEnd
  }, function (_ref, ref) {
    var motionClassName = _ref.className,
        motionStyle = _ref.style;

    var mergedStyle = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, motionStyle), {}, {
      '--thumb-start-left': toPX(prevStyle === null || prevStyle === void 0 ? void 0 : prevStyle.left),
      '--thumb-start-width': toPX(prevStyle === null || prevStyle === void 0 ? void 0 : prevStyle.width),
      '--thumb-active-left': toPX(nextStyle === null || nextStyle === void 0 ? void 0 : nextStyle.left),
      '--thumb-active-width': toPX(nextStyle === null || nextStyle === void 0 ? void 0 : nextStyle.width)
    }); // It's little ugly which should be refactor when @umi/test update to latest jsdom


    var motionProps = {
      ref: (0,es_ref/* composeRef */.sQ)(thumbRef, ref),
      style: mergedStyle,
      className: classnames_default()("".concat(prefixCls, "-thumb"), motionClassName)
    };

    if (false) {}

    return /*#__PURE__*/react.createElement("div", (0,objectSpread2/* default */.Z)({}, motionProps));
  });
}
;// CONCATENATED MODULE: ./node_modules/rc-segmented/es/index.js





var es_excluded = ["prefixCls", "direction", "options", "disabled", "defaultValue", "value", "onChange", "className", "motionName"];







function getValidTitle(option) {
  if (typeof option.title !== 'undefined') {
    return option.title;
  } // read \`label\` when title is \`undefined\`


  if ((0,esm_typeof/* default */.Z)(option.label) !== 'object') {
    var _option$label;

    return (_option$label = option.label) === null || _option$label === void 0 ? void 0 : _option$label.toString();
  }
}

function normalizeOptions(options) {
  return options.map(function (option) {
    if ((0,esm_typeof/* default */.Z)(option) === 'object' && option !== null) {
      var validTitle = getValidTitle(option);
      return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, option), {}, {
        title: validTitle
      });
    }

    return {
      label: option === null || option === void 0 ? void 0 : option.toString(),
      title: option === null || option === void 0 ? void 0 : option.toString(),
      value: option
    };
  });
}

var InternalSegmentedOption = function InternalSegmentedOption(_ref) {
  var prefixCls = _ref.prefixCls,
      className = _ref.className,
      disabled = _ref.disabled,
      checked = _ref.checked,
      label = _ref.label,
      title = _ref.title,
      value = _ref.value,
      onChange = _ref.onChange;

  var handleChange = function handleChange(event) {
    if (disabled) {
      return;
    }

    onChange(event, value);
  };

  return /*#__PURE__*/react.createElement("label", {
    className: classnames_default()(className, (0,defineProperty/* default */.Z)({}, "".concat(prefixCls, "-item-disabled"), disabled))
  }, /*#__PURE__*/react.createElement("input", {
    className: "".concat(prefixCls, "-item-input"),
    type: "radio",
    disabled: disabled,
    checked: checked,
    onChange: handleChange
  }), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-item-label"),
    title: title
  }, label));
};

var Segmented = /*#__PURE__*/react.forwardRef(function (props, ref) {
  var _segmentedOptions$, _classNames2;

  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'rc-segmented' : _props$prefixCls,
      direction = props.direction,
      options = props.options,
      disabled = props.disabled,
      defaultValue = props.defaultValue,
      value = props.value,
      onChange = props.onChange,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$motionName = props.motionName,
      motionName = _props$motionName === void 0 ? 'thumb-motion' : _props$motionName,
      restProps = (0,objectWithoutProperties/* default */.Z)(props, es_excluded);

  var containerRef = react.useRef(null);
  var mergedRef = react.useMemo(function () {
    return (0,es_ref/* composeRef */.sQ)(containerRef, ref);
  }, [containerRef, ref]);
  var segmentedOptions = react.useMemo(function () {
    return normalizeOptions(options);
  }, [options]); // Note: We should not auto switch value when value not exist in options
  // which may break single source of truth.

  var _useMergedState = (0,useMergedState/* default */.Z)((_segmentedOptions$ = segmentedOptions[0]) === null || _segmentedOptions$ === void 0 ? void 0 : _segmentedOptions$.value, {
    value: value,
    defaultValue: defaultValue
  }),
      _useMergedState2 = (0,slicedToArray/* default */.Z)(_useMergedState, 2),
      rawValue = _useMergedState2[0],
      setRawValue = _useMergedState2[1]; // ======================= Change ========================


  var _React$useState = react.useState(false),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      thumbShow = _React$useState2[0],
      setThumbShow = _React$useState2[1];

  var handleChange = function handleChange(event, val) {
    if (disabled) {
      return;
    }

    setRawValue(val);
    onChange === null || onChange === void 0 ? void 0 : onChange(val);
  };

  var divProps = (0,omit/* default */.Z)(restProps, ['children']);
  return /*#__PURE__*/react.createElement("div", (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, divProps), {}, {
    className: classnames_default()(prefixCls, (_classNames2 = {}, (0,defineProperty/* default */.Z)(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), (0,defineProperty/* default */.Z)(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _classNames2), className),
    ref: mergedRef
  }), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-group")
  }, /*#__PURE__*/react.createElement(MotionThumb, {
    prefixCls: prefixCls,
    value: rawValue,
    containerRef: containerRef,
    motionName: "".concat(prefixCls, "-").concat(motionName),
    getValueIndex: function getValueIndex(val) {
      return segmentedOptions.findIndex(function (n) {
        return n.value === val;
      });
    },
    onMotionStart: function onMotionStart() {
      setThumbShow(true);
    },
    onMotionEnd: function onMotionEnd() {
      setThumbShow(false);
    }
  }), segmentedOptions.map(function (segmentedOption) {
    return /*#__PURE__*/react.createElement(InternalSegmentedOption, (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({
      key: segmentedOption.value,
      prefixCls: prefixCls,
      className: classnames_default()(segmentedOption.className, "".concat(prefixCls, "-item"), (0,defineProperty/* default */.Z)({}, "".concat(prefixCls, "-item-selected"), segmentedOption.value === rawValue && !thumbShow)),
      checked: segmentedOption.value === rawValue,
      onChange: handleChange
    }, segmentedOption), {}, {
      disabled: !!disabled || !!segmentedOption.disabled
    }));
  })));
});
Segmented.displayName = 'Segmented';
Segmented.defaultProps = {
  options: []
};
/* harmony default export */ var rc_segmented_es = (Segmented);
// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/SizeContext.js
var SizeContext = __webpack_require__(97647);
;// CONCATENATED MODULE: ./node_modules/antd/es/segmented/style/index.js


// ============================== Mixins ==============================
function getItemDisabledStyle(cls, token) {
  return {
    [\`\${cls}, \${cls}:hover, \${cls}:focus\`]: {
      color: token.colorTextDisabled,
      cursor: 'not-allowed'
    }
  };
}
function getItemSelectedStyle(token) {
  return {
    backgroundColor: token.bgColorSelected,
    boxShadow: token.boxShadow
  };
}
const segmentedTextEllipsisCss = Object.assign({
  overflow: 'hidden'
}, style/* textEllipsis */.vS);
// ============================== Styles ==============================
const genSegmentedStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      display: 'inline-block',
      padding: token.segmentedContainerPadding,
      color: token.labelColor,
      backgroundColor: token.bgColor,
      borderRadius: token.borderRadius,
      transition: \`all \${token.motionDurationMid} \${token.motionEaseInOut}\`,
      [\`\${componentCls}-group\`]: {
        position: 'relative',
        display: 'flex',
        alignItems: 'stretch',
        justifyItems: 'flex-start',
        width: '100%'
      },
      // RTL styles
      [\`&\${componentCls}-rtl\`]: {
        direction: 'rtl'
      },
      // block styles
      [\`&\${componentCls}-block\`]: {
        display: 'flex'
      },
      [\`&\${componentCls}-block \${componentCls}-item\`]: {
        flex: 1,
        minWidth: 0
      },
      // item styles
      [\`\${componentCls}-item\`]: {
        position: 'relative',
        textAlign: 'center',
        cursor: 'pointer',
        transition: \`color \${token.motionDurationMid} \${token.motionEaseInOut}\`,
        borderRadius: token.borderRadiusSM,
        '&-selected': Object.assign(Object.assign({}, getItemSelectedStyle(token)), {
          color: token.labelColorHover
        }),
        '&::after': {
          content: '""',
          position: 'absolute',
          width: '100%',
          height: '100%',
          top: 0,
          insetInlineStart: 0,
          borderRadius: 'inherit',
          transition: \`background-color \${token.motionDurationMid}\`
        },
        [\`&:hover:not(\${componentCls}-item-selected):not(\${componentCls}-item-disabled)\`]: {
          color: token.labelColorHover,
          '&::after': {
            backgroundColor: token.bgColorHover
          }
        },
        '&-label': Object.assign({
          minHeight: token.controlHeight - token.segmentedContainerPadding * 2,
          lineHeight: \`\${token.controlHeight - token.segmentedContainerPadding * 2}px\`,
          padding: \`0 \${token.segmentedPaddingHorizontal}px\`
        }, segmentedTextEllipsisCss),
        // syntactic sugar to add \`icon\` for Segmented Item
        '&-icon + *': {
          marginInlineStart: token.marginSM / 2
        },
        '&-input': {
          position: 'absolute',
          insetBlockStart: 0,
          insetInlineStart: 0,
          width: 0,
          height: 0,
          opacity: 0,
          pointerEvents: 'none'
        }
      },
      // thumb styles
      [\`\${componentCls}-thumb\`]: Object.assign(Object.assign({}, getItemSelectedStyle(token)), {
        position: 'absolute',
        insetBlockStart: 0,
        insetInlineStart: 0,
        width: 0,
        height: '100%',
        padding: \`\${token.paddingXXS}px 0\`,
        borderRadius: token.borderRadiusSM,
        [\`& ~ \${componentCls}-item:not(\${componentCls}-item-selected):not(\${componentCls}-item-disabled)::after\`]: {
          backgroundColor: 'transparent'
        }
      }),
      // size styles
      [\`&\${componentCls}-lg\`]: {
        borderRadius: token.borderRadiusLG,
        [\`\${componentCls}-item-label\`]: {
          minHeight: token.controlHeightLG - token.segmentedContainerPadding * 2,
          lineHeight: \`\${token.controlHeightLG - token.segmentedContainerPadding * 2}px\`,
          padding: \`0 \${token.segmentedPaddingHorizontal}px\`,
          fontSize: token.fontSizeLG
        },
        [\`\${componentCls}-item, \${componentCls}-thumb\`]: {
          borderRadius: token.borderRadius
        }
      },
      [\`&\${componentCls}-sm\`]: {
        borderRadius: token.borderRadiusSM,
        [\`\${componentCls}-item-label\`]: {
          minHeight: token.controlHeightSM - token.segmentedContainerPadding * 2,
          lineHeight: \`\${token.controlHeightSM - token.segmentedContainerPadding * 2}px\`,
          padding: \`0 \${token.segmentedPaddingHorizontalSM}px\`
        },
        [\`\${componentCls}-item, \${componentCls}-thumb\`]: {
          borderRadius: token.borderRadiusXS
        }
      }
    }), getItemDisabledStyle(\`&-disabled \${componentCls}-item\`, token)), getItemDisabledStyle(\`\${componentCls}-item-disabled\`, token)), {
      // transition effect when \`appear-active\`
      [\`\${componentCls}-thumb-motion-appear-active\`]: {
        transition: \`transform \${token.motionDurationSlow} \${token.motionEaseInOut}, width \${token.motionDurationSlow} \${token.motionEaseInOut}\`,
        willChange: 'transform, width'
      }
    })
  };
};
// ============================== Export ==============================
/* harmony default export */ var segmented_style = ((0,genComponentStyleHook/* default */.Z)('Segmented', token => {
  const {
    lineWidthBold,
    lineWidth,
    colorTextLabel,
    colorText,
    colorFillSecondary,
    colorBgLayout,
    colorBgElevated
  } = token;
  const segmentedToken = (0,statistic/* merge */.TS)(token, {
    segmentedPaddingHorizontal: token.controlPaddingHorizontal - lineWidth,
    segmentedPaddingHorizontalSM: token.controlPaddingHorizontalSM - lineWidth,
    segmentedContainerPadding: lineWidthBold,
    labelColor: colorTextLabel,
    labelColorHover: colorText,
    bgColor: colorBgLayout,
    bgColorHover: colorFillSecondary,
    bgColorSelected: colorBgElevated
  });
  return [genSegmentedStyle(segmentedToken)];
}));
;// CONCATENATED MODULE: ./node_modules/antd/es/segmented/index.js
var segmented_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






function isSegmentedLabeledOptionWithIcon(option) {
  return typeof option === 'object' && !!(option === null || option === void 0 ? void 0 : option.icon);
}
const segmented_Segmented = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
      prefixCls: customizePrefixCls,
      className,
      block,
      options = [],
      size: customSize = 'middle'
    } = props,
    restProps = segmented_rest(props, ["prefixCls", "className", "block", "options", "size"]);
  const {
    getPrefixCls,
    direction
  } = react.useContext(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls('segmented', customizePrefixCls);
  // Style
  const [wrapSSR, hashId] = segmented_style(prefixCls);
  // ===================== Size =====================
  const size = react.useContext(SizeContext/* default */.Z);
  const mergedSize = customSize || size;
  // syntactic sugar to support \`icon\` for Segmented Item
  const extendedOptions = react.useMemo(() => options.map(option => {
    if (isSegmentedLabeledOptionWithIcon(option)) {
      const {
          icon,
          label
        } = option,
        restOption = segmented_rest(option, ["icon", "label"]);
      return Object.assign(Object.assign({}, restOption), {
        label: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("span", {
          className: \`\${prefixCls}-item-icon\`
        }, icon), label && /*#__PURE__*/react.createElement("span", null, label))
      });
    }
    return option;
  }), [options, prefixCls]);
  return wrapSSR( /*#__PURE__*/react.createElement(rc_segmented_es, Object.assign({}, restProps, {
    className: classnames_default()(className, {
      [\`\${prefixCls}-block\`]: block,
      [\`\${prefixCls}-sm\`]: mergedSize === 'small',
      [\`\${prefixCls}-lg\`]: mergedSize === 'large'
    }, hashId),
    options: extendedOptions,
    ref: ref,
    prefixCls: prefixCls,
    direction: direction
  })));
});
if (false) {}
/* harmony default export */ var segmented = (segmented_Segmented);
// EXTERNAL MODULE: ./node_modules/antd/es/select/index.js
var es_select = __webpack_require__(34041);
// EXTERNAL MODULE: ./node_modules/antd/es/skeleton/index.js + 10 modules
var skeleton = __webpack_require__(48054);
// EXTERNAL MODULE: ./node_modules/antd/es/slider/index.js + 16 modules
var slider = __webpack_require__(71338);
// EXTERNAL MODULE: ./node_modules/antd/es/space/index.js + 1 modules
var space = __webpack_require__(26713);
// EXTERNAL MODULE: ./node_modules/antd/es/statistic/index.js + 5 modules
var es_statistic = __webpack_require__(55054);
// EXTERNAL MODULE: ./node_modules/antd/es/steps/index.js + 14 modules
var steps = __webpack_require__(3363);
// EXTERNAL MODULE: ./node_modules/antd/es/switch/index.js + 2 modules
var es_switch = __webpack_require__(72269);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/constant.js
var EXPAND_COLUMN = {};
// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useEvent.js
var useEvent = __webpack_require__(66680);
// EXTERNAL MODULE: ./node_modules/rc-util/es/isEqual.js
var isEqual = __webpack_require__(91881);
// EXTERNAL MODULE: ./node_modules/@umijs/preset-umi/node_modules/react-dom/index.js
var react_dom = __webpack_require__(61254);
;// CONCATENATED MODULE: ./node_modules/@rc-component/context/es/context.js






function createContext(defaultValue) {
  var Context = /*#__PURE__*/react.createContext(undefined);

  var Provider = function Provider(_ref) {
    var value = _ref.value,
        children = _ref.children;
    var valueRef = react.useRef(value);
    valueRef.current = value;

    var _React$useState = react.useState(function () {
      return {
        getValue: function getValue() {
          return valueRef.current;
        },
        listeners: new Set()
      };
    }),
        _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 1),
        context = _React$useState2[0];

    (0,useLayoutEffect/* default */.Z)(function () {
      (0,react_dom.unstable_batchedUpdates)(function () {
        context.listeners.forEach(function (listener) {
          listener(value);
        });
      });
    }, [value]);
    return /*#__PURE__*/react.createElement(Context.Provider, {
      value: context
    }, children);
  };

  return {
    Context: Context,
    Provider: Provider,
    defaultValue: defaultValue
  };
}
/** e.g. useSelect(userContext) => user */

function useContext(holder, selector) {
  var eventSelector = (0,useEvent/* default */.Z)(typeof selector === 'function' ? selector : function (ctx) {
    if (selector === undefined) {
      return ctx;
    }

    if (!Array.isArray(selector)) {
      return ctx[selector];
    }

    var obj = {};
    selector.forEach(function (key) {
      obj[key] = ctx[key];
    });
    return obj;
  });
  var context = react.useContext(holder === null || holder === void 0 ? void 0 : holder.Context);

  var _ref2 = context || {},
      listeners = _ref2.listeners,
      getValue = _ref2.getValue;

  var valueRef = react.useRef();
  valueRef.current = eventSelector(context ? getValue() : holder === null || holder === void 0 ? void 0 : holder.defaultValue);

  var _React$useState3 = react.useState({}),
      _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),
      forceUpdate = _React$useState4[1];

  (0,useLayoutEffect/* default */.Z)(function () {
    if (!context) {
      return;
    }

    function trigger(nextValue) {
      var nextSelectorValue = eventSelector(nextValue);

      if (!(0,isEqual/* default */.Z)(valueRef.current, nextSelectorValue, true)) {
        forceUpdate({});
      }
    }

    listeners.add(trigger);
    return function () {
      listeners.delete(trigger);
    };
  }, [context]);
  return valueRef.current;
}
;// CONCATENATED MODULE: ./node_modules/@rc-component/context/es/Immutable.js



var ImmutableContext = /*#__PURE__*/react.createContext(0);

/**
 * Get render update mark by \`makeImmutable\` root.
 * Do not deps on the return value as render times
 * but only use for \`useMemo\` or \`useCallback\` deps.
 */
function useImmutableMark() {
  return react.useContext(ImmutableContext);
}
/**
 * Wrapped Component will be marked as Immutable.
 * When Component parent trigger render,
 * it will notice children component (use with \`responseImmutable\`) node that parent has updated.

 * @param Component Passed Component
 * @param triggerRender Customize trigger \`responseImmutable\` children re-render logic. Default will always trigger re-render when this component re-render.
 */

function makeImmutable(Component, shouldTriggerRender) {
  var refAble = (0,es_ref/* supportRef */.Yr)(Component);

  var ImmutableComponent = function ImmutableComponent(props, ref) {
    var refProps = refAble ? {
      ref: ref
    } : {};
    var renderTimesRef = react.useRef(0);
    var prevProps = react.useRef(props);

    if ( // Always trigger re-render if not provide \`notTriggerRender\`
    !shouldTriggerRender || shouldTriggerRender(prevProps.current, props)) {
      renderTimesRef.current += 1;
    }

    prevProps.current = props;
    return /*#__PURE__*/react.createElement(ImmutableContext.Provider, {
      value: renderTimesRef.current
    }, /*#__PURE__*/react.createElement(Component, (0,esm_extends/* default */.Z)({}, props, refProps)));
  };

  if (false) {}

  return refAble ? /*#__PURE__*/react.forwardRef(ImmutableComponent) : ImmutableComponent;
}
/**
 * Wrapped Component with \`React.memo\`.
 * But will rerender when parent with \`makeImmutable\` rerender.
 */

function responseImmutable(Component, propsAreEqual) {
  var refAble = (0,es_ref/* supportRef */.Yr)(Component);

  var ImmutableComponent = function ImmutableComponent(props, ref) {
    var refProps = refAble ? {
      ref: ref
    } : {};
    useImmutableMark();
    return /*#__PURE__*/react.createElement(Component, (0,esm_extends/* default */.Z)({}, props, refProps));
  };

  if (false) {}

  return refAble ? /*#__PURE__*/react.memo( /*#__PURE__*/react.forwardRef(ImmutableComponent), propsAreEqual) : /*#__PURE__*/react.memo(ImmutableComponent, propsAreEqual);
}
;// CONCATENATED MODULE: ./node_modules/@rc-component/context/es/index.js



;// CONCATENATED MODULE: ./node_modules/rc-table/es/context/TableContext.js

var TableContext = createContext();
/* harmony default export */ var context_TableContext = (TableContext);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useRenderTimes.js
/* istanbul ignore file */


function useRenderTimes(props, debug) {
  // Render times
  var timesRef = react.useRef(0);
  timesRef.current += 1; // Props changed

  var propsRef = react.useRef(props);
  var keys = [];
  Object.keys(props || {}).map(function (key) {
    var _propsRef$current;

    if ((props === null || props === void 0 ? void 0 : props[key]) !== ((_propsRef$current = propsRef.current) === null || _propsRef$current === void 0 ? void 0 : _propsRef$current[key])) {
      keys.push(key);
    }
  });
  propsRef.current = props; // Cache keys since React rerender may cause it lost

  var keysRef = react.useRef([]);

  if (keys.length) {
    keysRef.current = keys;
  }

  react.useDebugValue(timesRef.current);
  react.useDebugValue(keysRef.current.join(', '));

  if (debug) {
    console.log("".concat(debug, ":"), timesRef.current, keysRef.current);
  }

  return timesRef.current;
}

/* harmony default export */ var hooks_useRenderTimes = ((/* unused pure expression or super */ null && ( false ? 0 : function () {})));
var RenderBlock = /*#__PURE__*/react.memo(function () {
  var times = useRenderTimes();
  return /*#__PURE__*/react.createElement("h1", null, "Render Times: ", times);
});
RenderBlock.displayName = 'RenderBlock';
// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMemo.js
var useMemo = __webpack_require__(56982);
// EXTERNAL MODULE: ./node_modules/rc-util/es/utils/get.js
var get = __webpack_require__(88306);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/context/PerfContext.js

// TODO: Remove when use \`responsiveImmutable\`
var PerfContext = /*#__PURE__*/react.createContext({
  renderWithProps: false
});
/* harmony default export */ var context_PerfContext = (PerfContext);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/utils/valueUtil.js
var INTERNAL_KEY_PREFIX = 'RC_TABLE_KEY';

function valueUtil_toArray(arr) {
  if (arr === undefined || arr === null) {
    return [];
  }

  return Array.isArray(arr) ? arr : [arr];
}

function getColumnsKey(columns) {
  var columnKeys = [];
  var keys = {};
  columns.forEach(function (column) {
    var _ref = column || {},
        key = _ref.key,
        dataIndex = _ref.dataIndex;

    var mergedKey = key || valueUtil_toArray(dataIndex).join('-') || INTERNAL_KEY_PREFIX;

    while (keys[mergedKey]) {
      mergedKey = "".concat(mergedKey, "_next");
    }

    keys[mergedKey] = true;
    columnKeys.push(mergedKey);
  });
  return columnKeys;
}
function validateValue(val) {
  return val !== null && val !== undefined;
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Cell/useCellRender.js











function isRenderCell(data) {
  return data && (0,esm_typeof/* default */.Z)(data) === 'object' && !Array.isArray(data) && ! /*#__PURE__*/react.isValidElement(data);
}

function useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate) {
  // TODO: Remove this after next major version
  var perfRecord = react.useContext(context_PerfContext);
  var mark = useImmutableMark(); // ======================== Render ========================

  var retData = (0,useMemo/* default */.Z)(function () {
    if (validateValue(children)) {
      return [children];
    }

    var path = dataIndex === null || dataIndex === undefined || dataIndex === '' ? [] : Array.isArray(dataIndex) ? dataIndex : [dataIndex];
    var value = (0,get/* default */.Z)(record, path); // Customize render node

    var returnChildNode = value;
    var returnCellProps = undefined;

    if (render) {
      var renderData = render(value, record, renderIndex);

      if (isRenderCell(renderData)) {
        if (false) {}

        returnChildNode = renderData.children;
        returnCellProps = renderData.props;
        perfRecord.renderWithProps = true;
      } else {
        returnChildNode = renderData;
      }
    }

    return [returnChildNode, returnCellProps];
  }, [// Force update deps
  mark, // Normal deps
  record, children, dataIndex, render, renderIndex], function (prev, next) {
    if (shouldCellUpdate) {
      var _prev = (0,slicedToArray/* default */.Z)(prev, 2),
          prevRecord = _prev[1];

      var _next = (0,slicedToArray/* default */.Z)(next, 2),
          nextRecord = _next[1];

      return shouldCellUpdate(nextRecord, prevRecord);
    } // Legacy mode should always update


    if (perfRecord.renderWithProps) {
      return true;
    }

    return !(0,isEqual/* default */.Z)(prev, next, true);
  });
  return retData;
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Cell/useHoverState.js



/** Check if cell is in hover range */
function inHoverRange(cellStartRow, cellRowSpan, startRow, endRow) {
  var cellEndRow = cellStartRow + cellRowSpan - 1;
  return cellStartRow <= endRow && cellEndRow >= startRow;
}

function useHoverState(rowIndex, rowSpan) {
  return useContext(context_TableContext, function (ctx) {
    var hovering = inHoverRange(rowIndex, rowSpan || 1, ctx.hoverStartRow, ctx.hoverEndRow);
    return [hovering, ctx.onHover];
  });
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Cell/index.js













var getTitleFromCellRenderChildren = function getTitleFromCellRenderChildren(_ref) {
  var ellipsis = _ref.ellipsis,
      rowType = _ref.rowType,
      children = _ref.children;
  var title;
  var ellipsisConfig = ellipsis === true ? {
    showTitle: true
  } : ellipsis;

  if (ellipsisConfig && (ellipsisConfig.showTitle || rowType === 'header')) {
    if (typeof children === 'string' || typeof children === 'number') {
      title = children.toString();
    } else if ( /*#__PURE__*/react.isValidElement(children) && typeof children.props.children === 'string') {
      title = children.props.children;
    }
  }

  return title;
};

function Cell(props) {
  var _ref2, _ref3, _legacyCellProps$colS, _ref4, _ref5, _legacyCellProps$rowS, _additionalProps$titl, _classNames;

  if (false) {}

  var Component = props.component,
      children = props.children,
      ellipsis = props.ellipsis,
      scope = props.scope,
      prefixCls = props.prefixCls,
      className = props.className,
      align = props.align,
      record = props.record,
      render = props.render,
      dataIndex = props.dataIndex,
      renderIndex = props.renderIndex,
      shouldCellUpdate = props.shouldCellUpdate,
      index = props.index,
      rowType = props.rowType,
      colSpan = props.colSpan,
      rowSpan = props.rowSpan,
      fixLeft = props.fixLeft,
      fixRight = props.fixRight,
      firstFixLeft = props.firstFixLeft,
      lastFixLeft = props.lastFixLeft,
      firstFixRight = props.firstFixRight,
      lastFixRight = props.lastFixRight,
      appendNode = props.appendNode,
      _props$additionalProp = props.additionalProps,
      additionalProps = _props$additionalProp === void 0 ? {} : _props$additionalProp,
      isSticky = props.isSticky;
  var cellPrefixCls = "".concat(prefixCls, "-cell");

  var _useContext = useContext(context_TableContext, ['supportSticky', 'allColumnsFixedLeft']),
      supportSticky = _useContext.supportSticky,
      allColumnsFixedLeft = _useContext.allColumnsFixedLeft; // ====================== Value =======================


  var _useCellRender = useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate),
      _useCellRender2 = (0,slicedToArray/* default */.Z)(_useCellRender, 2),
      childNode = _useCellRender2[0],
      legacyCellProps = _useCellRender2[1]; // ====================== Fixed =======================


  var fixedStyle = {};
  var isFixLeft = typeof fixLeft === 'number' && supportSticky;
  var isFixRight = typeof fixRight === 'number' && supportSticky;

  if (isFixLeft) {
    fixedStyle.position = 'sticky';
    fixedStyle.left = fixLeft;
  }

  if (isFixRight) {
    fixedStyle.position = 'sticky';
    fixedStyle.right = fixRight;
  } // ================ RowSpan & ColSpan =================


  var mergedColSpan = (_ref2 = (_ref3 = (_legacyCellProps$colS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.colSpan) !== null && _legacyCellProps$colS !== void 0 ? _legacyCellProps$colS : colSpan) !== null && _ref3 !== void 0 ? _ref3 : additionalProps.colSpan) !== null && _ref2 !== void 0 ? _ref2 : 1;
  var mergedRowSpan = (_ref4 = (_ref5 = (_legacyCellProps$rowS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.rowSpan) !== null && _legacyCellProps$rowS !== void 0 ? _legacyCellProps$rowS : rowSpan) !== null && _ref5 !== void 0 ? _ref5 : additionalProps.rowSpan) !== null && _ref4 !== void 0 ? _ref4 : 1; // ====================== Hover =======================

  var _useHoverState = useHoverState(index, mergedRowSpan),
      _useHoverState2 = (0,slicedToArray/* default */.Z)(_useHoverState, 2),
      hovering = _useHoverState2[0],
      onHover = _useHoverState2[1];

  var onMouseEnter = function onMouseEnter(event) {
    var _additionalProps$onMo;

    if (record) {
      onHover(index, index + mergedRowSpan - 1);
    }

    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onMo = additionalProps.onMouseEnter) === null || _additionalProps$onMo === void 0 ? void 0 : _additionalProps$onMo.call(additionalProps, event);
  };

  var onMouseLeave = function onMouseLeave(event) {
    var _additionalProps$onMo2;

    if (record) {
      onHover(-1, -1);
    }

    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onMo2 = additionalProps.onMouseLeave) === null || _additionalProps$onMo2 === void 0 ? void 0 : _additionalProps$onMo2.call(additionalProps, event);
  }; // ====================== Render ======================


  if (mergedColSpan === 0 || mergedRowSpan === 0) {
    return null;
  } // >>>>> Title


  var title = (_additionalProps$titl = additionalProps.title) !== null && _additionalProps$titl !== void 0 ? _additionalProps$titl : getTitleFromCellRenderChildren({
    rowType: rowType,
    ellipsis: ellipsis,
    children: childNode
  }); // >>>>> ClassName

  var mergedClassName = classnames_default()(cellPrefixCls, className, (_classNames = {}, (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-left"), isFixLeft && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-left-first"), firstFixLeft && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-left-last"), lastFixLeft && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-left-all"), lastFixLeft && allColumnsFixedLeft && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-right"), isFixRight && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-right-first"), firstFixRight && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-right-last"), lastFixRight && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-ellipsis"), ellipsis), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-with-append"), appendNode), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-fix-sticky"), (isFixLeft || isFixRight) && isSticky && supportSticky), (0,defineProperty/* default */.Z)(_classNames, "".concat(cellPrefixCls, "-row-hover"), !legacyCellProps && hovering), _classNames), additionalProps.className, legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.className); // >>>>> Style

  var alignStyle = {};

  if (align) {
    alignStyle.textAlign = align;
  }

  var mergedStyle = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, additionalProps.style), alignStyle), fixedStyle), legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.style); // >>>>> Children Node


  var mergedChildNode = childNode; // Not crash if final \`childNode\` is not validate ReactNode

  if ((0,esm_typeof/* default */.Z)(mergedChildNode) === 'object' && !Array.isArray(mergedChildNode) && ! /*#__PURE__*/react.isValidElement(mergedChildNode)) {
    mergedChildNode = null;
  }

  if (ellipsis && (lastFixLeft || firstFixRight)) {
    mergedChildNode = /*#__PURE__*/react.createElement("span", {
      className: "".concat(cellPrefixCls, "-content")
    }, mergedChildNode);
  }

  return /*#__PURE__*/react.createElement(Component, (0,esm_extends/* default */.Z)({}, legacyCellProps, additionalProps, {
    className: mergedClassName,
    style: mergedStyle // A11y
    ,
    title: title,
    scope: scope // Hover
    ,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave //Span
    ,
    colSpan: mergedColSpan !== 1 ? mergedColSpan : null,
    rowSpan: mergedRowSpan !== 1 ? mergedRowSpan : null
  }), appendNode, mergedChildNode);
}

/* harmony default export */ var es_Cell = (/*#__PURE__*/react.memo(Cell));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/utils/fixUtil.js
function getCellFixedInfo(colStart, colEnd, columns, stickyOffsets, direction, curColumns) {
  var startColumn = columns[colStart] || {};
  var endColumn = columns[colEnd] || {};
  var fixLeft;
  var fixRight;

  if (startColumn.fixed === 'left') {
    fixLeft = stickyOffsets.left[colStart];
  } else if (endColumn.fixed === 'right') {
    fixRight = stickyOffsets.right[colEnd];
  }

  var lastFixLeft = false;
  var firstFixRight = false;
  var lastFixRight = false;
  var firstFixLeft = false;
  var nextColumn = columns[colEnd + 1];
  var prevColumn = columns[colStart - 1]; // no children only

  var canLastFix = !(curColumns !== null && curColumns !== void 0 && curColumns.children);

  if (direction === 'rtl') {
    if (fixLeft !== undefined) {
      var prevFixLeft = prevColumn && prevColumn.fixed === 'left';
      firstFixLeft = !prevFixLeft && canLastFix;
    } else if (fixRight !== undefined) {
      var nextFixRight = nextColumn && nextColumn.fixed === 'right';
      lastFixRight = !nextFixRight && canLastFix;
    }
  } else if (fixLeft !== undefined) {
    var nextFixLeft = nextColumn && nextColumn.fixed === 'left';
    lastFixLeft = !nextFixLeft && canLastFix;
  } else if (fixRight !== undefined) {
    var prevFixRight = prevColumn && prevColumn.fixed === 'right';
    firstFixRight = !prevFixRight && canLastFix;
  }

  return {
    fixLeft: fixLeft,
    fixRight: fixRight,
    lastFixLeft: lastFixLeft,
    firstFixRight: firstFixRight,
    lastFixRight: lastFixRight,
    firstFixLeft: firstFixLeft,
    isSticky: stickyOffsets.isSticky
  };
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Footer/SummaryContext.js

var SummaryContext = /*#__PURE__*/react.createContext({});
/* harmony default export */ var Footer_SummaryContext = (SummaryContext);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Footer/Cell.js







function SummaryCell(_ref) {
  var className = _ref.className,
      index = _ref.index,
      children = _ref.children,
      _ref$colSpan = _ref.colSpan,
      colSpan = _ref$colSpan === void 0 ? 1 : _ref$colSpan,
      rowSpan = _ref.rowSpan,
      align = _ref.align;

  var _useContext = useContext(context_TableContext, ['prefixCls', 'direction']),
      prefixCls = _useContext.prefixCls,
      direction = _useContext.direction;

  var _React$useContext = react.useContext(Footer_SummaryContext),
      scrollColumnIndex = _React$useContext.scrollColumnIndex,
      stickyOffsets = _React$useContext.stickyOffsets,
      flattenColumns = _React$useContext.flattenColumns,
      columns = _React$useContext.columns;

  var lastIndex = index + colSpan - 1;
  var mergedColSpan = lastIndex + 1 === scrollColumnIndex ? colSpan + 1 : colSpan;
  var fixedInfo = getCellFixedInfo(index, index + mergedColSpan - 1, flattenColumns, stickyOffsets, direction, columns === null || columns === void 0 ? void 0 : columns[index]);
  return /*#__PURE__*/react.createElement(es_Cell, (0,esm_extends/* default */.Z)({
    className: className,
    index: index,
    component: "td",
    prefixCls: prefixCls,
    record: null,
    dataIndex: null,
    align: align,
    colSpan: mergedColSpan,
    rowSpan: rowSpan,
    render: function render() {
      return children;
    }
  }, fixedInfo));
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Footer/Row.js

var Row_excluded = ["children"];

function FooterRow(_ref) {
  var children = _ref.children,
      props = (0,objectWithoutProperties/* default */.Z)(_ref, Row_excluded);

  return /*#__PURE__*/react.createElement("tr", props, children);
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Footer/Summary.js



/**
 * Syntactic sugar. Do not support HOC.
 */
function Summary(_ref) {
  var children = _ref.children;
  return children;
}

Summary.Row = FooterRow;
Summary.Cell = SummaryCell;
/* harmony default export */ var Footer_Summary = (Summary);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Footer/index.js







function Footer(props) {
  if (false) {}

  var children = props.children,
      stickyOffsets = props.stickyOffsets,
      flattenColumns = props.flattenColumns,
      columns = props.columns;
  var prefixCls = useContext(context_TableContext, 'prefixCls');
  var lastColumnIndex = flattenColumns.length - 1;
  var scrollColumn = flattenColumns[lastColumnIndex];
  var summaryContext = react.useMemo(function () {
    return {
      stickyOffsets: stickyOffsets,
      flattenColumns: flattenColumns,
      scrollColumnIndex: scrollColumn !== null && scrollColumn !== void 0 && scrollColumn.scrollbar ? lastColumnIndex : null,
      columns: columns
    };
  }, [scrollColumn, flattenColumns, lastColumnIndex, stickyOffsets, columns]);
  return /*#__PURE__*/react.createElement(Footer_SummaryContext.Provider, {
    value: summaryContext
  }, /*#__PURE__*/react.createElement("tfoot", {
    className: "".concat(prefixCls, "-summary")
  }, children));
}

/* harmony default export */ var es_Footer = (responseImmutable(Footer));
var FooterComponents = Footer_Summary;
// EXTERNAL MODULE: ./node_modules/rc-resize-observer/es/index.js + 4 modules
var rc_resize_observer_es = __webpack_require__(48555);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/isVisible.js
var isVisible = __webpack_require__(5110);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/styleChecker.js
var styleChecker = __webpack_require__(79370);
// EXTERNAL MODULE: ./node_modules/rc-util/es/getScrollBarSize.js
var getScrollBarSize = __webpack_require__(74204);
// EXTERNAL MODULE: ./node_modules/rc-util/es/pickAttrs.js
var pickAttrs = __webpack_require__(64217);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules
var toConsumableArray = __webpack_require__(74902);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useFlattenRecords.js



// recursion (flat tree structure)
function flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey, index) {
  var arr = [];
  arr.push({
    record: record,
    indent: indent,
    index: index
  });
  var key = getRowKey(record);
  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);

  if (record && Array.isArray(record[childrenColumnName]) && expanded) {
    // expanded state, flat record
    for (var i = 0; i < record[childrenColumnName].length; i += 1) {
      var tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);
      arr.push.apply(arr, (0,toConsumableArray/* default */.Z)(tempArr));
    }
  }

  return arr;
}
/**
 * flat tree data on expanded state
 *
 * @export
 * @template T
 * @param {*} data : table data
 * @param {string} childrenColumnName : \u6307\u5B9A\u6811\u5F62\u7ED3\u6784\u7684\u5217\u540D
 * @param {Set<Key>} expandedKeys : \u5C55\u5F00\u7684\u884C\u5BF9\u5E94\u7684keys
 * @param {GetRowKey<T>} getRowKey  : \u83B7\u53D6\u5F53\u524DrowKey\u7684\u65B9\u6CD5
 * @returns flattened data
 */


function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {
  var arr = react.useMemo(function () {
    if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {
      var temp = []; // collect flattened record

      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {
        var record = data[i];
        temp.push.apply(temp, (0,toConsumableArray/* default */.Z)(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey, i)));
      }

      return temp;
    }

    return data === null || data === void 0 ? void 0 : data.map(function (item, index) {
      return {
        record: item,
        indent: 0,
        index: index
      };
    });
  }, [data, childrenColumnName, expandedKeys, getRowKey]);
  return arr;
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Body/ExpandedRow.js






function ExpandedRow(props) {
  if (false) {}

  var prefixCls = props.prefixCls,
      children = props.children,
      Component = props.component,
      cellComponent = props.cellComponent,
      className = props.className,
      expanded = props.expanded,
      colSpan = props.colSpan,
      isEmpty = props.isEmpty;

  var _useContext = useContext(context_TableContext, ['scrollbarSize', 'fixHeader', 'fixColumn', 'componentWidth', 'horizonScroll']),
      scrollbarSize = _useContext.scrollbarSize,
      fixHeader = _useContext.fixHeader,
      fixColumn = _useContext.fixColumn,
      componentWidth = _useContext.componentWidth,
      horizonScroll = _useContext.horizonScroll; // Cache render node


  var contentNode = children;

  if (isEmpty ? horizonScroll : fixColumn) {
    contentNode = /*#__PURE__*/react.createElement("div", {
      style: {
        width: componentWidth - (fixHeader ? scrollbarSize : 0),
        position: 'sticky',
        left: 0,
        overflow: 'hidden'
      },
      className: "".concat(prefixCls, "-expanded-row-fixed")
    }, componentWidth !== 0 && contentNode);
  }

  return /*#__PURE__*/react.createElement(Component, {
    className: className,
    style: {
      display: expanded ? null : 'none'
    }
  }, /*#__PURE__*/react.createElement(es_Cell, {
    component: cellComponent,
    prefixCls: prefixCls,
    colSpan: colSpan
  }, contentNode));
}

/* harmony default export */ var Body_ExpandedRow = (ExpandedRow);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Body/BodyRow.js












function BodyRow(props) {
  if (false) {}

  var className = props.className,
      style = props.style,
      record = props.record,
      index = props.index,
      renderIndex = props.renderIndex,
      rowKey = props.rowKey,
      rowExpandable = props.rowExpandable,
      expandedKeys = props.expandedKeys,
      onRow = props.onRow,
      _props$indent = props.indent,
      indent = _props$indent === void 0 ? 0 : _props$indent,
      RowComponent = props.rowComponent,
      cellComponent = props.cellComponent,
      scopeCellComponent = props.scopeCellComponent,
      childrenColumnName = props.childrenColumnName;

  var _useContext = useContext(context_TableContext, ['prefixCls', 'fixedInfoList', 'flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex']),
      prefixCls = _useContext.prefixCls,
      fixedInfoList = _useContext.fixedInfoList,
      flattenColumns = _useContext.flattenColumns,
      expandableType = _useContext.expandableType,
      expandRowByClick = _useContext.expandRowByClick,
      onTriggerExpand = _useContext.onTriggerExpand,
      rowClassName = _useContext.rowClassName,
      expandedRowClassName = _useContext.expandedRowClassName,
      indentSize = _useContext.indentSize,
      expandIcon = _useContext.expandIcon,
      expandedRowRender = _useContext.expandedRowRender,
      expandIconColumnIndex = _useContext.expandIconColumnIndex;

  var _React$useState = react.useState(false),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      expandRended = _React$useState2[0],
      setExpandRended = _React$useState2[1];

  if (false) {}

  var expanded = expandedKeys && expandedKeys.has(rowKey);
  react.useEffect(function () {
    if (expanded) {
      setExpandRended(true);
    }
  }, [expanded]);
  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and \`children\` exist in record

  var nestExpandable = expandableType === 'nest';
  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];
  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================

  var onExpandRef = react.useRef(onTriggerExpand);
  onExpandRef.current = onTriggerExpand;

  var onInternalTriggerExpand = function onInternalTriggerExpand() {
    onExpandRef.current.apply(onExpandRef, arguments);
  }; // =========================== onRow ===========================


  var additionalProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, index);

  var onClick = function onClick(event) {
    var _additionalProps$onCl;

    if (expandRowByClick && mergedExpandable) {
      onInternalTriggerExpand(record, event);
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onCl = additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [additionalProps, event].concat(args));
  }; // ======================== Base tr row ========================


  var computeRowClassName;

  if (typeof rowClassName === 'string') {
    computeRowClassName = rowClassName;
  } else if (typeof rowClassName === 'function') {
    computeRowClassName = rowClassName(record, index, indent);
  }

  var columnsKey = getColumnsKey(flattenColumns);
  var baseRowNode = /*#__PURE__*/react.createElement(RowComponent, (0,esm_extends/* default */.Z)({}, additionalProps, {
    "data-row-key": rowKey,
    className: classnames_default()(className, "".concat(prefixCls, "-row"), "".concat(prefixCls, "-row-level-").concat(indent), computeRowClassName, additionalProps && additionalProps.className),
    style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, style), additionalProps ? additionalProps.style : null),
    onClick: onClick
  }), flattenColumns.map(function (column, colIndex) {
    var render = column.render,
        dataIndex = column.dataIndex,
        columnClassName = column.className;
    var key = columnsKey[colIndex];
    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============

    var appendCellNode;

    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {
      appendCellNode = /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("span", {
        style: {
          paddingLeft: "".concat(indentSize * indent, "px")
        },
        className: "".concat(prefixCls, "-row-indent indent-level-").concat(indent)
      }), expandIcon({
        prefixCls: prefixCls,
        expanded: expanded,
        expandable: hasNestChildren,
        record: record,
        onExpand: onInternalTriggerExpand
      }));
    }

    var additionalCellProps;

    if (column.onCell) {
      additionalCellProps = column.onCell(record, index);
    }

    return /*#__PURE__*/react.createElement(es_Cell, (0,esm_extends/* default */.Z)({
      className: columnClassName,
      ellipsis: column.ellipsis,
      align: column.align,
      scope: column.rowScope,
      component: column.rowScope ? scopeCellComponent : cellComponent,
      prefixCls: prefixCls,
      key: key,
      record: record,
      index: index,
      renderIndex: renderIndex,
      dataIndex: dataIndex,
      render: render,
      shouldCellUpdate: column.shouldCellUpdate,
      expanded: appendCellNode && expanded
    }, fixedInfo, {
      appendNode: appendCellNode,
      additionalProps: additionalCellProps
    }));
  })); // ======================== Expand Row =========================

  var expandRowNode;

  if (rowSupportExpand && (expandRended || expanded)) {
    var expandContent = expandedRowRender(record, index, indent + 1, expanded);
    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);
    expandRowNode = /*#__PURE__*/react.createElement(Body_ExpandedRow, {
      expanded: expanded,
      className: classnames_default()("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), computedExpandedRowClassName),
      prefixCls: prefixCls,
      component: RowComponent,
      cellComponent: cellComponent,
      colSpan: flattenColumns.length,
      isEmpty: false
    }, expandContent);
  }

  return /*#__PURE__*/react.createElement(react.Fragment, null, baseRowNode, expandRowNode);
}

BodyRow.displayName = 'BodyRow';
/* harmony default export */ var Body_BodyRow = (responseImmutable(BodyRow));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Body/MeasureCell.js


function MeasureCell(_ref) {
  var columnKey = _ref.columnKey,
      onColumnResize = _ref.onColumnResize;
  var cellRef = react.useRef();
  react.useEffect(function () {
    if (cellRef.current) {
      onColumnResize(columnKey, cellRef.current.offsetWidth);
    }
  }, []);
  return /*#__PURE__*/react.createElement(rc_resize_observer_es/* default */.Z, {
    data: columnKey
  }, /*#__PURE__*/react.createElement("td", {
    ref: cellRef,
    style: {
      padding: 0,
      border: 0,
      height: 0
    }
  }, /*#__PURE__*/react.createElement("div", {
    style: {
      height: 0,
      overflow: 'hidden'
    }
  }, "\\xA0")));
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Body/MeasureRow.js



function MeasureRow(_ref) {
  var prefixCls = _ref.prefixCls,
      columnsKey = _ref.columnsKey,
      onColumnResize = _ref.onColumnResize;
  return /*#__PURE__*/react.createElement("tr", {
    "aria-hidden": "true",
    className: "".concat(prefixCls, "-measure-row"),
    style: {
      height: 0,
      fontSize: 0
    }
  }, /*#__PURE__*/react.createElement(rc_resize_observer_es/* default.Collection */.Z.Collection, {
    onBatchResize: function onBatchResize(infoList) {
      infoList.forEach(function (_ref2) {
        var columnKey = _ref2.data,
            size = _ref2.size;
        onColumnResize(columnKey, size.offsetWidth);
      });
    }
  }, columnsKey.map(function (columnKey) {
    return /*#__PURE__*/react.createElement(MeasureCell, {
      key: columnKey,
      columnKey: columnKey,
      onColumnResize: onColumnResize
    });
  })));
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Body/index.js











function Body(props) {
  if (false) {}

  var data = props.data,
      getRowKey = props.getRowKey,
      measureColumnWidth = props.measureColumnWidth,
      expandedKeys = props.expandedKeys,
      onRow = props.onRow,
      rowExpandable = props.rowExpandable,
      emptyNode = props.emptyNode,
      childrenColumnName = props.childrenColumnName;

  var _useContext = useContext(context_TableContext, ['prefixCls', 'getComponent', 'onColumnResize', 'flattenColumns']),
      prefixCls = _useContext.prefixCls,
      getComponent = _useContext.getComponent,
      onColumnResize = _useContext.onColumnResize,
      flattenColumns = _useContext.flattenColumns;

  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // =================== Performance ====================

  var perfRef = react.useRef({
    renderWithProps: false
  }); // ====================== Render ======================

  var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');
  var trComponent = getComponent(['body', 'row'], 'tr');
  var tdComponent = getComponent(['body', 'cell'], 'td');
  var thComponent = getComponent(['body', 'cell'], 'th');
  var rows;

  if (data.length) {
    rows = flattenData.map(function (item, idx) {
      var record = item.record,
          indent = item.indent,
          renderIndex = item.index;
      var key = getRowKey(record, idx);
      return /*#__PURE__*/react.createElement(Body_BodyRow, {
        key: key,
        rowKey: key,
        record: record,
        index: idx,
        renderIndex: renderIndex,
        rowComponent: trComponent,
        cellComponent: tdComponent,
        scopeCellComponent: thComponent,
        expandedKeys: expandedKeys,
        onRow: onRow,
        getRowKey: getRowKey,
        rowExpandable: rowExpandable,
        childrenColumnName: childrenColumnName,
        indent: indent
      });
    });
  } else {
    rows = /*#__PURE__*/react.createElement(Body_ExpandedRow, {
      expanded: true,
      className: "".concat(prefixCls, "-placeholder"),
      prefixCls: prefixCls,
      component: trComponent,
      cellComponent: tdComponent,
      colSpan: flattenColumns.length,
      isEmpty: true
    }, emptyNode);
  }

  var columnsKey = getColumnsKey(flattenColumns);
  return /*#__PURE__*/react.createElement(context_PerfContext.Provider, {
    value: perfRef.current
  }, /*#__PURE__*/react.createElement(WrapperComponent, {
    className: "".concat(prefixCls, "-tbody")
  }, measureColumnWidth && /*#__PURE__*/react.createElement(MeasureRow, {
    prefixCls: prefixCls,
    columnsKey: columnsKey,
    onColumnResize: onColumnResize
  }), rows));
}

Body.displayName = 'Body';
/* harmony default export */ var es_Body = (responseImmutable(Body));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/utils/legacyUtil.js


var legacyUtil_excluded = ["expandable"];

var INTERNAL_COL_DEFINE = 'RC_TABLE_INTERNAL_COL_DEFINE';
function getExpandableProps(props) {
  var expandable = props.expandable,
      legacyExpandableConfig = (0,objectWithoutProperties/* default */.Z)(props, legacyUtil_excluded);

  var config;

  if ('expandable' in props) {
    config = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, legacyExpandableConfig), expandable);
  } else {
    if (false) {}

    config = legacyExpandableConfig;
  }

  if (config.showExpandColumn === false) {
    config.expandIconColumnIndex = -1;
  }

  return config;
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/ColGroup.js


var ColGroup_excluded = ["columnType"];



function ColGroup(_ref) {
  var colWidths = _ref.colWidths,
      columns = _ref.columns,
      columCount = _ref.columCount;
  var cols = [];
  var len = columCount || columns.length; // Only insert col with width & additional props
  // Skip if rest col do not have any useful info

  var mustInsert = false;

  for (var i = len - 1; i >= 0; i -= 1) {
    var width = colWidths[i];
    var column = columns && columns[i];
    var additionalProps = column && column[INTERNAL_COL_DEFINE];

    if (width || additionalProps || mustInsert) {
      var _ref2 = additionalProps || {},
          columnType = _ref2.columnType,
          restAdditionalProps = (0,objectWithoutProperties/* default */.Z)(_ref2, ColGroup_excluded);

      cols.unshift( /*#__PURE__*/react.createElement("col", (0,esm_extends/* default */.Z)({
        key: i,
        style: {
          width: width
        }
      }, restAdditionalProps)));
      mustInsert = true;
    }
  }

  return /*#__PURE__*/react.createElement("colgroup", null, cols);
}

/* harmony default export */ var es_ColGroup = (ColGroup);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/FixedHolder/index.js




var FixedHolder_excluded = ["className", "noData", "columns", "flattenColumns", "colWidths", "columCount", "stickyOffsets", "direction", "fixHeader", "stickyTopOffset", "stickyBottomOffset", "stickyClassName", "onScroll", "maxContentScroll", "children"];









function useColumnWidth(colWidths, columCount) {
  return (0,react.useMemo)(function () {
    var cloneColumns = [];

    for (var i = 0; i < columCount; i += 1) {
      var val = colWidths[i];

      if (val !== undefined) {
        cloneColumns[i] = val;
      } else {
        return null;
      }
    }

    return cloneColumns;
  }, [colWidths.join('_'), columCount]);
}

var FixedHolder = /*#__PURE__*/react.forwardRef(function (props, ref) {
  if (false) {}

  var className = props.className,
      noData = props.noData,
      columns = props.columns,
      flattenColumns = props.flattenColumns,
      colWidths = props.colWidths,
      columCount = props.columCount,
      stickyOffsets = props.stickyOffsets,
      direction = props.direction,
      fixHeader = props.fixHeader,
      stickyTopOffset = props.stickyTopOffset,
      stickyBottomOffset = props.stickyBottomOffset,
      stickyClassName = props.stickyClassName,
      onScroll = props.onScroll,
      maxContentScroll = props.maxContentScroll,
      children = props.children,
      restProps = (0,objectWithoutProperties/* default */.Z)(props, FixedHolder_excluded);

  var _useContext = useContext(context_TableContext, ['prefixCls', 'scrollbarSize', 'isSticky']),
      prefixCls = _useContext.prefixCls,
      scrollbarSize = _useContext.scrollbarSize,
      isSticky = _useContext.isSticky;

  var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize; // Pass wheel to scroll event

  var scrollRef = react.useRef(null);
  var setScrollRef = react.useCallback(function (element) {
    (0,es_ref/* fillRef */.mH)(ref, element);
    (0,es_ref/* fillRef */.mH)(scrollRef, element);
  }, []);
  react.useEffect(function () {
    var _scrollRef$current;

    function onWheel(e) {
      var _ref = e,
          currentTarget = _ref.currentTarget,
          deltaX = _ref.deltaX;

      if (deltaX) {
        onScroll({
          currentTarget: currentTarget,
          scrollLeft: currentTarget.scrollLeft + deltaX
        });
        e.preventDefault();
      }
    }

    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.addEventListener('wheel', onWheel);
    return function () {
      var _scrollRef$current2;

      (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.removeEventListener('wheel', onWheel);
    };
  }, []); // Check if all flattenColumns has width

  var allFlattenColumnsWithWidth = react.useMemo(function () {
    return flattenColumns.every(function (column) {
      return column.width >= 0;
    });
  }, [flattenColumns]); // Add scrollbar column

  var lastColumn = flattenColumns[flattenColumns.length - 1];
  var ScrollBarColumn = {
    fixed: lastColumn ? lastColumn.fixed : null,
    scrollbar: true,
    onHeaderCell: function onHeaderCell() {
      return {
        className: "".concat(prefixCls, "-cell-scrollbar")
      };
    }
  };
  var columnsWithScrollbar = (0,react.useMemo)(function () {
    return combinationScrollBarSize ? [].concat((0,toConsumableArray/* default */.Z)(columns), [ScrollBarColumn]) : columns;
  }, [combinationScrollBarSize, columns]);
  var flattenColumnsWithScrollbar = (0,react.useMemo)(function () {
    return combinationScrollBarSize ? [].concat((0,toConsumableArray/* default */.Z)(flattenColumns), [ScrollBarColumn]) : flattenColumns;
  }, [combinationScrollBarSize, flattenColumns]); // Calculate the sticky offsets

  var headerStickyOffsets = (0,react.useMemo)(function () {
    var right = stickyOffsets.right,
        left = stickyOffsets.left;
    return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, stickyOffsets), {}, {
      left: direction === 'rtl' ? [].concat((0,toConsumableArray/* default */.Z)(left.map(function (width) {
        return width + combinationScrollBarSize;
      })), [0]) : left,
      right: direction === 'rtl' ? right : [].concat((0,toConsumableArray/* default */.Z)(right.map(function (width) {
        return width + combinationScrollBarSize;
      })), [0]),
      isSticky: isSticky
    });
  }, [combinationScrollBarSize, stickyOffsets, isSticky]);
  var mergedColumnWidth = useColumnWidth(colWidths, columCount);
  return /*#__PURE__*/react.createElement("div", {
    style: (0,objectSpread2/* default */.Z)({
      overflow: 'hidden'
    }, isSticky ? {
      top: stickyTopOffset,
      bottom: stickyBottomOffset
    } : {}),
    ref: setScrollRef,
    className: classnames_default()(className, (0,defineProperty/* default */.Z)({}, stickyClassName, !!stickyClassName))
  }, /*#__PURE__*/react.createElement("table", {
    style: {
      tableLayout: 'fixed',
      visibility: noData || mergedColumnWidth ? null : 'hidden'
    }
  }, (!noData || !maxContentScroll || allFlattenColumnsWithWidth) && /*#__PURE__*/react.createElement(es_ColGroup, {
    colWidths: mergedColumnWidth ? [].concat((0,toConsumableArray/* default */.Z)(mergedColumnWidth), [combinationScrollBarSize]) : [],
    columCount: columCount + 1,
    columns: flattenColumnsWithScrollbar
  }), children((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, restProps), {}, {
    stickyOffsets: headerStickyOffsets,
    columns: columnsWithScrollbar,
    flattenColumns: flattenColumnsWithScrollbar
  }))));
});
FixedHolder.displayName = 'FixedHolder';
/** Return a table in div as fixed element which contains sticky info */
// export default responseImmutable(FixedHolder);

/* harmony default export */ var es_FixedHolder = (/*#__PURE__*/react.memo(FixedHolder));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Header/HeaderRow.js








function HeaderRow(_ref) {
  var cells = _ref.cells,
      stickyOffsets = _ref.stickyOffsets,
      flattenColumns = _ref.flattenColumns,
      RowComponent = _ref.rowComponent,
      CellComponent = _ref.cellComponent,
      tdCellComponent = _ref.tdCellComponent,
      onHeaderRow = _ref.onHeaderRow,
      index = _ref.index;

  var _useContext = useContext(context_TableContext, ['prefixCls', 'direction']),
      prefixCls = _useContext.prefixCls,
      direction = _useContext.direction;

  var rowProps;

  if (onHeaderRow) {
    rowProps = onHeaderRow(cells.map(function (cell) {
      return cell.column;
    }), index);
  }

  var columnsKey = getColumnsKey(cells.map(function (cell) {
    return cell.column;
  }));
  return /*#__PURE__*/react.createElement(RowComponent, rowProps, cells.map(function (cell, cellIndex) {
    var column = cell.column;
    var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction, column);
    var additionalProps;

    if (column && column.onHeaderCell) {
      additionalProps = cell.column.onHeaderCell(column);
    }

    return /*#__PURE__*/react.createElement(es_Cell, (0,esm_extends/* default */.Z)({}, cell, {
      scope: column.title ? cell.colSpan > 1 ? 'colgroup' : 'col' : null,
      ellipsis: column.ellipsis,
      align: column.align,
      component: column.title ? CellComponent : tdCellComponent,
      prefixCls: prefixCls,
      key: columnsKey[cellIndex]
    }, fixedInfo, {
      additionalProps: additionalProps,
      rowType: "header"
    }));
  }));
}

HeaderRow.displayName = 'HeaderRow';
/* harmony default export */ var Header_HeaderRow = (HeaderRow);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Header/Header.js






function parseHeaderRows(rootColumns) {
  var rows = [];

  function fillRowCells(columns, colIndex) {
    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    // Init rows
    rows[rowIndex] = rows[rowIndex] || [];
    var currentColIndex = colIndex;
    var colSpans = columns.filter(Boolean).map(function (column) {
      var cell = {
        key: column.key,
        className: column.className || '',
        children: column.title,
        column: column,
        colStart: currentColIndex
      };
      var colSpan = 1;
      var subColumns = column.children;

      if (subColumns && subColumns.length > 0) {
        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {
          return total + count;
        }, 0);
        cell.hasSubColumns = true;
      }

      if ('colSpan' in column) {
        colSpan = column.colSpan;
      }

      if ('rowSpan' in column) {
        cell.rowSpan = column.rowSpan;
      }

      cell.colSpan = colSpan;
      cell.colEnd = cell.colStart + colSpan - 1;
      rows[rowIndex].push(cell);
      currentColIndex += colSpan;
      return colSpan;
    });
    return colSpans;
  } // Generate \`rows\` cell data


  fillRowCells(rootColumns, 0); // Handle \`rowSpan\`

  var rowCount = rows.length;

  var _loop = function _loop(rowIndex) {
    rows[rowIndex].forEach(function (cell) {
      if (!('rowSpan' in cell) && !cell.hasSubColumns) {
        // eslint-disable-next-line no-param-reassign
        cell.rowSpan = rowCount - rowIndex;
      }
    });
  };

  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
    _loop(rowIndex);
  }

  return rows;
}

function Header(props) {
  if (false) {}

  var stickyOffsets = props.stickyOffsets,
      columns = props.columns,
      flattenColumns = props.flattenColumns,
      onHeaderRow = props.onHeaderRow;

  var _useContext = useContext(context_TableContext, ['prefixCls', 'getComponent']),
      prefixCls = _useContext.prefixCls,
      getComponent = _useContext.getComponent;

  var rows = react.useMemo(function () {
    return parseHeaderRows(columns);
  }, [columns]);
  var WrapperComponent = getComponent(['header', 'wrapper'], 'thead');
  var trComponent = getComponent(['header', 'row'], 'tr');
  var thComponent = getComponent(['header', 'cell'], 'th');
  var tdComponent = getComponent(['header', 'cell'], 'td');
  return /*#__PURE__*/react.createElement(WrapperComponent, {
    className: "".concat(prefixCls, "-thead")
  }, rows.map(function (row, rowIndex) {
    var rowNode = /*#__PURE__*/react.createElement(Header_HeaderRow, {
      key: rowIndex,
      flattenColumns: flattenColumns,
      cells: row,
      stickyOffsets: stickyOffsets,
      rowComponent: trComponent,
      cellComponent: thComponent,
      tdCellComponent: tdComponent,
      onHeaderRow: onHeaderRow,
      index: rowIndex
    });
    return rowNode;
  }));
}

/* harmony default export */ var Header_Header = (responseImmutable(Header));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useColumns.js




var useColumns_excluded = ["children"],
    _excluded2 = ["fixed"];





function convertChildrenToColumns(children) {
  return (0,Children_toArray/* default */.Z)(children).filter(function (node) {
    return /*#__PURE__*/react.isValidElement(node);
  }).map(function (_ref) {
    var key = _ref.key,
        props = _ref.props;

    var nodeChildren = props.children,
        restProps = (0,objectWithoutProperties/* default */.Z)(props, useColumns_excluded);

    var column = (0,objectSpread2/* default */.Z)({
      key: key
    }, restProps);

    if (nodeChildren) {
      column.children = convertChildrenToColumns(nodeChildren);
    }

    return column;
  });
}

function flatColumns(columns) {
  return columns.reduce(function (list, column) {
    var fixed = column.fixed; // Convert \`fixed='true'\` to \`fixed='left'\` instead

    var parsedFixed = fixed === true ? 'left' : fixed;
    var subColumns = column.children;

    if (subColumns && subColumns.length > 0) {
      return [].concat((0,toConsumableArray/* default */.Z)(list), (0,toConsumableArray/* default */.Z)(flatColumns(subColumns).map(function (subColum) {
        return (0,objectSpread2/* default */.Z)({
          fixed: parsedFixed
        }, subColum);
      })));
    }

    return [].concat((0,toConsumableArray/* default */.Z)(list), [(0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, column), {}, {
      fixed: parsedFixed
    })]);
  }, []);
}

function warningFixed(flattenColumns) {
  var allFixLeft = true;

  for (var i = 0; i < flattenColumns.length; i += 1) {
    var col = flattenColumns[i];

    if (allFixLeft && col.fixed !== 'left') {
      allFixLeft = false;
    } else if (!allFixLeft && col.fixed === 'left') {
      warning(false, "Index ".concat(i - 1, " of \`columns\` missing \`fixed='left'\` prop."));
      break;
    }
  }

  var allFixRight = true;

  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {
    var _col = flattenColumns[_i];

    if (allFixRight && _col.fixed !== 'right') {
      allFixRight = false;
    } else if (!allFixRight && _col.fixed === 'right') {
      warning(false, "Index ".concat(_i + 1, " of \`columns\` missing \`fixed='right'\` prop."));
      break;
    }
  }
}

function revertForRtl(columns) {
  return columns.map(function (column) {
    var fixed = column.fixed,
        restProps = (0,objectWithoutProperties/* default */.Z)(column, _excluded2); // Convert \`fixed='left'\` to \`fixed='right'\` instead


    var parsedFixed = fixed;

    if (fixed === 'left') {
      parsedFixed = 'right';
    } else if (fixed === 'right') {
      parsedFixed = 'left';
    }

    return (0,objectSpread2/* default */.Z)({
      fixed: parsedFixed
    }, restProps);
  });
}
/**
 * Parse \`columns\` & \`children\` into \`columns\`.
 */


function useColumns(_ref2, transformColumns) {
  var prefixCls = _ref2.prefixCls,
      columns = _ref2.columns,
      children = _ref2.children,
      expandable = _ref2.expandable,
      expandedKeys = _ref2.expandedKeys,
      columnTitle = _ref2.columnTitle,
      getRowKey = _ref2.getRowKey,
      onTriggerExpand = _ref2.onTriggerExpand,
      expandIcon = _ref2.expandIcon,
      rowExpandable = _ref2.rowExpandable,
      expandIconColumnIndex = _ref2.expandIconColumnIndex,
      direction = _ref2.direction,
      expandRowByClick = _ref2.expandRowByClick,
      columnWidth = _ref2.columnWidth,
      fixed = _ref2.fixed;
  var baseColumns = react.useMemo(function () {
    return columns || convertChildrenToColumns(children);
  }, [columns, children]); // ========================== Expand ==========================

  var withExpandColumns = react.useMemo(function () {
    if (expandable) {
      var _expandColumn;

      var cloneColumns = baseColumns.slice(); // >>> Warning if use \`expandIconColumnIndex\`

      if (false) {} // >>> Insert expand column if not exist


      if (!cloneColumns.includes(EXPAND_COLUMN)) {
        var expandColIndex = expandIconColumnIndex || 0;

        if (expandColIndex >= 0) {
          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);
        }
      } // >>> Deduplicate additional expand column


      if (false) {}

      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);
      cloneColumns = cloneColumns.filter(function (column, index) {
        return column !== EXPAND_COLUMN || index === expandColumnIndex;
      }); // >>> Check if expand column need to fixed

      var prevColumn = baseColumns[expandColumnIndex];
      var fixedColumn;

      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {
        fixedColumn = 'left';
      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {
        fixedColumn = 'right';
      } else {
        fixedColumn = prevColumn ? prevColumn.fixed : null;
      } // >>> Create expandable column


      var expandColumn = (_expandColumn = {}, (0,defineProperty/* default */.Z)(_expandColumn, INTERNAL_COL_DEFINE, {
        className: "".concat(prefixCls, "-expand-icon-col"),
        columnType: 'EXPAND_COLUMN'
      }), (0,defineProperty/* default */.Z)(_expandColumn, "title", columnTitle), (0,defineProperty/* default */.Z)(_expandColumn, "fixed", fixedColumn), (0,defineProperty/* default */.Z)(_expandColumn, "className", "".concat(prefixCls, "-row-expand-icon-cell")), (0,defineProperty/* default */.Z)(_expandColumn, "width", columnWidth), (0,defineProperty/* default */.Z)(_expandColumn, "render", function render(_, record, index) {
        var rowKey = getRowKey(record, index);
        var expanded = expandedKeys.has(rowKey);
        var recordExpandable = rowExpandable ? rowExpandable(record) : true;
        var icon = expandIcon({
          prefixCls: prefixCls,
          expanded: expanded,
          expandable: recordExpandable,
          record: record,
          onExpand: onTriggerExpand
        });

        if (expandRowByClick) {
          return /*#__PURE__*/react.createElement("span", {
            onClick: function onClick(e) {
              return e.stopPropagation();
            }
          }, icon);
        }

        return icon;
      }), _expandColumn);
      return cloneColumns.map(function (col) {
        return col === EXPAND_COLUMN ? expandColumn : col;
      });
    }

    if (false) {}

    return baseColumns.filter(function (col) {
      return col !== EXPAND_COLUMN;
    });
  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================

  var mergedColumns = react.useMemo(function () {
    var finalColumns = withExpandColumns;

    if (transformColumns) {
      finalColumns = transformColumns(finalColumns);
    } // Always provides at least one column for table display


    if (!finalColumns.length) {
      finalColumns = [{
        render: function render() {
          return null;
        }
      }];
    }

    return finalColumns;
  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================

  var flattenColumns = react.useMemo(function () {
    if (direction === 'rtl') {
      return revertForRtl(flatColumns(mergedColumns));
    }

    return flatColumns(mergedColumns);
  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render

  if (false) {}

  return [mergedColumns, flattenColumns];
}

/* harmony default export */ var hooks_useColumns = (useColumns);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/utils/expandUtil.js



function renderExpandIcon(_ref) {
  var _classNames;

  var prefixCls = _ref.prefixCls,
      record = _ref.record,
      onExpand = _ref.onExpand,
      expanded = _ref.expanded,
      expandable = _ref.expandable;
  var expandClassName = "".concat(prefixCls, "-row-expand-icon");

  if (!expandable) {
    return /*#__PURE__*/react.createElement("span", {
      className: classnames_default()(expandClassName, "".concat(prefixCls, "-row-spaced"))
    });
  }

  var onClick = function onClick(event) {
    onExpand(record, event);
    event.stopPropagation();
  };

  return /*#__PURE__*/react.createElement("span", {
    className: classnames_default()(expandClassName, (_classNames = {}, (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-row-expanded"), expanded), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-row-collapsed"), !expanded), _classNames)),
    onClick: onClick
  });
}
function findAllChildrenKeys(data, getRowKey, childrenColumnName) {
  var keys = [];

  function dig(list) {
    (list || []).forEach(function (item, index) {
      keys.push(getRowKey(item, index));
      dig(item[childrenColumnName]);
    });
  }

  dig(data);
  return keys;
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useExpand.js








function useExpand(props, mergedData, getRowKey) {
  var expandableConfig = getExpandableProps(props);
  var expandIcon = expandableConfig.expandIcon,
      expandedRowKeys = expandableConfig.expandedRowKeys,
      defaultExpandedRowKeys = expandableConfig.defaultExpandedRowKeys,
      defaultExpandAllRows = expandableConfig.defaultExpandAllRows,
      expandedRowRender = expandableConfig.expandedRowRender,
      onExpand = expandableConfig.onExpand,
      onExpandedRowsChange = expandableConfig.onExpandedRowsChange,
      childrenColumnName = expandableConfig.childrenColumnName;
  var mergedExpandIcon = expandIcon || renderExpandIcon;
  var mergedChildrenColumnName = childrenColumnName || 'children';
  var expandableType = react.useMemo(function () {
    if (expandedRowRender) {
      return 'row';
    }
    /* eslint-disable no-underscore-dangle */

    /**
     * Fix https://github.com/ant-design/ant-design/issues/21154
     * This is a workaround to not to break current behavior.
     * We can remove follow code after final release.
     *
     * To other developer:
     *  Do not use \`__PARENT_RENDER_ICON__\` in prod since we will remove this when refactor
     */


    if (props.expandable && props.internalHooks === INTERNAL_HOOKS && props.expandable.__PARENT_RENDER_ICON__ || mergedData.some(function (record) {
      return record && (0,esm_typeof/* default */.Z)(record) === 'object' && record[mergedChildrenColumnName];
    })) {
      return 'nest';
    }
    /* eslint-enable */


    return false;
  }, [!!expandedRowRender, mergedData]);

  var _React$useState = react.useState(function () {
    if (defaultExpandedRowKeys) {
      return defaultExpandedRowKeys;
    }

    if (defaultExpandAllRows) {
      return findAllChildrenKeys(mergedData, getRowKey, mergedChildrenColumnName);
    }

    return [];
  }),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      innerExpandedKeys = _React$useState2[0],
      setInnerExpandedKeys = _React$useState2[1];

  var mergedExpandedKeys = react.useMemo(function () {
    return new Set(expandedRowKeys || innerExpandedKeys || []);
  }, [expandedRowKeys, innerExpandedKeys]);
  var onTriggerExpand = react.useCallback(function (record) {
    var key = getRowKey(record, mergedData.indexOf(record));
    var newExpandedKeys;
    var hasKey = mergedExpandedKeys.has(key);

    if (hasKey) {
      mergedExpandedKeys.delete(key);
      newExpandedKeys = (0,toConsumableArray/* default */.Z)(mergedExpandedKeys);
    } else {
      newExpandedKeys = [].concat((0,toConsumableArray/* default */.Z)(mergedExpandedKeys), [key]);
    }

    setInnerExpandedKeys(newExpandedKeys);

    if (onExpand) {
      onExpand(!hasKey, record);
    }

    if (onExpandedRowsChange) {
      onExpandedRowsChange(newExpandedKeys);
    }
  }, [getRowKey, mergedExpandedKeys, mergedData, onExpand, onExpandedRowsChange]); // Warning if use \`expandedRowRender\` and nest children in the same time

  if (false) {}

  return [expandableConfig, expandableType, mergedExpandedKeys, mergedExpandIcon, mergedChildrenColumnName, onTriggerExpand];
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useFixedInfo.js



function useFixedInfo(flattenColumns, stickyOffsets, direction, columns) {
  var fixedInfoList = flattenColumns.map(function (_, colIndex) {
    return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets, direction, columns === null || columns === void 0 ? void 0 : columns[colIndex]);
  });
  return (0,useMemo/* default */.Z)(function () {
    return fixedInfoList;
  }, [fixedInfoList], function (prev, next) {
    return !(0,isEqual/* default */.Z)(prev, next);
  });
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useFrame.js



/**
 * Execute code before next frame but async
 */
function useLayoutState(defaultState) {
  var stateRef = (0,react.useRef)(defaultState);

  var _useState = (0,react.useState)({}),
      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),
      forceUpdate = _useState2[1];

  var lastPromiseRef = (0,react.useRef)(null);
  var updateBatchRef = (0,react.useRef)([]);

  function setFrameState(updater) {
    updateBatchRef.current.push(updater);
    var promise = Promise.resolve();
    lastPromiseRef.current = promise;
    promise.then(function () {
      if (lastPromiseRef.current === promise) {
        var prevBatch = updateBatchRef.current;
        var prevState = stateRef.current;
        updateBatchRef.current = [];
        prevBatch.forEach(function (batchUpdater) {
          stateRef.current = batchUpdater(stateRef.current);
        });
        lastPromiseRef.current = null;

        if (prevState !== stateRef.current) {
          forceUpdate({});
        }
      }
    });
  }

  (0,react.useEffect)(function () {
    return function () {
      lastPromiseRef.current = null;
    };
  }, []);
  return [stateRef.current, setFrameState];
}
/** Lock frame, when frame pass reset the lock. */

function useTimeoutLock(defaultState) {
  var frameRef = (0,react.useRef)(defaultState || null);
  var timeoutRef = (0,react.useRef)();

  function cleanUp() {
    window.clearTimeout(timeoutRef.current);
  }

  function setState(newState) {
    frameRef.current = newState;
    cleanUp();
    timeoutRef.current = window.setTimeout(function () {
      frameRef.current = null;
      timeoutRef.current = undefined;
    }, 100);
  }

  function getState() {
    return frameRef.current;
  }

  (0,react.useEffect)(function () {
    return cleanUp;
  }, []);
  return [setState, getState];
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useHover.js


function useHover() {
  var _React$useState = react.useState(-1),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      startRow = _React$useState2[0],
      setStartRow = _React$useState2[1];

  var _React$useState3 = react.useState(-1),
      _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),
      endRow = _React$useState4[0],
      setEndRow = _React$useState4[1];

  var onHover = react.useCallback(function (start, end) {
    setStartRow(start);
    setEndRow(end);
  }, []);
  return [startRow, endRow, onHover];
}
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/canUseDom.js
var canUseDom = __webpack_require__(98924);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useSticky.js



// fix ssr render
var defaultContainer = (0,canUseDom/* default */.Z)() ? window : null;
/** Sticky header hooks */

function useSticky(sticky, prefixCls) {
  var _ref = (0,esm_typeof/* default */.Z)(sticky) === 'object' ? sticky : {},
      _ref$offsetHeader = _ref.offsetHeader,
      offsetHeader = _ref$offsetHeader === void 0 ? 0 : _ref$offsetHeader,
      _ref$offsetSummary = _ref.offsetSummary,
      offsetSummary = _ref$offsetSummary === void 0 ? 0 : _ref$offsetSummary,
      _ref$offsetScroll = _ref.offsetScroll,
      offsetScroll = _ref$offsetScroll === void 0 ? 0 : _ref$offsetScroll,
      _ref$getContainer = _ref.getContainer,
      getContainer = _ref$getContainer === void 0 ? function () {
    return defaultContainer;
  } : _ref$getContainer;

  var container = getContainer() || defaultContainer;
  return react.useMemo(function () {
    var isSticky = !!sticky;
    return {
      isSticky: isSticky,
      stickyClassName: isSticky ? "".concat(prefixCls, "-sticky-holder") : '',
      offsetHeader: offsetHeader,
      offsetSummary: offsetSummary,
      offsetScroll: offsetScroll,
      container: container
    };
  }, [offsetScroll, offsetHeader, offsetSummary, prefixCls, container]);
}
;// CONCATENATED MODULE: ./node_modules/rc-table/es/hooks/useStickyOffsets.js


/**
 * Get sticky column offset width
 */
function useStickyOffsets(colWidths, columnCount, direction) {
  var stickyOffsets = (0,react.useMemo)(function () {
    var leftOffsets = [];
    var rightOffsets = [];
    var left = 0;
    var right = 0;

    for (var start = 0; start < columnCount; start += 1) {
      if (direction === 'rtl') {
        // Left offset
        rightOffsets[start] = right;
        right += colWidths[start] || 0; // Right offset

        var end = columnCount - start - 1;
        leftOffsets[end] = left;
        left += colWidths[end] || 0;
      } else {
        // Left offset
        leftOffsets[start] = left;
        left += colWidths[start] || 0; // Right offset

        var _end = columnCount - start - 1;

        rightOffsets[_end] = right;
        right += colWidths[_end] || 0;
      }
    }

    return {
      left: leftOffsets,
      right: rightOffsets
    };
  }, [colWidths, columnCount, direction]);
  return stickyOffsets;
}

/* harmony default export */ var hooks_useStickyOffsets = (useStickyOffsets);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Panel/index.js


function Panel(_ref) {
  var className = _ref.className,
      children = _ref.children;
  return /*#__PURE__*/react.createElement("div", {
    className: className
  }, children);
}

/* harmony default export */ var es_Panel = (Panel);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/addEventListener.js
var addEventListener = __webpack_require__(64019);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/css.js
var css = __webpack_require__(27678);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/stickyScrollBar.js












var StickyScrollBar = function StickyScrollBar(_ref, ref) {
  var _scrollBodyRef$curren, _scrollBodyRef$curren2;

  var scrollBodyRef = _ref.scrollBodyRef,
      onScroll = _ref.onScroll,
      offsetScroll = _ref.offsetScroll,
      container = _ref.container;
  var prefixCls = useContext(context_TableContext, 'prefixCls');
  var bodyScrollWidth = ((_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 ? void 0 : _scrollBodyRef$curren.scrollWidth) || 0;
  var bodyWidth = ((_scrollBodyRef$curren2 = scrollBodyRef.current) === null || _scrollBodyRef$curren2 === void 0 ? void 0 : _scrollBodyRef$curren2.clientWidth) || 0;
  var scrollBarWidth = bodyScrollWidth && bodyWidth * (bodyWidth / bodyScrollWidth);
  var scrollBarRef = react.useRef();

  var _useLayoutState = useLayoutState({
    scrollLeft: 0,
    isHiddenScrollBar: false
  }),
      _useLayoutState2 = (0,slicedToArray/* default */.Z)(_useLayoutState, 2),
      scrollState = _useLayoutState2[0],
      setScrollState = _useLayoutState2[1];

  var refState = react.useRef({
    delta: 0,
    x: 0
  });

  var _React$useState = react.useState(false),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      isActive = _React$useState2[0],
      setActive = _React$useState2[1];

  var onMouseUp = function onMouseUp() {
    setActive(false);
  };

  var onMouseDown = function onMouseDown(event) {
    event.persist();
    refState.current.delta = event.pageX - scrollState.scrollLeft;
    refState.current.x = 0;
    setActive(true);
    event.preventDefault();
  };

  var onMouseMove = function onMouseMove(event) {
    var _window;

    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
    var _ref2 = event || ((_window = window) === null || _window === void 0 ? void 0 : _window.event),
        buttons = _ref2.buttons;

    if (!isActive || buttons === 0) {
      // If out body mouse up, we can set isActive false when mouse move
      if (isActive) {
        setActive(false);
      }

      return;
    }

    var left = refState.current.x + event.pageX - refState.current.x - refState.current.delta;

    if (left <= 0) {
      left = 0;
    }

    if (left + scrollBarWidth >= bodyWidth) {
      left = bodyWidth - scrollBarWidth;
    }

    onScroll({
      scrollLeft: left / bodyWidth * (bodyScrollWidth + 2)
    });
    refState.current.x = event.pageX;
  };

  var onContainerScroll = function onContainerScroll() {
    if (!scrollBodyRef.current) {
      return;
    }

    var tableOffsetTop = (0,css/* getOffset */.os)(scrollBodyRef.current).top;
    var tableBottomOffset = tableOffsetTop + scrollBodyRef.current.offsetHeight;
    var currentClientOffset = container === window ? document.documentElement.scrollTop + window.innerHeight : (0,css/* getOffset */.os)(container).top + container.clientHeight;

    if (tableBottomOffset - (0,getScrollBarSize/* default */.Z)() <= currentClientOffset || tableOffsetTop >= currentClientOffset - offsetScroll) {
      setScrollState(function (state) {
        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, state), {}, {
          isHiddenScrollBar: true
        });
      });
    } else {
      setScrollState(function (state) {
        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, state), {}, {
          isHiddenScrollBar: false
        });
      });
    }
  };

  var setScrollLeft = function setScrollLeft(left) {
    setScrollState(function (state) {
      return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, state), {}, {
        scrollLeft: left / bodyScrollWidth * bodyWidth || 0
      });
    });
  };

  react.useImperativeHandle(ref, function () {
    return {
      setScrollLeft: setScrollLeft
    };
  });
  react.useEffect(function () {
    var onMouseUpListener = (0,addEventListener/* default */.Z)(document.body, 'mouseup', onMouseUp, false);
    var onMouseMoveListener = (0,addEventListener/* default */.Z)(document.body, 'mousemove', onMouseMove, false);
    onContainerScroll();
    return function () {
      onMouseUpListener.remove();
      onMouseMoveListener.remove();
    };
  }, [scrollBarWidth, isActive]);
  react.useEffect(function () {
    var onScrollListener = (0,addEventListener/* default */.Z)(container, 'scroll', onContainerScroll, false);
    var onResizeListener = (0,addEventListener/* default */.Z)(window, 'resize', onContainerScroll, false);
    return function () {
      onScrollListener.remove();
      onResizeListener.remove();
    };
  }, [container]);
  react.useEffect(function () {
    if (!scrollState.isHiddenScrollBar) {
      setScrollState(function (state) {
        var bodyNode = scrollBodyRef.current;

        if (!bodyNode) {
          return state;
        }

        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, state), {}, {
          scrollLeft: bodyNode.scrollLeft / bodyNode.scrollWidth * bodyNode.clientWidth
        });
      });
    }
  }, [scrollState.isHiddenScrollBar]);

  if (bodyScrollWidth <= bodyWidth || !scrollBarWidth || scrollState.isHiddenScrollBar) {
    return null;
  }

  return /*#__PURE__*/react.createElement("div", {
    style: {
      height: (0,getScrollBarSize/* default */.Z)(),
      width: bodyWidth,
      bottom: offsetScroll
    },
    className: "".concat(prefixCls, "-sticky-scroll")
  }, /*#__PURE__*/react.createElement("div", {
    onMouseDown: onMouseDown,
    ref: scrollBarRef,
    className: classnames_default()("".concat(prefixCls, "-sticky-scroll-bar"), (0,defineProperty/* default */.Z)({}, "".concat(prefixCls, "-sticky-scroll-bar-active"), isActive)),
    style: {
      width: "".concat(scrollBarWidth, "px"),
      transform: "translate3d(".concat(scrollState.scrollLeft, "px, 0, 0)")
    }
  }));
};

/* harmony default export */ var stickyScrollBar = (/*#__PURE__*/react.forwardRef(StickyScrollBar));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/sugar/Column.js
/* istanbul ignore next */

/**
 * This is a syntactic sugar for \`columns\` prop.
 * So HOC will not work on this.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function Column(_) {
  return null;
}

/* harmony default export */ var sugar_Column = (Column);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/sugar/ColumnGroup.js
/* istanbul ignore next */

/**
 * This is a syntactic sugar for \`columns\` prop.
 * So HOC will not work on this.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function ColumnGroup(_) {
  return null;
}

/* harmony default export */ var sugar_ColumnGroup = (ColumnGroup);
;// CONCATENATED MODULE: ./node_modules/rc-table/es/Table.js





/**
 * Feature:
 *  - fixed not need to set width
 *  - support \`rowExpandable\` to config row expand logic
 *  - add \`summary\` to support \`() => ReactNode\`
 *
 * Update:
 *  - \`dataIndex\` is \`array[]\` now
 *  - \`expandable\` wrap all the expand related props
 *
 * Removed:
 *  - expandIconAsCell
 *  - useFixedHeader
 *  - rowRef
 *  - columns[number].onCellClick
 *  - onRowClick
 *  - onRowDoubleClick
 *  - onRowMouseEnter
 *  - onRowMouseLeave
 *  - getBodyWrapper
 *  - bodyStyle
 *
 * Deprecated:
 *  - All expanded props, move into expandable
 */






























 // Used for conditions cache

var EMPTY_DATA = []; // Used for customize scroll

var EMPTY_SCROLL_TARGET = {};
var INTERNAL_HOOKS = 'rc-table-internal-hook';

function defaultEmpty() {
  return 'No Data';
}

function Table_Table(tableProps) {
  var _classNames;

  var props = (0,objectSpread2/* default */.Z)({
    rowKey: 'key',
    prefixCls: 'rc-table',
    emptyText: defaultEmpty
  }, tableProps);

  var prefixCls = props.prefixCls,
      className = props.className,
      rowClassName = props.rowClassName,
      style = props.style,
      data = props.data,
      rowKey = props.rowKey,
      scroll = props.scroll,
      tableLayout = props.tableLayout,
      direction = props.direction,
      title = props.title,
      footer = props.footer,
      summary = props.summary,
      caption = props.caption,
      id = props.id,
      showHeader = props.showHeader,
      components = props.components,
      emptyText = props.emptyText,
      onRow = props.onRow,
      onHeaderRow = props.onHeaderRow,
      internalHooks = props.internalHooks,
      transformColumns = props.transformColumns,
      internalRefs = props.internalRefs,
      sticky = props.sticky;
  var mergedData = data || EMPTY_DATA;
  var hasData = !!mergedData.length; // ===================== Warning ======================

  if (false) {} // ==================== Customize =====================


  var getComponent = react.useCallback(function (path, defaultComponent) {
    return (0,get/* default */.Z)(components, path) || defaultComponent;
  }, [components]);
  var getRowKey = react.useMemo(function () {
    if (typeof rowKey === 'function') {
      return rowKey;
    }

    return function (record) {
      var key = record && record[rowKey];

      if (false) {}

      return key;
    };
  }, [rowKey]); // ====================== Hover =======================

  var _useHover = useHover(),
      _useHover2 = (0,slicedToArray/* default */.Z)(_useHover, 3),
      startRow = _useHover2[0],
      endRow = _useHover2[1],
      onHover = _useHover2[2]; // ====================== Expand ======================


  var _useExpand = useExpand(props, mergedData, getRowKey),
      _useExpand2 = (0,slicedToArray/* default */.Z)(_useExpand, 6),
      expandableConfig = _useExpand2[0],
      expandableType = _useExpand2[1],
      mergedExpandedKeys = _useExpand2[2],
      mergedExpandIcon = _useExpand2[3],
      mergedChildrenColumnName = _useExpand2[4],
      onTriggerExpand = _useExpand2[5]; // ====================== Column ======================


  var _React$useState = react.useState(0),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      componentWidth = _React$useState2[0],
      setComponentWidth = _React$useState2[1];

  var _useColumns = hooks_useColumns((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, props), expandableConfig), {}, {
    expandable: !!expandableConfig.expandedRowRender,
    columnTitle: expandableConfig.columnTitle,
    expandedKeys: mergedExpandedKeys,
    getRowKey: getRowKey,
    // https://github.com/ant-design/ant-design/issues/23894
    onTriggerExpand: onTriggerExpand,
    expandIcon: mergedExpandIcon,
    expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
    direction: direction
  }), internalHooks === INTERNAL_HOOKS ? transformColumns : null),
      _useColumns2 = (0,slicedToArray/* default */.Z)(_useColumns, 2),
      columns = _useColumns2[0],
      flattenColumns = _useColumns2[1];

  var columnContext = react.useMemo(function () {
    return {
      columns: columns,
      flattenColumns: flattenColumns
    };
  }, [columns, flattenColumns]); // ====================== Scroll ======================

  var fullTableRef = react.useRef();
  var scrollHeaderRef = react.useRef();
  var scrollBodyRef = react.useRef();
  var scrollBodyContainerRef = react.useRef();
  var scrollSummaryRef = react.useRef();

  var _React$useState3 = react.useState(false),
      _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),
      pingedLeft = _React$useState4[0],
      setPingedLeft = _React$useState4[1];

  var _React$useState5 = react.useState(false),
      _React$useState6 = (0,slicedToArray/* default */.Z)(_React$useState5, 2),
      pingedRight = _React$useState6[0],
      setPingedRight = _React$useState6[1];

  var _useLayoutState = useLayoutState(new Map()),
      _useLayoutState2 = (0,slicedToArray/* default */.Z)(_useLayoutState, 2),
      colsWidths = _useLayoutState2[0],
      updateColsWidths = _useLayoutState2[1]; // Convert map to number width


  var colsKeys = getColumnsKey(flattenColumns);
  var pureColWidths = colsKeys.map(function (columnKey) {
    return colsWidths.get(columnKey);
  });
  var colWidths = react.useMemo(function () {
    return pureColWidths;
  }, [pureColWidths.join('_')]);
  var stickyOffsets = hooks_useStickyOffsets(colWidths, flattenColumns.length, direction);
  var fixHeader = scroll && validateValue(scroll.y);
  var horizonScroll = scroll && validateValue(scroll.x) || Boolean(expandableConfig.fixed);
  var fixColumn = horizonScroll && flattenColumns.some(function (_ref) {
    var fixed = _ref.fixed;
    return fixed;
  }); // Sticky

  var stickyRef = react.useRef();

  var _useSticky = useSticky(sticky, prefixCls),
      isSticky = _useSticky.isSticky,
      offsetHeader = _useSticky.offsetHeader,
      offsetSummary = _useSticky.offsetSummary,
      offsetScroll = _useSticky.offsetScroll,
      stickyClassName = _useSticky.stickyClassName,
      container = _useSticky.container; // Footer (Fix footer must fixed header)


  var summaryNode = react.useMemo(function () {
    return summary === null || summary === void 0 ? void 0 : summary(mergedData);
  }, [summary, mergedData]);
  var fixFooter = (fixHeader || isSticky) && /*#__PURE__*/react.isValidElement(summaryNode) && summaryNode.type === Footer_Summary && summaryNode.props.fixed; // Scroll

  var scrollXStyle;
  var scrollYStyle;
  var scrollTableStyle;

  if (fixHeader) {
    scrollYStyle = {
      overflowY: 'scroll',
      maxHeight: scroll.y
    };
  }

  if (horizonScroll) {
    scrollXStyle = {
      overflowX: 'auto'
    }; // When no vertical scrollbar, should hide it
    // https://github.com/ant-design/ant-design/pull/20705
    // https://github.com/ant-design/ant-design/issues/21879

    if (!fixHeader) {
      scrollYStyle = {
        overflowY: 'hidden'
      };
    }

    scrollTableStyle = {
      width: (scroll === null || scroll === void 0 ? void 0 : scroll.x) === true ? 'auto' : scroll === null || scroll === void 0 ? void 0 : scroll.x,
      minWidth: '100%'
    };
  }

  var onColumnResize = react.useCallback(function (columnKey, width) {
    if ((0,isVisible/* default */.Z)(fullTableRef.current)) {
      updateColsWidths(function (widths) {
        if (widths.get(columnKey) !== width) {
          var newWidths = new Map(widths);
          newWidths.set(columnKey, width);
          return newWidths;
        }

        return widths;
      });
    }
  }, []);

  var _useTimeoutLock = useTimeoutLock(null),
      _useTimeoutLock2 = (0,slicedToArray/* default */.Z)(_useTimeoutLock, 2),
      setScrollTarget = _useTimeoutLock2[0],
      getScrollTarget = _useTimeoutLock2[1];

  function forceScroll(scrollLeft, target) {
    if (!target) {
      return;
    }

    if (typeof target === 'function') {
      target(scrollLeft);
    } else if (target.scrollLeft !== scrollLeft) {
      target.scrollLeft = scrollLeft; // Delay to force scroll position if not sync
      // ref: https://github.com/ant-design/ant-design/issues/37179

      if (target.scrollLeft !== scrollLeft) {
        setTimeout(function () {
          target.scrollLeft = scrollLeft;
        }, 0);
      }
    }
  }

  var onScroll = (0,useEvent/* default */.Z)(function (_ref2) {
    var currentTarget = _ref2.currentTarget,
        scrollLeft = _ref2.scrollLeft;
    var isRTL = direction === 'rtl';
    var mergedScrollLeft = typeof scrollLeft === 'number' ? scrollLeft : currentTarget.scrollLeft;
    var compareTarget = currentTarget || EMPTY_SCROLL_TARGET;

    if (!getScrollTarget() || getScrollTarget() === compareTarget) {
      var _stickyRef$current;

      setScrollTarget(compareTarget);
      forceScroll(mergedScrollLeft, scrollHeaderRef.current);
      forceScroll(mergedScrollLeft, scrollBodyRef.current);
      forceScroll(mergedScrollLeft, scrollSummaryRef.current);
      forceScroll(mergedScrollLeft, (_stickyRef$current = stickyRef.current) === null || _stickyRef$current === void 0 ? void 0 : _stickyRef$current.setScrollLeft);
    }

    if (currentTarget) {
      var scrollWidth = currentTarget.scrollWidth,
          clientWidth = currentTarget.clientWidth; // There is no space to scroll

      if (scrollWidth === clientWidth) {
        setPingedLeft(false);
        setPingedRight(false);
        return;
      }

      if (isRTL) {
        setPingedLeft(-mergedScrollLeft < scrollWidth - clientWidth);
        setPingedRight(-mergedScrollLeft > 0);
      } else {
        setPingedLeft(mergedScrollLeft > 0);
        setPingedRight(mergedScrollLeft < scrollWidth - clientWidth);
      }
    }
  });

  var triggerOnScroll = function triggerOnScroll() {
    if (horizonScroll && scrollBodyRef.current) {
      onScroll({
        currentTarget: scrollBodyRef.current
      });
    } else {
      setPingedLeft(false);
      setPingedRight(false);
    }
  };

  var onFullTableResize = function onFullTableResize(_ref3) {
    var width = _ref3.width;

    if (width !== componentWidth) {
      triggerOnScroll();
      setComponentWidth(fullTableRef.current ? fullTableRef.current.offsetWidth : width);
    }
  }; // Sync scroll bar when init or \`horizonScroll\`, \`data\` and \`columns.length\` changed


  var mounted = react.useRef(false);
  react.useEffect(function () {
    // onFullTableResize will be trigger once when ResizeObserver is mounted
    // This will reduce one duplicated triggerOnScroll time
    if (mounted.current) {
      triggerOnScroll();
    }
  }, [horizonScroll, data, columns.length]);
  react.useEffect(function () {
    mounted.current = true;
  }, []); // ===================== Effects ======================

  var _React$useState7 = react.useState(0),
      _React$useState8 = (0,slicedToArray/* default */.Z)(_React$useState7, 2),
      scrollbarSize = _React$useState8[0],
      setScrollbarSize = _React$useState8[1];

  var _React$useState9 = react.useState(true),
      _React$useState10 = (0,slicedToArray/* default */.Z)(_React$useState9, 2),
      supportSticky = _React$useState10[0],
      setSupportSticky = _React$useState10[1]; // Only IE not support, we mark as support first


  react.useEffect(function () {
    if (scrollBodyRef.current instanceof Element) {
      setScrollbarSize((0,getScrollBarSize/* getTargetScrollBarSize */.o)(scrollBodyRef.current).width);
    } else {
      setScrollbarSize((0,getScrollBarSize/* getTargetScrollBarSize */.o)(scrollBodyContainerRef.current).width);
    }

    setSupportSticky((0,styleChecker/* isStyleSupport */.G)('position', 'sticky'));
  }, []); // ================== INTERNAL HOOKS ==================

  react.useEffect(function () {
    if (internalHooks === INTERNAL_HOOKS && internalRefs) {
      internalRefs.body.current = scrollBodyRef.current;
    }
  }); // ========================================================================
  // ==                               Render                               ==
  // ========================================================================
  // =================== Render: Func ===================

  var renderFixedHeaderTable = react.useCallback(function (fixedHolderPassProps) {
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Header_Header, fixedHolderPassProps), fixFooter === 'top' && /*#__PURE__*/react.createElement(es_Footer, fixedHolderPassProps, summaryNode));
  }, [fixFooter, summaryNode]);
  var renderFixedFooterTable = react.useCallback(function (fixedHolderPassProps) {
    return /*#__PURE__*/react.createElement(es_Footer, fixedHolderPassProps, summaryNode);
  }, [summaryNode]); // =================== Render: Node ===================

  var TableComponent = getComponent(['table'], 'table'); // Table layout

  var mergedTableLayout = react.useMemo(function () {
    if (tableLayout) {
      return tableLayout;
    } // https://github.com/ant-design/ant-design/issues/25227
    // When scroll.x is max-content, no need to fix table layout
    // it's width should stretch out to fit content


    if (fixColumn) {
      return (scroll === null || scroll === void 0 ? void 0 : scroll.x) === 'max-content' ? 'auto' : 'fixed';
    }

    if (fixHeader || isSticky || flattenColumns.some(function (_ref4) {
      var ellipsis = _ref4.ellipsis;
      return ellipsis;
    })) {
      return 'fixed';
    }

    return 'auto';
  }, [fixHeader, fixColumn, flattenColumns, tableLayout, isSticky]);
  var groupTableNode; // Header props

  var headerProps = {
    colWidths: colWidths,
    columCount: flattenColumns.length,
    stickyOffsets: stickyOffsets,
    onHeaderRow: onHeaderRow,
    fixHeader: fixHeader,
    scroll: scroll
  }; // Empty

  var emptyNode = react.useMemo(function () {
    if (hasData) {
      return null;
    }

    if (typeof emptyText === 'function') {
      return emptyText();
    }

    return emptyText;
  }, [hasData, emptyText]); // Body

  var bodyTable = /*#__PURE__*/react.createElement(es_Body, {
    data: mergedData,
    measureColumnWidth: fixHeader || horizonScroll || isSticky,
    expandedKeys: mergedExpandedKeys,
    rowExpandable: expandableConfig.rowExpandable,
    getRowKey: getRowKey,
    onRow: onRow,
    emptyNode: emptyNode,
    childrenColumnName: mergedChildrenColumnName
  });
  var bodyColGroup = /*#__PURE__*/react.createElement(es_ColGroup, {
    colWidths: flattenColumns.map(function (_ref5) {
      var width = _ref5.width;
      return width;
    }),
    columns: flattenColumns
  });
  var captionElement = caption !== null && caption !== undefined ? /*#__PURE__*/react.createElement("caption", {
    className: "".concat(prefixCls, "-caption")
  }, caption) : undefined;
  var customizeScrollBody = getComponent(['body']);

  if (false) {}

  var dataProps = (0,pickAttrs/* default */.Z)(props, {
    data: true
  });
  var ariaProps = (0,pickAttrs/* default */.Z)(props, {
    aria: true
  });

  if (fixHeader || isSticky) {
    // >>>>>> Fixed Header
    var bodyContent;

    if (typeof customizeScrollBody === 'function') {
      bodyContent = customizeScrollBody(mergedData, {
        scrollbarSize: scrollbarSize,
        ref: scrollBodyRef,
        onScroll: onScroll
      });
      headerProps.colWidths = flattenColumns.map(function (_ref6, index) {
        var width = _ref6.width;
        var colWidth = index === columns.length - 1 ? width - scrollbarSize : width;

        if (typeof colWidth === 'number' && !Number.isNaN(colWidth)) {
          return colWidth;
        }

        (0,es_warning/* default */.ZP)(false, 'When use \`components.body\` with render props. Each column should have a fixed \`width\` value.');
        return 0;
      });
    } else {
      bodyContent = /*#__PURE__*/react.createElement("div", {
        style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, scrollXStyle), scrollYStyle),
        onScroll: onScroll,
        ref: scrollBodyRef,
        className: classnames_default()("".concat(prefixCls, "-body"))
      }, /*#__PURE__*/react.createElement(TableComponent, (0,esm_extends/* default */.Z)({
        style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, scrollTableStyle), {}, {
          tableLayout: mergedTableLayout
        })
      }, ariaProps), captionElement, bodyColGroup, bodyTable, !fixFooter && summaryNode && /*#__PURE__*/react.createElement(es_Footer, {
        stickyOffsets: stickyOffsets,
        flattenColumns: flattenColumns,
        columns: columns
      }, summaryNode)));
    } // Fixed holder share the props


    var fixedHolderProps = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({
      noData: !mergedData.length,
      maxContentScroll: horizonScroll && scroll.x === 'max-content'
    }, headerProps), columnContext), {}, {
      direction: direction,
      stickyClassName: stickyClassName,
      onScroll: onScroll
    });

    groupTableNode = /*#__PURE__*/react.createElement(react.Fragment, null, showHeader !== false && /*#__PURE__*/react.createElement(es_FixedHolder, (0,esm_extends/* default */.Z)({}, fixedHolderProps, {
      stickyTopOffset: offsetHeader,
      className: "".concat(prefixCls, "-header"),
      ref: scrollHeaderRef
    }), renderFixedHeaderTable), bodyContent, fixFooter && fixFooter !== 'top' && /*#__PURE__*/react.createElement(es_FixedHolder, (0,esm_extends/* default */.Z)({}, fixedHolderProps, {
      stickyBottomOffset: offsetSummary,
      className: "".concat(prefixCls, "-summary"),
      ref: scrollSummaryRef
    }), renderFixedFooterTable), isSticky && /*#__PURE__*/react.createElement(stickyScrollBar, {
      ref: stickyRef,
      offsetScroll: offsetScroll,
      scrollBodyRef: scrollBodyRef,
      onScroll: onScroll,
      container: container
    }));
  } else {
    // >>>>>> Unique table
    groupTableNode = /*#__PURE__*/react.createElement("div", {
      style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, scrollXStyle), scrollYStyle),
      className: classnames_default()("".concat(prefixCls, "-content")),
      onScroll: onScroll,
      ref: scrollBodyRef
    }, /*#__PURE__*/react.createElement(TableComponent, (0,esm_extends/* default */.Z)({
      style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, scrollTableStyle), {}, {
        tableLayout: mergedTableLayout
      })
    }, ariaProps), captionElement, bodyColGroup, showHeader !== false && /*#__PURE__*/react.createElement(Header_Header, (0,esm_extends/* default */.Z)({}, headerProps, columnContext)), bodyTable, summaryNode && /*#__PURE__*/react.createElement(es_Footer, {
      stickyOffsets: stickyOffsets,
      flattenColumns: flattenColumns,
      columns: columns
    }, summaryNode)));
  }

  var fullTable = /*#__PURE__*/react.createElement("div", (0,esm_extends/* default */.Z)({
    className: classnames_default()(prefixCls, className, (_classNames = {}, (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-ping-left"), pingedLeft), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-ping-right"), pingedRight), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-layout-fixed"), tableLayout === 'fixed'), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-fixed-header"), fixHeader), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-fixed-column"), fixColumn), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-scroll-horizontal"), horizonScroll), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-has-fix-left"), flattenColumns[0] && flattenColumns[0].fixed), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-has-fix-right"), flattenColumns[flattenColumns.length - 1] && flattenColumns[flattenColumns.length - 1].fixed === 'right'), _classNames)),
    style: style,
    id: id,
    ref: fullTableRef
  }, dataProps), title && /*#__PURE__*/react.createElement(es_Panel, {
    className: "".concat(prefixCls, "-title")
  }, title(mergedData)), /*#__PURE__*/react.createElement("div", {
    ref: scrollBodyContainerRef,
    className: "".concat(prefixCls, "-container")
  }, groupTableNode), footer && /*#__PURE__*/react.createElement(es_Panel, {
    className: "".concat(prefixCls, "-footer")
  }, footer(mergedData)));

  if (horizonScroll) {
    fullTable = /*#__PURE__*/react.createElement(rc_resize_observer_es/* default */.Z, {
      onResize: onFullTableResize
    }, fullTable);
  }

  var fixedInfoList = useFixedInfo(flattenColumns, stickyOffsets, direction, columns);
  var TableContextValue = react.useMemo(function () {
    return {
      // Table
      prefixCls: prefixCls,
      getComponent: getComponent,
      scrollbarSize: scrollbarSize,
      direction: direction,
      fixedInfoList: fixedInfoList,
      isSticky: isSticky,
      supportSticky: supportSticky,
      componentWidth: componentWidth,
      fixHeader: fixHeader,
      fixColumn: fixColumn,
      horizonScroll: horizonScroll,
      // Body
      tableLayout: mergedTableLayout,
      rowClassName: rowClassName,
      expandedRowClassName: expandableConfig.expandedRowClassName,
      expandIcon: mergedExpandIcon,
      expandableType: expandableType,
      expandRowByClick: expandableConfig.expandRowByClick,
      expandedRowRender: expandableConfig.expandedRowRender,
      onTriggerExpand: onTriggerExpand,
      expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
      indentSize: expandableConfig.indentSize,
      allColumnsFixedLeft: flattenColumns.every(function (col) {
        return col.fixed === 'left';
      }),
      // Column
      columns: columns,
      flattenColumns: flattenColumns,
      onColumnResize: onColumnResize,
      // Row
      hoverStartRow: startRow,
      hoverEndRow: endRow,
      onHover: onHover
    };
  }, [// Table
  prefixCls, getComponent, scrollbarSize, direction, fixedInfoList, isSticky, supportSticky, componentWidth, fixHeader, fixColumn, horizonScroll, // Body
  mergedTableLayout, rowClassName, expandableConfig.expandedRowClassName, mergedExpandIcon, expandableType, expandableConfig.expandRowByClick, expandableConfig.expandedRowRender, onTriggerExpand, expandableConfig.expandIconColumnIndex, expandableConfig.indentSize, // Column
  columns, flattenColumns, onColumnResize, // Row
  startRow, endRow, onHover]);
  return /*#__PURE__*/react.createElement(context_TableContext.Provider, {
    value: TableContextValue
  }, fullTable);
}

function genTable(shouldTriggerRender) {
  return makeImmutable(Table_Table, shouldTriggerRender);
}
var ImmutableTable = genTable();
ImmutableTable.EXPAND_COLUMN = EXPAND_COLUMN;
ImmutableTable.Column = sugar_Column;
ImmutableTable.ColumnGroup = sugar_ColumnGroup;
ImmutableTable.Summary = FooterComponents;
/* harmony default export */ var es_Table = ((/* unused pure expression or super */ null && (ImmutableTable)));
;// CONCATENATED MODULE: ./node_modules/rc-table/es/index.js







/* harmony default export */ var rc_table_es = ((/* unused pure expression or super */ null && (Table)));
;// CONCATENATED MODULE: ./node_modules/antd/es/table/Column.js
/* istanbul ignore next */
/** This is a syntactic sugar for \`columns\` prop. So HOC will not work on this. */
// eslint-disable-next-line no-unused-vars
function Column_Column(_) {
  return null;
}
/* harmony default export */ var table_Column = (Column_Column);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/ColumnGroup.js
/* istanbul ignore next */
/** This is a syntactic sugar for \`columns\` prop. So HOC will not work on this. */
// eslint-disable-next-line no-unused-vars
function ColumnGroup_ColumnGroup(_) {
  return null;
}
/* harmony default export */ var table_ColumnGroup = (ColumnGroup_ColumnGroup);
// EXTERNAL MODULE: ./node_modules/antd/es/locale/en_US.js
var en_US = __webpack_require__(40378);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/ExpandIcon.js


function ExpandIcon_renderExpandIcon(locale) {
  return function expandIcon(_ref) {
    let {
      prefixCls,
      onExpand,
      record,
      expanded,
      expandable
    } = _ref;
    const iconPrefix = \`\${prefixCls}-row-expand-icon\`;
    return /*#__PURE__*/react.createElement("button", {
      type: "button",
      onClick: e => {
        onExpand(record, e);
        e.stopPropagation();
      },
      className: classnames_default()(iconPrefix, {
        [\`\${iconPrefix}-spaced\`]: !expandable,
        [\`\${iconPrefix}-expanded\`]: expandable && expanded,
        [\`\${iconPrefix}-collapsed\`]: expandable && !expanded
      }),
      "aria-label": expanded ? locale.collapse : locale.expand,
      "aria-expanded": expanded
    });
  };
}
/* harmony default export */ var ExpandIcon = (ExpandIcon_renderExpandIcon);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/util.js
function getColumnKey(column, defaultKey) {
  if ('key' in column && column.key !== undefined && column.key !== null) {
    return column.key;
  }
  if (column.dataIndex) {
    return Array.isArray(column.dataIndex) ? column.dataIndex.join('.') : column.dataIndex;
  }
  return defaultKey;
}
function getColumnPos(index, pos) {
  return pos ? \`\${pos}-\${index}\` : \`\${index}\`;
}
function renderColumnTitle(title, props) {
  if (typeof title === 'function') {
    return title(props);
  }
  return title;
}
/**
 * Safe get column title
 *
 * Should filter [object Object]
 *
 * @param title
 * @returns
 */
function safeColumnTitle(title, props) {
  const res = renderColumnTitle(title, props);
  if (Object.prototype.toString.call(res) === '[object Object]') return '';
  return res;
}
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/FilterFilled.js + 1 modules
var FilterFilled = __webpack_require__(99982);
// EXTERNAL MODULE: ./node_modules/antd/es/menu/OverrideContext.js
var OverrideContext = __webpack_require__(76529);
// EXTERNAL MODULE: ./node_modules/antd/es/tree/index.js + 4 modules
var tree = __webpack_require__(20863);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/hooks/useForceUpdate.js
var useForceUpdate = __webpack_require__(57838);
;// CONCATENATED MODULE: ./node_modules/antd/es/_util/hooks/useSyncState.js


function useSyncState(initialValue) {
  const ref = react.useRef(initialValue);
  const forceUpdate = (0,useForceUpdate/* default */.Z)();
  return [() => ref.current, newValue => {
    ref.current = newValue;
    // re-render
    forceUpdate();
  }];
}
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/SearchOutlined.js + 1 modules
var SearchOutlined = __webpack_require__(68795);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useFilter/FilterSearch.js



function FilterSearch(_ref) {
  let {
    value,
    onChange,
    filterSearch,
    tablePrefixCls,
    locale
  } = _ref;
  if (!filterSearch) {
    return null;
  }
  return /*#__PURE__*/react.createElement("div", {
    className: \`\${tablePrefixCls}-filter-dropdown-search\`
  }, /*#__PURE__*/react.createElement(input/* default */.Z, {
    prefix: /*#__PURE__*/react.createElement(SearchOutlined/* default */.Z, null),
    placeholder: locale.filterSearchPlaceholder,
    onChange: onChange,
    value: value,
    // for skip min-width of input
    htmlSize: 1,
    className: \`\${tablePrefixCls}-filter-dropdown-search-input\`
  }));
}
/* harmony default export */ var useFilter_FilterSearch = (FilterSearch);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useFilter/FilterWrapper.js


const onKeyDown = event => {
  const {
    keyCode
  } = event;
  if (keyCode === KeyCode/* default.ENTER */.Z.ENTER) {
    event.stopPropagation();
  }
};
const FilterDropdownMenuWrapper = props => /*#__PURE__*/react.createElement("div", {
  className: props.className,
  onClick: e => e.stopPropagation(),
  onKeyDown: onKeyDown
}, props.children);
/* harmony default export */ var FilterWrapper = (FilterDropdownMenuWrapper);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js


















function hasSubMenu(filters) {
  return filters.some(_ref => {
    let {
      children
    } = _ref;
    return children;
  });
}
function searchValueMatched(searchValue, text) {
  if (typeof text === 'string' || typeof text === 'number') {
    return text === null || text === void 0 ? void 0 : text.toString().toLowerCase().includes(searchValue.trim().toLowerCase());
  }
  return false;
}
function renderFilterItems(_ref2) {
  let {
    filters,
    prefixCls,
    filteredKeys,
    filterMultiple,
    searchValue,
    filterSearch
  } = _ref2;
  return filters.map((filter, index) => {
    const key = String(filter.value);
    if (filter.children) {
      return {
        key: key || index,
        label: filter.text,
        popupClassName: \`\${prefixCls}-dropdown-submenu\`,
        children: renderFilterItems({
          filters: filter.children,
          prefixCls,
          filteredKeys,
          filterMultiple,
          searchValue,
          filterSearch
        })
      };
    }
    const Component = filterMultiple ? es_checkbox/* default */.Z : es_radio/* default */.ZP;
    const item = {
      key: filter.value !== undefined ? key : index,
      label: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Component, {
        checked: filteredKeys.includes(key)
      }), /*#__PURE__*/react.createElement("span", null, filter.text))
    };
    if (searchValue.trim()) {
      if (typeof filterSearch === 'function') {
        return filterSearch(searchValue, filter) ? item : null;
      }
      return searchValueMatched(searchValue, filter.text) ? item : null;
    }
    return item;
  });
}
function FilterDropdown(props) {
  var _a, _b;
  const {
    tablePrefixCls,
    prefixCls,
    column,
    dropdownPrefixCls,
    columnKey,
    filterMultiple,
    filterMode = 'menu',
    filterSearch = false,
    filterState,
    triggerFilter,
    locale,
    children,
    getPopupContainer
  } = props;
  const {
    filterDropdownOpen,
    onFilterDropdownOpenChange,
    filterResetToDefaultFilteredValue,
    defaultFilteredValue,
    // Deprecated
    filterDropdownVisible,
    onFilterDropdownVisibleChange
  } = column;
  const [visible, setVisible] = react.useState(false);
  const filtered = !!(filterState && (((_a = filterState.filteredKeys) === null || _a === void 0 ? void 0 : _a.length) || filterState.forceFiltered));
  const triggerVisible = newVisible => {
    setVisible(newVisible);
    onFilterDropdownOpenChange === null || onFilterDropdownOpenChange === void 0 ? void 0 : onFilterDropdownOpenChange(newVisible);
    onFilterDropdownVisibleChange === null || onFilterDropdownVisibleChange === void 0 ? void 0 : onFilterDropdownVisibleChange(newVisible);
  };
  if (false) {}
  const mergedVisible = (_b = filterDropdownOpen !== null && filterDropdownOpen !== void 0 ? filterDropdownOpen : filterDropdownVisible) !== null && _b !== void 0 ? _b : visible;
  // ===================== Select Keys =====================
  const propFilteredKeys = filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys;
  const [getFilteredKeysSync, setFilteredKeysSync] = useSyncState(propFilteredKeys || []);
  const onSelectKeys = _ref4 => {
    let {
      selectedKeys
    } = _ref4;
    setFilteredKeysSync(selectedKeys);
  };
  const onCheck = (keys, _ref5) => {
    let {
      node,
      checked
    } = _ref5;
    if (!filterMultiple) {
      onSelectKeys({
        selectedKeys: checked && node.key ? [node.key] : []
      });
    } else {
      onSelectKeys({
        selectedKeys: keys
      });
    }
  };
  react.useEffect(() => {
    if (!visible) {
      return;
    }
    onSelectKeys({
      selectedKeys: propFilteredKeys || []
    });
  }, [propFilteredKeys]);
  // ====================== Open Keys ======================
  const [openKeys, setOpenKeys] = react.useState([]);
  const onOpenChange = keys => {
    setOpenKeys(keys);
  };
  // search in tree mode column filter
  const [searchValue, setSearchValue] = react.useState('');
  const onSearch = e => {
    const {
      value
    } = e.target;
    setSearchValue(value);
  };
  // clear search value after close filter dropdown
  react.useEffect(() => {
    if (!visible) {
      setSearchValue('');
    }
  }, [visible]);
  // ======================= Submit ========================
  const internalTriggerFilter = keys => {
    const mergedKeys = keys && keys.length ? keys : null;
    if (mergedKeys === null && (!filterState || !filterState.filteredKeys)) {
      return null;
    }
    if ((0,isEqual/* default */.Z)(mergedKeys, filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys, true)) {
      return null;
    }
    triggerFilter({
      column,
      key: columnKey,
      filteredKeys: mergedKeys
    });
  };
  const onConfirm = () => {
    triggerVisible(false);
    internalTriggerFilter(getFilteredKeysSync());
  };
  const onReset = function () {
    let {
      confirm,
      closeDropdown
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      confirm: false,
      closeDropdown: false
    };
    if (confirm) {
      internalTriggerFilter([]);
    }
    if (closeDropdown) {
      triggerVisible(false);
    }
    setSearchValue('');
    if (filterResetToDefaultFilteredValue) {
      setFilteredKeysSync((defaultFilteredValue || []).map(key => String(key)));
    } else {
      setFilteredKeysSync([]);
    }
  };
  const doFilter = function () {
    let {
      closeDropdown
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      closeDropdown: true
    };
    if (closeDropdown) {
      triggerVisible(false);
    }
    internalTriggerFilter(getFilteredKeysSync());
  };
  const onVisibleChange = newVisible => {
    if (newVisible && propFilteredKeys !== undefined) {
      // Sync filteredKeys on appear in controlled mode (propFilteredKeys !== undefiend)
      setFilteredKeysSync(propFilteredKeys || []);
    }
    triggerVisible(newVisible);
    // Default will filter when closed
    if (!newVisible && !column.filterDropdown) {
      onConfirm();
    }
  };
  // ======================== Style ========================
  const dropdownMenuClass = classnames_default()({
    [\`\${dropdownPrefixCls}-menu-without-submenu\`]: !hasSubMenu(column.filters || [])
  });
  const onCheckAll = e => {
    if (e.target.checked) {
      const allFilterKeys = flattenKeys(column === null || column === void 0 ? void 0 : column.filters).map(key => String(key));
      setFilteredKeysSync(allFilterKeys);
    } else {
      setFilteredKeysSync([]);
    }
  };
  const getTreeData = _ref6 => {
    let {
      filters
    } = _ref6;
    return (filters || []).map((filter, index) => {
      const key = String(filter.value);
      const item = {
        title: filter.text,
        key: filter.value !== undefined ? key : index
      };
      if (filter.children) {
        item.children = getTreeData({
          filters: filter.children
        });
      }
      return item;
    });
  };
  const getFilterData = node => {
    var _a;
    return Object.assign(Object.assign({}, node), {
      text: node.title,
      value: node.key,
      children: ((_a = node.children) === null || _a === void 0 ? void 0 : _a.map(item => getFilterData(item))) || []
    });
  };
  let dropdownContent;
  if (typeof column.filterDropdown === 'function') {
    dropdownContent = column.filterDropdown({
      prefixCls: \`\${dropdownPrefixCls}-custom\`,
      setSelectedKeys: selectedKeys => onSelectKeys({
        selectedKeys
      }),
      selectedKeys: getFilteredKeysSync(),
      confirm: doFilter,
      clearFilters: onReset,
      filters: column.filters,
      visible: mergedVisible,
      close: () => {
        triggerVisible(false);
      }
    });
  } else if (column.filterDropdown) {
    dropdownContent = column.filterDropdown;
  } else {
    const selectedKeys = getFilteredKeysSync() || [];
    const getFilterComponent = () => {
      if ((column.filters || []).length === 0) {
        return /*#__PURE__*/react.createElement(empty/* default */.Z, {
          image: empty/* default.PRESENTED_IMAGE_SIMPLE */.Z.PRESENTED_IMAGE_SIMPLE,
          description: locale.filterEmptyText,
          imageStyle: {
            height: 24
          },
          style: {
            margin: 0,
            padding: '16px 0'
          }
        });
      }
      if (filterMode === 'tree') {
        return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(useFilter_FilterSearch, {
          filterSearch: filterSearch,
          value: searchValue,
          onChange: onSearch,
          tablePrefixCls: tablePrefixCls,
          locale: locale
        }), /*#__PURE__*/react.createElement("div", {
          className: \`\${tablePrefixCls}-filter-dropdown-tree\`
        }, filterMultiple ? /*#__PURE__*/react.createElement(es_checkbox/* default */.Z, {
          checked: selectedKeys.length === flattenKeys(column.filters).length,
          indeterminate: selectedKeys.length > 0 && selectedKeys.length < flattenKeys(column.filters).length,
          className: \`\${tablePrefixCls}-filter-dropdown-checkall\`,
          onChange: onCheckAll
        }, locale.filterCheckall) : null, /*#__PURE__*/react.createElement(tree/* default */.Z, {
          checkable: true,
          selectable: false,
          blockNode: true,
          multiple: filterMultiple,
          checkStrictly: !filterMultiple,
          className: \`\${dropdownPrefixCls}-menu\`,
          onCheck: onCheck,
          checkedKeys: selectedKeys,
          selectedKeys: selectedKeys,
          showIcon: false,
          treeData: getTreeData({
            filters: column.filters
          }),
          autoExpandParent: true,
          defaultExpandAll: true,
          filterTreeNode: searchValue.trim() ? node => {
            if (typeof filterSearch === 'function') {
              return filterSearch(searchValue, getFilterData(node));
            }
            return searchValueMatched(searchValue, node.title);
          } : undefined
        })));
      }
      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(useFilter_FilterSearch, {
        filterSearch: filterSearch,
        value: searchValue,
        onChange: onSearch,
        tablePrefixCls: tablePrefixCls,
        locale: locale
      }), /*#__PURE__*/react.createElement(es_menu/* default */.Z, {
        selectable: true,
        multiple: filterMultiple,
        prefixCls: \`\${dropdownPrefixCls}-menu\`,
        className: dropdownMenuClass,
        onSelect: onSelectKeys,
        onDeselect: onSelectKeys,
        selectedKeys: selectedKeys,
        getPopupContainer: getPopupContainer,
        openKeys: openKeys,
        onOpenChange: onOpenChange,
        items: renderFilterItems({
          filters: column.filters || [],
          filterSearch,
          prefixCls,
          filteredKeys: getFilteredKeysSync(),
          filterMultiple,
          searchValue
        })
      }));
    };
    const getResetDisabled = () => {
      if (filterResetToDefaultFilteredValue) {
        return (0,isEqual/* default */.Z)((defaultFilteredValue || []).map(key => String(key)), selectedKeys, true);
      }
      return selectedKeys.length === 0;
    };
    dropdownContent = /*#__PURE__*/react.createElement(react.Fragment, null, getFilterComponent(), /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-dropdown-btns\`
    }, /*#__PURE__*/react.createElement(es_button/* default */.ZP, {
      type: "link",
      size: "small",
      disabled: getResetDisabled(),
      onClick: () => onReset()
    }, locale.filterReset), /*#__PURE__*/react.createElement(es_button/* default */.ZP, {
      type: "primary",
      size: "small",
      onClick: onConfirm
    }, locale.filterConfirm)));
  }
  // We should not block customize Menu with additional props
  if (column.filterDropdown) {
    dropdownContent = /*#__PURE__*/react.createElement(OverrideContext/* OverrideProvider */.J, {
      selectable: undefined
    }, dropdownContent);
  }
  const menu = () => /*#__PURE__*/react.createElement(FilterWrapper, {
    className: \`\${prefixCls}-dropdown\`
  }, dropdownContent);
  let filterIcon;
  if (typeof column.filterIcon === 'function') {
    filterIcon = column.filterIcon(filtered);
  } else if (column.filterIcon) {
    filterIcon = column.filterIcon;
  } else {
    filterIcon = /*#__PURE__*/react.createElement(FilterFilled/* default */.Z, null);
  }
  const {
    direction
  } = react.useContext(context/* ConfigContext */.E_);
  return /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-column\`
  }, /*#__PURE__*/react.createElement("span", {
    className: \`\${tablePrefixCls}-column-title\`
  }, children), /*#__PURE__*/react.createElement(es_dropdown/* default */.Z, {
    dropdownRender: menu,
    trigger: ['click'],
    open: mergedVisible,
    onOpenChange: onVisibleChange,
    getPopupContainer: getPopupContainer,
    placement: direction === 'rtl' ? 'bottomLeft' : 'bottomRight'
  }, /*#__PURE__*/react.createElement("span", {
    role: "button",
    tabIndex: -1,
    className: classnames_default()(\`\${prefixCls}-trigger\`, {
      active: filtered
    }),
    onClick: e => {
      e.stopPropagation();
    }
  }, filterIcon)));
}
/* harmony default export */ var useFilter_FilterDropdown = (FilterDropdown);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useFilter/index.js





function collectFilterStates(columns, init, pos) {
  let filterStates = [];
  (columns || []).forEach((column, index) => {
    var _a;
    const columnPos = getColumnPos(index, pos);
    if (column.filters || 'filterDropdown' in column || 'onFilter' in column) {
      if ('filteredValue' in column) {
        // Controlled
        let filteredValues = column.filteredValue;
        if (!('filterDropdown' in column)) {
          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;
        }
        filterStates.push({
          column,
          key: getColumnKey(column, columnPos),
          filteredKeys: filteredValues,
          forceFiltered: column.filtered
        });
      } else {
        // Uncontrolled
        filterStates.push({
          column,
          key: getColumnKey(column, columnPos),
          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,
          forceFiltered: column.filtered
        });
      }
    }
    if ('children' in column) {
      filterStates = [].concat((0,toConsumableArray/* default */.Z)(filterStates), (0,toConsumableArray/* default */.Z)(collectFilterStates(column.children, init, columnPos)));
    }
  });
  return filterStates;
}
function injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale, triggerFilter, getPopupContainer, pos) {
  return columns.map((column, index) => {
    const columnPos = getColumnPos(index, pos);
    const {
      filterMultiple = true,
      filterMode,
      filterSearch
    } = column;
    let newColumn = column;
    if (newColumn.filters || newColumn.filterDropdown) {
      const columnKey = getColumnKey(newColumn, columnPos);
      const filterState = filterStates.find(_ref => {
        let {
          key
        } = _ref;
        return columnKey === key;
      });
      newColumn = Object.assign(Object.assign({}, newColumn), {
        title: renderProps => /*#__PURE__*/react.createElement(useFilter_FilterDropdown, {
          tablePrefixCls: prefixCls,
          prefixCls: \`\${prefixCls}-filter\`,
          dropdownPrefixCls: dropdownPrefixCls,
          column: newColumn,
          columnKey: columnKey,
          filterState: filterState,
          filterMultiple: filterMultiple,
          filterMode: filterMode,
          filterSearch: filterSearch,
          triggerFilter: triggerFilter,
          locale: locale,
          getPopupContainer: getPopupContainer
        }, renderColumnTitle(column.title, renderProps))
      });
    }
    if ('children' in newColumn) {
      newColumn = Object.assign(Object.assign({}, newColumn), {
        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale, triggerFilter, getPopupContainer, columnPos)
      });
    }
    return newColumn;
  });
}
function flattenKeys(filters) {
  let keys = [];
  (filters || []).forEach(_ref2 => {
    let {
      value,
      children
    } = _ref2;
    keys.push(value);
    if (children) {
      keys = [].concat((0,toConsumableArray/* default */.Z)(keys), (0,toConsumableArray/* default */.Z)(flattenKeys(children)));
    }
  });
  return keys;
}
function generateFilterInfo(filterStates) {
  const currentFilters = {};
  filterStates.forEach(_ref3 => {
    let {
      key,
      filteredKeys,
      column
    } = _ref3;
    const {
      filters,
      filterDropdown
    } = column;
    if (filterDropdown) {
      currentFilters[key] = filteredKeys || null;
    } else if (Array.isArray(filteredKeys)) {
      const keys = flattenKeys(filters);
      currentFilters[key] = keys.filter(originKey => filteredKeys.includes(String(originKey)));
    } else {
      currentFilters[key] = null;
    }
  });
  return currentFilters;
}
function getFilterData(data, filterStates) {
  return filterStates.reduce((currentData, filterState) => {
    const {
      column: {
        onFilter,
        filters
      },
      filteredKeys
    } = filterState;
    if (onFilter && filteredKeys && filteredKeys.length) {
      return currentData.filter(record => filteredKeys.some(key => {
        const keys = flattenKeys(filters);
        const keyIndex = keys.findIndex(k => String(k) === String(key));
        const realKey = keyIndex !== -1 ? keys[keyIndex] : key;
        return onFilter(realKey, record);
      }));
    }
    return currentData;
  }, data);
}
function useFilter(_ref4) {
  let {
    prefixCls,
    dropdownPrefixCls,
    mergedColumns,
    onFilterChange,
    getPopupContainer,
    locale: tableLocale
  } = _ref4;
  const [filterStates, setFilterStates] = react.useState(() => collectFilterStates(mergedColumns, true));
  const mergedFilterStates = react.useMemo(() => {
    const collectedStates = collectFilterStates(mergedColumns, false);
    if (collectedStates.length === 0) {
      return collectedStates;
    }
    let filteredKeysIsAllNotControlled = true;
    let filteredKeysIsAllControlled = true;
    collectedStates.forEach(_ref5 => {
      let {
        filteredKeys
      } = _ref5;
      if (filteredKeys !== undefined) {
        filteredKeysIsAllNotControlled = false;
      } else {
        filteredKeysIsAllControlled = false;
      }
    });
    // Return if not controlled
    if (filteredKeysIsAllNotControlled) {
      // Filter column may have been removed
      const keyList = (mergedColumns || []).map((column, index) => getColumnKey(column, getColumnPos(index)));
      return filterStates.filter(_ref6 => {
        let {
          key
        } = _ref6;
        return keyList.includes(key);
      }).map(item => {
        const col = mergedColumns[keyList.findIndex(key => key === item.key)];
        return Object.assign(Object.assign({}, item), {
          column: Object.assign(Object.assign({}, item.column), col),
          forceFiltered: col.filtered
        });
      });
    }
     false ? 0 : void 0;
    return collectedStates;
  }, [mergedColumns, filterStates]);
  const filters = react.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);
  const triggerFilter = filterState => {
    const newFilterStates = mergedFilterStates.filter(_ref7 => {
      let {
        key
      } = _ref7;
      return key !== filterState.key;
    });
    newFilterStates.push(filterState);
    setFilterStates(newFilterStates);
    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);
  };
  const transformColumns = innerColumns => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer);
  return [transformColumns, mergedFilterStates, filters];
}
/* harmony default export */ var hooks_useFilter = (useFilter);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useLazyKVMap.js

function useLazyKVMap(data, childrenColumnName, getRowKey) {
  const mapCacheRef = react.useRef({});
  function getRecordByKey(key) {
    if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {
      const kvMap = new Map();
      /* eslint-disable no-inner-declarations */
      function dig(records) {
        records.forEach((record, index) => {
          const rowKey = getRowKey(record, index);
          kvMap.set(rowKey, record);
          if (record && typeof record === 'object' && childrenColumnName in record) {
            dig(record[childrenColumnName] || []);
          }
        });
      }
      /* eslint-enable */
      dig(data);
      mapCacheRef.current = {
        data,
        childrenColumnName,
        kvMap,
        getRowKey
      };
    }
    return mapCacheRef.current.kvMap.get(key);
  }
  return [getRecordByKey];
}
// EXTERNAL MODULE: ./node_modules/antd/es/_util/extendsObject.js
var extendsObject = __webpack_require__(38780);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/usePagination.js
var usePagination_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};


const DEFAULT_PAGE_SIZE = 10;
function getPaginationParam(mergedPagination, pagination) {
  const param = {
    current: mergedPagination.current,
    pageSize: mergedPagination.pageSize
  };
  const paginationObj = pagination && typeof pagination === 'object' ? pagination : {};
  Object.keys(paginationObj).forEach(pageProp => {
    const value = mergedPagination[pageProp];
    if (typeof value !== 'function') {
      param[pageProp] = value;
    }
  });
  return param;
}
function usePagination(total, pagination, onChange) {
  const _a = pagination && typeof pagination === 'object' ? pagination : {},
    {
      total: paginationTotal = 0
    } = _a,
    paginationObj = usePagination_rest(_a, ["total"]);
  const [innerPagination, setInnerPagination] = (0,react.useState)(() => ({
    current: 'defaultCurrent' in paginationObj ? paginationObj.defaultCurrent : 1,
    pageSize: 'defaultPageSize' in paginationObj ? paginationObj.defaultPageSize : DEFAULT_PAGE_SIZE
  }));
  // ============ Basic Pagination Config ============
  const mergedPagination = (0,extendsObject/* default */.Z)(innerPagination, paginationObj, {
    total: paginationTotal > 0 ? paginationTotal : total
  });
  // Reset \`current\` if data length or pageSize changed
  const maxPage = Math.ceil((paginationTotal || total) / mergedPagination.pageSize);
  if (mergedPagination.current > maxPage) {
    // Prevent a maximum page count of 0
    mergedPagination.current = maxPage || 1;
  }
  const refreshPagination = (current, pageSize) => {
    setInnerPagination({
      current: current !== null && current !== void 0 ? current : 1,
      pageSize: pageSize || mergedPagination.pageSize
    });
  };
  const onInternalChange = (current, pageSize) => {
    var _a;
    if (pagination) {
      (_a = pagination.onChange) === null || _a === void 0 ? void 0 : _a.call(pagination, current, pageSize);
    }
    refreshPagination(current, pageSize);
    onChange(current, pageSize || (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize));
  };
  if (pagination === false) {
    return [{}, () => {}];
  }
  return [Object.assign(Object.assign({}, mergedPagination), {
    onChange: onInternalChange
  }), refreshPagination];
}
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/DownOutlined.js + 1 modules
var DownOutlined = __webpack_require__(80882);
// EXTERNAL MODULE: ./node_modules/rc-tree/es/util.js
var util = __webpack_require__(10225);
// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/conductUtil.js
var conductUtil = __webpack_require__(17341);
// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/treeUtil.js
var treeUtil = __webpack_require__(1089);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useSelection.js













// TODO: warning if use ajax!!!
const SELECTION_COLUMN = {};
const SELECTION_ALL = 'SELECT_ALL';
const SELECTION_INVERT = 'SELECT_INVERT';
const SELECTION_NONE = 'SELECT_NONE';
const EMPTY_LIST = [];
function flattenData(childrenColumnName, data) {
  let list = [];
  (data || []).forEach(record => {
    list.push(record);
    if (record && typeof record === 'object' && childrenColumnName in record) {
      list = [].concat((0,toConsumableArray/* default */.Z)(list), (0,toConsumableArray/* default */.Z)(flattenData(childrenColumnName, record[childrenColumnName])));
    }
  });
  return list;
}
function useSelection(rowSelection, config) {
  const {
    preserveSelectedRowKeys,
    selectedRowKeys,
    defaultSelectedRowKeys,
    getCheckboxProps,
    onChange: onSelectionChange,
    onSelect,
    onSelectAll,
    onSelectInvert,
    onSelectNone,
    onSelectMultiple,
    columnWidth: selectionColWidth,
    type: selectionType,
    selections,
    fixed,
    renderCell: customizeRenderCell,
    hideSelectAll,
    checkStrictly = true
  } = rowSelection || {};
  const {
    prefixCls,
    data,
    pageData,
    getRecordByKey,
    getRowKey,
    expandType,
    childrenColumnName,
    locale: tableLocale,
    getPopupContainer
  } = config;
  // ========================= Keys =========================
  const [mergedSelectedKeys, setMergedSelectedKeys] = (0,useMergedState/* default */.Z)(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {
    value: selectedRowKeys
  });
  // ======================== Caches ========================
  const preserveRecordsRef = react.useRef(new Map());
  const updatePreserveRecordsCache = (0,react.useCallback)(keys => {
    if (preserveSelectedRowKeys) {
      const newCache = new Map();
      // Keep key if mark as preserveSelectedRowKeys
      keys.forEach(key => {
        let record = getRecordByKey(key);
        if (!record && preserveRecordsRef.current.has(key)) {
          record = preserveRecordsRef.current.get(key);
        }
        newCache.set(key, record);
      });
      // Refresh to new cache
      preserveRecordsRef.current = newCache;
    }
  }, [getRecordByKey, preserveSelectedRowKeys]);
  // Update cache with selectedKeys
  react.useEffect(() => {
    updatePreserveRecordsCache(mergedSelectedKeys);
  }, [mergedSelectedKeys]);
  const {
    keyEntities
  } = (0,react.useMemo)(() => checkStrictly ? {
    keyEntities: null
  } : (0,treeUtil/* convertDataToEntities */.I8)(data, {
    externalGetKey: getRowKey,
    childrenPropName: childrenColumnName
  }), [data, getRowKey, checkStrictly, childrenColumnName]);
  // Get flatten data
  const flattedData = (0,react.useMemo)(() => flattenData(childrenColumnName, pageData), [pageData, childrenColumnName]);
  // Get all checkbox props
  const checkboxPropsMap = (0,react.useMemo)(() => {
    const map = new Map();
    flattedData.forEach((record, index) => {
      const key = getRowKey(record, index);
      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};
      map.set(key, checkboxProps);
       false ? 0 : void 0;
    });
    return map;
  }, [flattedData, getRowKey, getCheckboxProps]);
  const isCheckboxDisabled = (0,react.useCallback)(r => {
    var _a;
    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);
  }, [checkboxPropsMap, getRowKey]);
  const [derivedSelectedKeys, derivedHalfSelectedKeys] = (0,react.useMemo)(() => {
    if (checkStrictly) {
      return [mergedSelectedKeys || [], []];
    }
    const {
      checkedKeys,
      halfCheckedKeys
    } = (0,conductUtil/* conductCheck */.S)(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);
    return [checkedKeys || [], halfCheckedKeys];
  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);
  const derivedSelectedKeySet = (0,react.useMemo)(() => {
    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;
    return new Set(keys);
  }, [derivedSelectedKeys, selectionType]);
  const derivedHalfSelectedKeySet = (0,react.useMemo)(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);
  // Save last selected key to enable range selection
  const [lastSelectedKey, setLastSelectedKey] = (0,react.useState)(null);
  // Reset if rowSelection reset
  react.useEffect(() => {
    if (!rowSelection) {
      setMergedSelectedKeys(EMPTY_LIST);
    }
  }, [!!rowSelection]);
  const setSelectedKeys = (0,react.useCallback)((keys, method) => {
    let availableKeys;
    let records;
    updatePreserveRecordsCache(keys);
    if (preserveSelectedRowKeys) {
      availableKeys = keys;
      records = keys.map(key => preserveRecordsRef.current.get(key));
    } else {
      // Filter key which not exist in the \`dataSource\`
      availableKeys = [];
      records = [];
      keys.forEach(key => {
        const record = getRecordByKey(key);
        if (record !== undefined) {
          availableKeys.push(key);
          records.push(record);
        }
      });
    }
    setMergedSelectedKeys(availableKeys);
    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {
      type: method
    });
  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);
  // ====================== Selections ======================
  // Trigger single \`onSelect\` event
  const triggerSingleSelection = (0,react.useCallback)((key, selected, keys, event) => {
    if (onSelect) {
      const rows = keys.map(k => getRecordByKey(k));
      onSelect(getRecordByKey(key), selected, rows, event);
    }
    setSelectedKeys(keys, 'single');
  }, [onSelect, getRecordByKey, setSelectedKeys]);
  const mergedSelections = (0,react.useMemo)(() => {
    if (!selections || hideSelectAll) {
      return null;
    }
    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;
    return selectionList.map(selection => {
      if (selection === SELECTION_ALL) {
        return {
          key: 'all',
          text: tableLocale.selectionAll,
          onSelect() {
            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {
              const checkProps = checkboxPropsMap.get(key);
              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);
            }), 'all');
          }
        };
      }
      if (selection === SELECTION_INVERT) {
        return {
          key: 'invert',
          text: tableLocale.selectInvert,
          onSelect() {
            const keySet = new Set(derivedSelectedKeySet);
            pageData.forEach((record, index) => {
              const key = getRowKey(record, index);
              const checkProps = checkboxPropsMap.get(key);
              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {
                if (keySet.has(key)) {
                  keySet.delete(key);
                } else {
                  keySet.add(key);
                }
              }
            });
            const keys = Array.from(keySet);
            if (onSelectInvert) {
               false ? 0 : void 0;
              onSelectInvert(keys);
            }
            setSelectedKeys(keys, 'invert');
          }
        };
      }
      if (selection === SELECTION_NONE) {
        return {
          key: 'none',
          text: tableLocale.selectNone,
          onSelect() {
            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();
            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {
              const checkProps = checkboxPropsMap.get(key);
              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;
            }), 'none');
          }
        };
      }
      return selection;
    }).map(selection => Object.assign(Object.assign({}, selection), {
      onSelect: function () {
        var _a2;
        var _a;
        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }
        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));
        setLastSelectedKey(null);
      }
    }));
  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);
  // ======================= Columns ========================
  const transformColumns = (0,react.useCallback)(columns => {
    var _a;
    // >>>>>>>>>>> Skip if not exists \`rowSelection\`
    if (!rowSelection) {
       false ? 0 : void 0;
      return columns.filter(col => col !== SELECTION_COLUMN);
    }
    // >>>>>>>>>>> Support selection
    let cloneColumns = (0,toConsumableArray/* default */.Z)(columns);
    const keySet = new Set(derivedSelectedKeySet);
    // Record key only need check with enabled
    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);
    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));
    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));
    const onSelectAllChange = () => {
      const changeKeys = [];
      if (checkedCurrentAll) {
        recordKeys.forEach(key => {
          keySet.delete(key);
          changeKeys.push(key);
        });
      } else {
        recordKeys.forEach(key => {
          if (!keySet.has(key)) {
            keySet.add(key);
            changeKeys.push(key);
          }
        });
      }
      const keys = Array.from(keySet);
      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));
      setSelectedKeys(keys, 'all');
      setLastSelectedKey(null);
    };
    // ===================== Render =====================
    // Title Cell
    let title;
    if (selectionType !== 'radio') {
      let customizeSelections;
      if (mergedSelections) {
        const menu = {
          getPopupContainer,
          items: mergedSelections.map((selection, index) => {
            const {
              key,
              text,
              onSelect: onSelectionClick
            } = selection;
            return {
              key: key || index,
              onClick: () => {
                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);
              },
              label: text
            };
          })
        };
        customizeSelections = /*#__PURE__*/react.createElement("div", {
          className: \`\${prefixCls}-selection-extra\`
        }, /*#__PURE__*/react.createElement(es_dropdown/* default */.Z, {
          menu: menu,
          getPopupContainer: getPopupContainer
        }, /*#__PURE__*/react.createElement("span", null, /*#__PURE__*/react.createElement(DownOutlined/* default */.Z, null))));
      }
      const allDisabledData = flattedData.map((record, index) => {
        const key = getRowKey(record, index);
        const checkboxProps = checkboxPropsMap.get(key) || {};
        return Object.assign({
          checked: keySet.has(key)
        }, checkboxProps);
      }).filter(_ref => {
        let {
          disabled
        } = _ref;
        return disabled;
      });
      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;
      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {
        let {
          checked
        } = _ref2;
        return checked;
      });
      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {
        let {
          checked
        } = _ref3;
        return checked;
      });
      title = !hideSelectAll && /*#__PURE__*/react.createElement("div", {
        className: \`\${prefixCls}-selection\`
      }, /*#__PURE__*/react.createElement(es_checkbox/* default */.Z, {
        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,
        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,
        onChange: onSelectAllChange,
        disabled: flattedData.length === 0 || allDisabled,
        "aria-label": customizeSelections ? 'Custom selection' : 'Select all',
        skipGroup: true
      }), customizeSelections);
    }
    // Body Cell
    let renderCell;
    if (selectionType === 'radio') {
      renderCell = (_, record, index) => {
        const key = getRowKey(record, index);
        const checked = keySet.has(key);
        return {
          node: /*#__PURE__*/react.createElement(es_radio/* default */.ZP, Object.assign({}, checkboxPropsMap.get(key), {
            checked: checked,
            onClick: e => e.stopPropagation(),
            onChange: event => {
              if (!keySet.has(key)) {
                triggerSingleSelection(key, true, [key], event.nativeEvent);
              }
            }
          })),
          checked
        };
      };
    } else {
      renderCell = (_, record, index) => {
        var _a;
        const key = getRowKey(record, index);
        const checked = keySet.has(key);
        const indeterminate = derivedHalfSelectedKeySet.has(key);
        const checkboxProps = checkboxPropsMap.get(key);
        let mergedIndeterminate;
        if (expandType === 'nest') {
          mergedIndeterminate = indeterminate;
           false ? 0 : void 0;
        } else {
          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;
        }
        // Record checked
        return {
          node: /*#__PURE__*/react.createElement(es_checkbox/* default */.Z, Object.assign({}, checkboxProps, {
            indeterminate: mergedIndeterminate,
            checked: checked,
            skipGroup: true,
            onClick: e => e.stopPropagation(),
            onChange: _ref4 => {
              let {
                nativeEvent
              } = _ref4;
              const {
                shiftKey
              } = nativeEvent;
              let startIndex = -1;
              let endIndex = -1;
              // Get range of this
              if (shiftKey && checkStrictly) {
                const pointKeys = new Set([lastSelectedKey, key]);
                recordKeys.some((recordKey, recordIndex) => {
                  if (pointKeys.has(recordKey)) {
                    if (startIndex === -1) {
                      startIndex = recordIndex;
                    } else {
                      endIndex = recordIndex;
                      return true;
                    }
                  }
                  return false;
                });
              }
              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {
                // Batch update selections
                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);
                const changedKeys = [];
                if (checked) {
                  rangeKeys.forEach(recordKey => {
                    if (keySet.has(recordKey)) {
                      changedKeys.push(recordKey);
                      keySet.delete(recordKey);
                    }
                  });
                } else {
                  rangeKeys.forEach(recordKey => {
                    if (!keySet.has(recordKey)) {
                      changedKeys.push(recordKey);
                      keySet.add(recordKey);
                    }
                  });
                }
                const keys = Array.from(keySet);
                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));
                setSelectedKeys(keys, 'multiple');
              } else {
                // Single record selected
                const originCheckedKeys = derivedSelectedKeys;
                if (checkStrictly) {
                  const checkedKeys = checked ? (0,util/* arrDel */._5)(originCheckedKeys, key) : (0,util/* arrAdd */.L0)(originCheckedKeys, key);
                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);
                } else {
                  // Always fill first
                  const result = (0,conductUtil/* conductCheck */.S)([].concat((0,toConsumableArray/* default */.Z)(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);
                  const {
                    checkedKeys,
                    halfCheckedKeys
                  } = result;
                  let nextCheckedKeys = checkedKeys;
                  // If remove, we do it again to correction
                  if (checked) {
                    const tempKeySet = new Set(checkedKeys);
                    tempKeySet.delete(key);
                    nextCheckedKeys = (0,conductUtil/* conductCheck */.S)(Array.from(tempKeySet), {
                      checked: false,
                      halfCheckedKeys
                    }, keyEntities, isCheckboxDisabled).checkedKeys;
                  }
                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);
                }
              }
              if (checked) {
                setLastSelectedKey(null);
              } else {
                setLastSelectedKey(key);
              }
            }
          })),
          checked
        };
      };
    }
    const renderSelectionCell = (_, record, index) => {
      const {
        node,
        checked
      } = renderCell(_, record, index);
      if (customizeRenderCell) {
        return customizeRenderCell(checked, record, index, node);
      }
      return node;
    };
    // Insert selection column if not exist
    if (!cloneColumns.includes(SELECTION_COLUMN)) {
      // Always after expand icon
      if (cloneColumns.findIndex(col => {
        var _a;
        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';
      }) === 0) {
        const [expandColumn, ...restColumns] = cloneColumns;
        cloneColumns = [expandColumn, SELECTION_COLUMN].concat((0,toConsumableArray/* default */.Z)(restColumns));
      } else {
        // Normal insert at first column
        cloneColumns = [SELECTION_COLUMN].concat((0,toConsumableArray/* default */.Z)(cloneColumns));
      }
    }
    // Deduplicate selection column
    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);
     false ? 0 : void 0;
    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);
    // Fixed column logic
    const prevCol = cloneColumns[selectionColumnIndex - 1];
    const nextCol = cloneColumns[selectionColumnIndex + 1];
    let mergedFixed = fixed;
    if (mergedFixed === undefined) {
      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {
        mergedFixed = nextCol.fixed;
      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {
        mergedFixed = prevCol.fixed;
      }
    }
    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {
      prevCol.fixed = mergedFixed;
    }
    // Replace with real selection column
    const selectionColumn = {
      fixed: mergedFixed,
      width: selectionColWidth,
      className: \`\${prefixCls}-selection-column\`,
      title: rowSelection.columnTitle || title,
      render: renderSelectionCell,
      [INTERNAL_COL_DEFINE]: {
        className: \`\${prefixCls}-selection-col\`
      }
    };
    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);
  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);
  return [transformColumns, derivedSelectedKeySet];
}
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js + 1 modules
var CaretDownOutlined = __webpack_require__(39398);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js + 1 modules
var CaretUpOutlined = __webpack_require__(10010);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useSorter.js








const ASCEND = 'ascend';
const DESCEND = 'descend';
function getMultiplePriority(column) {
  if (typeof column.sorter === 'object' && typeof column.sorter.multiple === 'number') {
    return column.sorter.multiple;
  }
  return false;
}
function getSortFunction(sorter) {
  if (typeof sorter === 'function') {
    return sorter;
  }
  if (sorter && typeof sorter === 'object' && sorter.compare) {
    return sorter.compare;
  }
  return false;
}
function nextSortDirection(sortDirections, current) {
  if (!current) {
    return sortDirections[0];
  }
  return sortDirections[sortDirections.indexOf(current) + 1];
}
function collectSortStates(columns, init, pos) {
  let sortStates = [];
  function pushState(column, columnPos) {
    sortStates.push({
      column,
      key: getColumnKey(column, columnPos),
      multiplePriority: getMultiplePriority(column),
      sortOrder: column.sortOrder
    });
  }
  (columns || []).forEach((column, index) => {
    const columnPos = getColumnPos(index, pos);
    if (column.children) {
      if ('sortOrder' in column) {
        // Controlled
        pushState(column, columnPos);
      }
      sortStates = [].concat((0,toConsumableArray/* default */.Z)(sortStates), (0,toConsumableArray/* default */.Z)(collectSortStates(column.children, init, columnPos)));
    } else if (column.sorter) {
      if ('sortOrder' in column) {
        // Controlled
        pushState(column, columnPos);
      } else if (init && column.defaultSortOrder) {
        // Default sorter
        sortStates.push({
          column,
          key: getColumnKey(column, columnPos),
          multiplePriority: getMultiplePriority(column),
          sortOrder: column.defaultSortOrder
        });
      }
    }
  });
  return sortStates;
}
function injectSorter(prefixCls, columns, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {
  return (columns || []).map((column, index) => {
    const columnPos = getColumnPos(index, pos);
    let newColumn = column;
    if (newColumn.sorter) {
      const sortDirections = newColumn.sortDirections || defaultSortDirections;
      const showSorterTooltip = newColumn.showSorterTooltip === undefined ? tableShowSorterTooltip : newColumn.showSorterTooltip;
      const columnKey = getColumnKey(newColumn, columnPos);
      const sorterState = sorterStates.find(_ref => {
        let {
          key
        } = _ref;
        return key === columnKey;
      });
      const sorterOrder = sorterState ? sorterState.sortOrder : null;
      const nextSortOrder = nextSortDirection(sortDirections, sorterOrder);
      const upNode = sortDirections.includes(ASCEND) && /*#__PURE__*/react.createElement(CaretUpOutlined/* default */.Z, {
        className: classnames_default()(\`\${prefixCls}-column-sorter-up\`, {
          active: sorterOrder === ASCEND
        }),
        role: "presentation"
      });
      const downNode = sortDirections.includes(DESCEND) && /*#__PURE__*/react.createElement(CaretDownOutlined/* default */.Z, {
        className: classnames_default()(\`\${prefixCls}-column-sorter-down\`, {
          active: sorterOrder === DESCEND
        }),
        role: "presentation"
      });
      const {
        cancelSort,
        triggerAsc,
        triggerDesc
      } = tableLocale || {};
      let sortTip = cancelSort;
      if (nextSortOrder === DESCEND) {
        sortTip = triggerDesc;
      } else if (nextSortOrder === ASCEND) {
        sortTip = triggerAsc;
      }
      const tooltipProps = typeof showSorterTooltip === 'object' ? showSorterTooltip : {
        title: sortTip
      };
      newColumn = Object.assign(Object.assign({}, newColumn), {
        className: classnames_default()(newColumn.className, {
          [\`\${prefixCls}-column-sort\`]: sorterOrder
        }),
        title: renderProps => {
          const renderSortTitle = /*#__PURE__*/react.createElement("div", {
            className: \`\${prefixCls}-column-sorters\`
          }, /*#__PURE__*/react.createElement("span", {
            className: \`\${prefixCls}-column-title\`
          }, renderColumnTitle(column.title, renderProps)), /*#__PURE__*/react.createElement("span", {
            className: classnames_default()(\`\${prefixCls}-column-sorter\`, {
              [\`\${prefixCls}-column-sorter-full\`]: !!(upNode && downNode)
            })
          }, /*#__PURE__*/react.createElement("span", {
            className: \`\${prefixCls}-column-sorter-inner\`
          }, upNode, downNode)));
          return showSorterTooltip ? /*#__PURE__*/react.createElement(es_tooltip/* default */.Z, Object.assign({}, tooltipProps), renderSortTitle) : renderSortTitle;
        },
        onHeaderCell: col => {
          const cell = column.onHeaderCell && column.onHeaderCell(col) || {};
          const originOnClick = cell.onClick;
          const originOKeyDown = cell.onKeyDown;
          cell.onClick = event => {
            triggerSorter({
              column,
              key: columnKey,
              sortOrder: nextSortOrder,
              multiplePriority: getMultiplePriority(column)
            });
            originOnClick === null || originOnClick === void 0 ? void 0 : originOnClick(event);
          };
          cell.onKeyDown = event => {
            if (event.keyCode === KeyCode/* default.ENTER */.Z.ENTER) {
              triggerSorter({
                column,
                key: columnKey,
                sortOrder: nextSortOrder,
                multiplePriority: getMultiplePriority(column)
              });
              originOKeyDown === null || originOKeyDown === void 0 ? void 0 : originOKeyDown(event);
            }
          };
          const renderTitle = safeColumnTitle(column.title, {});
          const displayTitle = renderTitle === null || renderTitle === void 0 ? void 0 : renderTitle.toString();
          // Inform the screen-reader so it can tell the visually impaired user which column is sorted
          if (sorterOrder) {
            cell['aria-sort'] = sorterOrder === 'ascend' ? 'ascending' : 'descending';
          } else {
            cell['aria-label'] = displayTitle || '';
          }
          cell.className = classnames_default()(cell.className, \`\${prefixCls}-column-has-sorters\`);
          cell.tabIndex = 0;
          if (column.ellipsis) {
            cell.title = (renderTitle !== null && renderTitle !== void 0 ? renderTitle : '').toString();
          }
          return cell;
        }
      });
    }
    if ('children' in newColumn) {
      newColumn = Object.assign(Object.assign({}, newColumn), {
        children: injectSorter(prefixCls, newColumn.children, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)
      });
    }
    return newColumn;
  });
}
function stateToInfo(sorterStates) {
  const {
    column,
    sortOrder
  } = sorterStates;
  return {
    column,
    order: sortOrder,
    field: column.dataIndex,
    columnKey: column.key
  };
}
function generateSorterInfo(sorterStates) {
  const list = sorterStates.filter(_ref2 => {
    let {
      sortOrder
    } = _ref2;
    return sortOrder;
  }).map(stateToInfo);
  // =========== Legacy compatible support ===========
  // https://github.com/ant-design/ant-design/pull/19226
  if (list.length === 0 && sorterStates.length) {
    return Object.assign(Object.assign({}, stateToInfo(sorterStates[sorterStates.length - 1])), {
      column: undefined
    });
  }
  if (list.length <= 1) {
    return list[0] || {};
  }
  return list;
}
function getSortData(data, sortStates, childrenColumnName) {
  const innerSorterStates = sortStates.slice().sort((a, b) => b.multiplePriority - a.multiplePriority);
  const cloneData = data.slice();
  const runningSorters = innerSorterStates.filter(_ref3 => {
    let {
      column: {
        sorter
      },
      sortOrder
    } = _ref3;
    return getSortFunction(sorter) && sortOrder;
  });
  // Skip if no sorter needed
  if (!runningSorters.length) {
    return cloneData;
  }
  return cloneData.sort((record1, record2) => {
    for (let i = 0; i < runningSorters.length; i += 1) {
      const sorterState = runningSorters[i];
      const {
        column: {
          sorter
        },
        sortOrder
      } = sorterState;
      const compareFn = getSortFunction(sorter);
      if (compareFn && sortOrder) {
        const compareResult = compareFn(record1, record2, sortOrder);
        if (compareResult !== 0) {
          return sortOrder === ASCEND ? compareResult : -compareResult;
        }
      }
    }
    return 0;
  }).map(record => {
    const subRecords = record[childrenColumnName];
    if (subRecords) {
      return Object.assign(Object.assign({}, record), {
        [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName)
      });
    }
    return record;
  });
}
function useFilterSorter(_ref4) {
  let {
    prefixCls,
    mergedColumns,
    onSorterChange,
    sortDirections,
    tableLocale,
    showSorterTooltip
  } = _ref4;
  const [sortStates, setSortStates] = react.useState(collectSortStates(mergedColumns, true));
  const mergedSorterStates = react.useMemo(() => {
    let validate = true;
    const collectedStates = collectSortStates(mergedColumns, false);
    // Return if not controlled
    if (!collectedStates.length) {
      return sortStates;
    }
    const validateStates = [];
    function patchStates(state) {
      if (validate) {
        validateStates.push(state);
      } else {
        validateStates.push(Object.assign(Object.assign({}, state), {
          sortOrder: null
        }));
      }
    }
    let multipleMode = null;
    collectedStates.forEach(state => {
      if (multipleMode === null) {
        patchStates(state);
        if (state.sortOrder) {
          if (state.multiplePriority === false) {
            validate = false;
          } else {
            multipleMode = true;
          }
        }
      } else if (multipleMode && state.multiplePriority !== false) {
        patchStates(state);
      } else {
        validate = false;
        patchStates(state);
      }
    });
    return validateStates;
  }, [mergedColumns, sortStates]);
  // Get render columns title required props
  const columnTitleSorterProps = react.useMemo(() => {
    const sortColumns = mergedSorterStates.map(_ref5 => {
      let {
        column,
        sortOrder
      } = _ref5;
      return {
        column,
        order: sortOrder
      };
    });
    return {
      sortColumns,
      // Legacy
      sortColumn: sortColumns[0] && sortColumns[0].column,
      sortOrder: sortColumns[0] && sortColumns[0].order
    };
  }, [mergedSorterStates]);
  function triggerSorter(sortState) {
    let newSorterStates;
    if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {
      newSorterStates = [sortState];
    } else {
      newSorterStates = [].concat((0,toConsumableArray/* default */.Z)(mergedSorterStates.filter(_ref6 => {
        let {
          key
        } = _ref6;
        return key !== sortState.key;
      })), [sortState]);
    }
    setSortStates(newSorterStates);
    onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);
  }
  const transformColumns = innerColumns => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);
  const getSorters = () => generateSorterInfo(mergedSorterStates);
  return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];
}
;// CONCATENATED MODULE: ./node_modules/antd/es/table/hooks/useTitleColumns.js


function fillTitle(columns, columnTitleProps) {
  return columns.map(column => {
    const cloneColumn = Object.assign({}, column);
    cloneColumn.title = renderColumnTitle(column.title, columnTitleProps);
    if ('children' in cloneColumn) {
      cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);
    }
    return cloneColumn;
  });
}
function useTitleColumns(columnTitleProps) {
  const filledColumns = react.useCallback(columns => fillTitle(columns, columnTitleProps), [columnTitleProps]);
  return [filledColumns];
}
;// CONCATENATED MODULE: ./node_modules/antd/es/table/RcTable.js

/**
 * Same as \`rc-table\` but we modify trigger children update logic instead.
 */
/* harmony default export */ var RcTable = (genTable((prev, next) => {
  const {
    _renderTimes: prevRenderTimes
  } = prev;
  const {
    _renderTimes: nextRenderTimes
  } = next;
  return prevRenderTimes !== nextRenderTimes;
}));
// EXTERNAL MODULE: ./node_modules/@ctrl/tinycolor/dist/module/index.js
var dist_module = __webpack_require__(10274);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/bordered.js
const genBorderedStyle = token => {
  const {
    componentCls
  } = token;
  const tableBorder = \`\${token.lineWidth}px \${token.lineType} \${token.tableBorderColor}\`;
  const getSizeBorderStyle = (size, paddingVertical, paddingHorizontal) => ({
    [\`&\${componentCls}-\${size}\`]: {
      [\`> \${componentCls}-container\`]: {
        [\`> \${componentCls}-content, > \${componentCls}-body\`]: {
          '> table > tbody > tr > td': {
            [\`> \${componentCls}-expanded-row-fixed\`]: {
              margin: \`-\${paddingVertical}px -\${paddingHorizontal + token.lineWidth}px\`
            }
          }
        }
      }
    }
  });
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}\${componentCls}-bordered\`]: Object.assign(Object.assign(Object.assign({
        // ============================ Title =============================
        [\`> \${componentCls}-title\`]: {
          border: tableBorder,
          borderBottom: 0
        },
        // ============================ Content ============================
        [\`> \${componentCls}-container\`]: {
          borderInlineStart: tableBorder,
          [\`
            > \${componentCls}-content,
            > \${componentCls}-header,
            > \${componentCls}-body,
            > \${componentCls}-summary
          \`]: {
            '> table': {
              // ============================= Cell =============================
              [\`
                > thead > tr > th,
                > tbody > tr > td,
                > tfoot > tr > th,
                > tfoot > tr > td
              \`]: {
                borderInlineEnd: tableBorder
              },
              // ============================ Header ============================
              '> thead': {
                '> tr:not(:last-child) > th': {
                  borderBottom: tableBorder
                },
                '> tr > th::before': {
                  backgroundColor: 'transparent !important'
                }
              },
              // Fixed right should provides additional border
              [\`
                > thead > tr,
                > tbody > tr,
                > tfoot > tr
              \`]: {
                [\`> \${componentCls}-cell-fix-right-first::after\`]: {
                  borderInlineEnd: tableBorder
                }
              },
              // ========================== Expandable ==========================
              '> tbody > tr > td': {
                [\`> \${componentCls}-expanded-row-fixed\`]: {
                  margin: \`-\${token.tablePaddingVertical}px -\${token.tablePaddingHorizontal + token.lineWidth}px\`,
                  '&::after': {
                    position: 'absolute',
                    top: 0,
                    insetInlineEnd: token.lineWidth,
                    bottom: 0,
                    borderInlineEnd: tableBorder,
                    content: '""'
                  }
                }
              }
            }
          },
          [\`
            > \${componentCls}-content,
            > \${componentCls}-header
          \`]: {
            '> table': {
              borderTop: tableBorder
            }
          }
        },
        // ============================ Scroll ============================
        [\`&\${componentCls}-scroll-horizontal\`]: {
          [\`> \${componentCls}-container > \${componentCls}-body\`]: {
            '> table > tbody': {
              [\`
                > tr\${componentCls}-expanded-row,
                > tr\${componentCls}-placeholder
              \`]: {
                '> td': {
                  borderInlineEnd: 0
                }
              }
            }
          }
        }
      }, getSizeBorderStyle('middle', token.tablePaddingVerticalMiddle, token.tablePaddingHorizontalMiddle)), getSizeBorderStyle('small', token.tablePaddingVerticalSmall, token.tablePaddingHorizontalSmall)), {
        // ============================ Footer ============================
        [\`> \${componentCls}-footer\`]: {
          border: tableBorder,
          borderTop: 0
        }
      }),
      // ============================ Nested ============================
      [\`\${componentCls}-cell\`]: {
        [\`\${componentCls}-container:first-child\`]: {
          // :first-child to avoid the case when bordered and title is set
          borderTop: 0
        },
        // https://github.com/ant-design/ant-design/issues/35577
        '&-scrollbar:not([rowspan])': {
          boxShadow: \`0 \${token.lineWidth}px 0 \${token.lineWidth}px \${token.tableHeaderBg}\`
        }
      }
    }
  };
};
/* harmony default export */ var bordered = (genBorderedStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/ellipsis.js

const genEllipsisStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-cell-ellipsis\`]: Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
        wordBreak: 'keep-all',
        // Fixed first or last should special process
        [\`
          &\${componentCls}-cell-fix-left-last,
          &\${componentCls}-cell-fix-right-first
        \`]: {
          overflow: 'visible',
          [\`\${componentCls}-cell-content\`]: {
            display: 'block',
            overflow: 'hidden',
            textOverflow: 'ellipsis'
          }
        },
        [\`\${componentCls}-column-title\`]: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          wordBreak: 'keep-all'
        }
      })
    }
  };
};
/* harmony default export */ var ellipsis = (genEllipsisStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/empty.js
// ========================= Placeholder ==========================
const genEmptyStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-tbody > tr\${componentCls}-placeholder\`]: {
        textAlign: 'center',
        color: token.colorTextDisabled,
        '&:hover > td': {
          background: token.colorBgContainer
        }
      }
    }
  };
};
/* harmony default export */ var style_empty = (genEmptyStyle);
// EXTERNAL MODULE: ./node_modules/antd/es/style/operationUnit.js
var operationUnit = __webpack_require__(49867);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/expand.js

const genExpandStyle = token => {
  const {
    componentCls,
    antCls,
    controlInteractiveSize: checkboxSize,
    motionDurationSlow,
    lineWidth,
    paddingXS,
    lineType,
    tableBorderColor,
    tableExpandIconBg,
    tableExpandColumnWidth,
    borderRadius,
    fontSize,
    fontSizeSM,
    lineHeight,
    tablePaddingVertical,
    tablePaddingHorizontal,
    tableExpandedRowBg,
    paddingXXS
  } = token;
  const halfInnerSize = checkboxSize / 2 - lineWidth;
  // must be odd number, unless it cannot align center
  const expandIconSize = halfInnerSize * 2 + lineWidth * 3;
  const tableBorder = \`\${lineWidth}px \${lineType} \${tableBorderColor}\`;
  const expandIconLineOffset = paddingXXS - lineWidth;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-expand-icon-col\`]: {
        width: tableExpandColumnWidth
      },
      [\`\${componentCls}-row-expand-icon-cell\`]: {
        textAlign: 'center',
        [\`\${componentCls}-row-expand-icon\`]: {
          display: 'inline-flex',
          float: 'none',
          verticalAlign: 'sub'
        }
      },
      [\`\${componentCls}-row-indent\`]: {
        height: 1,
        float: 'left'
      },
      [\`\${componentCls}-row-expand-icon\`]: Object.assign(Object.assign({}, (0,operationUnit/* operationUnit */.N)(token)), {
        position: 'relative',
        float: 'left',
        boxSizing: 'border-box',
        width: expandIconSize,
        height: expandIconSize,
        padding: 0,
        color: 'inherit',
        lineHeight: \`\${expandIconSize}px\`,
        background: tableExpandIconBg,
        border: tableBorder,
        borderRadius,
        transform: \`scale(\${checkboxSize / expandIconSize})\`,
        transition: \`all \${motionDurationSlow}\`,
        userSelect: 'none',
        [\`&:focus, &:hover, &:active\`]: {
          borderColor: 'currentcolor'
        },
        [\`&::before, &::after\`]: {
          position: 'absolute',
          background: 'currentcolor',
          transition: \`transform \${motionDurationSlow} ease-out\`,
          content: '""'
        },
        '&::before': {
          top: halfInnerSize,
          insetInlineEnd: expandIconLineOffset,
          insetInlineStart: expandIconLineOffset,
          height: lineWidth
        },
        '&::after': {
          top: expandIconLineOffset,
          bottom: expandIconLineOffset,
          insetInlineStart: halfInnerSize,
          width: lineWidth,
          transform: 'rotate(90deg)'
        },
        // Motion effect
        '&-collapsed::before': {
          transform: 'rotate(-180deg)'
        },
        '&-collapsed::after': {
          transform: 'rotate(0deg)'
        },
        '&-spaced': {
          '&::before, &::after': {
            display: 'none',
            content: 'none'
          },
          background: 'transparent',
          border: 0,
          visibility: 'hidden'
        }
      }),
      [\`\${componentCls}-row-indent + \${componentCls}-row-expand-icon\`]: {
        marginTop: (fontSize * lineHeight - lineWidth * 3) / 2 - Math.ceil((fontSizeSM * 1.4 - lineWidth * 3) / 2),
        marginInlineEnd: paddingXS
      },
      [\`tr\${componentCls}-expanded-row\`]: {
        '&, &:hover': {
          '> td': {
            background: tableExpandedRowBg
          }
        },
        // https://github.com/ant-design/ant-design/issues/25573
        [\`\${antCls}-descriptions-view\`]: {
          display: 'flex',
          table: {
            flex: 'auto',
            width: 'auto'
          }
        }
      },
      // With fixed
      [\`\${componentCls}-expanded-row-fixed\`]: {
        position: 'relative',
        margin: \`-\${tablePaddingVertical}px -\${tablePaddingHorizontal}px\`,
        padding: \`\${tablePaddingVertical}px \${tablePaddingHorizontal}px\`
      }
    }
  };
};
/* harmony default export */ var expand = (genExpandStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/filter.js

const genFilterStyle = token => {
  const {
    componentCls,
    antCls,
    iconCls,
    tableFilterDropdownWidth,
    tableFilterDropdownSearchWidth,
    paddingXXS,
    paddingXS,
    colorText,
    lineWidth,
    lineType,
    tableBorderColor,
    tableHeaderIconColor,
    fontSizeSM,
    tablePaddingHorizontal,
    borderRadius,
    motionDurationSlow,
    colorTextDescription,
    colorPrimary,
    tableHeaderFilterActiveBg,
    colorTextDisabled,
    tableFilterDropdownBg,
    tableFilterDropdownHeight,
    controlItemBgHover,
    controlItemBgActive,
    boxShadowSecondary
  } = token;
  const dropdownPrefixCls = \`\${antCls}-dropdown\`;
  const tableFilterDropdownPrefixCls = \`\${componentCls}-filter-dropdown\`;
  const treePrefixCls = \`\${antCls}-tree\`;
  const tableBorder = \`\${lineWidth}px \${lineType} \${tableBorderColor}\`;
  return [{
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-filter-column\`]: {
        display: 'flex',
        justifyContent: 'space-between'
      },
      [\`\${componentCls}-filter-trigger\`]: {
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        marginBlock: -paddingXXS,
        marginInline: \`\${paddingXXS}px \${-tablePaddingHorizontal / 2}px\`,
        padding: \`0 \${paddingXXS}px\`,
        color: tableHeaderIconColor,
        fontSize: fontSizeSM,
        borderRadius,
        cursor: 'pointer',
        transition: \`all \${motionDurationSlow}\`,
        '&:hover': {
          color: colorTextDescription,
          background: tableHeaderFilterActiveBg
        },
        '&.active': {
          color: colorPrimary
        }
      }
    }
  }, {
    // Dropdown
    [\`\${antCls}-dropdown\`]: {
      [tableFilterDropdownPrefixCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
        minWidth: tableFilterDropdownWidth,
        backgroundColor: tableFilterDropdownBg,
        borderRadius,
        boxShadow: boxShadowSecondary,
        // Reset menu
        [\`\${dropdownPrefixCls}-menu\`]: {
          // https://github.com/ant-design/ant-design/issues/4916
          // https://github.com/ant-design/ant-design/issues/19542
          maxHeight: tableFilterDropdownHeight,
          overflowX: 'hidden',
          border: 0,
          boxShadow: 'none',
          '&:empty::after': {
            display: 'block',
            padding: \`\${paddingXS}px 0\`,
            color: colorTextDisabled,
            fontSize: fontSizeSM,
            textAlign: 'center',
            content: '"Not Found"'
          }
        },
        [\`\${tableFilterDropdownPrefixCls}-tree\`]: {
          paddingBlock: \`\${paddingXS}px 0\`,
          paddingInline: paddingXS,
          [treePrefixCls]: {
            padding: 0
          },
          [\`\${treePrefixCls}-treenode \${treePrefixCls}-node-content-wrapper:hover\`]: {
            backgroundColor: controlItemBgHover
          },
          [\`\${treePrefixCls}-treenode-checkbox-checked \${treePrefixCls}-node-content-wrapper\`]: {
            '&, &:hover': {
              backgroundColor: controlItemBgActive
            }
          }
        },
        [\`\${tableFilterDropdownPrefixCls}-search\`]: {
          padding: paddingXS,
          borderBottom: tableBorder,
          '&-input': {
            input: {
              minWidth: tableFilterDropdownSearchWidth
            },
            [iconCls]: {
              color: colorTextDisabled
            }
          }
        },
        [\`\${tableFilterDropdownPrefixCls}-checkall\`]: {
          width: '100%',
          marginBottom: paddingXXS,
          marginInlineStart: paddingXXS
        },
        // Operation
        [\`\${tableFilterDropdownPrefixCls}-btns\`]: {
          display: 'flex',
          justifyContent: 'space-between',
          padding: \`\${paddingXS - lineWidth}px \${paddingXS}px\`,
          overflow: 'hidden',
          backgroundColor: 'inherit',
          borderTop: tableBorder
        }
      })
    }
  },
  // Dropdown Menu & SubMenu
  {
    // submenu of table filter dropdown
    [\`\${antCls}-dropdown \${tableFilterDropdownPrefixCls}, \${tableFilterDropdownPrefixCls}-submenu\`]: {
      // Checkbox
      [\`\${antCls}-checkbox-wrapper + span\`]: {
        paddingInlineStart: paddingXS,
        color: colorText
      },
      [\`> ul\`]: {
        maxHeight: 'calc(100vh - 130px)',
        overflowX: 'hidden',
        overflowY: 'auto'
      }
    }
  }];
};
/* harmony default export */ var filter = (genFilterStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/fixed.js
const genFixedStyle = token => {
  const {
    componentCls,
    lineWidth,
    colorSplit,
    motionDurationSlow,
    zIndexTableFixed,
    tableBg,
    zIndexTableSticky
  } = token;
  const shadowColor = colorSplit;
  // Follow style is magic of shadow which should not follow token:
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`
        \${componentCls}-cell-fix-left,
        \${componentCls}-cell-fix-right
      \`]: {
        position: 'sticky !important',
        zIndex: zIndexTableFixed,
        background: tableBg
      },
      [\`
        \${componentCls}-cell-fix-left-first::after,
        \${componentCls}-cell-fix-left-last::after
      \`]: {
        position: 'absolute',
        top: 0,
        right: {
          _skip_check_: true,
          value: 0
        },
        bottom: -lineWidth,
        width: 30,
        transform: 'translateX(100%)',
        transition: \`box-shadow \${motionDurationSlow}\`,
        content: '""',
        pointerEvents: 'none'
      },
      [\`\${componentCls}-cell-fix-left-all::after\`]: {
        display: 'none'
      },
      [\`
        \${componentCls}-cell-fix-right-first::after,
        \${componentCls}-cell-fix-right-last::after
      \`]: {
        position: 'absolute',
        top: 0,
        bottom: -lineWidth,
        left: {
          _skip_check_: true,
          value: 0
        },
        width: 30,
        transform: 'translateX(-100%)',
        transition: \`box-shadow \${motionDurationSlow}\`,
        content: '""',
        pointerEvents: 'none'
      },
      [\`\${componentCls}-container\`]: {
        '&::before, &::after': {
          position: 'absolute',
          top: 0,
          bottom: 0,
          zIndex: zIndexTableSticky + 1,
          width: 30,
          transition: \`box-shadow \${motionDurationSlow}\`,
          content: '""',
          pointerEvents: 'none'
        },
        '&::before': {
          insetInlineStart: 0
        },
        '&::after': {
          insetInlineEnd: 0
        }
      },
      [\`\${componentCls}-ping-left\`]: {
        [\`&:not(\${componentCls}-has-fix-left) \${componentCls}-container\`]: {
          position: 'relative',
          '&::before': {
            boxShadow: \`inset 10px 0 8px -8px \${shadowColor}\`
          }
        },
        [\`
          \${componentCls}-cell-fix-left-first::after,
          \${componentCls}-cell-fix-left-last::after
        \`]: {
          boxShadow: \`inset 10px 0 8px -8px \${shadowColor}\`
        },
        [\`\${componentCls}-cell-fix-left-last::before\`]: {
          backgroundColor: 'transparent !important'
        }
      },
      [\`\${componentCls}-ping-right\`]: {
        [\`&:not(\${componentCls}-has-fix-right) \${componentCls}-container\`]: {
          position: 'relative',
          '&::after': {
            boxShadow: \`inset -10px 0 8px -8px \${shadowColor}\`
          }
        },
        [\`
          \${componentCls}-cell-fix-right-first::after,
          \${componentCls}-cell-fix-right-last::after
        \`]: {
          boxShadow: \`inset -10px 0 8px -8px \${shadowColor}\`
        }
      }
    }
  };
};
/* harmony default export */ var fixed = (genFixedStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/pagination.js
const genPaginationStyle = token => {
  const {
    componentCls,
    antCls
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      // ========================== Pagination ==========================
      [\`\${componentCls}-pagination\${antCls}-pagination\`]: {
        margin: \`\${token.margin}px 0\`
      },
      [\`\${componentCls}-pagination\`]: {
        display: 'flex',
        flexWrap: 'wrap',
        rowGap: token.paddingXS,
        '> *': {
          flex: 'none'
        },
        '&-left': {
          justifyContent: 'flex-start'
        },
        '&-center': {
          justifyContent: 'center'
        },
        '&-right': {
          justifyContent: 'flex-end'
        }
      }
    }
  };
};
/* harmony default export */ var pagination = (genPaginationStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/radius.js
const genRadiusStyle = token => {
  const {
    componentCls,
    tableRadius
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [componentCls]: {
        // https://github.com/ant-design/ant-design/issues/39115#issuecomment-1362314574
        [\`\${componentCls}-title, \${componentCls}-header\`]: {
          borderRadius: \`\${tableRadius}px \${tableRadius}px 0 0\`
        },
        [\`\${componentCls}-title + \${componentCls}-container\`]: {
          borderStartStartRadius: 0,
          borderStartEndRadius: 0,
          table: {
            borderRadius: 0,
            '> thead > tr:first-child': {
              'th:first-child': {
                borderRadius: 0
              },
              'th:last-child': {
                borderRadius: 0
              }
            }
          }
        },
        '&-container': {
          borderStartStartRadius: tableRadius,
          borderStartEndRadius: tableRadius,
          'table > thead > tr:first-child': {
            '> *:first-child': {
              borderStartStartRadius: tableRadius
            },
            '> *:last-child': {
              borderStartEndRadius: tableRadius
            }
          }
        },
        '&-footer': {
          borderRadius: \`0 0 \${tableRadius}px \${tableRadius}px\`
        }
      }
    }
  };
};
/* harmony default export */ var radius = (genRadiusStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/rtl.js
const genStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-wrapper-rtl\`]: {
      direction: 'rtl',
      table: {
        direction: 'rtl'
      },
      [\`\${componentCls}-pagination-left\`]: {
        justifyContent: 'flex-end'
      },
      [\`\${componentCls}-pagination-right\`]: {
        justifyContent: 'flex-start'
      },
      [\`\${componentCls}-row-expand-icon\`]: {
        '&::after': {
          transform: 'rotate(-90deg)'
        },
        '&-collapsed::before': {
          transform: 'rotate(180deg)'
        },
        '&-collapsed::after': {
          transform: 'rotate(0deg)'
        }
      },
      [\`\${componentCls}-container\`]: {
        '&::before': {
          insetInlineStart: 'unset',
          insetInlineEnd: 0
        },
        '&::after': {
          insetInlineStart: 0,
          insetInlineEnd: 'unset'
        }
      }
    }
  };
};
/* harmony default export */ var rtl = (genStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/selection.js
const genSelectionStyle = token => {
  const {
    componentCls,
    antCls,
    iconCls,
    fontSizeIcon,
    paddingXS,
    tableHeaderIconColor,
    tableHeaderIconColorHover
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      // ========================== Selections ==========================
      [\`\${componentCls}-selection-col\`]: {
        width: token.tableSelectionColumnWidth
      },
      [\`\${componentCls}-bordered \${componentCls}-selection-col\`]: {
        width: token.tableSelectionColumnWidth + paddingXS * 2
      },
      [\`
        table tr th\${componentCls}-selection-column,
        table tr td\${componentCls}-selection-column
      \`]: {
        paddingInlineEnd: token.paddingXS,
        paddingInlineStart: token.paddingXS,
        textAlign: 'center',
        [\`\${antCls}-radio-wrapper\`]: {
          marginInlineEnd: 0
        }
      },
      [\`table tr th\${componentCls}-selection-column\${componentCls}-cell-fix-left\`]: {
        zIndex: token.zIndexTableFixed + 1
      },
      [\`table tr th\${componentCls}-selection-column::after\`]: {
        backgroundColor: 'transparent !important'
      },
      [\`\${componentCls}-selection\`]: {
        position: 'relative',
        display: 'inline-flex',
        flexDirection: 'column'
      },
      [\`\${componentCls}-selection-extra\`]: {
        position: 'absolute',
        top: 0,
        zIndex: 1,
        cursor: 'pointer',
        transition: \`all \${token.motionDurationSlow}\`,
        marginInlineStart: '100%',
        paddingInlineStart: \`\${token.tablePaddingHorizontal / 4}px\`,
        [iconCls]: {
          color: tableHeaderIconColor,
          fontSize: fontSizeIcon,
          verticalAlign: 'baseline',
          '&:hover': {
            color: tableHeaderIconColorHover
          }
        }
      }
    }
  };
};
/* harmony default export */ var selection = (genSelectionStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/size.js
const genSizeStyle = token => {
  const {
    componentCls
  } = token;
  const getSizeStyle = (size, paddingVertical, paddingHorizontal, fontSize) => ({
    [\`\${componentCls}\${componentCls}-\${size}\`]: {
      fontSize,
      [\`
        \${componentCls}-title,
        \${componentCls}-footer,
        \${componentCls}-thead > tr > th,
        \${componentCls}-tbody > tr > td,
        tfoot > tr > th,
        tfoot > tr > td
      \`]: {
        padding: \`\${paddingVertical}px \${paddingHorizontal}px\`
      },
      [\`\${componentCls}-filter-trigger\`]: {
        marginInlineEnd: \`-\${paddingHorizontal / 2}px\`
      },
      [\`\${componentCls}-expanded-row-fixed\`]: {
        margin: \`-\${paddingVertical}px -\${paddingHorizontal}px\`
      },
      [\`\${componentCls}-tbody\`]: {
        // ========================= Nest Table ===========================
        [\`\${componentCls}-wrapper:only-child \${componentCls}\`]: {
          marginBlock: \`-\${paddingVertical}px\`,
          marginInline: \`\${token.tableExpandColumnWidth - paddingHorizontal}px -\${paddingHorizontal}px\`
        }
      },
      // https://github.com/ant-design/ant-design/issues/35167
      [\`\${componentCls}-selection-column\`]: {
        paddingInlineStart: \`\${paddingHorizontal / 4}px\`
      }
    }
  });
  return {
    [\`\${componentCls}-wrapper\`]: Object.assign(Object.assign({}, getSizeStyle('middle', token.tablePaddingVerticalMiddle, token.tablePaddingHorizontalMiddle, token.tableFontSizeMiddle)), getSizeStyle('small', token.tablePaddingVerticalSmall, token.tablePaddingHorizontalSmall, token.tableFontSizeSmall))
  };
};
/* harmony default export */ var size = (genSizeStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/sorter.js
const genSorterStyle = token => {
  const {
    componentCls,
    marginXXS,
    fontSizeIcon,
    tableHeaderIconColor,
    tableHeaderIconColorHover
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-thead th\${componentCls}-column-has-sorters\`]: {
        outline: 'none',
        cursor: 'pointer',
        transition: \`all \${token.motionDurationSlow}\`,
        '&:hover': {
          background: token.tableHeaderSortHoverBg,
          '&::before': {
            backgroundColor: 'transparent !important'
          }
        },
        '&:focus-visible': {
          color: token.colorPrimary
        },
        // https://github.com/ant-design/ant-design/issues/30969
        [\`
          &\${componentCls}-cell-fix-left:hover,
          &\${componentCls}-cell-fix-right:hover
        \`]: {
          background: token.tableFixedHeaderSortActiveBg
        }
      },
      [\`\${componentCls}-thead th\${componentCls}-column-sort\`]: {
        background: token.tableHeaderSortBg,
        '&::before': {
          backgroundColor: 'transparent !important'
        }
      },
      [\`td\${componentCls}-column-sort\`]: {
        background: token.tableBodySortBg
      },
      [\`\${componentCls}-column-title\`]: {
        position: 'relative',
        zIndex: 1,
        flex: 1
      },
      [\`\${componentCls}-column-sorters\`]: {
        display: 'flex',
        flex: 'auto',
        alignItems: 'center',
        justifyContent: 'space-between',
        '&::after': {
          position: 'absolute',
          inset: 0,
          width: '100%',
          height: '100%',
          content: '""'
        }
      },
      [\`\${componentCls}-column-sorter\`]: {
        marginInlineStart: marginXXS,
        color: tableHeaderIconColor,
        fontSize: 0,
        transition: \`color \${token.motionDurationSlow}\`,
        '&-inner': {
          display: 'inline-flex',
          flexDirection: 'column',
          alignItems: 'center'
        },
        '&-up, &-down': {
          fontSize: fontSizeIcon,
          '&.active': {
            color: token.colorPrimary
          }
        },
        [\`\${componentCls}-column-sorter-up + \${componentCls}-column-sorter-down\`]: {
          marginTop: '-0.3em'
        }
      },
      [\`\${componentCls}-column-sorters:hover \${componentCls}-column-sorter\`]: {
        color: tableHeaderIconColorHover
      }
    }
  };
};
/* harmony default export */ var sorter = (genSorterStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/sticky.js
const genStickyStyle = token => {
  const {
    componentCls,
    opacityLoading,
    tableScrollThumbBg,
    tableScrollThumbBgHover,
    tableScrollThumbSize,
    tableScrollBg,
    zIndexTableSticky
  } = token;
  const tableBorder = \`\${token.lineWidth}px \${token.lineType} \${token.tableBorderColor}\`;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-sticky\`]: {
        '&-holder': {
          position: 'sticky',
          zIndex: zIndexTableSticky,
          background: token.colorBgContainer
        },
        '&-scroll': {
          position: 'sticky',
          bottom: 0,
          height: \`\${tableScrollThumbSize}px !important\`,
          zIndex: zIndexTableSticky,
          display: 'flex',
          alignItems: 'center',
          background: tableScrollBg,
          borderTop: tableBorder,
          opacity: opacityLoading,
          '&:hover': {
            transformOrigin: 'center bottom'
          },
          // fake scrollbar style of sticky
          '&-bar': {
            height: tableScrollThumbSize,
            backgroundColor: tableScrollThumbBg,
            borderRadius: 100,
            transition: \`all \${token.motionDurationSlow}, transform none\`,
            position: 'absolute',
            bottom: 0,
            '&:hover, &-active': {
              backgroundColor: tableScrollThumbBgHover
            }
          }
        }
      }
    }
  };
};
/* harmony default export */ var sticky = (genStickyStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/summary.js
const genSummaryStyle = token => {
  const {
    componentCls,
    lineWidth,
    tableBorderColor
  } = token;
  const tableBorder = \`\${lineWidth}px \${token.lineType} \${tableBorderColor}\`;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-summary\`]: {
        position: 'relative',
        zIndex: token.zIndexTableFixed,
        background: token.tableBg,
        '> tr': {
          '> th, > td': {
            borderBottom: tableBorder
          }
        }
      },
      [\`div\${componentCls}-summary\`]: {
        boxShadow: \`0 -\${lineWidth}px 0 \${tableBorderColor}\`
      }
    }
  };
};
/* harmony default export */ var summary = (genSummaryStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/style/index.js

















const genTableStyle = token => {
  const {
    componentCls,
    fontWeightStrong,
    tablePaddingVertical,
    tablePaddingHorizontal,
    lineWidth,
    lineType,
    tableBorderColor,
    tableFontSize,
    tableBg,
    tableRadius,
    tableHeaderTextColor,
    motionDurationMid,
    tableHeaderBg,
    tableHeaderCellSplitColor,
    tableRowHoverBg,
    tableSelectedRowBg,
    tableSelectedRowHoverBg,
    tableFooterTextColor,
    tableFooterBg,
    paddingContentVerticalLG,
    wireframe
  } = token;
  const tableBorder = \`\${lineWidth}px \${lineType} \${tableBorderColor}\`;
  return {
    [\`\${componentCls}-wrapper\`]: Object.assign(Object.assign({
      clear: 'both',
      maxWidth: '100%'
    }, (0,style/* clearFix */.dF)()), {
      [componentCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
        fontSize: tableFontSize,
        background: tableBg,
        borderRadius: \`\${tableRadius}px \${tableRadius}px 0 0\`
      }),
      // https://github.com/ant-design/ant-design/issues/17611
      table: {
        width: '100%',
        textAlign: 'start',
        borderRadius: \`\${tableRadius}px \${tableRadius}px 0 0\`,
        borderCollapse: 'separate',
        borderSpacing: 0
      },
      // ============================= Cell =============================
      [\`
          \${componentCls}-thead > tr > th,
          \${componentCls}-tbody > tr > td,
          tfoot > tr > th,
          tfoot > tr > td
        \`]: {
        position: 'relative',
        padding: \`\${paddingContentVerticalLG}px \${tablePaddingHorizontal}px\`,
        overflowWrap: 'break-word'
      },
      // ============================ Title =============================
      [\`\${componentCls}-title\`]: {
        padding: \`\${tablePaddingVertical}px \${tablePaddingHorizontal}px\`
      },
      // ============================ Header ============================
      [\`\${componentCls}-thead\`]: {
        [\`
          > tr > th,
          > tr > td
        \`]: {
          position: 'relative',
          color: tableHeaderTextColor,
          fontWeight: fontWeightStrong,
          textAlign: 'start',
          background: tableHeaderBg,
          borderBottom: tableBorder,
          transition: \`background \${motionDurationMid} ease\`,
          "&[colspan]:not([colspan='1'])": {
            textAlign: 'center'
          },
          [\`&:not(:last-child):not(\${componentCls}-selection-column):not(\${componentCls}-row-expand-icon-cell):not([colspan])::before\`]: {
            position: 'absolute',
            top: '50%',
            insetInlineEnd: 0,
            width: 1,
            height: '1.6em',
            backgroundColor: tableHeaderCellSplitColor,
            transform: 'translateY(-50%)',
            transition: \`background-color \${motionDurationMid}\`,
            content: '""'
          }
        },
        '> tr:not(:last-child) > th[colspan]': {
          borderBottom: 0
        }
      },
      // ============================ Body ============================
      // Borderless Table has unique hover style, which would be implemented with \`borderTop\`.
      [\`\${componentCls}:not(\${componentCls}-bordered)\`]: {
        [\`\${componentCls}-tbody\`]: {
          '> tr': {
            '> td': {
              borderTop: tableBorder,
              borderBottom: 'transparent'
            },
            '&:last-child > td': {
              borderBottom: tableBorder
            },
            [\`&:first-child > td,
              &\${componentCls}-measure-row + tr > td\`]: {
              borderTop: 'none',
              borderTopColor: 'transparent'
            }
          }
        }
      },
      // Bordered Table remains simple \`borderBottom\`.
      // Ref issue: https://github.com/ant-design/ant-design/issues/38724
      [\`\${componentCls}\${componentCls}-bordered\`]: {
        [\`\${componentCls}-tbody\`]: {
          '> tr': {
            '> td': {
              borderBottom: tableBorder
            }
          }
        }
      },
      [\`\${componentCls}-tbody\`]: {
        '> tr': {
          '> td': {
            transition: \`background \${motionDurationMid}, border-color \${motionDurationMid}\`,
            // ========================= Nest Table ===========================
            [\`
              > \${componentCls}-wrapper:only-child,
              > \${componentCls}-expanded-row-fixed > \${componentCls}-wrapper:only-child
            \`]: {
              [componentCls]: {
                marginBlock: \`-\${tablePaddingVertical}px\`,
                marginInline: \`\${token.tableExpandColumnWidth - tablePaddingHorizontal}px -\${tablePaddingHorizontal}px\`,
                [\`\${componentCls}-tbody > tr:last-child > td\`]: {
                  borderBottom: 0,
                  '&:first-child, &:last-child': {
                    borderRadius: 0
                  }
                }
              }
            }
          },
          [\`
            &\${componentCls}-row:hover > td,
            > td\${componentCls}-cell-row-hover
          \`]: {
            background: tableRowHoverBg
          },
          [\`&\${componentCls}-row-selected\`]: {
            '> td': {
              background: tableSelectedRowBg
            },
            '&:hover > td': {
              background: tableSelectedRowHoverBg
            }
          }
        }
      },
      [\`\${componentCls}:not(\${componentCls}-bordered) \${componentCls}-tbody > tr\`]: wireframe ? undefined : {
        [\`&\${componentCls}-row:hover, &\${componentCls}-row\${componentCls}-row-selected\`]: {
          [\`+ tr\${componentCls}-row > td\`]: {
            borderTopColor: 'transparent'
          }
        },
        [\`&\${componentCls}-row:last-child:hover > td,
          &\${componentCls}-row\${componentCls}-row-selected:last-child > td\`]: {
          borderBottomColor: 'transparent'
        },
        [\`
          &\${componentCls}-row:hover > td,
          > td\${componentCls}-cell-row-hover,
          &\${componentCls}-row\${componentCls}-row-selected > td
        \`]: {
          borderTopColor: 'transparent',
          '&:first-child': {
            borderStartStartRadius: tableRadius,
            borderEndStartRadius: tableRadius
          },
          '&:last-child': {
            borderStartEndRadius: tableRadius,
            borderEndEndRadius: tableRadius
          }
        }
      },
      // ============================ Footer ============================
      [\`\${componentCls}-footer\`]: {
        padding: \`\${tablePaddingVertical}px \${tablePaddingHorizontal}px\`,
        color: tableFooterTextColor,
        background: tableFooterBg
      }
    })
  };
};
// ============================== Export ==============================
/* harmony default export */ var table_style = ((0,genComponentStyleHook/* default */.Z)('Table', token => {
  const {
    controlItemBgActive,
    controlItemBgActiveHover,
    colorTextPlaceholder,
    colorTextHeading,
    colorSplit,
    colorBorderSecondary,
    fontSize,
    padding,
    paddingXS,
    paddingSM,
    controlHeight,
    colorFillAlter,
    colorIcon,
    colorIconHover,
    opacityLoading,
    colorBgContainer,
    borderRadiusLG,
    colorFillContent,
    colorFillSecondary,
    controlInteractiveSize: checkboxSize
  } = token;
  const baseColorAction = new dist_module/* TinyColor */.C(colorIcon);
  const baseColorActionHover = new dist_module/* TinyColor */.C(colorIconHover);
  const tableSelectedRowBg = controlItemBgActive;
  const zIndexTableFixed = 2;
  const colorFillSecondarySolid = new dist_module/* TinyColor */.C(colorFillSecondary).onBackground(colorBgContainer).toHexString();
  const colorFillContentSolid = new dist_module/* TinyColor */.C(colorFillContent).onBackground(colorBgContainer).toHexString();
  const colorFillAlterSolid = new dist_module/* TinyColor */.C(colorFillAlter).onBackground(colorBgContainer).toHexString();
  const tableToken = (0,statistic/* merge */.TS)(token, {
    tableFontSize: fontSize,
    tableBg: colorBgContainer,
    tableRadius: borderRadiusLG,
    tablePaddingVertical: padding,
    tablePaddingHorizontal: padding,
    tablePaddingVerticalMiddle: paddingSM,
    tablePaddingHorizontalMiddle: paddingXS,
    tablePaddingVerticalSmall: paddingXS,
    tablePaddingHorizontalSmall: paddingXS,
    tableBorderColor: colorBorderSecondary,
    tableHeaderTextColor: colorTextHeading,
    tableHeaderBg: colorFillAlterSolid,
    tableFooterTextColor: colorTextHeading,
    tableFooterBg: colorFillAlterSolid,
    tableHeaderCellSplitColor: colorBorderSecondary,
    tableHeaderSortBg: colorFillSecondarySolid,
    tableHeaderSortHoverBg: colorFillContentSolid,
    tableHeaderIconColor: baseColorAction.clone().setAlpha(baseColorAction.getAlpha() * opacityLoading).toRgbString(),
    tableHeaderIconColorHover: baseColorActionHover.clone().setAlpha(baseColorActionHover.getAlpha() * opacityLoading).toRgbString(),
    tableBodySortBg: colorFillAlterSolid,
    tableFixedHeaderSortActiveBg: colorFillSecondarySolid,
    tableHeaderFilterActiveBg: colorFillContent,
    tableFilterDropdownBg: colorBgContainer,
    tableRowHoverBg: colorFillAlterSolid,
    tableSelectedRowBg,
    tableSelectedRowHoverBg: controlItemBgActiveHover,
    zIndexTableFixed,
    zIndexTableSticky: zIndexTableFixed + 1,
    tableFontSizeMiddle: fontSize,
    tableFontSizeSmall: fontSize,
    tableSelectionColumnWidth: controlHeight,
    tableExpandIconBg: colorBgContainer,
    tableExpandColumnWidth: checkboxSize + 2 * token.padding,
    tableExpandedRowBg: colorFillAlter,
    // Dropdown
    tableFilterDropdownWidth: 120,
    tableFilterDropdownHeight: 264,
    tableFilterDropdownSearchWidth: 140,
    // Virtual Scroll Bar
    tableScrollThumbSize: 8,
    tableScrollThumbBg: colorTextPlaceholder,
    tableScrollThumbBgHover: colorTextHeading,
    tableScrollBg: colorSplit
  });
  return [genTableStyle(tableToken), pagination(tableToken), summary(tableToken), sorter(tableToken), filter(tableToken), bordered(tableToken), radius(tableToken), expand(tableToken), summary(tableToken), style_empty(tableToken), selection(tableToken), fixed(tableToken), sticky(tableToken), ellipsis(tableToken), size(tableToken), rtl(tableToken)];
}));
;// CONCATENATED MODULE: ./node_modules/antd/es/table/InternalTable.js























const InternalTable_EMPTY_LIST = [];
function InternalTable(props, ref) {
  const {
    prefixCls: customizePrefixCls,
    className,
    style,
    size: customizeSize,
    bordered,
    dropdownPrefixCls: customizeDropdownPrefixCls,
    dataSource,
    pagination,
    rowSelection,
    rowKey = 'key',
    rowClassName,
    columns,
    children,
    childrenColumnName: legacyChildrenColumnName,
    onChange,
    getPopupContainer,
    loading,
    expandIcon,
    expandable,
    expandedRowRender,
    expandIconColumnIndex,
    indentSize,
    scroll,
    sortDirections,
    locale,
    showSorterTooltip = true
  } = props;
  if (false) {}
  const baseColumns = react.useMemo(() => columns || convertChildrenToColumns(children), [columns, children]);
  const needResponsive = react.useMemo(() => baseColumns.some(col => col.responsive), [baseColumns]);
  const screens = (0,useBreakpoint/* default */.Z)(needResponsive);
  const mergedColumns = react.useMemo(() => {
    const matched = new Set(Object.keys(screens).filter(m => screens[m]));
    return baseColumns.filter(c => !c.responsive || c.responsive.some(r => matched.has(r)));
  }, [baseColumns, screens]);
  const tableProps = (0,omit/* default */.Z)(props, ['className', 'style', 'columns']);
  const size = react.useContext(SizeContext/* default */.Z);
  const {
    locale: contextLocale = en_US/* default */.Z,
    direction,
    renderEmpty,
    getPrefixCls
  } = react.useContext(context/* ConfigContext */.E_);
  const mergedSize = customizeSize || size;
  const tableLocale = Object.assign(Object.assign({}, contextLocale.Table), locale);
  const rawData = dataSource || InternalTable_EMPTY_LIST;
  const prefixCls = getPrefixCls('table', customizePrefixCls);
  const dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);
  const mergedExpandable = Object.assign({
    childrenColumnName: legacyChildrenColumnName,
    expandIconColumnIndex
  }, expandable);
  const {
    childrenColumnName = 'children'
  } = mergedExpandable;
  const expandType = react.useMemo(() => {
    if (rawData.some(item => item === null || item === void 0 ? void 0 : item[childrenColumnName])) {
      return 'nest';
    }
    if (expandedRowRender || expandable && expandable.expandedRowRender) {
      return 'row';
    }
    return null;
  }, [rawData]);
  const internalRefs = {
    body: react.useRef()
  };
  // ============================ RowKey ============================
  const getRowKey = react.useMemo(() => {
    if (typeof rowKey === 'function') {
      return rowKey;
    }
    return record => record === null || record === void 0 ? void 0 : record[rowKey];
  }, [rowKey]);
  const [getRecordByKey] = useLazyKVMap(rawData, childrenColumnName, getRowKey);
  // ============================ Events =============================
  const changeEventInfo = {};
  const triggerOnChange = function (info, action) {
    let reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const changeInfo = Object.assign(Object.assign({}, changeEventInfo), info);
    if (reset) {
      changeEventInfo.resetPagination();
      // Reset event param
      if (changeInfo.pagination.current) {
        changeInfo.pagination.current = 1;
      }
      // Trigger pagination events
      if (pagination && pagination.onChange) {
        pagination.onChange(1, changeInfo.pagination.pageSize);
      }
    }
    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {
      (0,scrollTo/* default */.Z)(0, {
        getContainer: () => internalRefs.body.current
      });
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {
      currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),
      action
    });
  };
  /**
   * Controlled state in \`columns\` is not a good idea that makes too many code (1000+ line?) to read
   * state out and then put it back to title render. Move these code into \`hooks\` but still too
   * complex. We should provides Table props like \`sorter\` & \`filter\` to handle control in next big
   * version.
   */
  // ============================ Sorter =============================
  const onSorterChange = (sorter, sorterStates) => {
    triggerOnChange({
      sorter,
      sorterStates
    }, 'sort', false);
  };
  const [transformSorterColumns, sortStates, sorterTitleProps, getSorters] = useFilterSorter({
    prefixCls,
    mergedColumns,
    onSorterChange,
    sortDirections: sortDirections || ['ascend', 'descend'],
    tableLocale,
    showSorterTooltip
  });
  const sortedData = react.useMemo(() => getSortData(rawData, sortStates, childrenColumnName), [rawData, sortStates]);
  changeEventInfo.sorter = getSorters();
  changeEventInfo.sorterStates = sortStates;
  // ============================ Filter ============================
  const onFilterChange = (filters, filterStates) => {
    triggerOnChange({
      filters,
      filterStates
    }, 'filter', true);
  };
  const [transformFilterColumns, filterStates, filters] = hooks_useFilter({
    prefixCls,
    locale: tableLocale,
    dropdownPrefixCls,
    mergedColumns,
    onFilterChange,
    getPopupContainer
  });
  const mergedData = getFilterData(sortedData, filterStates);
  changeEventInfo.filters = filters;
  changeEventInfo.filterStates = filterStates;
  // ============================ Column ============================
  const columnTitleProps = react.useMemo(() => {
    const mergedFilters = {};
    Object.keys(filters).forEach(filterKey => {
      if (filters[filterKey] !== null) {
        mergedFilters[filterKey] = filters[filterKey];
      }
    });
    return Object.assign(Object.assign({}, sorterTitleProps), {
      filters: mergedFilters
    });
  }, [sorterTitleProps, filters]);
  const [transformTitleColumns] = useTitleColumns(columnTitleProps);
  // ========================== Pagination ==========================
  const onPaginationChange = (current, pageSize) => {
    triggerOnChange({
      pagination: Object.assign(Object.assign({}, changeEventInfo.pagination), {
        current,
        pageSize
      })
    }, 'paginate');
  };
  const [mergedPagination, resetPagination] = usePagination(mergedData.length, pagination, onPaginationChange);
  changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(mergedPagination, pagination);
  changeEventInfo.resetPagination = resetPagination;
  // ============================= Data =============================
  const pageData = react.useMemo(() => {
    if (pagination === false || !mergedPagination.pageSize) {
      return mergedData;
    }
    const {
      current = 1,
      total,
      pageSize = DEFAULT_PAGE_SIZE
    } = mergedPagination;
     false ? 0 : void 0;
    // Dynamic table data
    if (mergedData.length < total) {
      if (mergedData.length > pageSize) {
         false ? 0 : void 0;
        return mergedData.slice((current - 1) * pageSize, current * pageSize);
      }
      return mergedData;
    }
    return mergedData.slice((current - 1) * pageSize, current * pageSize);
  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]);
  // ========================== Selections ==========================
  const [transformSelectionColumns, selectedKeySet] = useSelection(rowSelection, {
    prefixCls,
    data: mergedData,
    pageData,
    getRowKey,
    getRecordByKey,
    expandType,
    childrenColumnName,
    locale: tableLocale,
    getPopupContainer
  });
  const internalRowClassName = (record, index, indent) => {
    let mergedRowClassName;
    if (typeof rowClassName === 'function') {
      mergedRowClassName = classnames_default()(rowClassName(record, index, indent));
    } else {
      mergedRowClassName = classnames_default()(rowClassName);
    }
    return classnames_default()({
      [\`\${prefixCls}-row-selected\`]: selectedKeySet.has(getRowKey(record, index))
    }, mergedRowClassName);
  };
  // ========================== Expandable ==========================
  // Pass origin render status into \`rc-table\`, this can be removed when refactor with \`rc-table\`
  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;
  // Customize expandable icon
  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || ExpandIcon(tableLocale);
  // Adjust expand icon index, no overwrite expandIconColumnIndex if set.
  if (expandType === 'nest' && mergedExpandable.expandIconColumnIndex === undefined) {
    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;
  } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {
    mergedExpandable.expandIconColumnIndex -= 1;
  }
  // Indent size
  if (typeof mergedExpandable.indentSize !== 'number') {
    mergedExpandable.indentSize = typeof indentSize === 'number' ? indentSize : 15;
  }
  // ============================ Render ============================
  const transformColumns = react.useCallback(innerColumns => transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns)))), [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);
  let topPaginationNode;
  let bottomPaginationNode;
  if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {
    let paginationSize;
    if (mergedPagination.size) {
      paginationSize = mergedPagination.size;
    } else {
      paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;
    }
    const renderPagination = position => /*#__PURE__*/react.createElement(es_pagination/* default */.Z, Object.assign({}, mergedPagination, {
      className: classnames_default()(\`\${prefixCls}-pagination \${prefixCls}-pagination-\${position}\`, mergedPagination.className),
      size: paginationSize
    }));
    const defaultPosition = direction === 'rtl' ? 'left' : 'right';
    const {
      position
    } = mergedPagination;
    if (position !== null && Array.isArray(position)) {
      const topPos = position.find(p => p.includes('top'));
      const bottomPos = position.find(p => p.includes('bottom'));
      const isDisable = position.every(p => \`\${p}\` === 'none');
      if (!topPos && !bottomPos && !isDisable) {
        bottomPaginationNode = renderPagination(defaultPosition);
      }
      if (topPos) {
        topPaginationNode = renderPagination(topPos.toLowerCase().replace('top', ''));
      }
      if (bottomPos) {
        bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace('bottom', ''));
      }
    } else {
      bottomPaginationNode = renderPagination(defaultPosition);
    }
  }
  // >>>>>>>>> Spinning
  let spinProps;
  if (typeof loading === 'boolean') {
    spinProps = {
      spinning: loading
    };
  } else if (typeof loading === 'object') {
    spinProps = Object.assign({
      spinning: true
    }, loading);
  }
  // Style
  const [wrapSSR, hashId] = table_style(prefixCls);
  const wrapperClassNames = classnames_default()(\`\${prefixCls}-wrapper\`, {
    [\`\${prefixCls}-wrapper-rtl\`]: direction === 'rtl'
  }, className, hashId);
  const emptyText = locale && locale.emptyText || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Table')) || /*#__PURE__*/react.createElement(defaultRenderEmpty/* default */.Z, {
    componentName: "Table"
  });
  return wrapSSR( /*#__PURE__*/react.createElement("div", {
    ref: ref,
    className: wrapperClassNames,
    style: style
  }, /*#__PURE__*/react.createElement(spin/* default */.Z, Object.assign({
    spinning: false
  }, spinProps), topPaginationNode, /*#__PURE__*/react.createElement(RcTable, Object.assign({}, tableProps, {
    columns: mergedColumns,
    direction: direction,
    expandable: mergedExpandable,
    prefixCls: prefixCls,
    className: classnames_default()({
      [\`\${prefixCls}-middle\`]: mergedSize === 'middle',
      [\`\${prefixCls}-small\`]: mergedSize === 'small',
      [\`\${prefixCls}-bordered\`]: bordered,
      [\`\${prefixCls}-empty\`]: rawData.length === 0
    }),
    data: pageData,
    rowKey: getRowKey,
    rowClassName: internalRowClassName,
    emptyText: emptyText,
    // Internal
    internalHooks: INTERNAL_HOOKS,
    internalRefs: internalRefs,
    transformColumns: transformColumns
  })), bottomPaginationNode)));
}
/* harmony default export */ var table_InternalTable = (/*#__PURE__*/react.forwardRef(InternalTable));
;// CONCATENATED MODULE: ./node_modules/antd/es/table/Table.js






function table_Table_Table(props, ref) {
  const renderTimesRef = react.useRef(0);
  renderTimesRef.current += 1;
  return /*#__PURE__*/react.createElement(table_InternalTable, Object.assign({}, props, {
    ref: ref,
    _renderTimes: renderTimesRef.current
  }));
}
const ForwardTable = /*#__PURE__*/react.forwardRef(table_Table_Table);
ForwardTable.SELECTION_COLUMN = SELECTION_COLUMN;
ForwardTable.EXPAND_COLUMN = EXPAND_COLUMN;
ForwardTable.SELECTION_ALL = SELECTION_ALL;
ForwardTable.SELECTION_INVERT = SELECTION_INVERT;
ForwardTable.SELECTION_NONE = SELECTION_NONE;
ForwardTable.Column = table_Column;
ForwardTable.ColumnGroup = table_ColumnGroup;
ForwardTable.Summary = FooterComponents;
/* harmony default export */ var table_Table = (ForwardTable);
;// CONCATENATED MODULE: ./node_modules/antd/es/table/index.js

/* harmony default export */ var table = (table_Table);
// EXTERNAL MODULE: ./node_modules/antd/es/tabs/index.js + 5 modules
var tabs = __webpack_require__(80688);
// EXTERNAL MODULE: ./node_modules/antd/es/tag/index.js + 3 modules
var tag = __webpack_require__(51904);
// EXTERNAL MODULE: ./node_modules/antd/es/theme/index.js + 5 modules
var theme = __webpack_require__(92195);
;// CONCATENATED MODULE: ./node_modules/antd/es/time-picker/index.js
var time_picker_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




const {
  TimePicker: InternalTimePicker,
  RangePicker: InternalRangePicker
} = date_picker;
const RangePicker = /*#__PURE__*/react.forwardRef((props, ref) => /*#__PURE__*/react.createElement(InternalRangePicker, Object.assign({}, props, {
  picker: "time",
  mode: undefined,
  ref: ref
})));
const TimePicker = /*#__PURE__*/react.forwardRef((_a, ref) => {
  var {
      addon,
      renderExtraFooter
    } = _a,
    restProps = time_picker_rest(_a, ["addon", "renderExtraFooter"]);
  const internalRenderExtraFooter = react.useMemo(() => {
    if (renderExtraFooter) {
      return renderExtraFooter;
    }
    if (addon) {
       false ? 0 : void 0;
      return addon;
    }
    return undefined;
  }, [addon, renderExtraFooter]);
  return /*#__PURE__*/react.createElement(InternalTimePicker, Object.assign({}, restProps, {
    mode: undefined,
    ref: ref,
    renderExtraFooter: internalRenderExtraFooter
  }));
});
if (false) {}
// We don't care debug panel
/* istanbul ignore next */
const time_picker_PurePanel = (0,_util_PurePanel/* default */.Z)(TimePicker, 'picker');
TimePicker._InternalPanelDoNotUseOrYouWillBeFired = time_picker_PurePanel;
TimePicker.RangePicker = RangePicker;
TimePicker._InternalPanelDoNotUseOrYouWillBeFired = time_picker_PurePanel;
/* harmony default export */ var time_picker = (TimePicker);
// EXTERNAL MODULE: ./node_modules/antd/es/timeline/index.js + 3 modules
var timeline = __webpack_require__(33100);
// EXTERNAL MODULE: ./node_modules/@rc-component/portal/es/index.js + 6 modules
var portal_es = __webpack_require__(2788);
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/util.js
function isInViewPort(element) {
  var viewWidth = window.innerWidth || document.documentElement.clientWidth;
  var viewHeight = window.innerHeight || document.documentElement.clientHeight;

  var _element$getBoundingC = element.getBoundingClientRect(),
      top = _element$getBoundingC.top,
      right = _element$getBoundingC.right,
      bottom = _element$getBoundingC.bottom,
      left = _element$getBoundingC.left;

  return top >= 0 && left >= 0 && right <= viewWidth && bottom <= viewHeight;
}
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/hooks/useTarget.js





function useTarget(target, open, gap) {
  // ========================= Target =========================
  // We trade \`undefined\` as not get target by function yet.
  // \`null\` as empty target.
  var _useState = (0,react.useState)(undefined),
      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),
      targetElement = _useState2[0],
      setTargetElement = _useState2[1];

  (0,useLayoutEffect/* default */.Z)(function () {
    var nextElement = typeof target === 'function' ? target() : target;
    setTargetElement(nextElement || null);
  }); // ========================= Align ==========================

  var _useState3 = (0,react.useState)(null),
      _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),
      posInfo = _useState4[0],
      setPosInfo = _useState4[1];

  var updatePos = (0,useEvent/* default */.Z)(function () {
    if (targetElement) {
      // Exist target element. We should scroll and get target position
      if (!isInViewPort(targetElement)) {
        targetElement.scrollIntoView(true);
      }

      var _targetElement$getBou = targetElement.getBoundingClientRect(),
          left = _targetElement$getBou.left,
          top = _targetElement$getBou.top,
          width = _targetElement$getBou.width,
          height = _targetElement$getBou.height;

      var nextPosInfo = {
        left: left,
        top: top,
        width: width,
        height: height,
        radius: 0
      };
      setPosInfo(function (origin) {
        if (JSON.stringify(origin) !== JSON.stringify(nextPosInfo)) {
          return nextPosInfo;
        }

        return origin;
      });
    } else {
      // Not exist target which means we just show in center
      setPosInfo(null);
    }
  });
  (0,useLayoutEffect/* default */.Z)(function () {
    updatePos(); // update when window resize

    window.addEventListener('resize', updatePos);
    return function () {
      window.removeEventListener('resize', updatePos);
    };
  }, [targetElement, open, updatePos]); // ======================== PosInfo =========================

  var mergedPosInfo = (0,react.useMemo)(function () {
    if (!posInfo) {
      return posInfo;
    }

    var gapOffset = (gap === null || gap === void 0 ? void 0 : gap.offset) || 6;
    var gapRadius = (gap === null || gap === void 0 ? void 0 : gap.radius) || 2;
    return {
      left: posInfo.left - gapOffset,
      top: posInfo.top - gapOffset,
      width: posInfo.width + gapOffset * 2,
      height: posInfo.height + gapOffset * 2,
      radius: gapRadius
    };
  }, [posInfo, gap]);
  return [mergedPosInfo, targetElement];
}
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/TourStep/DefaultPanel.js



function DefaultPanel(props) {
  var prefixCls = props.prefixCls,
      current = props.current,
      total = props.total,
      title = props.title,
      description = props.description,
      onClose = props.onClose,
      onPrev = props.onPrev,
      onNext = props.onNext,
      onFinish = props.onFinish,
      arrow = props.arrow,
      className = props.className;
  return /*#__PURE__*/react.createElement("div", {
    className: classnames_default()("".concat(prefixCls, "-content"), className)
  }, arrow && /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-arrow"),
    key: "arrow"
  }), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-inner")
  }, /*#__PURE__*/react.createElement("button", {
    type: "button",
    onClick: onClose,
    "aria-label": "Close",
    className: "".concat(prefixCls, "-close")
  }, /*#__PURE__*/react.createElement("span", {
    className: "".concat(prefixCls, "-close-x")
  }, "\\xD7")), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-header")
  }, /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, title)), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-description")
  }, description), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-footer")
  }, /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-sliders")
  }, total > 1 ? (0,toConsumableArray/* default */.Z)(Array.from({
    length: total
  }).keys()).map(function (item, index) {
    return /*#__PURE__*/react.createElement("span", {
      key: item,
      className: index === current ? 'active' : ''
    });
  }) : null), /*#__PURE__*/react.createElement("div", {
    className: "".concat(prefixCls, "-buttons")
  }, current !== 0 ? /*#__PURE__*/react.createElement("button", {
    className: "".concat(prefixCls, "-prev-btn"),
    onClick: onPrev
  }, "Prev") : null, current === total - 1 ? /*#__PURE__*/react.createElement("button", {
    className: "".concat(prefixCls, "-finish-btn"),
    onClick: onFinish
  }, "Finish") : /*#__PURE__*/react.createElement("button", {
    className: "".concat(prefixCls, "-next-btn"),
    onClick: onNext
  }, "Next")))));
}
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/TourStep/index.js



var TourStep = function TourStep(props) {
  var current = props.current,
      renderPanel = props.renderPanel;
  return /*#__PURE__*/react.createElement(react.Fragment, null, typeof renderPanel === 'function' ? renderPanel(props, current) : /*#__PURE__*/react.createElement(DefaultPanel, props));
};

/* harmony default export */ var es_TourStep = (TourStep);
// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useId.js
var useId = __webpack_require__(7028);
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/Mask.js






var COVER_PROPS = {
  fill: 'transparent',
  pointerEvents: 'auto'
};

var Mask = function Mask(props) {
  var prefixCls = props.prefixCls,
      rootClassName = props.rootClassName,
      pos = props.pos,
      mask = props.mask,
      open = props.open,
      animated = props.animated;
  var id = (0,useId/* default */.Z)();
  var maskId = "".concat(prefixCls, "-mask-").concat(id);
  var mergedAnimated = (0,esm_typeof/* default */.Z)(animated) === 'object' ? animated === null || animated === void 0 ? void 0 : animated.placeholder : animated;
  return /*#__PURE__*/react.createElement(portal_es/* default */.Z, {
    open: open,
    autoLock: true
  }, /*#__PURE__*/react.createElement("div", {
    className: classnames_default()("".concat(prefixCls, "-mask"), rootClassName),
    style: {
      position: 'fixed',
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      zIndex: 900,
      pointerEvents: 'none'
    }
  }, mask ? /*#__PURE__*/react.createElement("svg", {
    style: {
      width: '100%',
      height: '100%'
    }
  }, /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("mask", {
    id: maskId
  }, /*#__PURE__*/react.createElement("rect", {
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    fill: "white"
  }), pos && /*#__PURE__*/react.createElement("rect", {
    x: pos.left,
    y: pos.top,
    rx: pos.radius,
    width: pos.width,
    height: pos.height,
    fill: "black",
    className: mergedAnimated ? "".concat(prefixCls, "-placeholder-animated") : ''
  }))), /*#__PURE__*/react.createElement("rect", {
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    fill: "rgba(0,0,0,0.5)",
    mask: "url(#".concat(maskId, ")")
  }), pos && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("rect", (0,esm_extends/* default */.Z)({}, COVER_PROPS, {
    x: "0",
    y: "0",
    width: "100%",
    height: pos.top
  })), /*#__PURE__*/react.createElement("rect", (0,esm_extends/* default */.Z)({}, COVER_PROPS, {
    x: "0",
    y: "0",
    width: pos.left,
    height: "100%"
  })), /*#__PURE__*/react.createElement("rect", (0,esm_extends/* default */.Z)({}, COVER_PROPS, {
    x: "0",
    y: pos.top + pos.height,
    width: "100%",
    height: "calc(100vh - ".concat(pos.top + pos.height, "px)")
  })), /*#__PURE__*/react.createElement("rect", (0,esm_extends/* default */.Z)({}, COVER_PROPS, {
    x: pos.left + pos.width,
    y: "0",
    width: "calc(100vw - ".concat(pos.left + pos.width, "px)"),
    height: "100%"
  })))) : null));
};

/* harmony default export */ var es_Mask = (Mask);
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/placements.js

var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  left: {
    points: ['cr', 'cl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  right: {
    points: ['cl', 'cr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  top: {
    points: ['bc', 'tc'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  bottom: {
    points: ['tc', 'bc'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  topLeft: {
    points: ['bl', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  leftTop: {
    points: ['tr', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  topRight: {
    points: ['br', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  rightTop: {
    points: ['tl', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomRight: {
    points: ['tr', 'br'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  rightBottom: {
    points: ['bl', 'br'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomLeft: {
    points: ['tl', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  leftBottom: {
    points: ['br', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  }
};
function getCenterPlacements(config) {
  var _config$arrowWidth = config.arrowWidth,
      arrowWidth = _config$arrowWidth === void 0 ? 4 : _config$arrowWidth,
      _config$horizontalArr = config.horizontalArrowShift,
      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
      _config$verticalArrow = config.verticalArrowShift,
      verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,
      placement = config.placement;
  var placementMap = {
    left: {
      points: ['cr', 'cl'],
      offset: [-4, 0]
    },
    right: {
      points: ['cl', 'cr'],
      offset: [4, 0]
    },
    top: {
      points: ['bc', 'tc'],
      offset: [0, -4]
    },
    bottom: {
      points: ['tc', 'bc'],
      offset: [0, 4]
    },
    topLeft: {
      points: ['bl', 'tc'],
      offset: [-(horizontalArrowShift + arrowWidth), -4]
    },
    leftTop: {
      points: ['tr', 'cl'],
      offset: [-4, -(verticalArrowShift + arrowWidth)]
    },
    topRight: {
      points: ['br', 'tc'],
      offset: [horizontalArrowShift + arrowWidth, -4]
    },
    rightTop: {
      points: ['tl', 'cr'],
      offset: [4, -(verticalArrowShift + arrowWidth)]
    },
    bottomRight: {
      points: ['tc', 'bc'],
      offset: [horizontalArrowShift + arrowWidth, 4]
    },
    rightBottom: {
      points: ['bl', 'cr'],
      offset: [4, verticalArrowShift + arrowWidth]
    },
    bottomLeft: {
      points: ['tl', 'bc'],
      offset: [-(horizontalArrowShift + arrowWidth), 4]
    },
    leftBottom: {
      points: ['br', 'cl'],
      offset: [-4, verticalArrowShift + arrowWidth]
    }
  };
  Object.keys(placementMap).forEach(function (key) {
    placementMap[key] = (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, placementMap[key]), {}, {
      targetOffset: targetOffset
    });
  });
  return placementMap[placement];
}
/* harmony default export */ var es_placements = (placements);
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/Tour.js





var Tour_excluded = ["prefixCls", "steps", "defaultCurrent", "current", "onChange", "onClose", "onFinish", "open", "mask", "arrow", "rootClassName", "placement", "renderPanel", "gap", "animated"];










var CENTER_ALIGN = {
  points: ['cc', 'cc'],
  offset: [0, 0]
};
var CENTER_PLACEHOLDER = {
  left: '50%',
  top: '50%',
  width: 1,
  height: 1
};

var Tour = function Tour(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'rc-tour' : _props$prefixCls,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? [] : _props$steps,
      defaultCurrent = props.defaultCurrent,
      current = props.current,
      onChange = props.onChange,
      onClose = props.onClose,
      _onFinish = props.onFinish,
      open = props.open,
      _props$mask = props.mask,
      mask = _props$mask === void 0 ? true : _props$mask,
      _props$arrow = props.arrow,
      arrow = _props$arrow === void 0 ? true : _props$arrow,
      rootClassName = props.rootClassName,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'bottom' : _props$placement,
      renderPanel = props.renderPanel,
      gap = props.gap,
      animated = props.animated,
      restProps = (0,objectWithoutProperties/* default */.Z)(props, Tour_excluded);

  var _useMergedState = (0,useMergedState/* default */.Z)(0, {
    value: current,
    defaultValue: defaultCurrent
  }),
      _useMergedState2 = (0,slicedToArray/* default */.Z)(_useMergedState, 2),
      mergedCurrent = _useMergedState2[0],
      setMergedCurrent = _useMergedState2[1];

  var _useMergedState3 = (0,useMergedState/* default */.Z)(undefined, {
    value: open,
    postState: function postState(origin) {
      return mergedCurrent < 0 || mergedCurrent >= steps.length ? false : origin !== null && origin !== void 0 ? origin : true;
    }
  }),
      _useMergedState4 = (0,slicedToArray/* default */.Z)(_useMergedState3, 2),
      mergedOpen = _useMergedState4[0],
      setMergedOpen = _useMergedState4[1];

  var openRef = react.useRef(mergedOpen);
  (0,useLayoutEffect/* default */.Z)(function () {
    if (mergedOpen && !openRef.current) {
      setMergedCurrent(0);
    }

    openRef.current = mergedOpen;
  }, [mergedOpen]);

  var _ref = steps[mergedCurrent] || {},
      target = _ref.target,
      stepPlacement = _ref.placement,
      stepStyle = _ref.style,
      stepArrow = _ref.arrow,
      stepClassName = _ref.className,
      stepMask = _ref.mask;

  var mergedPlacement = stepPlacement !== null && stepPlacement !== void 0 ? stepPlacement : placement;
  var mergedMask = mergedOpen && (stepMask !== null && stepMask !== void 0 ? stepMask : mask);

  var _useTarget = useTarget(target, open, gap),
      _useTarget2 = (0,slicedToArray/* default */.Z)(_useTarget, 2),
      posInfo = _useTarget2[0],
      targetElement = _useTarget2[1]; // ========================= arrow =========================


  var mergedArrow = targetElement ? typeof stepArrow === 'undefined' ? arrow : stepArrow : false;
  var arrowPointAtCenter = (0,esm_typeof/* default */.Z)(mergedArrow) === 'object' ? mergedArrow.pointAtCenter : false; // ========================= Change =========================

  var onInternalChange = function onInternalChange(nextCurrent) {
    setMergedCurrent(nextCurrent);
    onChange === null || onChange === void 0 ? void 0 : onChange(nextCurrent);
  }; // ========================= popupAlign =========================


  var popupAlign = targetElement ? arrowPointAtCenter ? getCenterPlacements({
    placement: placement
  }) : es_placements[mergedPlacement] : CENTER_ALIGN; // ========================= Render =========================
  // Skip if not init yet

  if (targetElement === undefined) {
    return null;
  }

  var handleClose = function handleClose() {
    setMergedOpen(false);
    onClose === null || onClose === void 0 ? void 0 : onClose(mergedCurrent);
  };

  var getPopupElement = function getPopupElement() {
    return /*#__PURE__*/react.createElement(es_TourStep, (0,esm_extends/* default */.Z)({
      arrow: mergedArrow,
      key: "content",
      prefixCls: prefixCls,
      total: steps.length,
      renderPanel: renderPanel,
      onPrev: function onPrev() {
        onInternalChange(mergedCurrent - 1);
      },
      onNext: function onNext() {
        onInternalChange(mergedCurrent + 1);
      },
      onClose: handleClose,
      current: mergedCurrent,
      onFinish: function onFinish() {
        handleClose();
        _onFinish === null || _onFinish === void 0 ? void 0 : _onFinish();
      }
    }, steps[mergedCurrent]));
  };

  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(rc_trigger_es/* default */.Z, (0,esm_extends/* default */.Z)({}, restProps, {
    popupAlign: popupAlign,
    popupStyle: stepStyle,
    popupPlacement: mergedPlacement,
    builtinPlacements: es_placements,
    popupVisible: mergedOpen,
    popupClassName: classnames_default()(rootClassName, stepClassName),
    prefixCls: prefixCls,
    popup: getPopupElement,
    forceRender: false,
    destroyPopupOnHide: true,
    zIndex: 1090
  }), /*#__PURE__*/react.createElement(portal_es/* default */.Z, {
    open: mergedOpen,
    autoLock: true
  }, /*#__PURE__*/react.createElement("div", {
    className: classnames_default()(rootClassName, "".concat(prefixCls, "-target-placeholder")),
    style: (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, posInfo || CENTER_PLACEHOLDER), {}, {
      position: 'fixed',
      pointerEvents: 'none'
    })
  }))), /*#__PURE__*/react.createElement(es_Mask, {
    prefixCls: prefixCls,
    pos: posInfo,
    mask: mergedMask,
    open: mergedOpen,
    animated: animated,
    rootClassName: rootClassName
  }));
};

/* harmony default export */ var es_Tour = (Tour);
;// CONCATENATED MODULE: ./node_modules/@rc-component/tour/es/index.js

/* harmony default export */ var tour_es = (es_Tour);
// EXTERNAL MODULE: ./node_modules/antd/es/locale/LocaleReceiver.js
var LocaleReceiver = __webpack_require__(74342);
;// CONCATENATED MODULE: ./node_modules/antd/es/tour/panelRender.js







const panelRender = (props, current, type) => {
  const {
    prefixCls,
    total = 1,
    title,
    onClose,
    onPrev,
    onNext,
    onFinish,
    cover,
    description,
    nextButtonProps,
    prevButtonProps,
    stepRender,
    type: stepType,
    arrow,
    className
  } = props;
  const mergedType = typeof stepType !== 'undefined' ? stepType : type;
  const isLastStep = current === total - 1;
  const prevBtnClick = () => {
    onPrev === null || onPrev === void 0 ? void 0 : onPrev();
    if (typeof (prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.onClick) === 'function') {
      prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.onClick();
    }
  };
  const nextBtnClick = () => {
    if (isLastStep) {
      onFinish === null || onFinish === void 0 ? void 0 : onFinish();
    } else {
      onNext === null || onNext === void 0 ? void 0 : onNext();
    }
    if (typeof (nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.onClick) === 'function') {
      nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.onClick();
    }
  };
  let headerNode;
  if (title) {
    headerNode = /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-header\`
    }, /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-title\`
    }, title));
  }
  let descriptionNode;
  if (description) {
    descriptionNode = /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-description\`
    }, description);
  }
  let coverNode;
  if (cover) {
    coverNode = /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-cover\`
    }, cover);
  }
  const mergedSlickNode = typeof stepRender === 'function' && stepRender(current, total) || (0,toConsumableArray/* default */.Z)(Array.from({
    length: total
  }).keys()).map((stepItem, index) => /*#__PURE__*/react.createElement("span", {
    key: stepItem,
    className: classnames_default()(index === current && \`\${prefixCls}-slider-active\`, \`\${prefixCls}-slider\`)
  }));
  const slickNode = total > 1 ? mergedSlickNode : null;
  const mainBtnType = mergedType === 'primary' ? 'default' : 'primary';
  const secondaryBtnProps = {
    type: 'default',
    ghost: mergedType === 'primary'
  };
  return /*#__PURE__*/react.createElement(LocaleReceiver/* default */.Z, {
    componentName: "Tour",
    defaultLocale: en_US/* default.Tour */.Z.Tour
  }, contextLocale => {
    var _a, _b;
    return /*#__PURE__*/react.createElement("div", {
      className: classnames_default()(mergedType === 'primary' ? \`\${prefixCls}-primary\` : '', className, \`\${prefixCls}-content\`)
    }, arrow && /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-arrow\`,
      key: "arrow"
    }), /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-inner\`
    }, /*#__PURE__*/react.createElement(CloseOutlined/* default */.Z, {
      className: \`\${prefixCls}-close\`,
      onClick: onClose
    }), coverNode, headerNode, descriptionNode, /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-footer\`
    }, /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-sliders\`
    }, slickNode), /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-buttons\`
    }, current !== 0 ? /*#__PURE__*/react.createElement(es_button/* default */.ZP, Object.assign({}, secondaryBtnProps, prevButtonProps, {
      onClick: prevBtnClick,
      size: "small",
      className: classnames_default()(\`\${prefixCls}-prev-btn\`, prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.className)
    }), (_a = prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.children) !== null && _a !== void 0 ? _a : contextLocale.Previous) : null, /*#__PURE__*/react.createElement(es_button/* default */.ZP, Object.assign({
      type: mainBtnType
    }, nextButtonProps, {
      onClick: nextBtnClick,
      size: "small",
      className: classnames_default()(\`\${prefixCls}-next-btn\`, nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.className)
    }), (_b = nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.children) !== null && _b !== void 0 ? _b : isLastStep ? contextLocale.Finish : contextLocale.Next)))));
  });
};
/* harmony default export */ var tour_panelRender = (panelRender);
// EXTERNAL MODULE: ./node_modules/antd/es/style/placementArrow.js
var placementArrow = __webpack_require__(97414);
;// CONCATENATED MODULE: ./node_modules/antd/es/tour/style/index.js




// =============================== Base ===============================
const genBaseStyle = token => {
  const {
    componentCls,
    lineHeight,
    padding,
    paddingXS,
    borderRadius,
    borderRadiusXS,
    colorPrimary,
    colorText,
    colorFill,
    sliderHeight,
    sliderWidth,
    boxShadow,
    tourZIndexPopup,
    fontSize,
    colorBgContainer,
    fontWeightStrong,
    marginXS,
    colorTextLightSolid,
    tourBorderRadius,
    colorWhite,
    colorBgTextHover,
    tourCloseSize,
    motionDurationSlow
  } = token;
  return [{
    [componentCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      color: colorText,
      position: 'absolute',
      zIndex: tourZIndexPopup,
      display: 'block',
      visibility: 'visible',
      fontSize,
      lineHeight,
      width: 520,
      '--antd-arrow-background-color': colorBgContainer,
      '&-pure': {
        maxWidth: '100%',
        position: 'relative'
      },
      [\`&\${componentCls}-hidden\`]: {
        display: 'none'
      },
      // ============================= panel content ============================
      [\`\${componentCls}-content\`]: {
        position: 'relative'
      },
      [\`\${componentCls}-inner\`]: {
        textAlign: 'start',
        textDecoration: 'none',
        borderRadius: tourBorderRadius,
        boxShadow,
        position: 'relative',
        backgroundColor: colorBgContainer,
        border: 'none',
        backgroundClip: 'padding-box',
        [\`\${componentCls}-close\`]: {
          position: 'absolute',
          top: padding,
          insetInlineEnd: padding,
          color: token.colorIcon,
          outline: 'none',
          width: tourCloseSize,
          height: tourCloseSize,
          borderRadius: token.borderRadiusSM,
          transition: \`background-color \${token.motionDurationMid}, color \${token.motionDurationMid}\`,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          '&:hover': {
            color: token.colorIconHover,
            backgroundColor: token.wireframe ? 'transparent' : token.colorFillContent
          }
        },
        [\`\${componentCls}-cover\`]: {
          textAlign: 'center',
          padding: \`\${padding + tourCloseSize + paddingXS}px \${padding}px 0\`,
          img: {
            width: '100%'
          }
        },
        [\`\${componentCls}-header\`]: {
          padding: \`\${padding}px \${padding}px \${paddingXS}px\`,
          [\`\${componentCls}-title\`]: {
            lineHeight,
            fontSize,
            fontWeight: fontWeightStrong
          }
        },
        [\`\${componentCls}-description\`]: {
          padding: \`0 \${padding}px\`,
          lineHeight,
          wordWrap: 'break-word'
        },
        [\`\${componentCls}-footer\`]: {
          padding: \`\${paddingXS}px \${padding}px \${padding}px\`,
          textAlign: 'end',
          borderRadius: \`0 0 \${borderRadiusXS}px \${borderRadiusXS}px\`,
          display: 'flex',
          justifyContent: 'space-between',
          [\`\${componentCls}-sliders\`]: {
            display: 'inline-block',
            [\`\${componentCls}-slider\`]: {
              width: \`\${sliderWidth}px\`,
              height: \`\${sliderHeight}px\`,
              display: 'inline-block',
              borderRadius: '50%',
              background: colorFill,
              marginInlineEnd: sliderHeight,
              '&-active': {
                background: colorPrimary
              }
            }
          },
          [\`\${componentCls}-buttons button\`]: {
            marginInlineStart: marginXS
          }
        }
      },
      // =============================  primary type  ===========================
      // \`$\` for panel, \`&$\` for pure panel
      [\`\${componentCls}-primary, &\${componentCls}-primary\`]: {
        '--antd-arrow-background-color': colorPrimary
      },
      [\`\${componentCls}-primary\`]: {
        [\`\${componentCls}-inner\`]: {
          color: colorTextLightSolid,
          textAlign: 'start',
          textDecoration: 'none',
          backgroundColor: colorPrimary,
          borderRadius,
          boxShadow,
          [\`\${componentCls}-close\`]: {
            color: colorTextLightSolid
          },
          [\`\${componentCls}-sliders\`]: {
            [\`\${componentCls}-slider\`]: {
              background: new dist_module/* TinyColor */.C(colorTextLightSolid).setAlpha(0.15).toRgbString(),
              '&-active': {
                background: colorTextLightSolid
              }
            }
          },
          [\`\${componentCls}-prev-btn\`]: {
            color: colorTextLightSolid,
            borderColor: new dist_module/* TinyColor */.C(colorTextLightSolid).setAlpha(0.15).toRgbString(),
            backgroundColor: colorPrimary,
            '&:hover': {
              backgroundColor: new dist_module/* TinyColor */.C(colorTextLightSolid).setAlpha(0.15).toRgbString(),
              borderColor: 'transparent'
            }
          },
          [\`\${componentCls}-next-btn\`]: {
            color: colorPrimary,
            borderColor: 'transparent',
            background: colorWhite,
            '&:hover': {
              background: new dist_module/* TinyColor */.C(colorBgTextHover).onBackground(colorWhite).toRgbString()
            }
          }
        }
      }
    }),
    // ============================= mask ===========================
    [\`\${componentCls}-mask\`]: {
      [\`\${componentCls}-placeholder-animated\`]: {
        transition: \`all \${motionDurationSlow}\`
      }
    },
    // =========== Limit left and right placement radius ==============
    [['&-placement-left', '&-placement-leftTop', '&-placement-leftBottom', '&-placement-right', '&-placement-rightTop', '&-placement-rightBottom'].join(',')]: {
      [\`\${componentCls}-inner\`]: {
        borderRadius: Math.min(tourBorderRadius, placementArrow/* MAX_VERTICAL_CONTENT_RADIUS */.qN)
      }
    }
  },
  // ============================= Arrow ===========================
  (0,placementArrow/* default */.ZP)(token, {
    colorBg: 'var(--antd-arrow-background-color)',
    showArrowCls: '',
    contentRadius: tourBorderRadius,
    limitVerticalRadius: true
  })];
};
// ============================== Export ==============================
/* harmony default export */ var tour_style = ((0,genComponentStyleHook/* default */.Z)('Tour', token => {
  const {
    borderRadiusLG,
    fontSize,
    lineHeight
  } = token;
  const TourToken = (0,statistic/* merge */.TS)(token, {
    tourZIndexPopup: token.zIndexPopupBase + 70,
    sliderWidth: 6,
    sliderHeight: 6,
    tourBorderRadius: borderRadiusLG,
    tourCloseSize: fontSize * lineHeight
  });
  return [genBaseStyle(TourToken)];
}));
// EXTERNAL MODULE: ./node_modules/antd/es/popover/PurePanel.js
var popover_PurePanel = __webpack_require__(60590);
;// CONCATENATED MODULE: ./node_modules/antd/es/tour/PurePanel.js
var tour_PurePanel_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






const PurePanel_PurePanel = props => {
  const {
      prefixCls: customizePrefixCls,
      current = 0,
      total = 6,
      className,
      style,
      type
    } = props,
    restProps = tour_PurePanel_rest(props, ["prefixCls", "current", "total", "className", "style", "type"]);
  const {
    getPrefixCls
  } = react.useContext(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls('tour', customizePrefixCls);
  const [wrapSSR, hashId] = tour_style(prefixCls);
  const node = tour_panelRender(Object.assign(Object.assign({}, restProps), {
    prefixCls,
    total
  }), current, type);
  return wrapSSR( /*#__PURE__*/react.createElement(popover_PurePanel/* RawPurePanel */.t5, {
    prefixCls: prefixCls,
    hashId: hashId,
    className: classnames_default()(className, \`\${prefixCls}-pure\`, type && \`\${prefixCls}-\${type}\`),
    style: style
  }, node));
  // return node as React.ReactElement;
};

/* harmony default export */ var tour_PurePanel = (PurePanel_PurePanel);
;// CONCATENATED MODULE: ./node_modules/antd/es/tour/index.js
var tour_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







const tour_Tour = props => {
  const {
      prefixCls: customizePrefixCls,
      steps,
      current,
      type,
      rootClassName
    } = props,
    restProps = tour_rest(props, ["prefixCls", "steps", "current", "type", "rootClassName"]);
  const {
    getPrefixCls,
    direction
  } = (0,react.useContext)(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls('tour', customizePrefixCls);
  const [wrapSSR, hashId] = tour_style(prefixCls);
  const customClassName = classnames_default()({
    [\`\${prefixCls}-rtl\`]: direction === 'rtl'
  }, hashId, rootClassName);
  const mergedRenderPanel = (stepProps, stepCurrent) => tour_panelRender(stepProps, stepCurrent, type);
  return wrapSSR( /*#__PURE__*/react.createElement(tour_es, Object.assign({}, restProps, {
    rootClassName: customClassName,
    prefixCls: prefixCls,
    steps: steps,
    current: current,
    animated: true,
    renderPanel: mergedRenderPanel
  })));
};
if (false) {}
tour_Tour._InternalPanelDoNotUseOrYouWillBeFired = tour_PurePanel;
/* harmony default export */ var tour = (tour_Tour);
;// CONCATENATED MODULE: ./node_modules/antd/es/app/style/index.js

// =============================== Base ===============================
const style_genBaseStyle = token => {
  const {
    componentCls,
    colorText,
    fontSize,
    lineHeight,
    fontFamily
  } = token;
  return {
    [componentCls]: {
      color: colorText,
      fontSize,
      lineHeight,
      fontFamily
    }
  };
};
// ============================== Export ==============================
/* harmony default export */ var app_style = ((0,genComponentStyleHook/* default */.Z)('App', token => [style_genBaseStyle(token)]));
// EXTERNAL MODULE: ./node_modules/antd/es/message/useMessage.js
var useMessage = __webpack_require__(16474);
// EXTERNAL MODULE: ./node_modules/antd/es/notification/useNotification.js + 1 modules
var useNotification = __webpack_require__(48311);
// EXTERNAL MODULE: ./node_modules/antd/es/modal/useModal/index.js + 2 modules
var useModal = __webpack_require__(94423);
;// CONCATENATED MODULE: ./node_modules/antd/es/app/context.js

const AppContext = /*#__PURE__*/react.createContext({
  message: {},
  notification: {},
  modal: {}
});
/* harmony default export */ var app_context = (AppContext);
;// CONCATENATED MODULE: ./node_modules/antd/es/app/index.js








const useApp = () => react.useContext(app_context);
const App = props => {
  const {
    prefixCls: customizePrefixCls,
    children,
    className
  } = props;
  const {
    getPrefixCls
  } = (0,react.useContext)(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls('app', customizePrefixCls);
  const [wrapSSR, hashId] = app_style(prefixCls);
  const customClassName = classnames_default()(hashId, prefixCls, className);
  const [messageApi, messageContextHolder] = (0,useMessage/* default */.Z)();
  const [notificationApi, notificationContextHolder] = (0,useNotification/* default */.Z)();
  const [ModalApi, ModalContextHolder] = (0,useModal/* default */.Z)();
  const memoizedContextValue = react.useMemo(() => ({
    message: messageApi,
    notification: notificationApi,
    modal: ModalApi
  }), [messageApi, notificationApi, ModalApi]);
  return wrapSSR( /*#__PURE__*/react.createElement(app_context.Provider, {
    value: memoizedContextValue
  }, /*#__PURE__*/react.createElement("div", {
    className: customClassName
  }, ModalContextHolder, messageContextHolder, notificationContextHolder, children)));
};
if (false) {}
App.useApp = useApp;
/* harmony default export */ var app = (App);
;// CONCATENATED MODULE: ./node_modules/antd/es/_util/transKeys.js
const groupKeysMap = keys => {
  const map = new Map();
  keys.forEach((key, index) => {
    map.set(key, index);
  });
  return map;
};
const groupDisabledKeysMap = dataSource => {
  const map = new Map();
  dataSource.forEach((_ref, index) => {
    let {
      disabled,
      key
    } = _ref;
    if (disabled) {
      map.set(key, index);
    }
  });
  return map;
};
// EXTERNAL MODULE: ./node_modules/antd/es/_util/reactNode.js
var reactNode = __webpack_require__(96159);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/DeleteOutlined.js + 1 modules
var DeleteOutlined = __webpack_require__(48689);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/transButton.js
var transButton = __webpack_require__(34952);
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/ListItem.js







const ListItem = props => {
  const {
    renderedText,
    renderedEl,
    item,
    checked,
    disabled,
    prefixCls,
    onClick,
    onRemove,
    showRemove
  } = props;
  const className = classnames_default()({
    [\`\${prefixCls}-content-item\`]: true,
    [\`\${prefixCls}-content-item-disabled\`]: disabled || item.disabled,
    [\`\${prefixCls}-content-item-checked\`]: checked
  });
  let title;
  if (typeof renderedText === 'string' || typeof renderedText === 'number') {
    title = String(renderedText);
  }
  return /*#__PURE__*/react.createElement(LocaleReceiver/* default */.Z, {
    componentName: "Transfer",
    defaultLocale: en_US/* default.Transfer */.Z.Transfer
  }, contextLocale => {
    const liProps = {
      className,
      title
    };
    const labelNode = /*#__PURE__*/react.createElement("span", {
      className: \`\${prefixCls}-content-item-text\`
    }, renderedEl);
    // Show remove
    if (showRemove) {
      return /*#__PURE__*/react.createElement("li", Object.assign({}, liProps), labelNode, /*#__PURE__*/react.createElement(transButton/* default */.Z, {
        disabled: disabled || item.disabled,
        className: \`\${prefixCls}-content-item-remove\`,
        "aria-label": contextLocale.remove,
        onClick: () => {
          onRemove === null || onRemove === void 0 ? void 0 : onRemove(item);
        }
      }, /*#__PURE__*/react.createElement(DeleteOutlined/* default */.Z, null)));
    }
    // Default click to select
    liProps.onClick = disabled || item.disabled ? undefined : () => onClick(item);
    return /*#__PURE__*/react.createElement("li", Object.assign({}, liProps), /*#__PURE__*/react.createElement(es_checkbox/* default */.Z, {
      className: \`\${prefixCls}-checkbox\`,
      checked: checked,
      disabled: disabled || item.disabled
    }), labelNode);
  });
};
/* harmony default export */ var transfer_ListItem = (/*#__PURE__*/react.memo(ListItem));
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/ListBody.js




const OmitProps = ['handleFilter', 'handleClear', 'checkedKeys'];
const parsePagination = pagination => {
  if (!pagination) {
    return null;
  }
  const defaultPagination = {
    pageSize: 10,
    simple: true,
    showSizeChanger: false,
    showLessItems: false
  };
  if (typeof pagination === 'object') {
    return Object.assign(Object.assign({}, defaultPagination), pagination);
  }
  return defaultPagination;
};
const TransferListBody = (props, ref) => {
  const {
    prefixCls,
    filteredRenderItems,
    selectedKeys,
    disabled: globalDisabled,
    showRemove,
    pagination,
    onScroll,
    onItemSelect,
    onItemRemove
  } = props;
  const [current, setCurrent] = react.useState(1);
  react.useEffect(() => {
    const mergedPagination = parsePagination(pagination);
    if (mergedPagination) {
      const maxPageCount = Math.ceil(filteredRenderItems.length / mergedPagination.pageSize);
      setCurrent(Math.min(current, maxPageCount));
    }
  }, [filteredRenderItems, pagination]);
  const onClick = item => {
    onItemSelect === null || onItemSelect === void 0 ? void 0 : onItemSelect(item.key, !selectedKeys.includes(item.key));
  };
  const onRemove = item => {
    onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove([item.key]);
  };
  const onPageChange = cur => {
    setCurrent(cur);
  };
  const memoizedItems = react.useMemo(() => {
    const mergedPagination = parsePagination(pagination);
    const displayItems = mergedPagination ? filteredRenderItems.slice((current - 1) * mergedPagination.pageSize, current * mergedPagination.pageSize) : filteredRenderItems;
    return displayItems;
  }, [current, filteredRenderItems, pagination]);
  react.useImperativeHandle(ref, () => ({
    items: memoizedItems
  }));
  const mergedPagination = parsePagination(pagination);
  const paginationNode = mergedPagination ? /*#__PURE__*/react.createElement(es_pagination/* default */.Z, {
    size: "small",
    disabled: globalDisabled,
    simple: mergedPagination.simple,
    pageSize: mergedPagination.pageSize,
    showLessItems: mergedPagination.showLessItems,
    showSizeChanger: mergedPagination.showSizeChanger,
    className: \`\${prefixCls}-pagination\`,
    total: filteredRenderItems.length,
    current: current,
    onChange: onPageChange
  }) : null;
  const cls = classnames_default()(\`\${prefixCls}-content\`, {
    [\`\${prefixCls}-content-show-remove\`]: showRemove
  });
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("ul", {
    className: cls,
    onScroll: onScroll
  }, (memoizedItems || []).map(_ref => {
    let {
      renderedEl,
      renderedText,
      item
    } = _ref;
    return /*#__PURE__*/react.createElement(transfer_ListItem, {
      key: item.key,
      item: item,
      renderedText: renderedText,
      renderedEl: renderedEl,
      prefixCls: prefixCls,
      showRemove: showRemove,
      onClick: onClick,
      onRemove: onRemove,
      checked: selectedKeys.includes(item.key),
      disabled: globalDisabled || item.disabled
    });
  })), paginationNode);
};
if (false) {}
/* harmony default export */ var ListBody = (/*#__PURE__*/react.forwardRef(TransferListBody));
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/search.js



const Search = props => {
  const {
    placeholder = '',
    value,
    prefixCls,
    disabled,
    onChange,
    handleClear
  } = props;
  const handleChange = react.useCallback(e => {
    onChange === null || onChange === void 0 ? void 0 : onChange(e);
    if (e.target.value === '') {
      handleClear === null || handleClear === void 0 ? void 0 : handleClear();
    }
  }, [onChange]);
  return /*#__PURE__*/react.createElement(input/* default */.Z, {
    placeholder: placeholder,
    className: prefixCls,
    value: value,
    onChange: handleChange,
    disabled: disabled,
    allowClear: true,
    prefix: /*#__PURE__*/react.createElement(SearchOutlined/* default */.Z, null)
  });
};
if (false) {}
/* harmony default export */ var transfer_search = (Search);
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/list.js










const defaultRender = () => null;
function isRenderResultPlainObject(result) {
  return !!(result && !(0,reactNode/* isValidElement */.l$)(result) && Object.prototype.toString.call(result) === '[object Object]');
}
function getEnabledItemKeys(items) {
  return items.filter(data => !data.disabled).map(data => data.key);
}
const TransferList = props => {
  const {
    prefixCls,
    dataSource = [],
    titleText = '',
    checkedKeys,
    disabled,
    showSearch = false,
    style,
    searchPlaceholder,
    notFoundContent,
    selectAll,
    selectCurrent,
    selectInvert,
    removeAll,
    removeCurrent,
    showSelectAll = true,
    showRemove,
    pagination,
    direction,
    itemsUnit,
    itemUnit,
    selectAllLabel,
    footer,
    renderList,
    onItemSelectAll,
    onItemRemove,
    handleFilter,
    handleClear,
    filterOption,
    render = defaultRender
  } = props;
  const [filterValue, setFilterValue] = (0,react.useState)('');
  const listBodyRef = (0,react.useRef)({});
  const internalHandleFilter = e => {
    setFilterValue(e.target.value);
    handleFilter(e);
  };
  const internalHandleClear = () => {
    setFilterValue('');
    handleClear();
  };
  const matchFilter = (text, item) => {
    if (filterOption) {
      return filterOption(filterValue, item);
    }
    return text.includes(filterValue);
  };
  const renderListBody = listProps => {
    let bodyContent = renderList ? renderList(listProps) : null;
    const customize = !!bodyContent;
    if (!customize) {
      bodyContent = /*#__PURE__*/react.createElement(ListBody, Object.assign({
        ref: listBodyRef
      }, listProps));
    }
    return {
      customize,
      bodyContent
    };
  };
  const renderItem = item => {
    const renderResult = render(item);
    const isRenderResultPlain = isRenderResultPlainObject(renderResult);
    return {
      item,
      renderedEl: isRenderResultPlain ? renderResult.label : renderResult,
      renderedText: isRenderResultPlain ? renderResult.value : renderResult
    };
  };
  const notFoundContentEle = (0,react.useMemo)(() => Array.isArray(notFoundContent) ? notFoundContent[direction === 'left' ? 0 : 1] : notFoundContent, [notFoundContent, direction]);
  const [filteredItems, filteredRenderItems] = (0,react.useMemo)(() => {
    const filterItems = [];
    const filterRenderItems = [];
    dataSource.forEach(item => {
      const renderedItem = renderItem(item);
      if (filterValue && !matchFilter(renderedItem.renderedText, item)) {
        return;
      }
      filterItems.push(item);
      filterRenderItems.push(renderedItem);
    });
    return [filterItems, filterRenderItems];
  }, [dataSource, filterValue]);
  const checkStatus = (0,react.useMemo)(() => {
    if (checkedKeys.length === 0) {
      return 'none';
    }
    const checkedKeysMap = groupKeysMap(checkedKeys);
    if (filteredItems.every(item => checkedKeysMap.has(item.key) || !!item.disabled)) {
      return 'all';
    }
    return 'part';
  }, [checkedKeys, filteredItems]);
  const listBody = (0,react.useMemo)(() => {
    const search = showSearch ? /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-body-search-wrapper\`
    }, /*#__PURE__*/react.createElement(transfer_search, {
      prefixCls: \`\${prefixCls}-search\`,
      onChange: internalHandleFilter,
      handleClear: internalHandleClear,
      placeholder: searchPlaceholder,
      value: filterValue,
      disabled: disabled
    })) : null;
    const {
      customize,
      bodyContent
    } = renderListBody(Object.assign(Object.assign({}, (0,omit/* default */.Z)(props, OmitProps)), {
      filteredItems,
      filteredRenderItems,
      selectedKeys: checkedKeys
    }));
    let bodyNode;
    // We should wrap customize list body in a classNamed div to use flex layout.
    if (customize) {
      bodyNode = /*#__PURE__*/react.createElement("div", {
        className: \`\${prefixCls}-body-customize-wrapper\`
      }, bodyContent);
    } else {
      bodyNode = filteredItems.length ? bodyContent : /*#__PURE__*/react.createElement("div", {
        className: \`\${prefixCls}-body-not-found\`
      }, notFoundContentEle);
    }
    return /*#__PURE__*/react.createElement("div", {
      className: classnames_default()(showSearch ? \`\${prefixCls}-body \${prefixCls}-body-with-search\` : \`\${prefixCls}-body\`)
    }, search, bodyNode);
  }, [showSearch, prefixCls, searchPlaceholder, filterValue, disabled, checkedKeys, filteredItems, filteredRenderItems, notFoundContentEle]);
  const checkBox = /*#__PURE__*/react.createElement(es_checkbox/* default */.Z, {
    disabled: dataSource.length === 0 || disabled,
    checked: checkStatus === 'all',
    indeterminate: checkStatus === 'part',
    className: \`\${prefixCls}-checkbox\`,
    onChange: () => {
      // Only select enabled items
      onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(filteredItems.filter(item => !item.disabled).map(_ref => {
        let {
          key
        } = _ref;
        return key;
      }), checkStatus !== 'all');
    }
  });
  const getSelectAllLabel = (selectedCount, totalCount) => {
    if (selectAllLabel) {
      return typeof selectAllLabel === 'function' ? selectAllLabel({
        selectedCount,
        totalCount
      }) : selectAllLabel;
    }
    const unit = totalCount > 1 ? itemsUnit : itemUnit;
    return /*#__PURE__*/react.createElement(react.Fragment, null, (selectedCount > 0 ? \`\${selectedCount}/\` : '') + totalCount, " ", unit);
  };
  // Custom Layout
  const footerDom = footer && (footer.length < 2 ? footer(props) : footer(props, {
    direction
  }));
  const listCls = classnames_default()(prefixCls, {
    [\`\${prefixCls}-with-pagination\`]: !!pagination,
    [\`\${prefixCls}-with-footer\`]: !!footerDom
  });
  // ====================== Get filtered, checked item list ======================
  const listFooter = footerDom ? /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-footer\`
  }, footerDom) : null;
  const checkAllCheckbox = !showRemove && !pagination && checkBox;
  let items;
  if (showRemove) {
    items = [/* Remove Current Page */
    pagination ? {
      key: 'removeCurrent',
      label: removeCurrent,
      onClick() {
        var _a;
        const pageKeys = getEnabledItemKeys((((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || []).map(entity => entity.item));
        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(pageKeys);
      }
    } : null, /* Remove All */
    {
      key: 'removeAll',
      label: removeAll,
      onClick() {
        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(getEnabledItemKeys(filteredItems));
      }
    }].filter(Boolean);
  } else {
    items = [{
      key: 'selectAll',
      label: selectAll,
      onClick() {
        const keys = getEnabledItemKeys(filteredItems);
        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(keys, keys.length !== checkedKeys.length);
      }
    }, pagination ? {
      key: 'selectCurrent',
      label: selectCurrent,
      onClick() {
        var _a;
        const pageItems = ((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || [];
        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(getEnabledItemKeys(pageItems.map(entity => entity.item)), true);
      }
    } : null, {
      key: 'selectInvert',
      label: selectInvert,
      onClick() {
        var _a;
        const availableKeys = getEnabledItemKeys(pagination ? (((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || []).map(entity => entity.item) : filteredItems);
        const checkedKeySet = new Set(checkedKeys);
        const newCheckedKeys = [];
        const newUnCheckedKeys = [];
        availableKeys.forEach(key => {
          if (checkedKeySet.has(key)) {
            newUnCheckedKeys.push(key);
          } else {
            newCheckedKeys.push(key);
          }
        });
        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(newCheckedKeys, true);
        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(newUnCheckedKeys, false);
      }
    }];
  }
  const dropdown = /*#__PURE__*/react.createElement(es_dropdown/* default */.Z, {
    className: \`\${prefixCls}-header-dropdown\`,
    menu: {
      items
    },
    disabled: disabled
  }, /*#__PURE__*/react.createElement(DownOutlined/* default */.Z, null));
  return /*#__PURE__*/react.createElement("div", {
    className: listCls,
    style: style
  }, /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-header\`
  }, showSelectAll ? /*#__PURE__*/react.createElement(react.Fragment, null, checkAllCheckbox, dropdown) : null, /*#__PURE__*/react.createElement("span", {
    className: \`\${prefixCls}-header-selected\`
  }, getSelectAllLabel(checkedKeys.length, filteredItems.length)), /*#__PURE__*/react.createElement("span", {
    className: \`\${prefixCls}-header-title\`
  }, titleText)), listBody, listFooter);
};
if (false) {}
/* harmony default export */ var transfer_list = (TransferList);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/LeftOutlined.js + 1 modules
var LeftOutlined = __webpack_require__(6171);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/RightOutlined.js + 1 modules
var RightOutlined = __webpack_require__(18073);
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/operation.js




const Operation = props => {
  const {
    disabled,
    moveToLeft,
    moveToRight,
    leftArrowText = '',
    rightArrowText = '',
    leftActive,
    rightActive,
    className,
    style,
    direction,
    oneWay
  } = props;
  return /*#__PURE__*/react.createElement("div", {
    className: className,
    style: style
  }, /*#__PURE__*/react.createElement(es_button/* default */.ZP, {
    type: "primary",
    size: "small",
    disabled: disabled || !rightActive,
    onClick: moveToRight,
    icon: direction !== 'rtl' ? /*#__PURE__*/react.createElement(RightOutlined/* default */.Z, null) : /*#__PURE__*/react.createElement(LeftOutlined/* default */.Z, null)
  }, rightArrowText), !oneWay && /*#__PURE__*/react.createElement(es_button/* default */.ZP, {
    type: "primary",
    size: "small",
    disabled: disabled || !leftActive,
    onClick: moveToLeft,
    icon: direction !== 'rtl' ? /*#__PURE__*/react.createElement(LeftOutlined/* default */.Z, null) : /*#__PURE__*/react.createElement(RightOutlined/* default */.Z, null)
  }, leftArrowText));
};
if (false) {}
/* harmony default export */ var operation = (Operation);
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/style/index.js


const genTransferCustomizeStyle = token => {
  const {
    antCls,
    componentCls,
    listHeight,
    controlHeightLG,
    marginXXS,
    margin
  } = token;
  const tableCls = \`\${antCls}-table\`;
  const inputCls = \`\${antCls}-input\`;
  return {
    [\`\${componentCls}-customize-list\`]: {
      [\`\${componentCls}-list\`]: {
        flex: '1 1 50%',
        width: 'auto',
        height: 'auto',
        minHeight: listHeight
      },
      // =================== Hook Components ===================
      [\`\${tableCls}-wrapper\`]: {
        [\`\${tableCls}-small\`]: {
          border: 0,
          borderRadius: 0,
          [\`\${tableCls}-selection-column\`]: {
            width: controlHeightLG,
            minWidth: controlHeightLG
          }
        },
        [\`\${tableCls}-pagination\${tableCls}-pagination\`]: {
          margin: \`\${margin}px 0 \${marginXXS}px\`
        }
      },
      [\`\${inputCls}[disabled]\`]: {
        backgroundColor: 'transparent'
      }
    }
  };
};
const genTransferStatusColor = (token, color) => {
  const {
    componentCls,
    colorBorder
  } = token;
  return {
    [\`\${componentCls}-list\`]: {
      borderColor: color,
      '&-search:not([disabled])': {
        borderColor: colorBorder
      }
    }
  };
};
const genTransferStatusStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-status-error\`]: Object.assign({}, genTransferStatusColor(token, token.colorError)),
    [\`\${componentCls}-status-warning\`]: Object.assign({}, genTransferStatusColor(token, token.colorWarning))
  };
};
const genTransferListStyle = token => {
  const {
    componentCls,
    colorBorder,
    colorSplit,
    lineWidth,
    transferItemHeight,
    transferHeaderHeight,
    transferHeaderVerticalPadding,
    transferItemPaddingVertical,
    controlItemBgActive,
    controlItemBgActiveHover,
    colorTextDisabled,
    listHeight,
    listWidth,
    listWidthLG,
    fontSizeIcon,
    marginXS,
    paddingSM,
    lineType,
    iconCls,
    motionDurationSlow
  } = token;
  return {
    display: 'flex',
    flexDirection: 'column',
    width: listWidth,
    height: listHeight,
    border: \`\${lineWidth}px \${lineType} \${colorBorder}\`,
    borderRadius: token.borderRadiusLG,
    '&-with-pagination': {
      width: listWidthLG,
      height: 'auto'
    },
    '&-search': {
      [\`\${iconCls}-search\`]: {
        color: colorTextDisabled
      }
    },
    '&-header': {
      display: 'flex',
      flex: 'none',
      alignItems: 'center',
      height: transferHeaderHeight,
      // border-top is on the transfer dom. We should minus 1px for this
      padding: \`\${transferHeaderVerticalPadding - lineWidth}px \${paddingSM}px \${transferHeaderVerticalPadding}px\`,
      color: token.colorText,
      background: token.colorBgContainer,
      borderBottom: \`\${lineWidth}px \${lineType} \${colorSplit}\`,
      borderRadius: \`\${token.borderRadiusLG}px \${token.borderRadiusLG}px 0 0\`,
      '> *:not(:last-child)': {
        marginInlineEnd: 4 // This is magic and fixed number, DO NOT use token since it may change.
      },

      '> *': {
        flex: 'none'
      },
      '&-title': Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
        flex: 'auto',
        textAlign: 'end'
      }),
      '&-dropdown': Object.assign(Object.assign({}, (0,style/* resetIcon */.Ro)()), {
        fontSize: fontSizeIcon,
        transform: 'translateY(10%)',
        cursor: 'pointer',
        '&[disabled]': {
          cursor: 'not-allowed'
        }
      })
    },
    '&-body': {
      display: 'flex',
      flex: 'auto',
      flexDirection: 'column',
      overflow: 'hidden',
      fontSize: token.fontSize,
      '&-search-wrapper': {
        position: 'relative',
        flex: 'none',
        padding: paddingSM
      }
    },
    '&-content': {
      flex: 'auto',
      margin: 0,
      padding: 0,
      overflow: 'auto',
      listStyle: 'none',
      '&-item': {
        display: 'flex',
        alignItems: 'center',
        minHeight: transferItemHeight,
        padding: \`\${transferItemPaddingVertical}px \${paddingSM}px\`,
        transition: \`all \${motionDurationSlow}\`,
        '> *:not(:last-child)': {
          marginInlineEnd: marginXS
        },
        '> *': {
          flex: 'none'
        },
        '&-text': Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
          flex: 'auto'
        }),
        '&-remove': {
          position: 'relative',
          color: colorBorder,
          cursor: 'pointer',
          transition: \`all \${motionDurationSlow}\`,
          '&:hover': {
            color: token.colorLinkHover
          },
          '&::after': {
            position: 'absolute',
            insert: \`-\${transferItemPaddingVertical}px -50%\`,
            content: '""'
          }
        },
        [\`&:not(\${componentCls}-list-content-item-disabled)\`]: {
          '&:hover': {
            backgroundColor: token.controlItemBgHover,
            cursor: 'pointer'
          },
          [\`&\${componentCls}-list-content-item-checked:hover\`]: {
            backgroundColor: controlItemBgActiveHover
          }
        },
        '&-checked': {
          backgroundColor: controlItemBgActive
        },
        '&-disabled': {
          color: colorTextDisabled,
          cursor: 'not-allowed'
        }
      },
      // Do not change hover style when \`oneWay\` mode
      [\`&-show-remove \${componentCls}-list-content-item:not(\${componentCls}-list-content-item-disabled):hover\`]: {
        background: 'transparent',
        cursor: 'default'
      }
    },
    '&-pagination': {
      padding: \`\${token.paddingXS}px 0\`,
      textAlign: 'end',
      borderTop: \`\${lineWidth}px \${lineType} \${colorSplit}\`
    },
    '&-body-not-found': {
      flex: 'none',
      width: '100%',
      margin: 'auto 0',
      color: colorTextDisabled,
      textAlign: 'center'
    },
    '&-footer': {
      borderTop: \`\${lineWidth}px \${lineType} \${colorSplit}\`
    }
  };
};
const genTransferStyle = token => {
  const {
    antCls,
    iconCls,
    componentCls,
    transferHeaderHeight,
    marginXS,
    marginXXS,
    fontSizeIcon,
    fontSize,
    lineHeight
  } = token;
  return {
    [componentCls]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      position: 'relative',
      display: 'flex',
      alignItems: 'stretch',
      [\`\${componentCls}-disabled\`]: {
        [\`\${componentCls}-list\`]: {
          background: token.colorBgContainerDisabled
        }
      },
      [\`\${componentCls}-list\`]: genTransferListStyle(token),
      [\`\${componentCls}-operation\`]: {
        display: 'flex',
        flex: 'none',
        flexDirection: 'column',
        alignSelf: 'center',
        margin: \`0 \${marginXS}px\`,
        verticalAlign: 'middle',
        [\`\${antCls}-btn\`]: {
          display: 'block',
          '&:first-child': {
            marginBottom: marginXXS
          },
          [iconCls]: {
            fontSize: fontSizeIcon
          }
        }
      },
      [\`\${antCls}-empty-image\`]: {
        maxHeight: transferHeaderHeight / 2 - Math.round(fontSize * lineHeight)
      }
    })
  };
};
const genTransferRTLStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-rtl\`]: {
      direction: 'rtl'
    }
  };
};
// ============================== Export ==============================
/* harmony default export */ var transfer_style = ((0,genComponentStyleHook/* default */.Z)('Transfer', token => {
  const {
    fontSize,
    lineHeight,
    lineWidth,
    controlHeightLG,
    controlHeight
  } = token;
  const fontHeight = Math.round(fontSize * lineHeight);
  const transferHeaderHeight = controlHeightLG;
  const transferItemHeight = controlHeight;
  const transferToken = (0,statistic/* merge */.TS)(token, {
    transferItemHeight,
    transferHeaderHeight,
    transferHeaderVerticalPadding: Math.ceil((transferHeaderHeight - lineWidth - fontHeight) / 2),
    transferItemPaddingVertical: (transferItemHeight - fontHeight) / 2
  });
  return [genTransferStyle(transferToken), genTransferCustomizeStyle(transferToken), genTransferStatusStyle(transferToken), genTransferRTLStyle(transferToken)];
}, {
  listWidth: 180,
  listHeight: 200,
  listWidthLG: 250
}));
;// CONCATENATED MODULE: ./node_modules/antd/es/transfer/index.js















const TransferFC = props => {
  const {
    prefixCls,
    className,
    style,
    children
  } = props;
  const [wrapSSR, hashId] = transfer_style(prefixCls);
  return wrapSSR( /*#__PURE__*/react.createElement("div", {
    className: classnames_default()(className, hashId),
    style: style
  }, children));
};
const Transfer = props => {
  const {
    dataSource = [],
    targetKeys = [],
    selectedKeys = [],
    selectAllLabels = [],
    operations = [],
    style = {},
    listStyle = {},
    locale = {},
    titles,
    className,
    disabled,
    showSearch = false,
    operationStyle,
    showSelectAll,
    oneWay,
    pagination,
    status: customStatus,
    prefixCls: customizePrefixCls,
    filterOption,
    render,
    footer,
    children,
    rowKey,
    onScroll,
    onChange,
    onSearch,
    onSelectChange
  } = props;
  const [sourceSelectedKeys, setSourceSelectedKeys] = (0,react.useState)(() => selectedKeys.filter(key => !targetKeys.includes(key)));
  const [targetSelectedKeys, setTargetSelectedKeys] = (0,react.useState)(() => selectedKeys.filter(key => targetKeys.includes(key)));
  (0,react.useEffect)(() => {
    if (props.selectedKeys) {
      setSourceSelectedKeys(() => selectedKeys.filter(key => !targetKeys.includes(key)));
      setTargetSelectedKeys(() => selectedKeys.filter(key => targetKeys.includes(key)));
    }
  }, [props.selectedKeys, props.targetKeys]);
  if (false) {}
  const setStateKeys = (0,react.useCallback)((direction, keys) => {
    if (direction === 'left') {
      setSourceSelectedKeys(prev => typeof keys === 'function' ? keys(prev || []) : keys);
    } else {
      setTargetSelectedKeys(prev => typeof keys === 'function' ? keys(prev || []) : keys);
    }
  }, [sourceSelectedKeys, targetSelectedKeys]);
  const handleSelectChange = (0,react.useCallback)((direction, holder) => {
    if (direction === 'left') {
      onSelectChange === null || onSelectChange === void 0 ? void 0 : onSelectChange(holder, targetSelectedKeys);
    } else {
      onSelectChange === null || onSelectChange === void 0 ? void 0 : onSelectChange(sourceSelectedKeys, holder);
    }
  }, [sourceSelectedKeys, targetSelectedKeys]);
  const getTitles = transferLocale => {
    var _a;
    return (_a = titles !== null && titles !== void 0 ? titles : transferLocale.titles) !== null && _a !== void 0 ? _a : [];
  };
  const handleLeftScroll = e => {
    onScroll === null || onScroll === void 0 ? void 0 : onScroll('left', e);
  };
  const handleRightScroll = e => {
    onScroll === null || onScroll === void 0 ? void 0 : onScroll('right', e);
  };
  const moveTo = direction => {
    const moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys;
    const dataSourceDisabledKeysMap = groupDisabledKeysMap(dataSource);
    // filter the disabled options
    const newMoveKeys = moveKeys.filter(key => !dataSourceDisabledKeysMap.has(key));
    const newMoveKeysMap = groupKeysMap(newMoveKeys);
    // move items to target box
    const newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(targetKey => !newMoveKeysMap.has(targetKey));
    // empty checked keys
    const oppositeDirection = direction === 'right' ? 'left' : 'right';
    setStateKeys(oppositeDirection, []);
    handleSelectChange(oppositeDirection, []);
    onChange === null || onChange === void 0 ? void 0 : onChange(newTargetKeys, direction, newMoveKeys);
  };
  const moveToLeft = () => {
    moveTo('left');
  };
  const moveToRight = () => {
    moveTo('right');
  };
  const onItemSelectAll = (direction, keys, checkAll) => {
    setStateKeys(direction, prevKeys => {
      let mergedCheckedKeys = [];
      if (checkAll) {
        // Merge current keys with origin key
        mergedCheckedKeys = Array.from(new Set([].concat((0,toConsumableArray/* default */.Z)(prevKeys), (0,toConsumableArray/* default */.Z)(keys))));
      } else {
        const selectedKeysMap = groupKeysMap(keys);
        // Remove current keys from origin keys
        mergedCheckedKeys = prevKeys.filter(key => !selectedKeysMap.has(key));
      }
      handleSelectChange(direction, mergedCheckedKeys);
      return mergedCheckedKeys;
    });
  };
  const onLeftItemSelectAll = (keys, checkAll) => {
    onItemSelectAll('left', keys, checkAll);
  };
  const onRightItemSelectAll = (keys, checkAll) => {
    onItemSelectAll('right', keys, checkAll);
  };
  const leftFilter = e => onSearch === null || onSearch === void 0 ? void 0 : onSearch('left', e.target.value);
  const rightFilter = e => onSearch === null || onSearch === void 0 ? void 0 : onSearch('right', e.target.value);
  const handleLeftClear = () => onSearch === null || onSearch === void 0 ? void 0 : onSearch('left', '');
  const handleRightClear = () => onSearch === null || onSearch === void 0 ? void 0 : onSearch('right', '');
  const onItemSelect = (direction, selectedKey, checked) => {
    const holder = (0,toConsumableArray/* default */.Z)(direction === 'left' ? sourceSelectedKeys : targetSelectedKeys);
    const index = holder.indexOf(selectedKey);
    if (index > -1) {
      holder.splice(index, 1);
    }
    if (checked) {
      holder.push(selectedKey);
    }
    handleSelectChange(direction, holder);
    if (!props.selectedKeys) {
      setStateKeys(direction, holder);
    }
  };
  const onLeftItemSelect = (selectedKey, checked) => {
    onItemSelect('left', selectedKey, checked);
  };
  const onRightItemSelect = (selectedKey, checked) => {
    onItemSelect('right', selectedKey, checked);
  };
  const onRightItemRemove = keys => {
    setStateKeys('right', []);
    onChange === null || onChange === void 0 ? void 0 : onChange(targetKeys.filter(key => !keys.includes(key)), 'left', (0,toConsumableArray/* default */.Z)(keys));
  };
  const handleListStyle = direction => {
    if (typeof listStyle === 'function') {
      return listStyle({
        direction
      });
    }
    return listStyle || {};
  };
  const [leftDataSource, rightDataSource] = (0,react.useMemo)(() => {
    const leftData = [];
    const rightData = new Array(targetKeys.length);
    const targetKeysMap = groupKeysMap(targetKeys);
    dataSource.forEach(record => {
      if (rowKey) {
        record = Object.assign(Object.assign({}, record), {
          key: rowKey(record)
        });
      }
      // rightData should be ordered by targetKeys
      // leftData should be ordered by dataSource
      if (targetKeysMap.has(record.key)) {
        rightData[targetKeysMap.get(record.key)] = record;
      } else {
        leftData.push(record);
      }
    });
    return [leftData, rightData];
  }, [dataSource, targetKeys, rowKey]);
  const configContext = (0,react.useContext)(context/* ConfigContext */.E_);
  const formItemContext = (0,react.useContext)(form_context/* FormItemInputContext */.aM);
  const {
    getPrefixCls,
    renderEmpty,
    direction
  } = configContext;
  const {
    hasFeedback,
    status
  } = formItemContext;
  const getLocale = transferLocale => Object.assign(Object.assign(Object.assign({}, transferLocale), {
    notFoundContent: (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Transfer')) || /*#__PURE__*/react.createElement(defaultRenderEmpty/* default */.Z, {
      componentName: "Transfer"
    })
  }), locale);
  const prefixCls = getPrefixCls('transfer', customizePrefixCls);
  const mergedStatus = (0,statusUtils/* getMergedStatus */.F)(status, customStatus);
  const mergedPagination = !children && pagination;
  const leftActive = targetSelectedKeys.length > 0;
  const rightActive = sourceSelectedKeys.length > 0;
  const cls = classnames_default()(prefixCls, {
    [\`\${prefixCls}-disabled\`]: disabled,
    [\`\${prefixCls}-customize-list\`]: !!children,
    [\`\${prefixCls}-rtl\`]: direction === 'rtl'
  }, (0,statusUtils/* getStatusClassNames */.Z)(prefixCls, mergedStatus, hasFeedback), className);
  return /*#__PURE__*/react.createElement(LocaleReceiver/* default */.Z, {
    componentName: "Transfer",
    defaultLocale: en_US/* default.Transfer */.Z.Transfer
  }, contextLocale => {
    const listLocale = getLocale(contextLocale);
    const [leftTitle, rightTitle] = getTitles(listLocale);
    return /*#__PURE__*/react.createElement(TransferFC, {
      prefixCls: prefixCls,
      className: cls,
      style: style
    }, /*#__PURE__*/react.createElement(transfer_list, Object.assign({
      prefixCls: \`\${prefixCls}-list\`,
      titleText: leftTitle,
      dataSource: leftDataSource,
      filterOption: filterOption,
      style: handleListStyle('left'),
      checkedKeys: sourceSelectedKeys,
      handleFilter: leftFilter,
      handleClear: handleLeftClear,
      onItemSelect: onLeftItemSelect,
      onItemSelectAll: onLeftItemSelectAll,
      render: render,
      showSearch: showSearch,
      renderList: children,
      footer: footer,
      onScroll: handleLeftScroll,
      disabled: disabled,
      direction: direction === 'rtl' ? 'right' : 'left',
      showSelectAll: showSelectAll,
      selectAllLabel: selectAllLabels[0],
      pagination: mergedPagination
    }, listLocale)), /*#__PURE__*/react.createElement(operation, {
      className: \`\${prefixCls}-operation\`,
      rightActive: rightActive,
      rightArrowText: operations[0],
      moveToRight: moveToRight,
      leftActive: leftActive,
      leftArrowText: operations[1],
      moveToLeft: moveToLeft,
      style: operationStyle,
      disabled: disabled,
      direction: direction,
      oneWay: oneWay
    }), /*#__PURE__*/react.createElement(transfer_list, Object.assign({
      prefixCls: \`\${prefixCls}-list\`,
      titleText: rightTitle,
      dataSource: rightDataSource,
      filterOption: filterOption,
      style: handleListStyle('right'),
      checkedKeys: targetSelectedKeys,
      handleFilter: rightFilter,
      handleClear: handleRightClear,
      onItemSelect: onRightItemSelect,
      onItemSelectAll: onRightItemSelectAll,
      onItemRemove: onRightItemRemove,
      render: render,
      showSearch: showSearch,
      renderList: children,
      footer: footer,
      onScroll: handleRightScroll,
      disabled: disabled,
      direction: direction === 'rtl' ? 'left' : 'right',
      showSelectAll: showSelectAll,
      selectAllLabel: selectAllLabels[1],
      showRemove: oneWay,
      pagination: mergedPagination
    }, listLocale)));
  });
};
if (false) {}
Transfer.List = transfer_list;
Transfer.Search = transfer_search;
Transfer.Operation = operation;
/* harmony default export */ var transfer = (Transfer);
// EXTERNAL MODULE: ./node_modules/rc-select/es/index.js + 27 modules
var rc_select_es = __webpack_require__(7752);
// EXTERNAL MODULE: ./node_modules/rc-select/es/hooks/useId.js
var hooks_useId = __webpack_require__(88708);
// EXTERNAL MODULE: ./node_modules/rc-tree/es/index.js + 6 modules
var rc_tree_es = __webpack_require__(31343);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/LegacyContext.js

var LegacySelectContext = /*#__PURE__*/react.createContext(null);
/* harmony default export */ var LegacyContext = (LegacySelectContext);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/TreeSelectContext.js

var TreeSelectContext = /*#__PURE__*/react.createContext(null);
/* harmony default export */ var es_TreeSelectContext = (TreeSelectContext);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/valueUtil.js
function utils_valueUtil_toArray(value) {
  if (Array.isArray(value)) {
    return value;
  }

  return value !== undefined ? [value] : [];
}
function fillFieldNames(fieldNames) {
  var _ref = fieldNames || {},
      label = _ref.label,
      value = _ref.value,
      children = _ref.children;

  var mergedValue = value || 'value';
  return {
    _title: label ? [label] : ['title', 'label'],
    value: mergedValue,
    key: mergedValue,
    children: children || 'children'
  };
}
function isCheckDisabled(node) {
  return !node || node.disabled || node.disableCheckbox || node.checkable === false;
}
/** Loop fetch all the keys exist in the tree */

function getAllKeys(treeData, fieldNames) {
  var keys = [];

  function dig(list) {
    list.forEach(function (item) {
      var children = item[fieldNames.children];

      if (children) {
        keys.push(item[fieldNames.value]);
        dig(children);
      }
    });
  }

  dig(treeData);
  return keys;
}
function isNil(val) {
  return val === null || val === undefined;
}
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/OptionList.js











var HIDDEN_STYLE = {
  width: 0,
  height: 0,
  display: 'flex',
  overflow: 'hidden',
  opacity: 0,
  border: 0,
  padding: 0,
  margin: 0
};

var OptionList = function OptionList(_, ref) {
  var _useBaseProps = (0,rc_select_es/* useBaseProps */.lk)(),
      prefixCls = _useBaseProps.prefixCls,
      multiple = _useBaseProps.multiple,
      searchValue = _useBaseProps.searchValue,
      toggleOpen = _useBaseProps.toggleOpen,
      open = _useBaseProps.open,
      notFoundContent = _useBaseProps.notFoundContent;

  var _React$useContext = react.useContext(es_TreeSelectContext),
      virtual = _React$useContext.virtual,
      listHeight = _React$useContext.listHeight,
      listItemHeight = _React$useContext.listItemHeight,
      treeData = _React$useContext.treeData,
      fieldNames = _React$useContext.fieldNames,
      onSelect = _React$useContext.onSelect,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth,
      treeExpandAction = _React$useContext.treeExpandAction;

  var _React$useContext2 = react.useContext(LegacyContext),
      checkable = _React$useContext2.checkable,
      checkedKeys = _React$useContext2.checkedKeys,
      halfCheckedKeys = _React$useContext2.halfCheckedKeys,
      treeExpandedKeys = _React$useContext2.treeExpandedKeys,
      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,
      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,
      onTreeExpand = _React$useContext2.onTreeExpand,
      treeIcon = _React$useContext2.treeIcon,
      showTreeIcon = _React$useContext2.showTreeIcon,
      switcherIcon = _React$useContext2.switcherIcon,
      treeLine = _React$useContext2.treeLine,
      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,
      loadData = _React$useContext2.loadData,
      treeLoadedKeys = _React$useContext2.treeLoadedKeys,
      treeMotion = _React$useContext2.treeMotion,
      onTreeLoad = _React$useContext2.onTreeLoad,
      keyEntities = _React$useContext2.keyEntities;

  var treeRef = react.useRef();
  var memoTreeData = (0,useMemo/* default */.Z)(function () {
    return treeData;
  }, [open, treeData], function (prev, next) {
    return next[0] && prev[1] !== next[1];
  }); // ========================== Values ==========================

  var mergedCheckedKeys = react.useMemo(function () {
    if (!checkable) {
      return null;
    }

    return {
      checked: checkedKeys,
      halfChecked: halfCheckedKeys
    };
  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================

  react.useEffect(function () {
    // Single mode should scroll to current key
    if (open && !multiple && checkedKeys.length) {
      var _treeRef$current;

      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({
        key: checkedKeys[0]
      });
    }
  }, [open]); // ========================== Search ==========================

  var lowerSearchValue = String(searchValue).toLowerCase();

  var filterTreeNode = function filterTreeNode(treeNode) {
    if (!lowerSearchValue) {
      return false;
    }

    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);
  }; // =========================== Keys ===========================


  var _React$useState = react.useState(treeDefaultExpandedKeys),
      _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),
      expandedKeys = _React$useState2[0],
      setExpandedKeys = _React$useState2[1];

  var _React$useState3 = react.useState(null),
      _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),
      searchExpandedKeys = _React$useState4[0],
      setSearchExpandedKeys = _React$useState4[1];

  var mergedExpandedKeys = react.useMemo(function () {
    if (treeExpandedKeys) {
      return (0,toConsumableArray/* default */.Z)(treeExpandedKeys);
    }

    return searchValue ? searchExpandedKeys : expandedKeys;
  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);
  react.useEffect(function () {
    if (searchValue) {
      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));
    }
  }, [searchValue]);

  var onInternalExpand = function onInternalExpand(keys) {
    setExpandedKeys(keys);
    setSearchExpandedKeys(keys);

    if (onTreeExpand) {
      onTreeExpand(keys);
    }
  }; // ========================== Events ==========================


  var onListMouseDown = function onListMouseDown(event) {
    event.preventDefault();
  };

  var onInternalSelect = function onInternalSelect(__, info) {
    var node = info.node;

    if (checkable && isCheckDisabled(node)) {
      return;
    }

    onSelect(node.key, {
      selected: !checkedKeys.includes(node.key)
    });

    if (!multiple) {
      toggleOpen(false);
    }
  }; // ========================= Keyboard =========================


  var _React$useState5 = react.useState(null),
      _React$useState6 = (0,slicedToArray/* default */.Z)(_React$useState5, 2),
      activeKey = _React$useState6[0],
      setActiveKey = _React$useState6[1];

  var activeEntity = keyEntities[activeKey];
  react.useImperativeHandle(ref, function () {
    var _treeRef$current2;

    return {
      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,
      onKeyDown: function onKeyDown(event) {
        var _treeRef$current3;

        var which = event.which;

        switch (which) {
          // >>> Arrow keys
          case KeyCode/* default.UP */.Z.UP:
          case KeyCode/* default.DOWN */.Z.DOWN:
          case KeyCode/* default.LEFT */.Z.LEFT:
          case KeyCode/* default.RIGHT */.Z.RIGHT:
            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);
            break;
          // >>> Select item

          case KeyCode/* default.ENTER */.Z.ENTER:
            {
              if (activeEntity) {
                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},
                    selectable = _ref.selectable,
                    value = _ref.value;

                if (selectable !== false) {
                  onInternalSelect(null, {
                    node: {
                      key: activeKey
                    },
                    selected: !checkedKeys.includes(value)
                  });
                }
              }

              break;
            }
          // >>> Close

          case KeyCode/* default.ESC */.Z.ESC:
            {
              toggleOpen(false);
            }
        }
      },
      onKeyUp: function onKeyUp() {}
    };
  }); // ========================== Render ==========================

  if (memoTreeData.length === 0) {
    return /*#__PURE__*/react.createElement("div", {
      role: "listbox",
      className: "".concat(prefixCls, "-empty"),
      onMouseDown: onListMouseDown
    }, notFoundContent);
  }

  var treeProps = {
    fieldNames: fieldNames
  };

  if (treeLoadedKeys) {
    treeProps.loadedKeys = treeLoadedKeys;
  }

  if (mergedExpandedKeys) {
    treeProps.expandedKeys = mergedExpandedKeys;
  }

  return /*#__PURE__*/react.createElement("div", {
    onMouseDown: onListMouseDown
  }, activeEntity && open && /*#__PURE__*/react.createElement("span", {
    style: HIDDEN_STYLE,
    "aria-live": "assertive"
  }, activeEntity.node.value), /*#__PURE__*/react.createElement(rc_tree_es/* default */.Z, (0,esm_extends/* default */.Z)({
    ref: treeRef,
    focusable: false,
    prefixCls: "".concat(prefixCls, "-tree"),
    treeData: memoTreeData,
    height: listHeight,
    itemHeight: listItemHeight,
    virtual: virtual !== false && dropdownMatchSelectWidth !== false,
    multiple: multiple,
    icon: treeIcon,
    showIcon: showTreeIcon,
    switcherIcon: switcherIcon,
    showLine: treeLine,
    loadData: searchValue ? null : loadData,
    motion: treeMotion,
    activeKey: activeKey // We handle keys by out instead tree self
    ,
    checkable: checkable,
    checkStrictly: true,
    checkedKeys: mergedCheckedKeys,
    selectedKeys: !checkable ? checkedKeys : [],
    defaultExpandAll: treeDefaultExpandAll
  }, treeProps, {
    // Proxy event out
    onActiveChange: setActiveKey,
    onSelect: onInternalSelect,
    onCheck: onInternalSelect,
    onExpand: onInternalExpand,
    onLoad: onTreeLoad,
    filterTreeNode: filterTreeNode,
    expandAction: treeExpandAction
  })));
};

var RefOptionList = /*#__PURE__*/react.forwardRef(OptionList);
RefOptionList.displayName = 'OptionList';
/* harmony default export */ var es_OptionList = (RefOptionList);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/TreeNode.js
/* istanbul ignore file */

/** This is a placeholder, not real render in dom */
var TreeNode = function TreeNode() {
  return null;
};

/* harmony default export */ var es_TreeNode = (TreeNode);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/strategyUtil.js

var SHOW_ALL = 'SHOW_ALL';
var SHOW_PARENT = 'SHOW_PARENT';
var SHOW_CHILD = 'SHOW_CHILD';
function formatStrategyValues(values, strategy, keyEntities, fieldNames) {
  var valueSet = new Set(values);

  if (strategy === SHOW_CHILD) {
    return values.filter(function (key) {
      var entity = keyEntities[key];

      if (entity && entity.children && entity.children.some(function (_ref) {
        var node = _ref.node;
        return valueSet.has(node[fieldNames.value]);
      }) && entity.children.every(function (_ref2) {
        var node = _ref2.node;
        return isCheckDisabled(node) || valueSet.has(node[fieldNames.value]);
      })) {
        return false;
      }

      return true;
    });
  }

  if (strategy === SHOW_PARENT) {
    return values.filter(function (key) {
      var entity = keyEntities[key];
      var parent = entity ? entity.parent : null;

      if (parent && !isCheckDisabled(parent.node) && valueSet.has(parent.key)) {
        return false;
      }

      return true;
    });
  }

  return values;
}
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/legacyUtil.js


var utils_legacyUtil_excluded = ["children", "value"];




function convertChildrenToData(nodes) {
  return (0,Children_toArray/* default */.Z)(nodes).map(function (node) {
    if (! /*#__PURE__*/react.isValidElement(node) || !node.type) {
      return null;
    }

    var _ref = node,
        key = _ref.key,
        _ref$props = _ref.props,
        children = _ref$props.children,
        value = _ref$props.value,
        restProps = (0,objectWithoutProperties/* default */.Z)(_ref$props, utils_legacyUtil_excluded);

    var data = (0,objectSpread2/* default */.Z)({
      key: key,
      value: value
    }, restProps);

    var childData = convertChildrenToData(children);

    if (childData.length) {
      data.children = childData;
    }

    return data;
  }).filter(function (data) {
    return data;
  });
}
function fillLegacyProps(dataNode) {
  if (!dataNode) {
    return dataNode;
  }

  var cloneNode = (0,objectSpread2/* default */.Z)({}, dataNode);

  if (!('props' in cloneNode)) {
    Object.defineProperty(cloneNode, 'props', {
      get: function get() {
        (0,es_warning/* default */.ZP)(false, 'New \`rc-tree-select\` not support return node instance as argument anymore. Please consider to remove \`props\` access.');
        return cloneNode;
      }
    });
  }

  return cloneNode;
}
function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {
  var triggerNode = null;
  var nodeList = null;

  function generateMap() {
    function dig(list) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return list.map(function (option, index) {
        var pos = "".concat(level, "-").concat(index);
        var value = option[fieldNames.value];
        var included = checkedValues.includes(value);
        var children = dig(option[fieldNames.children] || [], pos, included);
        var node = /*#__PURE__*/react.createElement(es_TreeNode, option, children.map(function (child) {
          return child.node;
        })); // Link with trigger node

        if (triggerValue === value) {
          triggerNode = node;
        }

        if (included) {
          var checkedNode = {
            pos: pos,
            node: node,
            children: children
          };

          if (!parentIncluded) {
            nodeList.push(checkedNode);
          }

          return checkedNode;
        }

        return null;
      }).filter(function (node) {
        return node;
      });
    }

    if (!nodeList) {
      nodeList = [];
      dig(treeData); // Sort to keep the checked node length

      nodeList.sort(function (_ref2, _ref3) {
        var val1 = _ref2.node.props.value;
        var val2 = _ref3.node.props.value;
        var index1 = checkedValues.indexOf(val1);
        var index2 = checkedValues.indexOf(val2);
        return index1 - index2;
      });
    }
  }

  Object.defineProperty(extra, 'triggerNode', {
    get: function get() {
      (0,es_warning/* default */.ZP)(false, '\`triggerNode\` is deprecated. Please consider decoupling data with node.');
      generateMap();
      return triggerNode;
    }
  });
  Object.defineProperty(extra, 'allCheckedNodes', {
    get: function get() {
      (0,es_warning/* default */.ZP)(false, '\`allCheckedNodes\` is deprecated. Please consider decoupling data with node.');
      generateMap();

      if (showPosition) {
        return nodeList;
      }

      return nodeList.map(function (_ref4) {
        var node = _ref4.node;
        return node;
      });
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useTreeData.js




function parseSimpleTreeData(treeData, _ref) {
  var id = _ref.id,
      pId = _ref.pId,
      rootPId = _ref.rootPId;
  var keyNodes = {};
  var rootNodeList = []; // Fill in the map

  var nodeList = treeData.map(function (node) {
    var clone = (0,objectSpread2/* default */.Z)({}, node);

    var key = clone[id];
    keyNodes[key] = clone;
    clone.key = clone.key || key;
    return clone;
  }); // Connect tree

  nodeList.forEach(function (node) {
    var parentKey = node[pId];
    var parent = keyNodes[parentKey]; // Fill parent

    if (parent) {
      parent.children = parent.children || [];
      parent.children.push(node);
    } // Fill root tree node


    if (parentKey === rootPId || !parent && rootPId === null) {
      rootNodeList.push(node);
    }
  });
  return rootNodeList;
}
/**
 * Convert \`treeData\` or \`children\` into formatted \`treeData\`.
 * Will not re-calculate if \`treeData\` or \`children\` not change.
 */


function useTreeData(treeData, children, simpleMode) {
  return react.useMemo(function () {
    if (treeData) {
      return simpleMode ? parseSimpleTreeData(treeData, (0,objectSpread2/* default */.Z)({
        id: 'id',
        pId: 'pId',
        rootPId: null
      }, simpleMode !== true ? simpleMode : {})) : treeData;
    }

    return convertChildrenToData(children);
  }, [children, simpleMode, treeData]);
}
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useCache.js



/**
 * This function will try to call requestIdleCallback if available to save performance.
 * No need \`getLabel\` here since already fetch on \`rawLabeledValue\`.
 */
/* harmony default export */ var useCache = (function (values) {
  var cacheRef = react.useRef({
    valueLabels: new Map()
  });
  return react.useMemo(function () {
    var valueLabels = cacheRef.current.valueLabels;
    var valueLabelsCache = new Map();
    var filledValues = values.map(function (item) {
      var _item$label;

      var value = item.value;
      var mergedLabel = (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : valueLabels.get(value); // Save in cache

      valueLabelsCache.set(value, mergedLabel);
      return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, item), {}, {
        label: mergedLabel
      });
    });
    cacheRef.current.valueLabels = valueLabelsCache;
    return [filledValues];
  }, [values]);
});
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useRefFunc.js

/**
 * Same as \`React.useCallback\` but always return a memoized function
 * but redirect to real function.
 */

function useRefFunc(callback) {
  var funcRef = react.useRef();
  funcRef.current = callback;
  var cacheFn = react.useCallback(function () {
    return funcRef.current.apply(funcRef, arguments);
  }, []);
  return cacheFn;
}
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useDataEntities.js





/* harmony default export */ var useDataEntities = (function (treeData, fieldNames) {
  return react.useMemo(function () {
    var collection = (0,treeUtil/* convertDataToEntities */.I8)(treeData, {
      fieldNames: fieldNames,
      initWrapper: function initWrapper(wrapper) {
        return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, wrapper), {}, {
          valueEntities: new Map()
        });
      },
      processEntity: function processEntity(entity, wrapper) {
        var val = entity.node[fieldNames.value]; // Check if exist same value

        if (false) { var key; }

        wrapper.valueEntities.set(val, entity);
      }
    });
    return collection;
  }, [treeData, fieldNames]);
});
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useCheckedKeys.js



/* harmony default export */ var useCheckedKeys = (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {
  return react.useMemo(function () {
    var checkedKeys = rawLabeledValues.map(function (_ref) {
      var value = _ref.value;
      return value;
    });
    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {
      var value = _ref2.value;
      return value;
    });
    var missingValues = checkedKeys.filter(function (key) {
      return !keyEntities[key];
    });

    if (treeConduction) {
      var _conductCheck = (0,conductUtil/* conductCheck */.S)(checkedKeys, true, keyEntities);

      checkedKeys = _conductCheck.checkedKeys;
      halfCheckedKeys = _conductCheck.halfCheckedKeys;
    }

    return [// Checked keys should fill with missing keys which should de-duplicated
    Array.from(new Set([].concat((0,toConsumableArray/* default */.Z)(missingValues), (0,toConsumableArray/* default */.Z)(checkedKeys)))), // Half checked keys
    halfCheckedKeys];
  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);
});
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useFilterTreeData.js




/* harmony default export */ var useFilterTreeData = (function (treeData, searchValue, _ref) {
  var treeNodeFilterProp = _ref.treeNodeFilterProp,
      filterTreeNode = _ref.filterTreeNode,
      fieldNames = _ref.fieldNames;
  var fieldChildren = fieldNames.children;
  return react.useMemo(function () {
    if (!searchValue || filterTreeNode === false) {
      return treeData;
    }

    var filterOptionFunc;

    if (typeof filterTreeNode === 'function') {
      filterOptionFunc = filterTreeNode;
    } else {
      var upperStr = searchValue.toUpperCase();

      filterOptionFunc = function filterOptionFunc(_, dataNode) {
        var value = dataNode[treeNodeFilterProp];
        return String(value).toUpperCase().includes(upperStr);
      };
    }

    function dig(list) {
      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return list.map(function (dataNode) {
        var children = dataNode[fieldChildren];
        var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));
        var childList = dig(children || [], match);

        if (match || childList.length) {
          return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, dataNode), {}, (0,defineProperty/* default */.Z)({
            isLeaf: undefined
          }, fieldChildren, childList));
        }

        return null;
      }).filter(function (node) {
        return node;
      });
    }

    return dig(treeData);
  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);
});
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/warningPropsUtil.js




function warningProps(props) {
  var searchPlaceholder = props.searchPlaceholder,
      treeCheckStrictly = props.treeCheckStrictly,
      treeCheckable = props.treeCheckable,
      labelInValue = props.labelInValue,
      value = props.value,
      multiple = props.multiple;
  warning(!searchPlaceholder, '\`searchPlaceholder\` has been removed.');

  if (treeCheckStrictly && labelInValue === false) {
    warning(false, '\`treeCheckStrictly\` will force set \`labelInValue\` to \`true\`.');
  }

  if (labelInValue || treeCheckStrictly) {
    warning(toArray(value).every(function (val) {
      return val && _typeof(val) === 'object' && 'value' in val;
    }), 'Invalid prop \`value\` supplied to \`TreeSelect\`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');
  }

  if (treeCheckStrictly || multiple || treeCheckable) {
    warning(!value || Array.isArray(value), '\`value\` should be an array when \`TreeSelect\` is checkable or multiple.');
  } else {
    warning(!Array.isArray(value), '\`value\` should not be array when \`TreeSelect\` is single mode.');
  }
}

/* harmony default export */ var warningPropsUtil = ((/* unused pure expression or super */ null && (warningProps)));
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/TreeSelect.js






var TreeSelect_excluded = ["id", "prefixCls", "value", "defaultValue", "onChange", "onSelect", "onDeselect", "searchValue", "inputValue", "onSearch", "autoClearSearchValue", "filterTreeNode", "treeNodeFilterProp", "showCheckedStrategy", "treeNodeLabelProp", "multiple", "treeCheckable", "treeCheckStrictly", "labelInValue", "fieldNames", "treeDataSimpleMode", "treeData", "children", "loadData", "treeLoadedKeys", "onTreeLoad", "treeDefaultExpandAll", "treeExpandedKeys", "treeDefaultExpandedKeys", "onTreeExpand", "treeExpandAction", "virtual", "listHeight", "listItemHeight", "onDropdownVisibleChange", "dropdownMatchSelectWidth", "treeLine", "treeIcon", "showTreeIcon", "switcherIcon", "treeMotion"];





















function isRawValue(value) {
  return !value || (0,esm_typeof/* default */.Z)(value) !== 'object';
}

var TreeSelect = /*#__PURE__*/react.forwardRef(function (props, ref) {
  var id = props.id,
      _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,
      value = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      onSelect = props.onSelect,
      onDeselect = props.onDeselect,
      searchValue = props.searchValue,
      inputValue = props.inputValue,
      onSearch = props.onSearch,
      _props$autoClearSearc = props.autoClearSearchValue,
      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,
      filterTreeNode = props.filterTreeNode,
      _props$treeNodeFilter = props.treeNodeFilterProp,
      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,
      _props$showCheckedStr = props.showCheckedStrategy,
      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,
      treeNodeLabelProp = props.treeNodeLabelProp,
      multiple = props.multiple,
      treeCheckable = props.treeCheckable,
      treeCheckStrictly = props.treeCheckStrictly,
      labelInValue = props.labelInValue,
      fieldNames = props.fieldNames,
      treeDataSimpleMode = props.treeDataSimpleMode,
      treeData = props.treeData,
      children = props.children,
      loadData = props.loadData,
      treeLoadedKeys = props.treeLoadedKeys,
      onTreeLoad = props.onTreeLoad,
      treeDefaultExpandAll = props.treeDefaultExpandAll,
      treeExpandedKeys = props.treeExpandedKeys,
      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,
      onTreeExpand = props.onTreeExpand,
      treeExpandAction = props.treeExpandAction,
      virtual = props.virtual,
      _props$listHeight = props.listHeight,
      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,
      _props$listItemHeight = props.listItemHeight,
      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,
      onDropdownVisibleChange = props.onDropdownVisibleChange,
      _props$dropdownMatchS = props.dropdownMatchSelectWidth,
      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,
      treeLine = props.treeLine,
      treeIcon = props.treeIcon,
      showTreeIcon = props.showTreeIcon,
      switcherIcon = props.switcherIcon,
      treeMotion = props.treeMotion,
      restProps = (0,objectWithoutProperties/* default */.Z)(props, TreeSelect_excluded);

  var mergedId = (0,hooks_useId/* default */.ZP)(id);
  var treeConduction = treeCheckable && !treeCheckStrictly;
  var mergedCheckable = treeCheckable || treeCheckStrictly;
  var mergedLabelInValue = treeCheckStrictly || labelInValue;
  var mergedMultiple = mergedCheckable || multiple;

  var _useMergedState = (0,useMergedState/* default */.Z)(defaultValue, {
    value: value
  }),
      _useMergedState2 = (0,slicedToArray/* default */.Z)(_useMergedState, 2),
      internalValue = _useMergedState2[0],
      setInternalValue = _useMergedState2[1]; // ========================== Warning ===========================


  if (false) {} // ========================= FieldNames =========================


  var mergedFieldNames = react.useMemo(function () {
    return fillFieldNames(fieldNames);
  },
  /* eslint-disable react-hooks/exhaustive-deps */
  [JSON.stringify(fieldNames)]
  /* eslint-enable react-hooks/exhaustive-deps */
  ); // =========================== Search ===========================

  var _useMergedState3 = (0,useMergedState/* default */.Z)('', {
    value: searchValue !== undefined ? searchValue : inputValue,
    postState: function postState(search) {
      return search || '';
    }
  }),
      _useMergedState4 = (0,slicedToArray/* default */.Z)(_useMergedState3, 2),
      mergedSearchValue = _useMergedState4[0],
      setSearchValue = _useMergedState4[1];

  var onInternalSearch = function onInternalSearch(searchText) {
    setSearchValue(searchText);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);
  }; // ============================ Data ============================
  // \`useTreeData\` only do convert of \`children\` or \`simpleMode\`.
  // Else will return origin \`treeData\` for perf consideration.
  // Do not do anything to loop the data.


  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);

  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),
      keyEntities = _useDataEntities.keyEntities,
      valueEntities = _useDataEntities.valueEntities;
  /** Get \`missingRawValues\` which not exist in the tree yet */


  var splitRawValues = react.useCallback(function (newRawValues) {
    var missingRawValues = [];
    var existRawValues = []; // Keep missing value in the cache

    newRawValues.forEach(function (val) {
      if (valueEntities.has(val)) {
        existRawValues.push(val);
      } else {
        missingRawValues.push(val);
      }
    });
    return {
      missingRawValues: missingRawValues,
      existRawValues: existRawValues
    };
  }, [valueEntities]); // Filtered Tree

  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {
    fieldNames: mergedFieldNames,
    treeNodeFilterProp: treeNodeFilterProp,
    filterTreeNode: filterTreeNode
  }); // =========================== Label ============================

  var getLabel = react.useCallback(function (item) {
    if (item) {
      if (treeNodeLabelProp) {
        return item[treeNodeLabelProp];
      } // Loop from fieldNames


      var titleList = mergedFieldNames._title;

      for (var i = 0; i < titleList.length; i += 1) {
        var title = item[titleList[i]];

        if (title !== undefined) {
          return title;
        }
      }
    }
  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================

  var toLabeledValues = react.useCallback(function (draftValues) {
    var values = utils_valueUtil_toArray(draftValues);
    return values.map(function (val) {
      if (isRawValue(val)) {
        return {
          value: val
        };
      }

      return val;
    });
  }, []);
  var convert2LabelValues = react.useCallback(function (draftValues) {
    var values = toLabeledValues(draftValues);
    return values.map(function (item) {
      var rawLabel = item.label;
      var rawValue = item.value,
          rawHalfChecked = item.halfChecked;
      var rawDisabled;
      var entity = valueEntities.get(rawValue); // Fill missing label & status

      if (entity) {
        var _rawLabel;

        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);
        rawDisabled = entity.node.disabled;
      } else if (rawLabel === undefined) {
        // We try to find in current \`labelInValue\` value
        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {
          return labeledItem.value === rawValue;
        });
        rawLabel = labelInValueItem.label;
      }

      return {
        label: rawLabel,
        value: rawValue,
        halfChecked: rawHalfChecked,
        disabled: rawDisabled
      };
    });
  }, [valueEntities, getLabel, toLabeledValues, internalValue]); // =========================== Values ===========================

  var rawMixedLabeledValues = react.useMemo(function () {
    return toLabeledValues(internalValue);
  }, [toLabeledValues, internalValue]); // Split value into full check and half check

  var _React$useMemo = react.useMemo(function () {
    var fullCheckValues = [];
    var halfCheckValues = [];
    rawMixedLabeledValues.forEach(function (item) {
      if (item.halfChecked) {
        halfCheckValues.push(item);
      } else {
        fullCheckValues.push(item);
      }
    });
    return [fullCheckValues, halfCheckValues];
  }, [rawMixedLabeledValues]),
      _React$useMemo2 = (0,slicedToArray/* default */.Z)(_React$useMemo, 2),
      rawLabeledValues = _React$useMemo2[0],
      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);


  var rawValues = react.useMemo(function () {
    return rawLabeledValues.map(function (item) {
      return item.value;
    });
  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.

  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),
      _useCheckedKeys2 = (0,slicedToArray/* default */.Z)(_useCheckedKeys, 2),
      rawCheckedValues = _useCheckedKeys2[0],
      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values


  var displayValues = react.useMemo(function () {
    // Collect keys which need to show
    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label

    var values = displayKeys.map(function (key) {
      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;

      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;
    }); // Back fill with origin label

    var labeledValues = values.map(function (val) {
      var targetItem = rawLabeledValues.find(function (item) {
        return item.value === val;
      });
      return {
        value: val,
        label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label
      };
    });
    var rawDisplayValues = convert2LabelValues(labeledValues);
    var firstVal = rawDisplayValues[0];

    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {
      return [];
    }

    return rawDisplayValues.map(function (item) {
      var _item$label;

      return (0,objectSpread2/* default */.Z)((0,objectSpread2/* default */.Z)({}, item), {}, {
        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value
      });
    });
  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, showCheckedStrategy, keyEntities]);

  var _useCache = useCache(displayValues),
      _useCache2 = (0,slicedToArray/* default */.Z)(_useCache, 1),
      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================


  var triggerChange = useRefFunc(function (newRawValues, extra, source) {
    var labeledValues = convert2LabelValues(newRawValues);
    setInternalValue(labeledValues); // Clean up if needed

    if (autoClearSearchValue) {
      setSearchValue('');
    } // Generate rest parameters is costly, so only do it when necessary


    if (onChange) {
      var eventValues = newRawValues;

      if (treeConduction) {
        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);
        eventValues = formattedKeyList.map(function (key) {
          var entity = valueEntities.get(key);
          return entity ? entity.node[mergedFieldNames.value] : key;
        });
      }

      var _ref = extra || {
        triggerValue: undefined,
        selected: undefined
      },
          triggerValue = _ref.triggerValue,
          selected = _ref.selected;

      var returnRawValues = eventValues; // We need fill half check back

      if (treeCheckStrictly) {
        var halfValues = rawHalfLabeledValues.filter(function (item) {
          return !eventValues.includes(item.value);
        });
        returnRawValues = [].concat((0,toConsumableArray/* default */.Z)(returnRawValues), (0,toConsumableArray/* default */.Z)(halfValues));
      }

      var returnLabeledValues = convert2LabelValues(returnRawValues);
      var additionalInfo = {
        // [Legacy] Always return as array contains label & value
        preValue: rawLabeledValues,
        triggerValue: triggerValue
      }; // [Legacy] Fill legacy data if user query.
      // This is expansive that we only fill when user query
      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx

      var showPosition = true;

      if (treeCheckStrictly || source === 'selection' && !selected) {
        showPosition = false;
      }

      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);

      if (mergedCheckable) {
        additionalInfo.checked = selected;
      } else {
        additionalInfo.selected = selected;
      }

      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {
        return item.value;
      });
      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {
        return item.label;
      }), additionalInfo);
    }
  }); // ========================== Options ===========================

  /** Trigger by option list */

  var onOptionSelect = react.useCallback(function (selectedKey, _ref2) {
    var _node$mergedFieldName;

    var selected = _ref2.selected,
        source = _ref2.source;
    var entity = keyEntities[selectedKey];
    var node = entity === null || entity === void 0 ? void 0 : entity.node;
    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe

    if (!mergedMultiple) {
      // Single mode always set value
      triggerChange([selectedValue], {
        selected: true,
        triggerValue: selectedValue
      }, 'option');
    } else {
      var newRawValues = selected ? [].concat((0,toConsumableArray/* default */.Z)(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {
        return v !== selectedValue;
      }); // Add keys if tree conduction

      if (treeConduction) {
        // Should keep missing values
        var _splitRawValues = splitRawValues(newRawValues),
            missingRawValues = _splitRawValues.missingRawValues,
            existRawValues = _splitRawValues.existRawValues;

        var keyList = existRawValues.map(function (val) {
          return valueEntities.get(val).key;
        }); // Conduction by selected or not

        var checkedKeys;

        if (selected) {
          var _conductCheck = (0,conductUtil/* conductCheck */.S)(keyList, true, keyEntities);

          checkedKeys = _conductCheck.checkedKeys;
        } else {
          var _conductCheck2 = (0,conductUtil/* conductCheck */.S)(keyList, {
            checked: false,
            halfCheckedKeys: rawHalfCheckedValues
          }, keyEntities);

          checkedKeys = _conductCheck2.checkedKeys;
        } // Fill back of keys


        newRawValues = [].concat((0,toConsumableArray/* default */.Z)(missingRawValues), (0,toConsumableArray/* default */.Z)(checkedKeys.map(function (key) {
          return keyEntities[key].node[mergedFieldNames.value];
        })));
      }

      triggerChange(newRawValues, {
        selected: selected,
        triggerValue: selectedValue
      }, source || 'option');
    } // Trigger select event


    if (selected || !mergedMultiple) {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));
    } else {
      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));
    }
  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================

  var onInternalDropdownVisibleChange = react.useCallback(function (open) {
    if (onDropdownVisibleChange) {
      var legacyParam = {};
      Object.defineProperty(legacyParam, 'documentClickClose', {
        get: function get() {
          (0,es_warning/* default */.ZP)(false, 'Second param of \`onDropdownVisibleChange\` has been removed.');
          return false;
        }
      });
      onDropdownVisibleChange(open, legacyParam);
    }
  }, [onDropdownVisibleChange]); // ====================== Display Change ========================

  var onDisplayValuesChange = useRefFunc(function (newValues, info) {
    var newRawValues = newValues.map(function (item) {
      return item.value;
    });

    if (info.type === 'clear') {
      triggerChange(newRawValues, {}, 'selection');
      return;
    } // TreeSelect only have multiple mode which means display change only has remove


    if (info.values.length) {
      onOptionSelect(info.values[0].value, {
        selected: false,
        source: 'selection'
      });
    }
  }); // ========================== Context ===========================

  var treeSelectContext = react.useMemo(function () {
    return {
      virtual: virtual,
      dropdownMatchSelectWidth: dropdownMatchSelectWidth,
      listHeight: listHeight,
      listItemHeight: listItemHeight,
      treeData: filteredTreeData,
      fieldNames: mergedFieldNames,
      onSelect: onOptionSelect,
      treeExpandAction: treeExpandAction
    };
  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction]); // ======================= Legacy Context =======================

  var legacyContext = react.useMemo(function () {
    return {
      checkable: mergedCheckable,
      loadData: loadData,
      treeLoadedKeys: treeLoadedKeys,
      onTreeLoad: onTreeLoad,
      checkedKeys: rawCheckedValues,
      halfCheckedKeys: rawHalfCheckedValues,
      treeDefaultExpandAll: treeDefaultExpandAll,
      treeExpandedKeys: treeExpandedKeys,
      treeDefaultExpandedKeys: treeDefaultExpandedKeys,
      onTreeExpand: onTreeExpand,
      treeIcon: treeIcon,
      treeMotion: treeMotion,
      showTreeIcon: showTreeIcon,
      switcherIcon: switcherIcon,
      treeLine: treeLine,
      treeNodeFilterProp: treeNodeFilterProp,
      keyEntities: keyEntities
    };
  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================

  return /*#__PURE__*/react.createElement(es_TreeSelectContext.Provider, {
    value: treeSelectContext
  }, /*#__PURE__*/react.createElement(LegacyContext.Provider, {
    value: legacyContext
  }, /*#__PURE__*/react.createElement(rc_select_es/* BaseSelect */.Ac, (0,esm_extends/* default */.Z)({
    ref: ref
  }, restProps, {
    // >>> MISC
    id: mergedId,
    prefixCls: prefixCls,
    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value
    ,
    displayValues: cachedDisplayValues,
    onDisplayValuesChange: onDisplayValuesChange // >>> Search
    ,
    searchValue: mergedSearchValue,
    onSearch: onInternalSearch // >>> Options
    ,
    OptionList: es_OptionList,
    emptyOptions: !mergedTreeData.length,
    onDropdownVisibleChange: onInternalDropdownVisibleChange,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth
  }))));
}); // Assign name for Debug

if (false) {}

var GenericTreeSelect = TreeSelect;
GenericTreeSelect.TreeNode = es_TreeNode;
GenericTreeSelect.SHOW_ALL = SHOW_ALL;
GenericTreeSelect.SHOW_PARENT = SHOW_PARENT;
GenericTreeSelect.SHOW_CHILD = SHOW_CHILD;
/* harmony default export */ var es_TreeSelect = (GenericTreeSelect);
;// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/index.js




/* harmony default export */ var rc_tree_select_es = (es_TreeSelect);
// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/DisabledContext.js
var DisabledContext = __webpack_require__(98866);
// EXTERNAL MODULE: ./node_modules/antd/es/select/style/index.js + 3 modules
var select_style = __webpack_require__(87244);
// EXTERNAL MODULE: ./node_modules/antd/es/select/utils/iconUtil.js
var iconUtil = __webpack_require__(46163);
// EXTERNAL MODULE: ./node_modules/antd/es/tree/utils/iconUtil.js
var utils_iconUtil = __webpack_require__(61639);
// EXTERNAL MODULE: ./node_modules/antd/es/_util/motion.js
var _util_motion = __webpack_require__(33603);
// EXTERNAL MODULE: ./node_modules/antd/es/space/Compact.js
var Compact = __webpack_require__(4173);
// EXTERNAL MODULE: ./node_modules/antd/es/checkbox/style/index.js
var checkbox_style = __webpack_require__(63185);
// EXTERNAL MODULE: ./node_modules/antd/es/tree/style/index.js
var tree_style = __webpack_require__(32157);
;// CONCATENATED MODULE: ./node_modules/antd/es/tree-select/style/index.js



// =============================== Base ===============================
const tree_select_style_genBaseStyle = token => {
  const {
    componentCls,
    treePrefixCls,
    colorBgElevated
  } = token;
  const treeCls = \`.\${treePrefixCls}\`;
  return [
  // ======================================================
  // ==                     Dropdown                     ==
  // ======================================================
  {
    [\`\${componentCls}-dropdown\`]: [{
      padding: \`\${token.paddingXS}px \${token.paddingXS / 2}px\`
    },
    // ====================== Tree ======================
    (0,tree_style/* genTreeStyle */.Yk)(treePrefixCls, (0,statistic/* merge */.TS)(token, {
      colorBgContainer: colorBgElevated
    })), {
      [treeCls]: {
        borderRadius: 0,
        '&-list-holder-inner': {
          alignItems: 'stretch',
          [\`\${treeCls}-treenode\`]: {
            [\`\${treeCls}-node-content-wrapper\`]: {
              flex: 'auto'
            }
          }
        }
      }
    },
    // ==================== Checkbox ====================
    (0,checkbox_style/* getStyle */.C2)(\`\${treePrefixCls}-checkbox\`, token),
    // ====================== RTL =======================
    {
      '&-rtl': {
        direction: 'rtl',
        [\`\${treeCls}-switcher\${treeCls}-switcher_close\`]: {
          [\`\${treeCls}-switcher-icon svg\`]: {
            transform: 'rotate(90deg)'
          }
        }
      }
    }]
  }];
};
// ============================== Export ==============================
function useTreeSelectStyle(prefixCls, treePrefixCls) {
  return (0,genComponentStyleHook/* default */.Z)('TreeSelect', token => {
    const treeSelectToken = (0,statistic/* merge */.TS)(token, {
      treePrefixCls
    });
    return [tree_select_style_genBaseStyle(treeSelectToken)];
  })(prefixCls);
}
;// CONCATENATED MODULE: ./node_modules/antd/es/tree-select/index.js
var tree_select_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};


















const InternalTreeSelect = (_a, ref) => {
  var {
      prefixCls: customizePrefixCls,
      size: customizeSize,
      disabled: customDisabled,
      bordered = true,
      className,
      treeCheckable,
      multiple,
      listHeight = 256,
      listItemHeight = 26,
      placement,
      notFoundContent,
      switcherIcon,
      treeLine,
      getPopupContainer,
      popupClassName,
      dropdownClassName,
      treeIcon = false,
      transitionName,
      choiceTransitionName = '',
      status: customStatus,
      showArrow,
      treeExpandAction
    } = _a,
    props = tree_select_rest(_a, ["prefixCls", "size", "disabled", "bordered", "className", "treeCheckable", "multiple", "listHeight", "listItemHeight", "placement", "notFoundContent", "switcherIcon", "treeLine", "getPopupContainer", "popupClassName", "dropdownClassName", "treeIcon", "transitionName", "choiceTransitionName", "status", "showArrow", "treeExpandAction"]);
  const {
    getPopupContainer: getContextPopupContainer,
    getPrefixCls,
    renderEmpty,
    direction,
    virtual,
    dropdownMatchSelectWidth
  } = react.useContext(context/* ConfigContext */.E_);
  const size = react.useContext(SizeContext/* default */.Z);
  if (false) {}
  const rootPrefixCls = getPrefixCls();
  const prefixCls = getPrefixCls('select', customizePrefixCls);
  const treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);
  const treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);
  const {
    compactSize,
    compactItemClassnames
  } = (0,Compact/* useCompactItemContext */.ri)(prefixCls, direction);
  const [wrapSelectSSR, hashId] = (0,select_style/* default */.Z)(prefixCls);
  const [wrapTreeSelectSSR] = useTreeSelectStyle(treeSelectPrefixCls, treePrefixCls);
  const mergedDropdownClassName = classnames_default()(popupClassName || dropdownClassName, \`\${treeSelectPrefixCls}-dropdown\`, {
    [\`\${treeSelectPrefixCls}-dropdown-rtl\`]: direction === 'rtl'
  }, hashId);
  const isMultiple = !!(treeCheckable || multiple);
  const mergedShowArrow = showArrow !== undefined ? showArrow : props.loading || !isMultiple;
  // ===================== Form =====================
  const {
    status: contextStatus,
    hasFeedback,
    isFormItemInput,
    feedbackIcon
  } = react.useContext(form_context/* FormItemInputContext */.aM);
  const mergedStatus = (0,statusUtils/* getMergedStatus */.F)(contextStatus, customStatus);
  // ===================== Icons =====================
  const {
    suffixIcon,
    removeIcon,
    clearIcon
  } = (0,iconUtil/* default */.Z)(Object.assign(Object.assign({}, props), {
    multiple: isMultiple,
    showArrow: mergedShowArrow,
    hasFeedback,
    feedbackIcon,
    prefixCls
  }));
  // ===================== Empty =====================
  let mergedNotFound;
  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else {
    mergedNotFound = (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Select')) || /*#__PURE__*/react.createElement(defaultRenderEmpty/* default */.Z, {
      componentName: "Select"
    });
  }
  // ==================== Render =====================
  const selectProps = (0,omit/* default */.Z)(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);
  // ===================== Placement =====================
  const getPlacement = () => {
    if (placement !== undefined) {
      return placement;
    }
    return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
  };
  const mergedSize = compactSize || customizeSize || size;
  // ===================== Disabled =====================
  const disabled = react.useContext(DisabledContext/* default */.Z);
  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
  const mergedClassName = classnames_default()(!customizePrefixCls && treeSelectPrefixCls, {
    [\`\${prefixCls}-lg\`]: mergedSize === 'large',
    [\`\${prefixCls}-sm\`]: mergedSize === 'small',
    [\`\${prefixCls}-rtl\`]: direction === 'rtl',
    [\`\${prefixCls}-borderless\`]: !bordered,
    [\`\${prefixCls}-in-form-item\`]: isFormItemInput
  }, (0,statusUtils/* getStatusClassNames */.Z)(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className, hashId);
  const returnNode = /*#__PURE__*/react.createElement(rc_tree_select_es, Object.assign({
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth,
    disabled: mergedDisabled
  }, selectProps, {
    ref: ref,
    prefixCls: prefixCls,
    className: mergedClassName,
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    treeCheckable: treeCheckable ? /*#__PURE__*/react.createElement("span", {
      className: \`\${prefixCls}-tree-checkbox-inner\`
    }) : treeCheckable,
    treeLine: !!treeLine,
    inputIcon: suffixIcon,
    multiple: multiple,
    placement: getPlacement(),
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    switcherIcon: nodeProps => (0,utils_iconUtil/* default */.Z)(treePrefixCls, switcherIcon, nodeProps, treeLine),
    showTreeIcon: treeIcon,
    notFoundContent: mergedNotFound,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    treeMotion: null,
    dropdownClassName: mergedDropdownClassName,
    choiceTransitionName: (0,_util_motion/* getTransitionName */.mL)(rootPrefixCls, '', choiceTransitionName),
    transitionName: (0,_util_motion/* getTransitionName */.mL)(rootPrefixCls, (0,_util_motion/* getTransitionDirection */.q0)(placement), transitionName),
    showArrow: hasFeedback || showArrow,
    treeExpandAction: treeExpandAction
  }));
  return wrapSelectSSR(wrapTreeSelectSSR(returnNode));
};
const TreeSelectRef = /*#__PURE__*/react.forwardRef(InternalTreeSelect);
const tree_select_TreeSelect = TreeSelectRef;
// We don't care debug panel
/* istanbul ignore next */
const tree_select_PurePanel = (0,_util_PurePanel/* default */.Z)(tree_select_TreeSelect);
tree_select_TreeSelect.TreeNode = es_TreeNode;
tree_select_TreeSelect.SHOW_ALL = SHOW_ALL;
tree_select_TreeSelect.SHOW_PARENT = SHOW_PARENT;
tree_select_TreeSelect.SHOW_CHILD = SHOW_CHILD;
tree_select_TreeSelect._InternalPanelDoNotUseOrYouWillBeFired = tree_select_PurePanel;

/* harmony default export */ var tree_select = (tree_select_TreeSelect);
// EXTERNAL MODULE: ./node_modules/antd/es/typography/index.js + 13 modules
var typography = __webpack_require__(48997);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js
var regeneratorRuntime = __webpack_require__(74165);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(15861);
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/request.js
function getError(option, xhr) {
  var msg = "cannot ".concat(option.method, " ").concat(option.action, " ").concat(xhr.status, "'");
  var err = new Error(msg);
  err.status = xhr.status;
  err.method = option.method;
  err.url = option.action;
  return err;
}

function getBody(xhr) {
  var text = xhr.responseText || xhr.response;

  if (!text) {
    return text;
  }

  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}

function upload(option) {
  // eslint-disable-next-line no-undef
  var xhr = new XMLHttpRequest();

  if (option.onProgress && xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }

      option.onProgress(e);
    };
  } // eslint-disable-next-line no-undef


  var formData = new FormData();

  if (option.data) {
    Object.keys(option.data).forEach(function (key) {
      var value = option.data[key]; // support key-value array data

      if (Array.isArray(value)) {
        value.forEach(function (item) {
          // { list: [ 11, 22 ] }
          // formData.append('list[]', 11);
          formData.append("".concat(key, "[]"), item);
        });
        return;
      }

      formData.append(key, value);
    });
  } // eslint-disable-next-line no-undef


  if (option.file instanceof Blob) {
    formData.append(option.filename, option.file, option.file.name);
  } else {
    formData.append(option.filename, option.file);
  }

  xhr.onerror = function error(e) {
    option.onError(e);
  };

  xhr.onload = function onload() {
    // allow success when 2xx status
    // see https://github.com/react-component/upload/issues/34
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(option, xhr), getBody(xhr));
    }

    return option.onSuccess(getBody(xhr), xhr);
  };

  xhr.open(option.method, option.action, true); // Has to be after \`.open()\`. See https://github.com/enyo/dropzone/issues/179

  if (option.withCredentials && 'withCredentials' in xhr) {
    xhr.withCredentials = true;
  }

  var headers = option.headers || {}; // when set headers['X-Requested-With'] = null , can close default XHR header
  // see https://github.com/react-component/upload/issues/33

  if (headers['X-Requested-With'] !== null) {
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
  }

  Object.keys(headers).forEach(function (h) {
    if (headers[h] !== null) {
      xhr.setRequestHeader(h, headers[h]);
    }
  });
  xhr.send(formData);
  return {
    abort: function abort() {
      xhr.abort();
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/uid.js
var now = +new Date();
var index = 0;
function uid() {
  // eslint-disable-next-line no-plusplus
  return "rc-upload-".concat(now, "-").concat(++index);
}
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/attr-accept.js

/* harmony default export */ var attr_accept = (function (file, acceptedFiles) {
  if (file && acceptedFiles) {
    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
    var fileName = file.name || '';
    var mimeType = file.type || '';
    var baseMimeType = mimeType.replace(/\\/.*$/, '');
    return acceptedFilesArray.some(function (type) {
      var validType = type.trim(); // This is something like */*,*  allow all files

      if (/^\\*(\\/\\*)?$/.test(type)) {
        return true;
      } // like .jpg, .png


      if (validType.charAt(0) === '.') {
        var lowerFileName = fileName.toLowerCase();
        var lowerType = validType.toLowerCase();
        var affixList = [lowerType];

        if (lowerType === '.jpg' || lowerType === '.jpeg') {
          affixList = ['.jpg', '.jpeg'];
        }

        return affixList.some(function (affix) {
          return lowerFileName.endsWith(affix);
        });
      } // This is something like a image/* mime type


      if (/\\/\\*$/.test(validType)) {
        return baseMimeType === validType.replace(/\\/.*$/, '');
      } // Full match


      if (mimeType === validType) {
        return true;
      } // Invalidate type should skip


      if (/^\\w+$/.test(validType)) {
        (0,es_warning/* default */.ZP)(false, "Upload takes an invalidate 'accept' type '".concat(validType, "'.Skip for check."));
        return true;
      }

      return false;
    });
  }

  return true;
});
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/traverseFileTree.js
function loopFiles(item, callback) {
  var dirReader = item.createReader();
  var fileList = [];

  function sequence() {
    dirReader.readEntries(function (entries) {
      var entryList = Array.prototype.slice.apply(entries);
      fileList = fileList.concat(entryList); // Check if all the file has been viewed

      var isFinished = !entryList.length;

      if (isFinished) {
        callback(fileList);
      } else {
        sequence();
      }
    });
  }

  sequence();
}

var traverseFileTree = function traverseFileTree(files, callback, isAccepted) {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  var _traverseFileTree = function _traverseFileTree(item, path) {
    // eslint-disable-next-line no-param-reassign
    item.path = path || '';

    if (item.isFile) {
      item.file(function (file) {
        if (isAccepted(file)) {
          // https://github.com/ant-design/ant-design/issues/16426
          if (item.fullPath && !file.webkitRelativePath) {
            Object.defineProperties(file, {
              webkitRelativePath: {
                writable: true
              }
            }); // eslint-disable-next-line no-param-reassign

            file.webkitRelativePath = item.fullPath.replace(/^\\//, '');
            Object.defineProperties(file, {
              webkitRelativePath: {
                writable: false
              }
            });
          }

          callback([file]);
        }
      });
    } else if (item.isDirectory) {
      loopFiles(item, function (entries) {
        entries.forEach(function (entryItem) {
          _traverseFileTree(entryItem, "".concat(path).concat(item.name, "/"));
        });
      });
    }
  };

  files.forEach(function (file) {
    _traverseFileTree(file.webkitGetAsEntry());
  });
};

/* harmony default export */ var es_traverseFileTree = (traverseFileTree);
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/AjaxUploader.js











var AjaxUploader_excluded = ["component", "prefixCls", "className", "disabled", "id", "style", "multiple", "accept", "capture", "children", "directory", "openFileDialogOnClick", "onMouseEnter", "onMouseLeave"];








var AjaxUploader = /*#__PURE__*/function (_Component) {
  (0,inherits/* default */.Z)(AjaxUploader, _Component);

  var _super = (0,createSuper/* default */.Z)(AjaxUploader);

  function AjaxUploader() {
    var _this;

    (0,classCallCheck/* default */.Z)(this, AjaxUploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      uid: uid()
    };
    _this.reqs = {};
    _this.fileInput = void 0;
    _this._isMounted = void 0;

    _this.onChange = function (e) {
      var _this$props = _this.props,
          accept = _this$props.accept,
          directory = _this$props.directory;
      var files = e.target.files;

      var acceptedFiles = (0,toConsumableArray/* default */.Z)(files).filter(function (file) {
        return !directory || attr_accept(file, accept);
      });

      _this.uploadFiles(acceptedFiles);

      _this.reset();
    };

    _this.onClick = function (e) {
      var el = _this.fileInput;

      if (!el) {
        return;
      }

      var _this$props2 = _this.props,
          children = _this$props2.children,
          onClick = _this$props2.onClick;

      if (children && children.type === 'button') {
        var parent = el.parentNode;
        parent.focus();
        parent.querySelector('button').blur();
      }

      el.click();

      if (onClick) {
        onClick(e);
      }
    };

    _this.onKeyDown = function (e) {
      if (e.key === 'Enter') {
        _this.onClick(e);
      }
    };

    _this.onFileDrop = function (e) {
      var multiple = _this.props.multiple;
      e.preventDefault();

      if (e.type === 'dragover') {
        return;
      }

      if (_this.props.directory) {
        es_traverseFileTree(Array.prototype.slice.call(e.dataTransfer.items), _this.uploadFiles, function (_file) {
          return attr_accept(_file, _this.props.accept);
        });
      } else {
        var files = (0,toConsumableArray/* default */.Z)(e.dataTransfer.files).filter(function (file) {
          return attr_accept(file, _this.props.accept);
        });

        if (multiple === false) {
          files = files.slice(0, 1);
        }

        _this.uploadFiles(files);
      }
    };

    _this.uploadFiles = function (files) {
      var originFiles = (0,toConsumableArray/* default */.Z)(files);

      var postFiles = originFiles.map(function (file) {
        // eslint-disable-next-line no-param-reassign
        file.uid = uid();
        return _this.processFile(file, originFiles);
      }); // Batch upload files

      Promise.all(postFiles).then(function (fileList) {
        var onBatchStart = _this.props.onBatchStart;
        onBatchStart === null || onBatchStart === void 0 ? void 0 : onBatchStart(fileList.map(function (_ref) {
          var origin = _ref.origin,
              parsedFile = _ref.parsedFile;
          return {
            file: origin,
            parsedFile: parsedFile
          };
        }));
        fileList.filter(function (file) {
          return file.parsedFile !== null;
        }).forEach(function (file) {
          _this.post(file);
        });
      });
    };

    _this.processFile = /*#__PURE__*/function () {
      var _ref2 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/(0,regeneratorRuntime/* default */.Z)().mark(function _callee(file, fileList) {
        var beforeUpload, transformedFile, action, mergedAction, data, mergedData, parsedData, parsedFile, mergedParsedFile;
        return (0,regeneratorRuntime/* default */.Z)().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                beforeUpload = _this.props.beforeUpload;
                transformedFile = file;

                if (!beforeUpload) {
                  _context.next = 14;
                  break;
                }

                _context.prev = 3;
                _context.next = 6;
                return beforeUpload(file, fileList);

              case 6:
                transformedFile = _context.sent;
                _context.next = 12;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](3);
                // Rejection will also trade as false
                transformedFile = false;

              case 12:
                if (!(transformedFile === false)) {
                  _context.next = 14;
                  break;
                }

                return _context.abrupt("return", {
                  origin: file,
                  parsedFile: null,
                  action: null,
                  data: null
                });

              case 14:
                // Get latest action
                action = _this.props.action;

                if (!(typeof action === 'function')) {
                  _context.next = 21;
                  break;
                }

                _context.next = 18;
                return action(file);

              case 18:
                mergedAction = _context.sent;
                _context.next = 22;
                break;

              case 21:
                mergedAction = action;

              case 22:
                // Get latest data
                data = _this.props.data;

                if (!(typeof data === 'function')) {
                  _context.next = 29;
                  break;
                }

                _context.next = 26;
                return data(file);

              case 26:
                mergedData = _context.sent;
                _context.next = 30;
                break;

              case 29:
                mergedData = data;

              case 30:
                parsedData = // string type is from legacy \`transformFile\`.
                // Not sure if this will work since no related test case works with it
                ((0,esm_typeof/* default */.Z)(transformedFile) === 'object' || typeof transformedFile === 'string') && transformedFile ? transformedFile : file;

                if (parsedData instanceof File) {
                  parsedFile = parsedData;
                } else {
                  parsedFile = new File([parsedData], file.name, {
                    type: file.type
                  });
                }

                mergedParsedFile = parsedFile;
                mergedParsedFile.uid = file.uid;
                return _context.abrupt("return", {
                  origin: file,
                  data: mergedData,
                  parsedFile: mergedParsedFile,
                  action: mergedAction
                });

              case 35:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[3, 9]]);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.saveFileInput = function (node) {
      _this.fileInput = node;
    };

    return _this;
  }

  (0,createClass/* default */.Z)(AjaxUploader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
      this.abort();
    }
  }, {
    key: "post",
    value: function post(_ref3) {
      var _this2 = this;

      var data = _ref3.data,
          origin = _ref3.origin,
          action = _ref3.action,
          parsedFile = _ref3.parsedFile;

      if (!this._isMounted) {
        return;
      }

      var _this$props3 = this.props,
          onStart = _this$props3.onStart,
          customRequest = _this$props3.customRequest,
          name = _this$props3.name,
          headers = _this$props3.headers,
          withCredentials = _this$props3.withCredentials,
          method = _this$props3.method;
      var uid = origin.uid;
      var request = customRequest || upload;
      var requestOption = {
        action: action,
        filename: name,
        data: data,
        file: parsedFile,
        headers: headers,
        withCredentials: withCredentials,
        method: method || 'post',
        onProgress: function onProgress(e) {
          var onProgress = _this2.props.onProgress;
          onProgress === null || onProgress === void 0 ? void 0 : onProgress(e, parsedFile);
        },
        onSuccess: function onSuccess(ret, xhr) {
          var onSuccess = _this2.props.onSuccess;
          onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(ret, parsedFile, xhr);
          delete _this2.reqs[uid];
        },
        onError: function onError(err, ret) {
          var onError = _this2.props.onError;
          onError === null || onError === void 0 ? void 0 : onError(err, ret, parsedFile);
          delete _this2.reqs[uid];
        }
      };
      onStart(origin);
      this.reqs[uid] = request(requestOption);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        uid: uid()
      });
    }
  }, {
    key: "abort",
    value: function abort(file) {
      var reqs = this.reqs;

      if (file) {
        var uid = file.uid ? file.uid : file;

        if (reqs[uid] && reqs[uid].abort) {
          reqs[uid].abort();
        }

        delete reqs[uid];
      } else {
        Object.keys(reqs).forEach(function (uid) {
          if (reqs[uid] && reqs[uid].abort) {
            reqs[uid].abort();
          }

          delete reqs[uid];
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props4 = this.props,
          Tag = _this$props4.component,
          prefixCls = _this$props4.prefixCls,
          className = _this$props4.className,
          disabled = _this$props4.disabled,
          id = _this$props4.id,
          style = _this$props4.style,
          multiple = _this$props4.multiple,
          accept = _this$props4.accept,
          capture = _this$props4.capture,
          children = _this$props4.children,
          directory = _this$props4.directory,
          openFileDialogOnClick = _this$props4.openFileDialogOnClick,
          onMouseEnter = _this$props4.onMouseEnter,
          onMouseLeave = _this$props4.onMouseLeave,
          otherProps = (0,objectWithoutProperties/* default */.Z)(_this$props4, AjaxUploader_excluded);

      var cls = classnames_default()((_classNames = {}, (0,defineProperty/* default */.Z)(_classNames, prefixCls, true), (0,defineProperty/* default */.Z)(_classNames, "".concat(prefixCls, "-disabled"), disabled), (0,defineProperty/* default */.Z)(_classNames, className, className), _classNames)); // because input don't have directory/webkitdirectory type declaration

      var dirProps = directory ? {
        directory: 'directory',
        webkitdirectory: 'webkitdirectory'
      } : {};
      var events = disabled ? {} : {
        onClick: openFileDialogOnClick ? this.onClick : function () {},
        onKeyDown: openFileDialogOnClick ? this.onKeyDown : function () {},
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onDrop: this.onFileDrop,
        onDragOver: this.onFileDrop,
        tabIndex: '0'
      };
      return /*#__PURE__*/react.createElement(Tag, (0,esm_extends/* default */.Z)({}, events, {
        className: cls,
        role: "button",
        style: style
      }), /*#__PURE__*/react.createElement("input", (0,esm_extends/* default */.Z)({}, (0,pickAttrs/* default */.Z)(otherProps, {
        aria: true,
        data: true
      }), {
        id: id,
        type: "file",
        ref: this.saveFileInput,
        onClick: function onClick(e) {
          return e.stopPropagation();
        } // https://github.com/ant-design/ant-design/issues/19948
        ,
        key: this.state.uid,
        style: {
          display: 'none'
        },
        accept: accept
      }, dirProps, {
        multiple: multiple,
        onChange: this.onChange
      }, capture != null ? {
        capture: capture
      } : {})), children);
    }
  }]);

  return AjaxUploader;
}(react.Component);

/* harmony default export */ var es_AjaxUploader = (AjaxUploader);
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/Upload.js






/* eslint react/prop-types:0 */



function Upload_empty() {}

var Upload = /*#__PURE__*/function (_Component) {
  (0,inherits/* default */.Z)(Upload, _Component);

  var _super = (0,createSuper/* default */.Z)(Upload);

  function Upload() {
    var _this;

    (0,classCallCheck/* default */.Z)(this, Upload);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.uploader = void 0;

    _this.saveUploader = function (node) {
      _this.uploader = node;
    };

    return _this;
  }

  (0,createClass/* default */.Z)(Upload, [{
    key: "abort",
    value: function abort(file) {
      this.uploader.abort(file);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react.createElement(es_AjaxUploader, (0,esm_extends/* default */.Z)({}, this.props, {
        ref: this.saveUploader
      }));
    }
  }]);

  return Upload;
}(react.Component);

Upload.defaultProps = {
  component: 'span',
  prefixCls: 'rc-upload',
  data: {},
  headers: {},
  name: 'file',
  multipart: false,
  onStart: Upload_empty,
  onError: Upload_empty,
  onSuccess: Upload_empty,
  multiple: false,
  beforeUpload: null,
  customRequest: null,
  withCredentials: false,
  openFileDialogOnClick: true
};
/* harmony default export */ var es_Upload = (Upload);
;// CONCATENATED MODULE: ./node_modules/rc-upload/es/index.js

/* harmony default export */ var rc_upload_es = (es_Upload);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/FileTwoTone.js + 1 modules
var FileTwoTone = __webpack_require__(58895);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/LoadingOutlined.js + 1 modules
var LoadingOutlined = __webpack_require__(50888);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/PaperClipOutlined.js + 1 modules
var PaperClipOutlined = __webpack_require__(5392);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/PictureTwoTone.js + 1 modules
var PictureTwoTone = __webpack_require__(82543);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/utils.js

function file2Obj(file) {
  return Object.assign(Object.assign({}, file), {
    lastModified: file.lastModified,
    lastModifiedDate: file.lastModifiedDate,
    name: file.name,
    size: file.size,
    type: file.type,
    uid: file.uid,
    percent: 0,
    originFileObj: file
  });
}
/** Upload fileList. Replace file if exist or just push into it. */
function updateFileList(file, fileList) {
  const nextFileList = (0,toConsumableArray/* default */.Z)(fileList);
  const fileIndex = nextFileList.findIndex(_ref => {
    let {
      uid
    } = _ref;
    return uid === file.uid;
  });
  if (fileIndex === -1) {
    nextFileList.push(file);
  } else {
    nextFileList[fileIndex] = file;
  }
  return nextFileList;
}
function getFileItem(file, fileList) {
  const matchKey = file.uid !== undefined ? 'uid' : 'name';
  return fileList.filter(item => item[matchKey] === file[matchKey])[0];
}
function removeFileItem(file, fileList) {
  const matchKey = file.uid !== undefined ? 'uid' : 'name';
  const removed = fileList.filter(item => item[matchKey] !== file[matchKey]);
  if (removed.length === fileList.length) {
    return null;
  }
  return removed;
}
// ==================== Default Image Preview ====================
const extname = function () {
  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  const temp = url.split('/');
  const filename = temp[temp.length - 1];
  const filenameWithoutSuffix = filename.split(/#|\\?/)[0];
  return (/\\.[^./\\\\]*$/.exec(filenameWithoutSuffix) || [''])[0];
};
const isImageFileType = type => type.indexOf('image/') === 0;
const isImageUrl = file => {
  if (file.type && !file.thumbUrl) {
    return isImageFileType(file.type);
  }
  const url = file.thumbUrl || file.url || '';
  const extension = extname(url);
  if (/^data:image\\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico|heic|heif)$/i.test(extension)) {
    return true;
  }
  if (/^data:/.test(url)) {
    // other file types of base64
    return false;
  }
  if (extension) {
    // other file types which have extension
    return false;
  }
  return true;
};
const MEASURE_SIZE = 200;
function previewImage(file) {
  return new Promise(resolve => {
    if (!file.type || !isImageFileType(file.type)) {
      resolve('');
      return;
    }
    const canvas = document.createElement('canvas');
    canvas.width = MEASURE_SIZE;
    canvas.height = MEASURE_SIZE;
    canvas.style.cssText = \`position: fixed; left: 0; top: 0; width: \${MEASURE_SIZE}px; height: \${MEASURE_SIZE}px; z-index: 9999; display: none;\`;
    document.body.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    const img = new Image();
    img.onload = () => {
      const {
        width,
        height
      } = img;
      let drawWidth = MEASURE_SIZE;
      let drawHeight = MEASURE_SIZE;
      let offsetX = 0;
      let offsetY = 0;
      if (width > height) {
        drawHeight = height * (MEASURE_SIZE / width);
        offsetY = -(drawHeight - drawWidth) / 2;
      } else {
        drawWidth = width * (MEASURE_SIZE / height);
        offsetX = -(drawWidth - drawHeight) / 2;
      }
      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      const dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      resolve(dataURL);
    };
    img.crossOrigin = 'anonymous';
    if (file.type.startsWith('image/svg+xml')) {
      const reader = new FileReader();
      reader.addEventListener('load', () => {
        if (reader.result) img.src = reader.result;
      });
      reader.readAsDataURL(file);
    } else {
      img.src = window.URL.createObjectURL(file);
    }
  });
}
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/DownloadOutlined.js + 1 modules
var DownloadOutlined = __webpack_require__(23430);
// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/EyeOutlined.js + 1 modules
var EyeOutlined = __webpack_require__(99611);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/UploadList/ListItem.js









const ListItem_ListItem = /*#__PURE__*/react.forwardRef((_ref, ref) => {
  let {
    prefixCls,
    className,
    style,
    locale,
    listType,
    file,
    items,
    progress: progressProps,
    iconRender,
    actionIconRender,
    itemRender,
    isImgUrl,
    showPreviewIcon,
    showRemoveIcon,
    showDownloadIcon,
    previewIcon: customPreviewIcon,
    removeIcon: customRemoveIcon,
    downloadIcon: customDownloadIcon,
    onPreview,
    onDownload,
    onClose
  } = _ref;
  var _a, _b;
  // Status: which will ignore \`removed\` status
  const {
    status
  } = file;
  const [mergedStatus, setMergedStatus] = react.useState(status);
  react.useEffect(() => {
    if (status !== 'removed') {
      setMergedStatus(status);
    }
  }, [status]);
  // Delay to show the progress bar
  const [showProgress, setShowProgress] = react.useState(false);
  const progressRafRef = react.useRef(null);
  react.useEffect(() => {
    progressRafRef.current = setTimeout(() => {
      setShowProgress(true);
    }, 300);
    return () => {
      if (progressRafRef.current) {
        clearTimeout(progressRafRef.current);
      }
    };
  }, []);
  const iconNode = iconRender(file);
  let icon = /*#__PURE__*/react.createElement("div", {
    className: \`\${prefixCls}-icon\`
  }, iconNode);
  if (listType === 'picture' || listType === 'picture-card') {
    if (mergedStatus === 'uploading' || !file.thumbUrl && !file.url) {
      const uploadingClassName = classnames_default()({
        [\`\${prefixCls}-list-item-thumbnail\`]: true,
        [\`\${prefixCls}-list-item-file\`]: mergedStatus !== 'uploading'
      });
      icon = /*#__PURE__*/react.createElement("div", {
        className: uploadingClassName
      }, iconNode);
    } else {
      const thumbnail = (isImgUrl === null || isImgUrl === void 0 ? void 0 : isImgUrl(file)) ? /*#__PURE__*/react.createElement("img", {
        src: file.thumbUrl || file.url,
        alt: file.name,
        className: \`\${prefixCls}-list-item-image\`,
        crossOrigin: file.crossOrigin
      }) : iconNode;
      const aClassName = classnames_default()({
        [\`\${prefixCls}-list-item-thumbnail\`]: true,
        [\`\${prefixCls}-list-item-file\`]: isImgUrl && !isImgUrl(file)
      });
      icon = /*#__PURE__*/react.createElement("a", {
        className: aClassName,
        onClick: e => onPreview(file, e),
        href: file.url || file.thumbUrl,
        target: "_blank",
        rel: "noopener noreferrer"
      }, thumbnail);
    }
  }
  const listItemClassName = classnames_default()(\`\${prefixCls}-list-item\`, \`\${prefixCls}-list-item-\${mergedStatus}\`);
  const linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;
  const removeIcon = showRemoveIcon ? actionIconRender((typeof customRemoveIcon === 'function' ? customRemoveIcon(file) : customRemoveIcon) || /*#__PURE__*/react.createElement(DeleteOutlined/* default */.Z, null), () => onClose(file), prefixCls, locale.removeFile) : null;
  const downloadIcon = showDownloadIcon && mergedStatus === 'done' ? actionIconRender((typeof customDownloadIcon === 'function' ? customDownloadIcon(file) : customDownloadIcon) || /*#__PURE__*/react.createElement(DownloadOutlined/* default */.Z, null), () => onDownload(file), prefixCls, locale.downloadFile) : null;
  const downloadOrDelete = listType !== 'picture-card' && /*#__PURE__*/react.createElement("span", {
    key: "download-delete",
    className: classnames_default()(\`\${prefixCls}-list-item-actions\`, {
      picture: listType === 'picture'
    })
  }, downloadIcon, removeIcon);
  const listItemNameClass = classnames_default()(\`\${prefixCls}-list-item-name\`);
  const fileName = file.url ? [/*#__PURE__*/react.createElement("a", Object.assign({
    key: "view",
    target: "_blank",
    rel: "noopener noreferrer",
    className: listItemNameClass,
    title: file.name
  }, linkProps, {
    href: file.url,
    onClick: e => onPreview(file, e)
  }), file.name), downloadOrDelete] : [/*#__PURE__*/react.createElement("span", {
    key: "view",
    className: listItemNameClass,
    onClick: e => onPreview(file, e),
    title: file.name
  }, file.name), downloadOrDelete];
  const previewStyle = {
    pointerEvents: 'none',
    opacity: 0.5
  };
  const previewIcon = showPreviewIcon ? /*#__PURE__*/react.createElement("a", {
    href: file.url || file.thumbUrl,
    target: "_blank",
    rel: "noopener noreferrer",
    style: file.url || file.thumbUrl ? undefined : previewStyle,
    onClick: e => onPreview(file, e),
    title: locale.previewFile
  }, typeof customPreviewIcon === 'function' ? customPreviewIcon(file) : customPreviewIcon || /*#__PURE__*/react.createElement(EyeOutlined/* default */.Z, null)) : null;
  const pictureCardActions = listType === 'picture-card' && mergedStatus !== 'uploading' && /*#__PURE__*/react.createElement("span", {
    className: \`\${prefixCls}-list-item-actions\`
  }, previewIcon, mergedStatus === 'done' && downloadIcon, removeIcon);
  const {
    getPrefixCls
  } = react.useContext(context/* ConfigContext */.E_);
  const rootPrefixCls = getPrefixCls();
  const dom = /*#__PURE__*/react.createElement("div", {
    className: listItemClassName
  }, icon, fileName, pictureCardActions, showProgress && /*#__PURE__*/react.createElement(rc_motion_es/* default */.Z, {
    motionName: \`\${rootPrefixCls}-fade\`,
    visible: mergedStatus === 'uploading',
    motionDeadline: 2000
  }, _ref2 => {
    let {
      className: motionClassName
    } = _ref2;
    // show loading icon if upload progress listener is disabled
    const loadingProgress = 'percent' in file ? /*#__PURE__*/react.createElement(progress/* default */.Z, Object.assign({}, progressProps, {
      type: "line",
      percent: file.percent
    })) : null;
    return /*#__PURE__*/react.createElement("div", {
      className: classnames_default()(\`\${prefixCls}-list-item-progress\`, motionClassName)
    }, loadingProgress);
  }));
  const message = file.response && typeof file.response === 'string' ? file.response : ((_a = file.error) === null || _a === void 0 ? void 0 : _a.statusText) || ((_b = file.error) === null || _b === void 0 ? void 0 : _b.message) || locale.uploadError;
  const item = mergedStatus === 'error' ? /*#__PURE__*/react.createElement(es_tooltip/* default */.Z, {
    title: message,
    getPopupContainer: node => node.parentNode
  }, dom) : dom;
  return /*#__PURE__*/react.createElement("div", {
    className: classnames_default()(\`\${prefixCls}-list-item-container\`, className),
    style: style,
    ref: ref
  }, itemRender ? itemRender(item, file, items, {
    download: onDownload.bind(null, file),
    preview: onPreview.bind(null, file),
    remove: onClose.bind(null, file)
  }) : item);
});
/* harmony default export */ var UploadList_ListItem = (ListItem_ListItem);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/UploadList/index.js
















const InternalUploadList = (props, ref) => {
  const {
    listType = 'text',
    previewFile = previewImage,
    onPreview,
    onDownload,
    onRemove,
    locale,
    iconRender,
    isImageUrl: isImgUrl = isImageUrl,
    prefixCls: customizePrefixCls,
    items = [],
    showPreviewIcon = true,
    showRemoveIcon = true,
    showDownloadIcon = false,
    removeIcon,
    previewIcon,
    downloadIcon,
    progress = {
      strokeWidth: 2,
      showInfo: false
    },
    appendAction,
    appendActionVisible = true,
    itemRender
  } = props;
  const forceUpdate = (0,useForceUpdate/* default */.Z)();
  const [motionAppear, setMotionAppear] = react.useState(false);
  // ============================= Effect =============================
  react.useEffect(() => {
    if (listType !== 'picture' && listType !== 'picture-card') {
      return;
    }
    (items || []).forEach(file => {
      if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== undefined) {
        return;
      }
      file.thumbUrl = '';
      if (previewFile) {
        previewFile(file.originFileObj).then(previewDataUrl => {
          // Need append '' to avoid dead loop
          file.thumbUrl = previewDataUrl || '';
          forceUpdate();
        });
      }
    });
  }, [listType, items, previewFile]);
  react.useEffect(() => {
    setMotionAppear(true);
  }, []);
  // ============================= Events =============================
  const onInternalPreview = (file, e) => {
    if (!onPreview) {
      return;
    }
    e === null || e === void 0 ? void 0 : e.preventDefault();
    return onPreview(file);
  };
  const onInternalDownload = file => {
    if (typeof onDownload === 'function') {
      onDownload(file);
    } else if (file.url) {
      window.open(file.url);
    }
  };
  const onInternalClose = file => {
    onRemove === null || onRemove === void 0 ? void 0 : onRemove(file);
  };
  const internalIconRender = file => {
    if (iconRender) {
      return iconRender(file, listType);
    }
    const isLoading = file.status === 'uploading';
    const fileIcon = isImgUrl && isImgUrl(file) ? /*#__PURE__*/react.createElement(PictureTwoTone/* default */.Z, null) : /*#__PURE__*/react.createElement(FileTwoTone/* default */.Z, null);
    let icon = isLoading ? /*#__PURE__*/react.createElement(LoadingOutlined/* default */.Z, null) : /*#__PURE__*/react.createElement(PaperClipOutlined/* default */.Z, null);
    if (listType === 'picture') {
      icon = isLoading ? /*#__PURE__*/react.createElement(LoadingOutlined/* default */.Z, null) : fileIcon;
    } else if (listType === 'picture-card') {
      icon = isLoading ? locale.uploading : fileIcon;
    }
    return icon;
  };
  const actionIconRender = (customIcon, callback, prefixCls, title) => {
    const btnProps = {
      type: 'text',
      size: 'small',
      title,
      onClick: e => {
        callback();
        if ((0,reactNode/* isValidElement */.l$)(customIcon) && customIcon.props.onClick) {
          customIcon.props.onClick(e);
        }
      },
      className: \`\${prefixCls}-list-item-action\`
    };
    if ((0,reactNode/* isValidElement */.l$)(customIcon)) {
      const btnIcon = (0,reactNode/* cloneElement */.Tm)(customIcon, Object.assign(Object.assign({}, customIcon.props), {
        onClick: () => {}
      }));
      return /*#__PURE__*/react.createElement(es_button/* default */.ZP, Object.assign({}, btnProps, {
        icon: btnIcon
      }));
    }
    return /*#__PURE__*/react.createElement(es_button/* default */.ZP, Object.assign({}, btnProps), /*#__PURE__*/react.createElement("span", null, customIcon));
  };
  // ============================== Ref ===============================
  // Test needs
  react.useImperativeHandle(ref, () => ({
    handlePreview: onInternalPreview,
    handleDownload: onInternalDownload
  }));
  const {
    getPrefixCls
  } = react.useContext(context/* ConfigContext */.E_);
  // ============================= Render =============================
  const prefixCls = getPrefixCls('upload', customizePrefixCls);
  const rootPrefixCls = getPrefixCls();
  const listClassNames = classnames_default()({
    [\`\${prefixCls}-list\`]: true,
    [\`\${prefixCls}-list-\${listType}\`]: true
  });
  // >>> Motion config
  const motionKeyList = (0,toConsumableArray/* default */.Z)(items.map(file => ({
    key: file.uid,
    file
  })));
  const animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate';
  // const transitionName = list.length === 0 ? '' : \`\${prefixCls}-\${animationDirection}\`;
  let motionConfig = {
    motionDeadline: 2000,
    motionName: \`\${prefixCls}-\${animationDirection}\`,
    keys: motionKeyList,
    motionAppear
  };
  const listItemMotion = (0,react.useMemo)(() => {
    const motion = Object.assign({}, (0,_util_motion/* default */.ZP)(rootPrefixCls));
    delete motion.onAppearEnd;
    delete motion.onEnterEnd;
    delete motion.onLeaveEnd;
    return motion;
  }, [rootPrefixCls]);
  if (listType !== 'picture-card') {
    motionConfig = Object.assign(Object.assign({}, listItemMotion), motionConfig);
  }
  return /*#__PURE__*/react.createElement("div", {
    className: listClassNames
  }, /*#__PURE__*/react.createElement(rc_motion_es/* CSSMotionList */.V, Object.assign({}, motionConfig, {
    component: false
  }), _ref => {
    let {
      key,
      file,
      className: motionClassName,
      style: motionStyle
    } = _ref;
    return /*#__PURE__*/react.createElement(UploadList_ListItem, {
      key: key,
      locale: locale,
      prefixCls: prefixCls,
      className: motionClassName,
      style: motionStyle,
      file: file,
      items: items,
      progress: progress,
      listType: listType,
      isImgUrl: isImgUrl,
      showPreviewIcon: showPreviewIcon,
      showRemoveIcon: showRemoveIcon,
      showDownloadIcon: showDownloadIcon,
      removeIcon: removeIcon,
      previewIcon: previewIcon,
      downloadIcon: downloadIcon,
      iconRender: internalIconRender,
      actionIconRender: actionIconRender,
      itemRender: itemRender,
      onPreview: onInternalPreview,
      onDownload: onInternalDownload,
      onClose: onInternalClose
    });
  }), appendAction && /*#__PURE__*/react.createElement(rc_motion_es/* default */.Z, Object.assign({}, motionConfig, {
    visible: appendActionVisible,
    forceRender: true
  }), _ref2 => {
    let {
      className: motionClassName,
      style: motionStyle
    } = _ref2;
    return (0,reactNode/* cloneElement */.Tm)(appendAction, oriProps => ({
      className: classnames_default()(oriProps.className, motionClassName),
      style: Object.assign(Object.assign(Object.assign({}, motionStyle), {
        // prevent the element has hover css pseudo-class that may cause animation to end prematurely.
        pointerEvents: motionClassName ? 'none' : undefined
      }), oriProps.style)
    }));
  }));
};
const UploadList = /*#__PURE__*/react.forwardRef(InternalUploadList);
if (false) {}
/* harmony default export */ var upload_UploadList = (UploadList);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/dragger.js
const genDraggerStyle = token => {
  const {
    componentCls,
    iconCls
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-drag\`]: {
        position: 'relative',
        width: '100%',
        height: '100%',
        textAlign: 'center',
        background: token.colorFillAlter,
        border: \`\${token.lineWidth}px dashed \${token.colorBorder}\`,
        borderRadius: token.borderRadiusLG,
        cursor: 'pointer',
        transition: \`border-color \${token.motionDurationSlow}\`,
        [componentCls]: {
          padding: \`\${token.padding}px 0\`
        },
        [\`\${componentCls}-btn\`]: {
          display: 'table',
          width: '100%',
          height: '100%',
          outline: 'none'
        },
        [\`\${componentCls}-drag-container\`]: {
          display: 'table-cell',
          verticalAlign: 'middle'
        },
        [\`&:not(\${componentCls}-disabled):hover\`]: {
          borderColor: token.colorPrimaryHover
        },
        [\`p\${componentCls}-drag-icon\`]: {
          marginBottom: token.margin,
          [iconCls]: {
            color: token.colorPrimary,
            fontSize: token.uploadThumbnailSize
          }
        },
        [\`p\${componentCls}-text\`]: {
          margin: \`0 0 \${token.marginXXS}px\`,
          color: token.colorTextHeading,
          fontSize: token.fontSizeLG
        },
        [\`p\${componentCls}-hint\`]: {
          color: token.colorTextDescription,
          fontSize: token.fontSize
        },
        // ===================== Disabled =====================
        [\`&\${componentCls}-disabled\`]: {
          cursor: 'not-allowed',
          [\`p\${componentCls}-drag-icon \${iconCls},
            p\${componentCls}-text,
            p\${componentCls}-hint
          \`]: {
            color: token.colorTextDisabled
          }
        }
      }
    }
  };
};
/* harmony default export */ var dragger = (genDraggerStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/list.js

const genListStyle = token => {
  const {
    componentCls,
    antCls,
    iconCls,
    fontSize,
    lineHeight
  } = token;
  const itemCls = \`\${componentCls}-list-item\`;
  const actionsCls = \`\${itemCls}-actions\`;
  const actionCls = \`\${itemCls}-action\`;
  const listItemHeightSM = Math.round(fontSize * lineHeight);
  return {
    [\`\${componentCls}-wrapper\`]: {
      [\`\${componentCls}-list\`]: Object.assign(Object.assign({}, (0,style/* clearFix */.dF)()), {
        lineHeight: token.lineHeight,
        [itemCls]: {
          position: 'relative',
          height: token.lineHeight * fontSize,
          marginTop: token.marginXS,
          fontSize,
          display: 'flex',
          alignItems: 'center',
          transition: \`background-color \${token.motionDurationSlow}\`,
          '&:hover': {
            backgroundColor: token.controlItemBgHover
          },
          [\`\${itemCls}-name\`]: Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
            padding: \`0 \${token.paddingXS}px\`,
            lineHeight,
            flex: 'auto',
            transition: \`all \${token.motionDurationSlow}\`
          }),
          [actionsCls]: {
            [actionCls]: {
              opacity: 0
            },
            [\`\${actionCls}\${antCls}-btn-sm\`]: {
              height: listItemHeightSM,
              border: 0,
              lineHeight: 1,
              // FIXME: should not override small button
              '> span': {
                transform: 'scale(1)'
              }
            },
            [\`
              \${actionCls}:focus,
              &.picture \${actionCls}
            \`]: {
              opacity: 1
            },
            [iconCls]: {
              color: token.colorTextDescription,
              transition: \`all \${token.motionDurationSlow}\`
            },
            [\`&:hover \${iconCls}\`]: {
              color: token.colorText
            }
          },
          [\`\${componentCls}-icon \${iconCls}\`]: {
            color: token.colorTextDescription,
            fontSize
          },
          [\`\${itemCls}-progress\`]: {
            position: 'absolute',
            bottom: -token.uploadProgressOffset,
            width: '100%',
            paddingInlineStart: fontSize + token.paddingXS,
            fontSize,
            lineHeight: 0,
            pointerEvents: 'none',
            '> div': {
              margin: 0
            }
          }
        },
        [\`\${itemCls}:hover \${actionCls}\`]: {
          opacity: 1,
          color: token.colorText
        },
        [\`\${itemCls}-error\`]: {
          color: token.colorError,
          [\`\${itemCls}-name, \${componentCls}-icon \${iconCls}\`]: {
            color: token.colorError
          },
          [actionsCls]: {
            [\`\${iconCls}, \${iconCls}:hover\`]: {
              color: token.colorError
            },
            [actionCls]: {
              opacity: 1
            }
          }
        },
        [\`\${componentCls}-list-item-container\`]: {
          transition: \`opacity \${token.motionDurationSlow}, height \${token.motionDurationSlow}\`,
          // For smooth removing animation
          '&::before': {
            display: 'table',
            width: 0,
            height: 0,
            content: '""'
          }
        }
      })
    }
  };
};
/* harmony default export */ var style_list = (genListStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/motion.js

const uploadAnimateInlineIn = new es/* Keyframes */.E4('uploadAnimateInlineIn', {
  from: {
    width: 0,
    height: 0,
    margin: 0,
    padding: 0,
    opacity: 0
  }
});
const uploadAnimateInlineOut = new es/* Keyframes */.E4('uploadAnimateInlineOut', {
  to: {
    width: 0,
    height: 0,
    margin: 0,
    padding: 0,
    opacity: 0
  }
});
// =========================== Motion ===========================
const genMotionStyle = token => {
  const {
    componentCls
  } = token;
  const inlineCls = \`\${componentCls}-animate-inline\`;
  return [{
    [\`\${componentCls}-wrapper\`]: {
      [\`\${inlineCls}-appear, \${inlineCls}-enter, \${inlineCls}-leave\`]: {
        animationDuration: token.motionDurationSlow,
        animationTimingFunction: token.motionEaseInOutCirc,
        animationFillMode: 'forwards'
      },
      [\`\${inlineCls}-appear, \${inlineCls}-enter\`]: {
        animationName: uploadAnimateInlineIn
      },
      [\`\${inlineCls}-leave\`]: {
        animationName: uploadAnimateInlineOut
      }
    }
  }, uploadAnimateInlineIn, uploadAnimateInlineOut];
};
/* harmony default export */ var style_motion = (genMotionStyle);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/picture.js


const genPictureStyle = token => {
  const {
    componentCls,
    iconCls,
    uploadThumbnailSize,
    uploadProgressOffset
  } = token;
  const listCls = \`\${componentCls}-list\`;
  const itemCls = \`\${listCls}-item\`;
  return {
    [\`\${componentCls}-wrapper\`]: {
      // \${listCls} \u589E\u52A0\u4F18\u5148\u7EA7
      [\`\${listCls}\${listCls}-picture, \${listCls}\${listCls}-picture-card\`]: {
        [itemCls]: {
          position: 'relative',
          height: uploadThumbnailSize + token.lineWidth * 2 + token.paddingXS * 2,
          padding: token.paddingXS,
          border: \`\${token.lineWidth}px \${token.lineType} \${token.colorBorder}\`,
          borderRadius: token.borderRadiusLG,
          '&:hover': {
            background: 'transparent'
          },
          [\`\${itemCls}-thumbnail\`]: Object.assign(Object.assign({}, style/* textEllipsis */.vS), {
            width: uploadThumbnailSize,
            height: uploadThumbnailSize,
            lineHeight: \`\${uploadThumbnailSize + token.paddingSM}px\`,
            textAlign: 'center',
            flex: 'none',
            [iconCls]: {
              fontSize: token.fontSizeHeading2,
              color: token.colorPrimary
            },
            img: {
              display: 'block',
              width: '100%',
              height: '100%',
              overflow: 'hidden'
            }
          }),
          [\`\${itemCls}-progress\`]: {
            bottom: uploadProgressOffset,
            width: \`calc(100% - \${token.paddingSM * 2}px)\`,
            marginTop: 0,
            paddingInlineStart: uploadThumbnailSize + token.paddingXS
          }
        },
        [\`\${itemCls}-error\`]: {
          borderColor: token.colorError,
          // Adjust the color of the error icon : https://github.com/ant-design/ant-design/pull/24160
          [\`\${itemCls}-thumbnail \${iconCls}\`]: {
            [\`svg path[fill='#e6f7ff']\`]: {
              fill: token.colorErrorBg
            },
            [\`svg path[fill='#1890ff']\`]: {
              fill: token.colorError
            }
          }
        },
        [\`\${itemCls}-uploading\`]: {
          borderStyle: 'dashed',
          [\`\${itemCls}-name\`]: {
            marginBottom: uploadProgressOffset
          }
        }
      }
    }
  };
};
const genPictureCardStyle = token => {
  const {
    componentCls,
    iconCls,
    fontSizeLG,
    colorTextLightSolid
  } = token;
  const listCls = \`\${componentCls}-list\`;
  const itemCls = \`\${listCls}-item\`;
  const uploadPictureCardSize = token.uploadPicCardSize;
  return {
    [\`\${componentCls}-wrapper\${componentCls}-picture-card-wrapper\`]: Object.assign(Object.assign({}, (0,style/* clearFix */.dF)()), {
      display: 'inline-block',
      width: '100%',
      [\`\${componentCls}\${componentCls}-select\`]: {
        width: uploadPictureCardSize,
        height: uploadPictureCardSize,
        marginInlineEnd: token.marginXS,
        marginBottom: token.marginXS,
        textAlign: 'center',
        verticalAlign: 'top',
        backgroundColor: token.colorFillAlter,
        border: \`\${token.lineWidth}px dashed \${token.colorBorder}\`,
        borderRadius: token.borderRadiusLG,
        cursor: 'pointer',
        transition: \`border-color \${token.motionDurationSlow}\`,
        [\`> \${componentCls}\`]: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: '100%',
          textAlign: 'center'
        },
        [\`&:not(\${componentCls}-disabled):hover\`]: {
          borderColor: token.colorPrimary
        }
      },
      // list
      [\`\${listCls}\${listCls}-picture-card\`]: {
        [\`\${listCls}-item-container\`]: {
          display: 'inline-block',
          width: uploadPictureCardSize,
          height: uploadPictureCardSize,
          marginBlock: \`0 \${token.marginXS}px\`,
          marginInline: \`0 \${token.marginXS}px\`,
          verticalAlign: 'top'
        },
        '&::after': {
          display: 'none'
        },
        [itemCls]: {
          height: '100%',
          margin: 0,
          '&::before': {
            position: 'absolute',
            zIndex: 1,
            width: \`calc(100% - \${token.paddingXS * 2}px)\`,
            height: \`calc(100% - \${token.paddingXS * 2}px)\`,
            backgroundColor: token.colorBgMask,
            opacity: 0,
            transition: \`all \${token.motionDurationSlow}\`,
            content: '" "'
          }
        },
        [\`\${itemCls}:hover\`]: {
          [\`&::before, \${itemCls}-actions\`]: {
            opacity: 1
          }
        },
        [\`\${itemCls}-actions\`]: {
          position: 'absolute',
          insetInlineStart: 0,
          zIndex: 10,
          width: '100%',
          whiteSpace: 'nowrap',
          textAlign: 'center',
          opacity: 0,
          transition: \`all \${token.motionDurationSlow}\`,
          [\`\${iconCls}-eye, \${iconCls}-download, \${iconCls}-delete\`]: {
            zIndex: 10,
            width: fontSizeLG,
            margin: \`0 \${token.marginXXS}px\`,
            fontSize: fontSizeLG,
            cursor: 'pointer',
            transition: \`all \${token.motionDurationSlow}\`
          }
        },
        [\`\${itemCls}-actions, \${itemCls}-actions:hover\`]: {
          [\`\${iconCls}-eye, \${iconCls}-download, \${iconCls}-delete\`]: {
            color: new dist_module/* TinyColor */.C(colorTextLightSolid).setAlpha(0.65).toRgbString(),
            '&:hover': {
              color: colorTextLightSolid
            }
          }
        },
        [\`\${itemCls}-thumbnail, \${itemCls}-thumbnail img\`]: {
          position: 'static',
          display: 'block',
          width: '100%',
          height: '100%',
          objectFit: 'contain'
        },
        [\`\${itemCls}-name\`]: {
          display: 'none',
          textAlign: 'center'
        },
        [\`\${itemCls}-file + \${itemCls}-name\`]: {
          position: 'absolute',
          bottom: token.margin,
          display: 'block',
          width: \`calc(100% - \${token.paddingXS * 2}px)\`
        },
        [\`\${itemCls}-uploading\`]: {
          [\`&\${itemCls}\`]: {
            backgroundColor: token.colorFillAlter
          },
          [\`&::before, \${iconCls}-eye, \${iconCls}-download, \${iconCls}-delete\`]: {
            display: 'none'
          }
        },
        [\`\${itemCls}-progress\`]: {
          bottom: token.marginXL,
          width: \`calc(100% - \${token.paddingXS * 2}px)\`,
          paddingInlineStart: 0
        }
      }
    })
  };
};

;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/rtl.js
// =========================== Motion ===========================
const genRtlStyle = token => {
  const {
    componentCls
  } = token;
  return {
    [\`\${componentCls}-rtl\`]: {
      direction: 'rtl'
    }
  };
};
/* harmony default export */ var style_rtl = (genRtlStyle);
// EXTERNAL MODULE: ./node_modules/antd/es/style/motion/collapse.js
var motion_collapse = __webpack_require__(33507);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/style/index.js








const upload_style_genBaseStyle = token => {
  const {
    componentCls,
    colorTextDisabled
  } = token;
  return {
    [\`\${componentCls}-wrapper\`]: Object.assign(Object.assign({}, (0,style/* resetComponent */.Wf)(token)), {
      [componentCls]: {
        outline: 0,
        "input[type='file']": {
          cursor: 'pointer'
        }
      },
      [\`\${componentCls}-select\`]: {
        display: 'inline-block'
      },
      [\`\${componentCls}-disabled\`]: {
        color: colorTextDisabled,
        cursor: 'not-allowed'
      }
    })
  };
};
// ============================== Export ==============================
/* harmony default export */ var upload_style = ((0,genComponentStyleHook/* default */.Z)('Upload', token => {
  const {
    fontSizeHeading3,
    fontSize,
    lineHeight,
    lineWidth,
    controlHeightLG
  } = token;
  const listItemHeightSM = Math.round(fontSize * lineHeight);
  const uploadToken = (0,statistic/* merge */.TS)(token, {
    uploadThumbnailSize: fontSizeHeading3 * 2,
    uploadProgressOffset: listItemHeightSM / 2 + lineWidth,
    uploadPicCardSize: controlHeightLG * 2.55
  });
  return [upload_style_genBaseStyle(uploadToken), dragger(uploadToken), genPictureStyle(uploadToken), genPictureCardStyle(uploadToken), style_list(uploadToken), style_motion(uploadToken), style_rtl(uploadToken), (0,motion_collapse/* default */.Z)(uploadToken)];
}));
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/Upload.js

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};













const LIST_IGNORE = \`__LIST_IGNORE_\${Date.now()}__\`;
const InternalUpload = (props, ref) => {
  const {
    fileList,
    defaultFileList,
    onRemove,
    showUploadList = true,
    listType = 'text',
    onPreview,
    onDownload,
    onChange,
    onDrop,
    previewFile,
    disabled: customDisabled,
    locale: propLocale,
    iconRender,
    isImageUrl,
    progress,
    prefixCls: customizePrefixCls,
    className,
    type = 'select',
    children,
    style,
    itemRender,
    maxCount,
    data = {},
    multiple = false,
    action = '',
    accept = '',
    supportServerRender = true
  } = props;
  // ===================== Disabled =====================
  const disabled = react.useContext(DisabledContext/* default */.Z);
  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
  const [mergedFileList, setMergedFileList] = (0,useMergedState/* default */.Z)(defaultFileList || [], {
    value: fileList,
    postState: list => list !== null && list !== void 0 ? list : []
  });
  const [dragState, setDragState] = react.useState('drop');
  const upload = react.useRef(null);
   false ? 0 : void 0;
   false ? 0 : void 0;
  // Control mode will auto fill file uid if not provided
  react.useMemo(() => {
    const timestamp = Date.now();
    (fileList || []).forEach((file, index) => {
      if (!file.uid && !Object.isFrozen(file)) {
        file.uid = \`__AUTO__\${timestamp}_\${index}__\`;
      }
    });
  }, [fileList]);
  const onInternalChange = (file, changedFileList, event) => {
    let cloneList = (0,toConsumableArray/* default */.Z)(changedFileList);
    // Cut to match count
    if (maxCount === 1) {
      cloneList = cloneList.slice(-1);
    } else if (maxCount) {
      cloneList = cloneList.slice(0, maxCount);
    }
    // Prevent React18 auto batch since input[upload] trigger process at same time
    // which makes fileList closure problem
    (0,react_dom.flushSync)(() => {
      setMergedFileList(cloneList);
    });
    const changeInfo = {
      file: file,
      fileList: cloneList
    };
    if (event) {
      changeInfo.event = event;
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);
  };
  const mergedBeforeUpload = (file, fileListArgs) => __awaiter(void 0, void 0, void 0, function* () {
    const {
      beforeUpload,
      transformFile
    } = props;
    let parsedFile = file;
    if (beforeUpload) {
      const result = yield beforeUpload(file, fileListArgs);
      if (result === false) {
        return false;
      }
      // Hack for LIST_IGNORE, we add additional info to remove from the list
      delete file[LIST_IGNORE];
      if (result === LIST_IGNORE) {
        Object.defineProperty(file, LIST_IGNORE, {
          value: true,
          configurable: true
        });
        return false;
      }
      if (typeof result === 'object' && result) {
        parsedFile = result;
      }
    }
    if (transformFile) {
      parsedFile = yield transformFile(parsedFile);
    }
    return parsedFile;
  });
  const onBatchStart = batchFileInfoList => {
    // Skip file which marked as \`LIST_IGNORE\`, these file will not add to file list
    const filteredFileInfoList = batchFileInfoList.filter(info => !info.file[LIST_IGNORE]);
    // Nothing to do since no file need upload
    if (!filteredFileInfoList.length) {
      return;
    }
    const objectFileList = filteredFileInfoList.map(info => file2Obj(info.file));
    // Concat new files with prev files
    let newFileList = (0,toConsumableArray/* default */.Z)(mergedFileList);
    objectFileList.forEach(fileObj => {
      // Replace file if exist
      newFileList = updateFileList(fileObj, newFileList);
    });
    objectFileList.forEach((fileObj, index) => {
      // Repeat trigger \`onChange\` event for compatible
      let triggerFileObj = fileObj;
      if (!filteredFileInfoList[index].parsedFile) {
        // \`beforeUpload\` return false
        const {
          originFileObj
        } = fileObj;
        let clone;
        try {
          clone = new File([originFileObj], originFileObj.name, {
            type: originFileObj.type
          });
        } catch (e) {
          clone = new Blob([originFileObj], {
            type: originFileObj.type
          });
          clone.name = originFileObj.name;
          clone.lastModifiedDate = new Date();
          clone.lastModified = new Date().getTime();
        }
        clone.uid = fileObj.uid;
        triggerFileObj = clone;
      } else {
        // Inject \`uploading\` status
        fileObj.status = 'uploading';
      }
      onInternalChange(triggerFileObj, newFileList);
    });
  };
  const onSuccess = (response, file, xhr) => {
    try {
      if (typeof response === 'string') {
        response = JSON.parse(response);
      }
    } catch (e) {
      /* do nothing */
    }
    // removed
    if (!getFileItem(file, mergedFileList)) {
      return;
    }
    const targetItem = file2Obj(file);
    targetItem.status = 'done';
    targetItem.percent = 100;
    targetItem.response = response;
    targetItem.xhr = xhr;
    const nextFileList = updateFileList(targetItem, mergedFileList);
    onInternalChange(targetItem, nextFileList);
  };
  const onProgress = (e, file) => {
    // removed
    if (!getFileItem(file, mergedFileList)) {
      return;
    }
    const targetItem = file2Obj(file);
    targetItem.status = 'uploading';
    targetItem.percent = e.percent;
    const nextFileList = updateFileList(targetItem, mergedFileList);
    onInternalChange(targetItem, nextFileList, e);
  };
  const onError = (error, response, file) => {
    // removed
    if (!getFileItem(file, mergedFileList)) {
      return;
    }
    const targetItem = file2Obj(file);
    targetItem.error = error;
    targetItem.response = response;
    targetItem.status = 'error';
    const nextFileList = updateFileList(targetItem, mergedFileList);
    onInternalChange(targetItem, nextFileList);
  };
  const handleRemove = file => {
    let currentFile;
    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {
      var _a;
      // Prevent removing file
      if (ret === false) {
        return;
      }
      const removedFileList = removeFileItem(file, mergedFileList);
      if (removedFileList) {
        currentFile = Object.assign(Object.assign({}, file), {
          status: 'removed'
        });
        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(item => {
          const matchKey = currentFile.uid !== undefined ? 'uid' : 'name';
          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {
            item.status = 'removed';
          }
        });
        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);
        onInternalChange(currentFile, removedFileList);
      }
    });
  };
  const onFileDrop = e => {
    setDragState(e.type);
    if (e.type === 'drop') {
      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);
    }
  };
  // Test needs
  react.useImperativeHandle(ref, () => ({
    onBatchStart,
    onSuccess,
    onProgress,
    onError,
    fileList: mergedFileList,
    upload: upload.current
  }));
  const {
    getPrefixCls,
    direction
  } = react.useContext(context/* ConfigContext */.E_);
  const prefixCls = getPrefixCls('upload', customizePrefixCls);
  const rcUploadProps = Object.assign(Object.assign({
    onBatchStart,
    onError,
    onProgress,
    onSuccess
  }, props), {
    data,
    multiple,
    action,
    accept,
    supportServerRender,
    prefixCls,
    disabled: mergedDisabled,
    beforeUpload: mergedBeforeUpload,
    onChange: undefined
  });
  delete rcUploadProps.className;
  delete rcUploadProps.style;
  // Remove id to avoid open by label when trigger is hidden
  // !children: https://github.com/ant-design/ant-design/issues/14298
  // disabled: https://github.com/ant-design/ant-design/issues/16478
  //           https://github.com/ant-design/ant-design/issues/24197
  if (!children || mergedDisabled) {
    delete rcUploadProps.id;
  }
  const [wrapSSR, hashId] = upload_style(prefixCls);
  const renderUploadList = (button, buttonVisible) => showUploadList ? /*#__PURE__*/react.createElement(LocaleReceiver/* default */.Z, {
    componentName: "Upload",
    defaultLocale: en_US/* default.Upload */.Z.Upload
  }, contextLocale => {
    const {
      showRemoveIcon,
      showPreviewIcon,
      showDownloadIcon,
      removeIcon,
      previewIcon,
      downloadIcon
    } = typeof showUploadList === 'boolean' ? {} : showUploadList;
    return /*#__PURE__*/react.createElement(upload_UploadList, {
      prefixCls: prefixCls,
      listType: listType,
      items: mergedFileList,
      previewFile: previewFile,
      onPreview: onPreview,
      onDownload: onDownload,
      onRemove: handleRemove,
      showRemoveIcon: !mergedDisabled && showRemoveIcon,
      showPreviewIcon: showPreviewIcon,
      showDownloadIcon: showDownloadIcon,
      removeIcon: removeIcon,
      previewIcon: previewIcon,
      downloadIcon: downloadIcon,
      iconRender: iconRender,
      locale: Object.assign(Object.assign({}, contextLocale), propLocale),
      isImageUrl: isImageUrl,
      progress: progress,
      appendAction: button,
      appendActionVisible: buttonVisible,
      itemRender: itemRender
    });
  }) : button;
  const rtlCls = {
    [\`\${prefixCls}-rtl\`]: direction === 'rtl'
  };
  if (type === 'drag') {
    const dragCls = classnames_default()(prefixCls, {
      [\`\${prefixCls}-drag\`]: true,
      [\`\${prefixCls}-drag-uploading\`]: mergedFileList.some(file => file.status === 'uploading'),
      [\`\${prefixCls}-drag-hover\`]: dragState === 'dragover',
      [\`\${prefixCls}-disabled\`]: mergedDisabled,
      [\`\${prefixCls}-rtl\`]: direction === 'rtl'
    }, hashId);
    return wrapSSR( /*#__PURE__*/react.createElement("span", {
      className: classnames_default()(\`\${prefixCls}-wrapper\`, rtlCls, className, hashId)
    }, /*#__PURE__*/react.createElement("div", {
      className: dragCls,
      onDrop: onFileDrop,
      onDragOver: onFileDrop,
      onDragLeave: onFileDrop,
      style: style
    }, /*#__PURE__*/react.createElement(rc_upload_es, Object.assign({}, rcUploadProps, {
      ref: upload,
      className: \`\${prefixCls}-btn\`
    }), /*#__PURE__*/react.createElement("div", {
      className: \`\${prefixCls}-drag-container\`
    }, children))), renderUploadList()));
  }
  const uploadButtonCls = classnames_default()(prefixCls, \`\${prefixCls}-select\`, {
    [\`\${prefixCls}-disabled\`]: mergedDisabled
  });
  const renderUploadButton = uploadButtonStyle => /*#__PURE__*/react.createElement("div", {
    className: uploadButtonCls,
    style: uploadButtonStyle
  }, /*#__PURE__*/react.createElement(rc_upload_es, Object.assign({}, rcUploadProps, {
    ref: upload
  })));
  const uploadButton = renderUploadButton(children ? undefined : {
    display: 'none'
  });
  if (listType === 'picture-card') {
    return wrapSSR( /*#__PURE__*/react.createElement("span", {
      className: classnames_default()(\`\${prefixCls}-wrapper\`, \`\${prefixCls}-picture-card-wrapper\`, rtlCls, className, hashId)
    }, renderUploadList(uploadButton, !!children)));
  }
  return wrapSSR( /*#__PURE__*/react.createElement("span", {
    className: classnames_default()(\`\${prefixCls}-wrapper\`, rtlCls, className, hashId)
  }, uploadButton, renderUploadList()));
};
const Upload_Upload = /*#__PURE__*/react.forwardRef(InternalUpload);
if (false) {}
/* harmony default export */ var upload_Upload = (Upload_Upload);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/Dragger.js
var Dragger_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};


const Dragger = /*#__PURE__*/react.forwardRef((_a, ref) => {
  var {
      style,
      height
    } = _a,
    restProps = Dragger_rest(_a, ["style", "height"]);
  return /*#__PURE__*/react.createElement(upload_Upload, Object.assign({
    ref: ref
  }, restProps, {
    type: "drag",
    style: Object.assign(Object.assign({}, style), {
      height
    })
  }));
});
if (false) {}
/* harmony default export */ var upload_Dragger = (Dragger);
;// CONCATENATED MODULE: ./node_modules/antd/es/upload/index.js


const es_upload_Upload = upload_Upload;
es_upload_Upload.Dragger = upload_Dragger;
es_upload_Upload.LIST_IGNORE = LIST_IGNORE;
/* harmony default export */ var es_upload = (es_upload_Upload);
// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/findDOMNode.js
var findDOMNode = __webpack_require__(34203);
;// CONCATENATED MODULE: ./node_modules/@rc-component/mutate-observer/es/wapper.js






var DomWrapper = /*#__PURE__*/function (_React$Component) {
  (0,inherits/* default */.Z)(DomWrapper, _React$Component);

  var _super = (0,createSuper/* default */.Z)(DomWrapper);

  function DomWrapper() {
    (0,classCallCheck/* default */.Z)(this, DomWrapper);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(DomWrapper, [{
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return DomWrapper;
}(react.Component);

/* harmony default export */ var wapper = (DomWrapper);
;// CONCATENATED MODULE: ./node_modules/@rc-component/mutate-observer/es/index.js






var defOptions = {
  subtree: true,
  childList: true,
  attributeFilter: ['style', 'class']
};

var MutateObserver = function MutateObserver(props) {
  var children = props.children,
      _props$options = props.options,
      options = _props$options === void 0 ? defOptions : _props$options,
      _props$onMutate = props.onMutate,
      onMutate = _props$onMutate === void 0 ? function () {} : _props$onMutate;
  var callback = (0,useEvent/* default */.Z)(onMutate);
  var wrapperRef = (0,react.useRef)(null);
  var elementRef = react.useRef(null);
  var canRef = /*#__PURE__*/react.isValidElement(children) && (0,es_ref/* supportRef */.Yr)(children);
  var originRef = canRef ? children === null || children === void 0 ? void 0 : children.ref : null;
  var mergedRef = react.useMemo(function () {
    return (0,es_ref/* composeRef */.sQ)(originRef, elementRef);
  }, [originRef, elementRef]);
  (0,react.useEffect)(function () {
    if (!(0,canUseDom/* default */.Z)()) {
      return;
    }

    var instance;
    var currentElement = (0,findDOMNode/* default */.Z)(originRef === null || originRef === void 0 ? void 0 : originRef.current) || (0,findDOMNode/* default */.Z)(wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current);

    if (currentElement && 'MutationObserver' in window) {
      instance = new MutationObserver(callback);
      instance.observe(currentElement, options);
    }

    return function () {
      var _instance, _instance2;

      (_instance = instance) === null || _instance === void 0 ? void 0 : _instance.takeRecords();
      (_instance2 = instance) === null || _instance2 === void 0 ? void 0 : _instance2.disconnect();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [options, originRef]);

  if (!children) {
    if (false) {}

    return null;
  }

  return /*#__PURE__*/react.createElement(wapper, {
    ref: wrapperRef
  }, canRef ? /*#__PURE__*/react.cloneElement(children, {
    ref: mergedRef
  }) : children);
};

/* harmony default export */ var mutate_observer_es = (MutateObserver);
;// CONCATENATED MODULE: ./node_modules/antd/es/watermark/utils.js
/** converting camel-cased strings to be lowercase and link it with Separato */
function toLowercaseSeparator(key) {
  return key.replace(/([A-Z])/g, '-$1').toLowerCase();
}
function getStyleStr(style) {
  return Object.keys(style).map(key => \`\${toLowercaseSeparator(key)}: \${style[key]};\`).join(' ');
}
/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */
function getPixelRatio() {
  return window.devicePixelRatio || 1;
}
/** Rotate with the watermark as the center point */
function rotateWatermark(ctx, rotateX, rotateY, rotate) {
  ctx.translate(rotateX, rotateY);
  ctx.rotate(Math.PI / 180 * Number(rotate));
  ctx.translate(-rotateX, -rotateY);
}
/** Whether to re-render the watermark */
const reRendering = (mutation, watermarkElement) => {
  let flag = false;
  // Whether to delete the watermark node
  if (mutation.removedNodes.length) {
    flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);
  }
  // Whether the watermark dom property value has been modified
  if (mutation.type === 'attributes' && mutation.target === watermarkElement) {
    flag = true;
  }
  return flag;
};
;// CONCATENATED MODULE: ./node_modules/antd/es/watermark/index.js




/**
 * Base size of the canvas, 1 for parallel layout and 2 for alternate layout
 * Only alternate layout is currently supported
 */
const BaseSize = 2;
const FontGap = 3;
const Watermark = props => {
  var _a, _b;
  const {
    /**
     * The antd content layer zIndex is basically below 10
     * https://github.com/ant-design/ant-design/blob/6192403b2ce517c017f9e58a32d58774921c10cd/components/style/themes/default.less#L335
     */
    zIndex = 9,
    rotate = -22,
    width,
    height,
    image,
    content,
    font = {},
    style,
    className,
    gap = [100, 100],
    offset,
    children
  } = props;
  const {
    color = 'rgba(0,0,0,.15)',
    fontSize = 16,
    fontWeight = 'normal',
    fontStyle = 'normal',
    fontFamily = 'sans-serif'
  } = font;
  const [gapX, gapY] = gap;
  const gapXCenter = gapX / 2;
  const gapYCenter = gapY / 2;
  const offsetLeft = (_a = offset === null || offset === void 0 ? void 0 : offset[0]) !== null && _a !== void 0 ? _a : gapXCenter;
  const offsetTop = (_b = offset === null || offset === void 0 ? void 0 : offset[1]) !== null && _b !== void 0 ? _b : gapYCenter;
  const getMarkStyle = () => {
    const markStyle = {
      zIndex,
      position: 'absolute',
      left: 0,
      top: 0,
      width: '100%',
      height: '100%',
      pointerEvents: 'none',
      backgroundRepeat: 'repeat'
    };
    /** Calculate the style of the offset */
    let positionLeft = offsetLeft - gapXCenter;
    let positionTop = offsetTop - gapYCenter;
    if (positionLeft > 0) {
      markStyle.left = \`\${positionLeft}px\`;
      markStyle.width = \`calc(100% - \${positionLeft}px)\`;
      positionLeft = 0;
    }
    if (positionTop > 0) {
      markStyle.top = \`\${positionTop}px\`;
      markStyle.height = \`calc(100% - \${positionTop}px)\`;
      positionTop = 0;
    }
    markStyle.backgroundPosition = \`\${positionLeft}px \${positionTop}px\`;
    return markStyle;
  };
  const containerRef = (0,react.useRef)(null);
  const watermarkRef = (0,react.useRef)();
  const stopObservation = (0,react.useRef)(false);
  const destroyWatermark = () => {
    if (watermarkRef.current) {
      watermarkRef.current.remove();
      watermarkRef.current = undefined;
    }
  };
  const appendWatermark = (base64Url, markWidth) => {
    var _a;
    if (containerRef.current && watermarkRef.current) {
      stopObservation.current = true;
      watermarkRef.current.setAttribute('style', getStyleStr(Object.assign(Object.assign({}, getMarkStyle()), {
        backgroundImage: \`url('\${base64Url}')\`,
        backgroundSize: \`\${(gapX + markWidth) * BaseSize}px\`
      })));
      (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.append(watermarkRef.current);
      // Delayed execution
      setTimeout(() => {
        stopObservation.current = false;
      });
    }
  };
  /**
   * Get the width and height of the watermark. The default values are as follows
   * Image: [120, 64]; Content: It's calculated by content;
   */
  const getMarkSize = ctx => {
    let defaultWidth = 120;
    let defaultHeight = 64;
    if (!image && ctx.measureText) {
      ctx.font = \`\${Number(fontSize)}px \${fontFamily}\`;
      const contents = Array.isArray(content) ? content : [content];
      const widths = contents.map(item => ctx.measureText(item).width);
      defaultWidth = Math.ceil(Math.max.apply(Math, (0,toConsumableArray/* default */.Z)(widths)));
      defaultHeight = Number(fontSize) * contents.length + (contents.length - 1) * FontGap;
    }
    return [width !== null && width !== void 0 ? width : defaultWidth, height !== null && height !== void 0 ? height : defaultHeight];
  };
  const fillTexts = (ctx, drawX, drawY, drawWidth, drawHeight) => {
    const ratio = getPixelRatio();
    const mergedFontSize = Number(fontSize) * ratio;
    ctx.font = \`\${fontStyle} normal \${fontWeight} \${mergedFontSize}px/\${drawHeight}px \${fontFamily}\`;
    ctx.fillStyle = color;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.translate(drawWidth / 2, 0);
    const contents = Array.isArray(content) ? content : [content];
    contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {
      ctx.fillText(item !== null && item !== void 0 ? item : '', drawX, drawY + index * (mergedFontSize + FontGap * ratio));
    });
  };
  const renderWatermark = () => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (ctx) {
      if (!watermarkRef.current) {
        watermarkRef.current = document.createElement('div');
      }
      const ratio = getPixelRatio();
      const [markWidth, markHeight] = getMarkSize(ctx);
      const canvasWidth = (gapX + markWidth) * ratio;
      const canvasHeight = (gapY + markHeight) * ratio;
      canvas.setAttribute('width', \`\${canvasWidth * BaseSize}px\`);
      canvas.setAttribute('height', \`\${canvasHeight * BaseSize}px\`);
      const drawX = gapX * ratio / 2;
      const drawY = gapY * ratio / 2;
      const drawWidth = markWidth * ratio;
      const drawHeight = markHeight * ratio;
      const rotateX = (drawWidth + gapX * ratio) / 2;
      const rotateY = (drawHeight + gapY * ratio) / 2;
      /** Alternate drawing parameters */
      const alternateDrawX = drawX + canvasWidth;
      const alternateDrawY = drawY + canvasHeight;
      const alternateRotateX = rotateX + canvasWidth;
      const alternateRotateY = rotateY + canvasHeight;
      ctx.save();
      rotateWatermark(ctx, rotateX, rotateY, rotate);
      if (image) {
        const img = new Image();
        img.onload = () => {
          ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
          /** Draw interleaved pictures after rotation */
          ctx.restore();
          rotateWatermark(ctx, alternateRotateX, alternateRotateY, rotate);
          ctx.drawImage(img, alternateDrawX, alternateDrawY, drawWidth, drawHeight);
          appendWatermark(canvas.toDataURL(), markWidth);
        };
        img.crossOrigin = 'anonymous';
        img.referrerPolicy = 'no-referrer';
        img.src = image;
      } else {
        fillTexts(ctx, drawX, drawY, drawWidth, drawHeight);
        /** Fill the interleaved text after rotation */
        ctx.restore();
        rotateWatermark(ctx, alternateRotateX, alternateRotateY, rotate);
        fillTexts(ctx, alternateDrawX, alternateDrawY, drawWidth, drawHeight);
        appendWatermark(canvas.toDataURL(), markWidth);
      }
    }
  };
  const onMutate = mutations => {
    if (stopObservation.current) {
      return;
    }
    mutations.forEach(mutation => {
      if (reRendering(mutation, watermarkRef.current)) {
        destroyWatermark();
        renderWatermark();
      }
    });
  };
  (0,react.useEffect)(renderWatermark, [rotate, zIndex, width, height, image, content, color, fontSize, fontWeight, fontStyle, fontFamily, gapX, gapY, offsetLeft, offsetTop]);
  return /*#__PURE__*/react.createElement(mutate_observer_es, {
    onMutate: onMutate
  }, /*#__PURE__*/react.createElement("div", {
    ref: containerRef,
    className: className,
    style: Object.assign({
      position: 'relative'
    }, style)
  }, children));
};
if (false) {}
/* harmony default export */ var watermark = (Watermark);
// EXTERNAL MODULE: ./node_modules/antd/es/qrcode/index.js + 2 modules
var qrcode = __webpack_require__(28267);
// EXTERNAL MODULE: ./node_modules/antd/es/version/index.js + 1 modules
var version = __webpack_require__(67159);
;// CONCATENATED MODULE: ./node_modules/antd/es/index.js





































































//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///88466
`)}}]);
