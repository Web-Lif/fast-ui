(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[52],{"8yLC":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var react_spaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("X0wg");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return react_spaces__WEBPACK_IMPORTED_MODULE_0__; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI4eUxDLmpzIiwic291cmNlc0NvbnRlbnQiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8yLC\n')},KtZj:function(module,exports,__webpack_require__){"use strict";eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== 'undefined' ? window : this, function () {\n  // Make sure it does not throw in a SSR (Server Side Rendering) situation\n  if (typeof window === \"undefined\") {\n    return null;\n  } // https://github.com/Semantic-Org/Semantic-UI/issues/3855\n  // https://github.com/marcj/css-element-queries/issues/257\n\n\n  var globalWindow = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')(); // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n  // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n  // would generate too many unnecessary events.\n\n  var requestAnimationFrame = globalWindow.requestAnimationFrame || globalWindow.mozRequestAnimationFrame || globalWindow.webkitRequestAnimationFrame || function (fn) {\n    return globalWindow.setTimeout(fn, 20);\n  };\n\n  var cancelAnimationFrame = globalWindow.cancelAnimationFrame || globalWindow.mozCancelAnimationFrame || globalWindow.webkitCancelAnimationFrame || function (timer) {\n    globalWindow.clearTimeout(timer);\n  };\n  /**\n   * Iterate over each of the provided element(s).\n   *\n   * @param {HTMLElement|HTMLElement[]} elements\n   * @param {Function}                  callback\n   */\n\n\n  function forEachElement(elements, callback) {\n    var elementsType = Object.prototype.toString.call(elements);\n    var isCollectionTyped = '[object Array]' === elementsType || '[object NodeList]' === elementsType || '[object HTMLCollection]' === elementsType || '[object Object]' === elementsType || 'undefined' !== typeof jQuery && elements instanceof jQuery //jquery\n    || 'undefined' !== typeof Elements && elements instanceof Elements //mootools\n    ;\n    var i = 0,\n        j = elements.length;\n\n    if (isCollectionTyped) {\n      for (; i < j; i++) {\n        callback(elements[i]);\n      }\n    } else {\n      callback(elements);\n    }\n  }\n  /**\n  * Get element size\n  * @param {HTMLElement} element\n  * @returns {Object} {width, height}\n  */\n\n\n  function getElementSize(element) {\n    if (!element.getBoundingClientRect) {\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      };\n    }\n\n    var rect = element.getBoundingClientRect();\n    return {\n      width: Math.round(rect.width),\n      height: Math.round(rect.height)\n    };\n  }\n  /**\n   * Apply CSS styles to element.\n   *\n   * @param {HTMLElement} element\n   * @param {Object} style\n   */\n\n\n  function setStyle(element, style) {\n    Object.keys(style).forEach(function (key) {\n      element.style[key] = style[key];\n    });\n  }\n  /**\n   * Class for dimension change detection.\n   *\n   * @param {Element|Element[]|Elements|jQuery} element\n   * @param {Function} callback\n   *\n   * @constructor\n   */\n\n\n  var ResizeSensor = function ResizeSensor(element, callback) {\n    //Is used when checking in reset() only for invisible elements\n    var lastAnimationFrameForInvisibleCheck = 0;\n    /**\n     *\n     * @constructor\n     */\n\n    function EventQueue() {\n      var q = [];\n\n      this.add = function (ev) {\n        q.push(ev);\n      };\n\n      var i, j;\n\n      this.call = function (sizeInfo) {\n        for (i = 0, j = q.length; i < j; i++) {\n          q[i].call(this, sizeInfo);\n        }\n      };\n\n      this.remove = function (ev) {\n        var newQueue = [];\n\n        for (i = 0, j = q.length; i < j; i++) {\n          if (q[i] !== ev) newQueue.push(q[i]);\n        }\n\n        q = newQueue;\n      };\n\n      this.length = function () {\n        return q.length;\n      };\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     * @param {Function}    resized\n     */\n\n\n    function attachResizeEvent(element, resized) {\n      if (!element) return;\n\n      if (element.resizedAttached) {\n        element.resizedAttached.add(resized);\n        return;\n      }\n\n      element.resizedAttached = new EventQueue();\n      element.resizedAttached.add(resized);\n      element.resizeSensor = document.createElement('div');\n      element.resizeSensor.dir = 'ltr';\n      element.resizeSensor.className = 'resize-sensor';\n      var style = {\n        pointerEvents: 'none',\n        position: 'absolute',\n        left: '0px',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        overflow: 'hidden',\n        zIndex: '-1',\n        visibility: 'hidden',\n        maxWidth: '100%'\n      };\n      var styleChild = {\n        position: 'absolute',\n        left: '0px',\n        top: '0px',\n        transition: '0s'\n      };\n      setStyle(element.resizeSensor, style);\n      var expand = document.createElement('div');\n      expand.className = 'resize-sensor-expand';\n      setStyle(expand, style);\n      var expandChild = document.createElement('div');\n      setStyle(expandChild, styleChild);\n      expand.appendChild(expandChild);\n      var shrink = document.createElement('div');\n      shrink.className = 'resize-sensor-shrink';\n      setStyle(shrink, style);\n      var shrinkChild = document.createElement('div');\n      setStyle(shrinkChild, styleChild);\n      setStyle(shrinkChild, {\n        width: '200%',\n        height: '200%'\n      });\n      shrink.appendChild(shrinkChild);\n      element.resizeSensor.appendChild(expand);\n      element.resizeSensor.appendChild(shrink);\n      element.appendChild(element.resizeSensor);\n      var computedStyle = window.getComputedStyle(element);\n      var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n\n      if ('absolute' !== position && 'relative' !== position && 'fixed' !== position && 'sticky' !== position) {\n        element.style.position = 'relative';\n      }\n\n      var dirty = false; //last request animation frame id used in onscroll event\n\n      var rafId = 0;\n      var size = getElementSize(element);\n      var lastWidth = 0;\n      var lastHeight = 0;\n      var initialHiddenCheck = true;\n      lastAnimationFrameForInvisibleCheck = 0;\n\n      var resetExpandShrink = function resetExpandShrink() {\n        var width = element.offsetWidth;\n        var height = element.offsetHeight;\n        expandChild.style.width = width + 10 + 'px';\n        expandChild.style.height = height + 10 + 'px';\n        expand.scrollLeft = width + 10;\n        expand.scrollTop = height + 10;\n        shrink.scrollLeft = width + 10;\n        shrink.scrollTop = height + 10;\n      };\n\n      var reset = function reset() {\n        // Check if element is hidden\n        if (initialHiddenCheck) {\n          var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n\n          if (invisible) {\n            // Check in next frame\n            if (!lastAnimationFrameForInvisibleCheck) {\n              lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function () {\n                lastAnimationFrameForInvisibleCheck = 0;\n                reset();\n              });\n            }\n\n            return;\n          } else {\n            // Stop checking\n            initialHiddenCheck = false;\n          }\n        }\n\n        resetExpandShrink();\n      };\n\n      element.resizeSensor.resetSensor = reset;\n\n      var onResized = function onResized() {\n        rafId = 0;\n        if (!dirty) return;\n        lastWidth = size.width;\n        lastHeight = size.height;\n\n        if (element.resizedAttached) {\n          element.resizedAttached.call(size);\n        }\n      };\n\n      var onScroll = function onScroll() {\n        size = getElementSize(element);\n        dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n        if (dirty && !rafId) {\n          rafId = requestAnimationFrame(onResized);\n        }\n\n        reset();\n      };\n\n      var addEvent = function addEvent(el, name, cb) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + name, cb);\n        } else {\n          el.addEventListener(name, cb);\n        }\n      };\n\n      addEvent(expand, 'scroll', onScroll);\n      addEvent(shrink, 'scroll', onScroll); // Fix for custom Elements and invisible elements\n\n      lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function () {\n        lastAnimationFrameForInvisibleCheck = 0;\n        reset();\n      });\n    }\n\n    forEachElement(element, function (elem) {\n      attachResizeEvent(elem, callback);\n    });\n\n    this.detach = function (ev) {\n      // clean up the unfinished animation frame to prevent a potential endless requestAnimationFrame of reset\n      if (!lastAnimationFrameForInvisibleCheck) {\n        cancelAnimationFrame(lastAnimationFrameForInvisibleCheck);\n        lastAnimationFrameForInvisibleCheck = 0;\n      }\n\n      ResizeSensor.detach(element, ev);\n    };\n\n    this.reset = function () {\n      element.resizeSensor.resetSensor();\n    };\n  };\n\n  ResizeSensor.reset = function (element) {\n    forEachElement(element, function (elem) {\n      elem.resizeSensor.resetSensor();\n    });\n  };\n\n  ResizeSensor.detach = function (element, ev) {\n    forEachElement(element, function (elem) {\n      if (!elem) return;\n\n      if (elem.resizedAttached && typeof ev === \"function\") {\n        elem.resizedAttached.remove(ev);\n        if (elem.resizedAttached.length()) return;\n      }\n\n      if (elem.resizeSensor) {\n        if (elem.contains(elem.resizeSensor)) {\n          elem.removeChild(elem.resizeSensor);\n        }\n\n        delete elem.resizeSensor;\n        delete elem.resizedAttached;\n      }\n    });\n  };\n\n  if (typeof MutationObserver !== \"undefined\") {\n    var observer = new MutationObserver(function (mutations) {\n      for (var i in mutations) {\n        if (mutations.hasOwnProperty(i)) {\n          var items = mutations[i].addedNodes;\n\n          for (var j = 0; j < items.length; j++) {\n            if (items[j].resizeSensor) {\n              ResizeSensor.reset(items[j]);\n            }\n          }\n        }\n      }\n    });\n    document.addEventListener(\"DOMContentLoaded\", function (event) {\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n\n  return ResizeSensor;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///KtZj\n")},X0wg:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorType", function() { return AnchorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bottom", function() { return Bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomResizable", function() { return BottomResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenterType", function() { return CenterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Centered", function() { return Centered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenteredVertically", function() { return CenteredVertically; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Custom", function() { return Custom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layer", function() { return Layer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Left", function() { return Left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftResizable", function() { return LeftResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positioned", function() { return Positioned; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeHandlePlacement", function() { return ResizeHandlePlacement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeType", function() { return ResizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Right", function() { return Right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightResizable", function() { return RightResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Top", function() { return Top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopResizable", function() { return TopResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPort", function() { return ViewPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anchoredProps", function() { return anchoredProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizableProps", function() { return resizableProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCurrentSpace", function() { return useCurrentSpace; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("h9Sk");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === \'undefined\') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName(\'head\')[0];\n  var style = document.createElement(\'style\');\n  style.type = \'text/css\';\n\n  if (insertAt === \'top\') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = ".spaces-centered-vertically {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n}\\r\\n\\r\\n.spaces-centered {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n\\ttext-align: center;\\r\\n}\\r\\n\\r\\n.spaces-clearfix:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tdisplay: table;\\r\\n\\tclear: both;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9999;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:before {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tz-index: 2;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9998;\\r\\n\\tpointer-events: all;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left:before {\\r\\n\\tcursor: w-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right:before {\\r\\n\\tcursor: e-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top:before {\\r\\n\\tcursor: n-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom:before {\\r\\n\\tcursor: s-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-space {\\r\\n\\toverflow: hidden;\\r\\n\\ttouch-action: none;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-resizing .spaces-space {\\r\\n\\ttransition: none !important;\\r\\n}\\r\\n\\r\\n.spaces-space .spaces-space-inner {\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-space.scrollable .spaces-space-inner {\\r\\n\\toverflow: auto;\\r\\n\\ttouch-action: auto;\\r\\n}\\r\\n";\nstyleInject(css_248z);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Type;\n\n(function (Type) {\n  Type["ViewPort"] = "viewport";\n  Type["Fixed"] = "fixed";\n  Type["Fill"] = "fill";\n  Type["Positioned"] = "positioned";\n  Type["Anchored"] = "anchored";\n  Type["Custom"] = "custom";\n})(Type || (Type = {}));\n\nvar AnchorType;\n\n(function (AnchorType) {\n  AnchorType["Left"] = "anchor-left";\n  AnchorType["Right"] = "anchor-right";\n  AnchorType["Top"] = "anchor-top";\n  AnchorType["Bottom"] = "anchor-bottom";\n})(AnchorType || (AnchorType = {}));\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";\n  Orientation[Orientation["Vertical"] = 1] = "Vertical";\n})(Orientation || (Orientation = {}));\n\nvar ResizeType;\n\n(function (ResizeType) {\n  ResizeType["Left"] = "resize-left";\n  ResizeType["Right"] = "resize-right";\n  ResizeType["Top"] = "resize-top";\n  ResizeType["Bottom"] = "resize-bottom";\n  ResizeType["TopLeft"] = "resize-topleft";\n  ResizeType["TopRight"] = "resize-topright";\n  ResizeType["BottomLeft"] = "resize-bottomleft";\n  ResizeType["BottomRight"] = "resize-bottomright";\n})(ResizeType || (ResizeType = {}));\n\nvar ResizeHandlePlacement;\n\n(function (ResizeHandlePlacement) {\n  ResizeHandlePlacement["OverlayInside"] = "overlay-inside";\n  ResizeHandlePlacement["Inside"] = "inside";\n  ResizeHandlePlacement["OverlayBoundary"] = "overlay-boundary";\n})(ResizeHandlePlacement || (ResizeHandlePlacement = {}));\n\nvar CenterType;\n\n(function (CenterType) {\n  CenterType["None"] = "none";\n  CenterType["Vertical"] = "vertical";\n  CenterType["HorizontalVertical"] = "horizontalVertical";\n})(CenterType || (CenterType = {}));\n\nvar MoveEvent;\n\n(function (MoveEvent) {\n  MoveEvent["Mouse"] = "mousemove";\n  MoveEvent["Touch"] = "touchmove";\n})(MoveEvent || (MoveEvent = {}));\n\nvar EndEvent;\n\n(function (EndEvent) {\n  EndEvent["Mouse"] = "mouseup";\n  EndEvent["Touch"] = "touchend";\n})(EndEvent || (EndEvent = {}));\n\nfunction shortuuid() {\n  var firstPart = Math.random() * 46656 | 0;\n  var secondPart = Math.random() * 46656 | 0;\n  return ("000" + firstPart.toString(36)).slice(-3) + ("000" + secondPart.toString(36)).slice(-3);\n}\n\nfunction getSizeString(size) {\n  return typeof size === "string" ? size : size + "px";\n}\n\nfunction css(size, dontAddCalc) {\n  if (size.size === 0 && size.adjusted.length === 0 && size.resized === 0) {\n    return "0px";\n  }\n\n  var parts = [];\n\n  if (size.size !== undefined) {\n    parts.push(getSizeString(size.size));\n  }\n\n  size.adjusted.forEach(function (l) {\n    return parts.push(getSizeString(l));\n  });\n\n  if (size.resized !== 0) {\n    parts.push(getSizeString(size.resized));\n  }\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  if (parts.length === 1) {\n    return parts[0];\n  }\n\n  if (dontAddCalc) {\n    return parts.join(" + ");\n  }\n\n  return "calc(" + parts.join(" + ") + ")";\n}\n\nfunction coalesce() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.find(function (x) {\n    return x !== null && x !== undefined;\n  });\n}\n\nfunction adjustmentsEqual(item1, item2) {\n  if (item1.length !== item2.length) {\n    return false;\n  }\n\n  for (var i = 0, len = item1.length; i < len; i++) {\n    if (item1[i] !== item2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction throttle(callback, limit) {\n  var wait = false; // Initially, we\'re not waiting\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // We return a throttled function\n\n\n    if (!wait) {\n      // If we\'re not waiting\n      callback.apply(void 0, args); // Execute users function\n\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nfunction styleDefinition(space) {\n  var cssElements = [];\n  var style = {\n    position: space.position,\n    left: css(space.left),\n    top: css(space.top),\n    right: css(space.right),\n    bottom: css(space.bottom),\n    width: css(space.width),\n    height: css(space.height),\n    zIndex: space.zIndex\n  };\n  var cssString = [];\n\n  if (style.position) {\n    cssString.push("position: " + style.position + ";");\n  }\n\n  if (style.left) {\n    cssString.push("left: " + style.left + ";");\n  }\n\n  if (style.top) {\n    cssString.push("top: " + style.top + ";");\n  }\n\n  if (style.right) {\n    cssString.push("right: " + style.right + ";");\n  }\n\n  if (style.bottom) {\n    cssString.push("bottom: " + style.bottom + ";");\n  }\n\n  if (style.width) {\n    cssString.push("width: " + style.width + ";");\n  }\n\n  if (style.height) {\n    cssString.push("height: " + style.height + ";");\n  }\n\n  if (style.zIndex) {\n    cssString.push("z-index: " + style.zIndex + ";");\n  }\n\n  if (space.allowOverflow) {\n    cssString.push("overflow: visible;");\n  }\n\n  if (cssString.length > 0) {\n    cssElements.push("#" + space.id + " { " + cssString.join(" ") + " }");\n  }\n\n  if (space.scrollable) {\n    cssElements.push("#" + space.id + " > .spaces-space-inner { overflow: auto; touch-action: auto; }");\n  }\n\n  var handleOffset = 0;\n  var touchHandleSize = space.touchHandleSize / 2 - space.handleSize / 2;\n\n  switch (space.handlePlacement) {\n    case ResizeHandlePlacement.Inside:\n    case ResizeHandlePlacement.OverlayInside:\n      handleOffset = space.handleSize;\n\n      if (space.type === Type.Positioned) {\n        handleOffset = 0;\n      }\n\n      break;\n\n    case ResizeHandlePlacement.OverlayBoundary:\n      handleOffset = space.handleSize / 2;\n      break;\n  }\n\n  if (space.type === Type.Positioned) {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { left: calc(" + css(space.left, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { top: calc(" + css(space.top, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n\n      if (space.width.size) {\n        cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + space.handleSize + "px + " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mr { right: calc(" + css(space.right, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      if (space.height.size) {\n        cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + space.handleSize + "px + " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mb { bottom: calc(" + css(space.bottom, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  } else {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { right: calc(" + css(space.right, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-ml:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { bottom: calc(" + css(space.bottom, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  }\n\n  return cssElements.join(" ");\n}\n\nfunction updateStyleDefinition(space) {\n  var definition = styleDefinition(space);\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    if (existing.innerHTML !== definition) {\n      existing.innerHTML = definition;\n    }\n  } else {\n    var newStyle = document.createElement("style");\n    newStyle.id = "style_" + space.id;\n    newStyle.innerHTML = definition;\n    document.head.appendChild(newStyle);\n  }\n}\n\nfunction removeStyleDefinition(space) {\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    document.head.removeChild(existing);\n  }\n}\n\nvar RESIZE_THROTTLE = 0;\n\nfunction isHorizontal(resizeType) {\n  return resizeType === ResizeType.Left || resizeType === ResizeType.Right;\n}\n\nfunction createAdjuster(resizeType, space, originalX, originalY) {\n  var dimensionToAdjust = function () {\n    if (resizeType === ResizeType.Left) {\n      return space.left;\n    } else if (resizeType === ResizeType.Right) {\n      return space.right;\n    } else if (resizeType === ResizeType.Bottom) {\n      return space.bottom;\n    } else if (resizeType === ResizeType.Top) {\n      return space.top;\n    } else {\n      throw new Error("unknown resize type");\n    }\n  }();\n\n  var negater = resizeType === ResizeType.Right || resizeType === ResizeType.Bottom ? function (val) {\n    return -val;\n  } : function (val) {\n    return val;\n  };\n  var candidateOppositeDimensionToAdjust = isHorizontal(resizeType) ? space.width : space.height;\n  var offset1 = dimensionToAdjust.resized;\n  var offset2 = candidateOppositeDimensionToAdjust.resized;\n  var rect = space.element.getBoundingClientRect();\n  var size = isHorizontal(resizeType) ? rect.width : rect.height;\n  var minimumAdjust = coalesce(space.minimumSize, 20) - size + 0;\n  var maximumAdjust = space.maximumSize ? space.maximumSize - size + 0 : undefined;\n  return function (currentX, currentY) {\n    var adjustment = (isHorizontal(resizeType) ? originalX : originalY) - (isHorizontal(resizeType) ? currentX : currentY);\n    var dimensionResized = negater(adjustment);\n\n    if (space.type !== Type.Positioned) {\n      dimensionResized = Math.max(negater(adjustment), minimumAdjust);\n\n      if (dimensionResized < minimumAdjust) {\n        dimensionResized = minimumAdjust;\n      }\n\n      if (typeof maximumAdjust === "number") {\n        if (dimensionResized > maximumAdjust) {\n          dimensionResized = maximumAdjust;\n        }\n      }\n    }\n\n    if (dimensionToAdjust.size !== undefined) {\n      dimensionToAdjust.resized = negater(-adjustment) + offset1;\n\n      if (candidateOppositeDimensionToAdjust.size) {\n        candidateOppositeDimensionToAdjust.resized = negater(adjustment) + offset2;\n      }\n    } else {\n      candidateOppositeDimensionToAdjust.resized = dimensionResized + offset2;\n    }\n  };\n}\n\nfunction createResize(store) {\n  return {\n    startResize: function startResize(e, resizeType, space, endEvent, moveEvent, getCoords, onResizeEnd) {\n      if (space.onResizeStart) {\n        var result = space.onResizeStart(resizeType);\n\n        if (typeof result === "boolean" && !result) {\n          return;\n        }\n      }\n\n      var originalCoords = getCoords(e);\n      var adjuster = createAdjuster(resizeType, space, originalCoords.x, originalCoords.y);\n      space.resizing = true;\n      space.updateParent();\n      var lastX = 0;\n      var lastY = 0;\n      var moved = false;\n\n      var resize = function resize(currentX, currentY) {\n        adjuster(currentX, currentY);\n        store.updateStyles(space);\n      };\n\n      var withPreventDefault = function withPreventDefault(e) {\n        moved = true;\n        var newCoords = getCoords(e);\n        lastX = newCoords.x;\n        lastY = newCoords.y;\n        e.preventDefault();\n        throttle(function (x, y) {\n          return window.requestAnimationFrame(function () {\n            return resize(x, y);\n          });\n        }, RESIZE_THROTTLE)(lastX, lastY);\n      };\n\n      var removeListener = function removeListener() {\n        if (moved) {\n          resize(lastX, lastY);\n        }\n\n        window.removeEventListener(moveEvent, withPreventDefault);\n        window.removeEventListener(endEvent, removeListener);\n        space.resizing = false;\n        space.updateParent();\n        var resizeEnd = onResizeEnd || space.onResizeEnd;\n\n        if (resizeEnd) {\n          var currentRect = space.element.getBoundingClientRect();\n          resizeEnd(Math.floor(isHorizontal(resizeType) ? currentRect.width : currentRect.height), currentRect, resizeType);\n        }\n      };\n\n      window.addEventListener(moveEvent, withPreventDefault);\n      window.addEventListener(endEvent, removeListener);\n    }\n  };\n}\n\nfunction createDrag(store) {\n  function onMove(space, originalX, originalY, x, y) {\n    var adjustmentX = -(originalX - x);\n    var adjustmentY = -(originalY - y);\n    space.left.adjusted = [adjustmentX];\n    space.top.adjusted = [adjustmentY];\n\n    if (space.right.size) {\n      space.right.adjusted = [-adjustmentX];\n    }\n\n    if (space.bottom.size) {\n      space.bottom.adjusted = [-adjustmentY];\n    }\n\n    store.updateStyles(space);\n  }\n\n  return {\n    startDrag: function startDrag(e, space, endEvent, moveEvent, getCoords, onDragEnd) {\n      if (space.element) {\n        var coords = getCoords(e);\n        var adjustedLeft = space.left.adjusted.length === 0 ? 0 : space.left.adjusted[0];\n        var adjustedTop = space.top.adjusted.length === 0 ? 0 : space.top.adjusted[0];\n        var originalMouseX_1 = coords.x - adjustedLeft;\n        var originalMouseY_1 = coords.y - adjustedTop;\n        var lastX_1 = 0;\n        var lastY_1 = 0;\n        var moved_1 = false;\n\n        var mouseMove_1 = function mouseMove_1(x, y) {\n          return onMove(space, originalMouseX_1, originalMouseY_1, x, y);\n        };\n\n        var throttledMouseMove_1 = throttle(mouseMove_1, 5);\n\n        var withPreventDefault_1 = function withPreventDefault_1(e) {\n          moved_1 = true;\n          var newCoords = getCoords(e);\n          lastX_1 = newCoords.x;\n          lastY_1 = newCoords.y;\n          e.preventDefault();\n          throttledMouseMove_1(lastX_1, lastY_1);\n        };\n\n        var removeListener_1 = function removeListener_1() {\n          var _a;\n\n          if (moved_1) {\n            mouseMove_1(lastX_1, lastY_1);\n          }\n\n          window.removeEventListener(moveEvent, withPreventDefault_1);\n          window.removeEventListener(endEvent, removeListener_1);\n\n          if (onDragEnd) {\n            var parentInfo = space.parentId && ((_a = store.getSpace(space.parentId)) === null || _a === void 0 ? void 0 : _a.element.getBoundingClientRect()) || {\n              left: 0,\n              top: 0,\n              right: 0,\n              bottom: 0,\n              width: 0,\n              height: 0\n            };\n\n            var info = function (_a) {\n              var left = _a.left,\n                  top = _a.top,\n                  right = _a.right,\n                  bottom = _a.bottom,\n                  width = _a.width,\n                  height = _a.height;\n              return {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n                width: width,\n                height: height\n              };\n            }(space.element.getBoundingClientRect());\n\n            onDragEnd(_assign(_assign({}, info), {\n              left: info.left - parentInfo.left,\n              top: info.top - parentInfo.top\n            }), moved_1);\n          }\n        };\n\n        window.addEventListener(moveEvent, withPreventDefault_1);\n        window.addEventListener(endEvent, removeListener_1);\n      }\n    }\n  };\n}\n\nvar spaceDefaults = {\n  id: "",\n  zIndex: 0,\n  scrollable: false,\n  resizing: false,\n  allowOverflow: false,\n  centerContent: "none",\n  dimension: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  },\n  handleSize: 5,\n  touchHandleSize: 5,\n  handlePlacement: ResizeHandlePlacement.OverlayInside,\n  adjustLeft: function adjustLeft() {\n    return false;\n  },\n  adjustRight: function adjustRight() {\n    return false;\n  },\n  adjustTop: function adjustTop() {\n    return false;\n  },\n  adjustBottom: function adjustBottom() {\n    return false;\n  },\n  adjustEdge: function adjustEdge() {\n    return false;\n  },\n  anchoredChildren: function anchoredChildren() {\n    return [];\n  }\n};\nvar anchorTypes = [AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom];\n\nfunction getPosition(type) {\n  if (type === Type.ViewPort) {\n    return "fixed";\n  }\n\n  if (type === Type.Fixed) {\n    return "relative";\n  }\n\n  return "absolute";\n}\n\nfunction getOrientation(anchor) {\n  return anchor === AnchorType.Bottom || anchor === AnchorType.Top ? Orientation.Vertical : Orientation.Horizontal;\n}\n\nfunction anchorUpdates(space) {\n  return [{\n    anchor: AnchorType.Left,\n    update: space.adjustLeft\n  }, {\n    anchor: AnchorType.Top,\n    update: space.adjustTop\n  }, {\n    anchor: AnchorType.Right,\n    update: space.adjustRight\n  }, {\n    anchor: AnchorType.Bottom,\n    update: space.adjustBottom\n  }];\n}\n\nfunction sizeInfoDefault(size) {\n  return {\n    size: size,\n    adjusted: [],\n    resized: 0\n  };\n}\n\nfunction createStore() {\n  var spaces = [];\n\n  var setSpaces = function setSpaces(newSpaces) {\n    spaces = newSpaces;\n  };\n\n  var getSpace = function getSpace(id) {\n    return getSpaces().find(function (s) {\n      return s.id === id;\n    });\n  };\n\n  var getSpaces = function getSpaces() {\n    return spaces;\n  };\n\n  var recalcSpaces = function recalcSpaces(parent) {\n    var onlyUnique = function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    };\n\n    var addDefaultOrders = function addDefaultOrders(spaces) {\n      var result = [];\n      anchorTypes.forEach(function (t) {\n        var anchoredSpaces = spaces.filter(function (s) {\n          return s.anchor !== undefined && s.anchor === t;\n        });\n        var zIndices = anchoredSpaces.map(function (s) {\n          return s.zIndex;\n        }).filter(onlyUnique);\n        zIndices.forEach(function (i) {\n          var anchoredSpacesInLayer = anchoredSpaces.filter(function (s) {\n            return s.zIndex === i;\n          });\n          var orderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order !== undefined;\n          });\n          var unorderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order === undefined;\n          });\n          var maxOrder = orderedSpaces.length > 0 ? orderedSpaces.map(function (a) {\n            return a.order;\n          }).reduce(function (a, b) {\n            return Math.max(a, b);\n          }) : 0;\n          result = __spreadArray(__spreadArray([], result, true), __spreadArray(__spreadArray([], orderedSpaces, true), unorderedSpaces.map(function (c, idx) {\n            return _assign(_assign({}, c), {\n              order: maxOrder + idx + 1\n            });\n          }), true), true);\n        });\n      });\n      return __spreadArray(__spreadArray([], result, true), spaces.filter(function (s) {\n        return s.anchor === undefined;\n      }), true);\n    };\n\n    var orderedSpaces = addDefaultOrders(parent.children);\n\n    var _loop_1 = function _loop_1() {\n      var space = orderedSpaces[i];\n      var changed = false;\n\n      if (space.type === Type.Fill) {\n        anchorUpdates(space).forEach(function (info) {\n          var adjusted = [];\n          var anchoredSpaces = parent.anchoredChildren(orderedSpaces, info.anchor, space.zIndex);\n          anchoredSpaces.forEach(function (as) {\n            if (as.orientation === Orientation.Vertical) {\n              if (as.height.size) {\n                adjusted.push(as.height.size);\n              }\n\n              if (as.height.resized) {\n                adjusted.push(as.height.resized);\n              }\n            } else {\n              if (as.width.size) {\n                adjusted.push(as.width.size);\n              }\n\n              if (as.width.resized) {\n                adjusted.push(as.width.resized);\n              }\n            }\n          });\n\n          if (info.update(adjusted)) {\n            changed = true;\n          }\n        });\n      } else if (space.type === Type.Anchored) {\n        var adjusted_1 = [];\n        var anchoredSpaces = parent.anchoredChildren(orderedSpaces, space.anchor, space.zIndex).filter(function (s) {\n          return s.id !== space.id && s.order <= space.order;\n        });\n        anchoredSpaces.forEach(function (as) {\n          if (as.orientation === Orientation.Vertical) {\n            if (as.height.size) {\n              adjusted_1.push(as.height.size);\n            }\n\n            if (as.height.resized) {\n              adjusted_1.push(as.height.resized);\n            }\n          } else {\n            if (as.width.size) {\n              adjusted_1.push(as.width.size);\n            }\n\n            if (as.width.resized) {\n              adjusted_1.push(as.width.resized);\n            }\n          }\n        });\n\n        if (space.adjustEdge(adjusted_1)) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        updateStyleDefinition(space);\n      }\n    };\n\n    for (var i = 0, len = orderedSpaces.length; i < len; i++) {\n      _loop_1();\n    }\n  };\n\n  var store = {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    addSpace: function addSpace(space) {\n      getSpaces().push(space);\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children.push(space);\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    removeSpace: function removeSpace(space) {\n      setSpaces(getSpaces().filter(function (s) {\n        return s.id !== space.id;\n      }));\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children = parentSpace.children.filter(function (s) {\n            return s.id !== space.id;\n          });\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      removeStyleDefinition(space);\n    },\n    updateStyles: function updateStyles(space) {\n      if (space.parentId) {\n        var parent_1 = getSpace(space.parentId);\n\n        if (parent_1) {\n          recalcSpaces(parent_1);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    updateSpace: function updateSpace(space, props) {\n      var type = props.type,\n          anchor = props.anchor,\n          order = props.order,\n          zIndex = props.zIndex,\n          scrollable = props.scrollable,\n          position = props.position,\n          centerContent = props.centerContent,\n          minimumSize = props.minimumSize,\n          maximumSize = props.maximumSize,\n          handleSize = props.handleSize,\n          touchHandleSize = props.touchHandleSize,\n          handlePlacement = props.handlePlacement,\n          allowOverflow = props.allowOverflow;\n      var canResizeLeft = position && position.leftResizable || false;\n      var canResizeRight = position && position.rightResizable || false;\n      var canResizeTop = position && position.topResizable || false;\n      var canResizeBottom = position && position.bottomResizable || false;\n      var changed = false;\n\n      if (space.type !== type) {\n        space.type = type;\n        space.position = getPosition(type);\n        changed = true;\n      }\n\n      if (space.anchor !== anchor) {\n        space.anchor = anchor;\n        space.orientation = getOrientation(anchor);\n        changed = true;\n\n        if (type === Type.Anchored) {\n          if (anchor === AnchorType.Left) {\n            space.adjustEdge = space.adjustLeft;\n          } else if (anchor === AnchorType.Top) {\n            space.adjustEdge = space.adjustTop;\n          } else if (anchor === AnchorType.Right) {\n            space.adjustEdge = space.adjustRight;\n          } else if (anchor === AnchorType.Bottom) {\n            space.adjustEdge = space.adjustBottom;\n          }\n        }\n      }\n\n      if (space.left.size !== (position && position.left)) {\n        space.left.size = position && position.left;\n        space.left.resized = 0;\n        space.left.adjusted = [];\n        changed = true;\n      }\n\n      if (space.right.size !== (position && position.right)) {\n        space.right.size = position && position.right;\n        space.right.resized = 0;\n        space.right.adjusted = [];\n        changed = true;\n      }\n\n      if (space.top.size !== (position && position.top)) {\n        space.top.size = position && position.top;\n        space.top.resized = 0;\n        space.top.adjusted = [];\n        changed = true;\n      }\n\n      if (space.bottom.size !== (position && position.bottom)) {\n        space.bottom.size = position && position.bottom;\n        space.bottom.resized = 0;\n        space.bottom.adjusted = [];\n        changed = true;\n      }\n\n      if (space.width.size !== (position && position.width)) {\n        space.width.size = position && position.width;\n        space.width.resized = 0;\n        space.width.adjusted = [];\n        changed = true;\n      }\n\n      if (space.height.size !== (position && position.height)) {\n        space.height.size = position && position.height;\n        space.height.resized = 0;\n        space.height.adjusted = [];\n        changed = true;\n      }\n\n      if (coalesce(space.order, 0) !== coalesce(order, 0)) {\n        space.order = coalesce(order, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.zIndex, 0) !== coalesce(zIndex, 0)) {\n        space.zIndex = coalesce(zIndex, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.scrollable, false) !== coalesce(scrollable, false)) {\n        space.scrollable = coalesce(scrollable, false);\n        changed = true;\n      }\n\n      if (space.minimumSize !== minimumSize) {\n        space.minimumSize = minimumSize;\n        changed = true;\n      }\n\n      if (space.maximumSize !== maximumSize) {\n        space.maximumSize = maximumSize;\n        changed = true;\n      }\n\n      if (coalesce(space.centerContent, CenterType.None) !== coalesce(centerContent, CenterType.None)) {\n        space.centerContent = coalesce(centerContent, CenterType.None);\n        changed = true;\n      }\n\n      if (space.handleSize !== handleSize) {\n        space.handleSize = handleSize || spaceDefaults.handleSize;\n        changed = true;\n      }\n\n      if (space.touchHandleSize !== touchHandleSize) {\n        space.touchHandleSize = touchHandleSize || spaceDefaults.touchHandleSize;\n        changed = true;\n      }\n\n      if (space.handlePlacement !== handlePlacement) {\n        space.handlePlacement = handlePlacement || spaceDefaults.handlePlacement;\n        changed = true;\n      }\n\n      if (space.canResizeBottom !== canResizeBottom) {\n        space.canResizeBottom = canResizeBottom;\n        changed = true;\n      }\n\n      if (space.canResizeTop !== canResizeTop) {\n        space.canResizeTop = canResizeTop;\n        changed = true;\n      }\n\n      if (space.canResizeLeft !== canResizeLeft) {\n        space.canResizeLeft = canResizeLeft;\n        changed = true;\n      }\n\n      if (space.canResizeRight !== canResizeRight) {\n        space.canResizeRight = canResizeRight;\n        changed = true;\n      }\n\n      if (space.allowOverflow !== allowOverflow) {\n        space.allowOverflow = allowOverflow || spaceDefaults.allowOverflow;\n        changed = true;\n      }\n\n      if (changed) {\n        if (space.parentId) {\n          var parentSpace = getSpace(space.parentId);\n\n          if (parentSpace) {\n            recalcSpaces(parentSpace);\n          }\n        }\n\n        updateStyleDefinition(space);\n      }\n    },\n    createSpace: function createSpace() {\n      return {};\n    },\n    startMouseResize: function startMouseResize() {\n      return null;\n    },\n    startTouchResize: function startTouchResize() {\n      return null;\n    },\n    startMouseDrag: function startMouseDrag() {\n      return null;\n    },\n    startTouchDrag: function startTouchDrag() {\n      return null;\n    }\n  };\n  var resize = createResize(store);\n  var drag = createDrag(store);\n\n  store.createSpace = function (parentId, props, update) {\n    var position = props.position,\n        anchor = props.anchor,\n        type = props.type,\n        commonProps = __rest(props, ["position", "anchor", "type"]);\n\n    var canResizeLeft = position && position.rightResizable || false;\n    var canResizeRight = position && position.leftResizable || false;\n    var canResizeTop = position && position.bottomResizable || false;\n    var canResizeBottom = position && position.topResizable || false;\n\n    var newSpace = _assign(_assign(_assign({}, spaceDefaults), commonProps), {\n      store: store,\n      update: update,\n      updateParent: function updateParent() {\n        if (parentId) {\n          var parentSpace = store.getSpace(parentId);\n\n          if (parentSpace) {\n            parentSpace.update();\n          }\n        }\n      },\n      parentId: parentId,\n      children: [],\n      anchor: anchor,\n      type: type,\n      orientation: getOrientation(anchor),\n      position: getPosition(type),\n      left: sizeInfoDefault(position && position.left),\n      right: sizeInfoDefault(position && position.right),\n      top: sizeInfoDefault(position && position.top),\n      bottom: sizeInfoDefault(position && position.bottom),\n      width: sizeInfoDefault(position && position.width),\n      height: sizeInfoDefault(position && position.height),\n      canResizeLeft: canResizeLeft,\n      canResizeRight: canResizeRight,\n      canResizeTop: canResizeTop,\n      canResizeBottom: canResizeBottom\n    });\n\n    newSpace.anchoredChildren = function (children, anchor, zIndex) {\n      return children.filter(function (s) {\n        return s.type === Type.Anchored && s.anchor === anchor && s.zIndex === zIndex;\n      });\n    };\n\n    newSpace.adjustLeft = function (adjusted) {\n      if (adjustmentsEqual(newSpace.left.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.left.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustRight = function (adjusted) {\n      if (adjustmentsEqual(newSpace.right.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.right.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustTop = function (adjusted) {\n      if (adjustmentsEqual(newSpace.top.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.top.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustBottom = function (adjusted) {\n      if (adjustmentsEqual(newSpace.bottom.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.bottom.adjusted = adjusted;\n      return true;\n    };\n\n    if (type === Type.Anchored) {\n      if (anchor === AnchorType.Left) {\n        newSpace.adjustEdge = newSpace.adjustLeft;\n      } else if (anchor === AnchorType.Top) {\n        newSpace.adjustEdge = newSpace.adjustTop;\n      } else if (anchor === AnchorType.Right) {\n        newSpace.adjustEdge = newSpace.adjustRight;\n      } else if (anchor === AnchorType.Bottom) {\n        newSpace.adjustEdge = newSpace.adjustBottom;\n      }\n    }\n\n    return newSpace;\n  };\n\n  store.startMouseResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startTouchResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startMouseDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onDragEnd);\n  };\n\n  store.startTouchDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onDragEnd);\n  };\n\n  return store;\n} // WORKAROUND for React18 strict mode\n// https://blog.ag-grid.com/avoiding-react-18-double-mount/\n\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  var destroyFunc = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();\n  var effectCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n  var renderAfterCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n\n  var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);\n\n  _a[0];\n  var setVal = _a[1];\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    } // this forces one render after the effect is run\n\n\n    setVal(function (val) {\n      return val + 1;\n    });\n    return function () {\n      // if the comp didn\'t render since the useEffect was called,\n      // we know it\'s the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n\nvar ParentContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar DOMRectContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar LayerContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar OptionsContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"]({});\nvar currentStore = createStore();\nvar commonProps = {\n  id: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  className: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["object"], prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]]),\n  as: prop_types__WEBPACK_IMPORTED_MODULE_2__["any"],\n  centerContent: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([CenterType.None, CenterType.Vertical, CenterType.HorizontalVertical]),\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  scrollable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  trackSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  allowOverflow: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onDoubleClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n};\n\nfunction useForceUpdate() {\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](0),\n      setTick = _a[1];\n\n  var update = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useSpace(props) {\n  var store = currentStore;\n  var update = useForceUpdate();\n  var parent = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var debug = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](OptionsContext).debug;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useState"](props.id || "s" + shortuuid())[0];\n  var elementRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n  var resizeSensor = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](),\n      domRect = _a[0],\n      setDomRect = _a[1];\n\n  var space = store.getSpace(spaceId);\n\n  if (debug) {\n    console.table(store.getSpaces());\n  }\n\n  var parsedProps = _assign(_assign({}, props), {\n    id: spaceId,\n    zIndex: coalesce(props.zIndex, layer)\n  });\n\n  if (!space) {\n    space = store.createSpace(parent, parsedProps, update);\n    store.addSpace(space);\n  } else {\n    store.updateSpace(space, parsedProps);\n  }\n\n  var resizeHandles = useSpaceResizeHandles(store, space);\n  useEffectOnce(function () {\n    var rect = elementRef.current.getBoundingClientRect();\n    space.dimension = _assign(_assign({}, rect), {\n      left: Math.floor(rect.left),\n      top: Math.floor(rect.top),\n      right: Math.floor(rect.right),\n      bottom: Math.floor(rect.bottom),\n      width: Math.floor(rect.width),\n      height: Math.floor(rect.height),\n      x: Math.floor(rect.x),\n      y: Math.floor(rect.y)\n    });\n    setDomRect(space.dimension);\n\n    if (props.trackSize) {\n      resizeSensor.current = new css_element_queries__WEBPACK_IMPORTED_MODULE_1__["ResizeSensor"](elementRef.current, function (size) {\n        space.dimension = _assign(_assign({}, rect), {\n          width: Math.floor(size.width),\n          height: Math.floor(size.height)\n        });\n        setDomRect(space.dimension);\n      });\n    }\n\n    return function () {\n      resizeSensor.current && resizeSensor.current.detach();\n      store.removeSpace(space);\n    };\n  });\n  return {\n    space: space,\n    resizeHandles: resizeHandles,\n    domRect: domRect,\n    elementRef: elementRef\n  };\n}\n\nfunction useSpaceResizeHandles(store, space) {\n  var mouseHandles = [];\n\n  if (space.canResizeLeft) {\n    mouseHandles.push({\n      id: space.id + "-ml",\n      key: "left",\n      className: "spaces-resize-handle resize-left",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Left, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Left, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeRight) {\n    mouseHandles.push({\n      id: space.id + "-mr",\n      key: "right",\n      className: "spaces-resize-handle resize-right",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Right, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Right, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeTop) {\n    mouseHandles.push({\n      id: space.id + "-mt",\n      key: "top",\n      className: "spaces-resize-handle resize-top",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Top, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Top, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeBottom) {\n    mouseHandles.push({\n      id: space.id + "-mb",\n      key: "bottom",\n      className: "spaces-resize-handle resize-bottom",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Bottom, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Bottom, space, event);\n      }\n    });\n  }\n\n  return {\n    mouseHandles: mouseHandles\n  };\n}\n\nfunction useCurrentSpace() {\n  var store = currentStore;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var space = spaceId ? store.getSpace(spaceId) : undefined;\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var onMouseDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startMouseDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onTouchDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startTouchDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onForceUpdate = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    return space ? store.updateStyles(space) : null;\n  }, [spaceId]);\n  var defaults = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n\n  var size = _assign(_assign({}, defaults), domRect);\n\n  return {\n    size: size,\n    layer: layer || 0,\n    startMouseDrag: onMouseDrag,\n    startTouchDrag: onTouchDrag,\n    forceUpdate: onForceUpdate\n  };\n}\n\nvar Centered = function Centered(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered"\n  }, props.children);\n};\n\nvar CenteredVertically = function CenteredVertically(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered-vertically"\n  }, props.children);\n};\n\nfunction applyCentering(children, centerType) {\n  switch (centerType) {\n    case CenterType.Vertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](CenteredVertically, null, children);\n\n    case CenterType.HorizontalVertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Centered, null, children);\n  }\n\n  return children;\n}\n\nvar Space =\n/** @class */\nfunction (_super) {\n  __extends(Space, _super);\n\n  function Space() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Space.prototype.render = function () {\n    return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SpaceInner, _assign({}, this.props, {\n      wrapperInstance: this\n    }));\n  };\n\n  return Space;\n}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\nvar SpaceInner = function SpaceInner(props) {\n  if (!props.id && !props.wrapperInstance["_react_spaces_uniqueid"]) {\n    props.wrapperInstance["_react_spaces_uniqueid"] = "s" + shortuuid();\n  }\n\n  var style = props.style,\n      className = props.className,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      onMouseDown = props.onMouseDown,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseMove = props.onMouseMove,\n      onTouchStart = props.onTouchStart,\n      onTouchMove = props.onTouchMove,\n      onTouchEnd = props.onTouchEnd,\n      children = props.children,\n      handleRender = props.handleRender;\n  var events = {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseMove: onMouseMove,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n\n  var _a = useSpace(_assign(_assign({}, props), {\n    id: props.id || props.wrapperInstance["_react_spaces_uniqueid"]\n  })),\n      space = _a.space,\n      domRect = _a.domRect,\n      elementRef = _a.elementRef,\n      resizeHandles = _a.resizeHandles;\n\n  useEffectOnce(function () {\n    space.element = elementRef.current;\n  });\n  var userClasses = className ? className.split(" ").map(function (c) {\n    return c.trim();\n  }) : [];\n\n  var outerClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], ["spaces-space", space.children.find(function (s) {\n    return s.resizing;\n  }) ? "spaces-resizing" : undefined], false), [space.type === Type.Fixed ? "spaces-fixedsize-layout" : undefined], false), [space.type === Type.ViewPort ? "spaces-fullpage-layout" : undefined], false), userClasses.map(function (c) {\n    return c + "-container";\n  }), true).filter(function (c) {\n    return c;\n  });\n\n  var innerClasses = __spreadArray(__spreadArray([], ["spaces-space-inner"], false), userClasses, true);\n\n  var innerStyle = style;\n\n  if (space.handlePlacement === ResizeHandlePlacement.Inside) {\n    innerStyle = _assign(_assign({}, style), {\n      left: space.anchor === AnchorType.Right ? space.handleSize : undefined,\n      right: space.anchor === AnchorType.Left ? space.handleSize : undefined,\n      top: space.anchor === AnchorType.Bottom ? space.handleSize : undefined,\n      bottom: space.anchor === AnchorType.Top ? space.handleSize : undefined\n    });\n  }\n\n  var centeredContent = applyCentering(children, props.centerContent);\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, resizeHandles.mouseHandles.map(function (handleProps) {\n    return (handleRender === null || handleRender === void 0 ? void 0 : handleRender(handleProps)) || react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", _assign({}, handleProps));\n  }), react__WEBPACK_IMPORTED_MODULE_0__["createElement"](props.as || "div", _assign({\n    id: space.id,\n    ref: elementRef,\n    className: outerClasses.join(" ")\n  }, events), react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: innerClasses.join(" "),\n    style: innerStyle\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ParentContext.Provider, {\n    value: space.id\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: undefined\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DOMRectContext.Provider, {\n    value: domRect\n  }, centeredContent))))));\n};\n\nvar resizableProps = _assign(_assign({}, commonProps), {\n  size: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired,\n  order: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  touchHandleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handlePlacement: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([ResizeHandlePlacement.Inside, ResizeHandlePlacement.OverlayBoundary, ResizeHandlePlacement.OverlayInside]),\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  minimumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  maximumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  onResizeStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onResizeEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n});\n\nvar anchoredProps = _assign(_assign({}, resizableProps), {\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"]\n});\n\nvar LeftResizable = function LeftResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nLeftResizable.propTypes = resizableProps;\n\nvar Left = function Left(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nLeft.propTypes = anchoredProps;\n\nvar TopResizable = function TopResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nTopResizable.propTypes = resizableProps;\n\nvar Top = function Top(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nTop.propTypes = anchoredProps;\n\nvar RightResizable = function RightResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nRightResizable.propTypes = resizableProps;\n\nvar Right = function Right(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nRight.propTypes = anchoredProps;\n\nvar BottomResizable = function BottomResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nBottomResizable.propTypes = resizableProps;\n\nvar Bottom = function Bottom(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nBottom.propTypes = anchoredProps;\n\nvar customProps = _assign(_assign({}, anchoredProps), {\n  type: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([Type.Positioned, Type.Fill, Type.Anchored]),\n  anchor: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom]),\n  anchorSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizeTypes: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n\nvar Custom = function Custom(_a) {\n  var children = _a.children,\n      type = _a.type,\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      anchorSize = _a.anchorSize,\n      anchor = _a.anchor,\n      resizable = _a.resizable,\n      resizeTypes = _a.resizeTypes,\n      props = __rest(_a, ["children", "type", "left", "top", "right", "bottom", "width", "height", "anchorSize", "anchor", "resizable", "resizeTypes"]);\n\n  var position;\n  type = type || Type.Fill;\n\n  if (type === Type.Positioned) {\n    position = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      leftResizable: resizeTypes && resizeTypes.includes(ResizeType.Left),\n      topResizable: resizeTypes && resizeTypes.includes(ResizeType.Top),\n      rightResizable: resizeTypes && resizeTypes.includes(ResizeType.Right),\n      bottomResizable: resizeTypes && resizeTypes.includes(ResizeType.Bottom)\n    };\n  } else {\n    if (anchor === AnchorType.Left) {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        rightResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Right) {\n      position = {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        leftResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Top) {\n      position = {\n        left: 0,\n        top: 0,\n        right: 0,\n        height: anchorSize,\n        bottomResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Bottom) {\n      position = {\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: anchorSize,\n        topResizable: resizable\n      };\n      type = Type.Anchored;\n    } else {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n      type = Type.Fill;\n    }\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: type,\n    anchor: anchor,\n    position: position\n  }), children);\n};\n\nCustom.propTypes = customProps;\n\nvar Fill = function Fill(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Fill,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    }\n  }), props.children);\n};\n\nFill.propTypes = commonProps;\n\nvar Fixed = function Fixed(_a) {\n  var width = _a.width,\n      height = _a.height,\n      children = _a.children,\n      commonProps = __rest(_a, ["width", "height", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Fixed,\n    position: {\n      width: width,\n      height: height\n    }\n  }), children);\n};\n\nFixed.propTypes = _assign(_assign({}, commonProps), {\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired\n});\n\nvar Layer = function Layer(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: props.zIndex\n  }, props.children);\n};\n\nLayer.propTypes = {\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"].isRequired\n};\n\nvar Positioned = function Positioned(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      resizable = _a.resizable,\n      props = __rest(_a, ["left", "top", "right", "bottom", "width", "height", "resizable"]);\n\n  var resizeTypes = resizable || [];\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Positioned,\n    position: {\n      left: left,\n      leftResizable: resizeTypes.includes(ResizeType.Left),\n      top: top,\n      topResizable: resizeTypes.includes(ResizeType.Top),\n      right: right,\n      rightResizable: resizeTypes.includes(ResizeType.Right),\n      bottom: bottom,\n      bottomResizable: resizeTypes.includes(ResizeType.Bottom),\n      width: width,\n      height: height\n    }\n  }), props.children);\n};\n\nPositioned.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n/**\r\n * @deprecated use useCurrentSpace() hook instead\r\n */\n\nvar Info = function Info(props) {\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n\n  if (domRect) {\n    return props.children(domRect);\n  }\n\n  return props.children({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  });\n};\n\nvar ViewPort = function ViewPort(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      children = _a.children,\n      commonProps = __rest(_a, ["left", "top", "right", "bottom", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.ViewPort,\n    position: {\n      left: left || 0,\n      top: top || 0,\n      right: right || 0,\n      bottom: bottom || 0\n    }\n  }), children);\n};\n\nViewPort.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]])\n});\n\nvar Options = function Options(_a) {\n  var children = _a.children,\n      opts = __rest(_a, ["children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](OptionsContext.Provider, {\n    value: opts\n  }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///X0wg\n')},b8VC:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8yLC");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * title: \u57fa\u7840\n * desc: \u5178\u578b\u7684\u9875\u9762\u5e03\u5c40\u3002\n */\n\n\n\nvar Simple = function Simple() {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Fixed, {\n    height: 500\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Fill, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Left, {\n    style: {\n      backgroundColor: \'#3ba0e9\'\n    },\n    size: "20%"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Fill, {\n    style: {\n      backgroundColor: \'#108ee9\'\n    }\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Right, {\n    style: {\n      backgroundColor: \'#3ba0e9\'\n    },\n    size: "20%"\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Top, {\n    size: 64,\n    style: {\n      backgroundColor: \'#7dbcea\'\n    }\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_weblif_fast_ui__WEBPACK_IMPORTED_MODULE_0__[/* Layout */ "a"].Bottom, {\n    size: 64,\n    style: {\n      backgroundColor: \'#7dbcea\'\n    }\n  }));\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (Simple);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0L19fZGVtb19fL3NpbXBsZV9sYXlvdXQudHN4PzZmYzUiXSwibmFtZXMiOlsiU2ltcGxlIiwiYmFja2dyb3VuZENvbG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxNQUFNLEdBQUcsU0FBVEEsTUFBUztFQUFBLG9CQUNYLDJEQUFDLDhEQUFELENBQVEsS0FBUjtJQUFjLE1BQU0sRUFBRTtFQUF0QixnQkFDSSwyREFBQyw4REFBRCxDQUFRLElBQVIscUJBQ0ksMkRBQUMsOERBQUQsQ0FBUSxJQUFSO0lBQ0ksS0FBSyxFQUFFO01BQ0hDLGVBQWUsRUFBRTtJQURkLENBRFg7SUFJSSxJQUFJLEVBQUM7RUFKVCxFQURKLGVBT0ksMkRBQUMsOERBQUQsQ0FBUSxJQUFSO0lBQ0ksS0FBSyxFQUFFO01BQ0hBLGVBQWUsRUFBRTtJQURkO0VBRFgsRUFQSixlQVlJLDJEQUFDLDhEQUFELENBQVEsS0FBUjtJQUNJLEtBQUssRUFBRTtNQUNIQSxlQUFlLEVBQUU7SUFEZCxDQURYO0lBSUksSUFBSSxFQUFDO0VBSlQsRUFaSixDQURKLGVBb0JJLDJEQUFDLDhEQUFELENBQVEsR0FBUjtJQUNJLElBQUksRUFBRSxFQURWO0lBRUksS0FBSyxFQUFFO01BQ0hBLGVBQWUsRUFBRTtJQURkO0VBRlgsRUFwQkosZUEwQkksMkRBQUMsOERBQUQsQ0FBUSxNQUFSO0lBQ0ksSUFBSSxFQUFFLEVBRFY7SUFFSSxLQUFLLEVBQUU7TUFDSEEsZUFBZSxFQUFFO0lBRGQ7RUFGWCxFQTFCSixDQURXO0FBQUEsQ0FBZjs7QUFvQ2VELHFFQUFmIiwiZmlsZSI6ImI4VkMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRpdGxlOiDln7rnoYBcbiAqIGRlc2M6IOWFuOWei+eahOmhtemdouW4g+WxgOOAglxuICovXG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tICdAd2VibGlmL2Zhc3QtdWknO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgU2ltcGxlID0gKCkgPT4gKFxuICAgIDxMYXlvdXQuRml4ZWQgaGVpZ2h0PXs1MDB9PlxuICAgICAgICA8TGF5b3V0LkZpbGw+XG4gICAgICAgICAgICA8TGF5b3V0LkxlZnRcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjM2JhMGU5JyxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIHNpemU9XCIyMCVcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxMYXlvdXQuRmlsbFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMxMDhlZTknLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExheW91dC5SaWdodFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzYmEwZTknLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgc2l6ZT1cIjIwJVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L0xheW91dC5GaWxsPlxuICAgICAgICA8TGF5b3V0LlRvcFxuICAgICAgICAgICAgc2l6ZT17NjR9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM3ZGJjZWEnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPExheW91dC5Cb3R0b21cbiAgICAgICAgICAgIHNpemU9ezY0fVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjN2RiY2VhJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgPC9MYXlvdXQuRml4ZWQ+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBTaW1wbGU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///b8VC\n')},h9Sk:function(module,exports,__webpack_require__){eval('module.exports = {\n  ResizeSensor: __webpack_require__("KtZj"),\n  ElementQueries: __webpack_require__("rnKy")\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWVsZW1lbnQtcXVlcmllcy9pbmRleC5qcz84N2Q0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJSZXNpemVTZW5zb3IiLCJyZXF1aXJlIiwiRWxlbWVudFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7RUFDYkMsWUFBWSxFQUFFQyxtQkFBTyxDQUFDLE1BQUQsQ0FEUjtFQUViQyxjQUFjLEVBQUVELG1CQUFPLENBQUMsTUFBRDtBQUZWLENBQWpCIiwiZmlsZSI6Img5U2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBSZXNpemVTZW5zb3I6IHJlcXVpcmUoJy4vc3JjL1Jlc2l6ZVNlbnNvcicpLFxuICAgIEVsZW1lbnRRdWVyaWVzOiByZXF1aXJlKCcuL3NyYy9FbGVtZW50UXVlcmllcycpXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///h9Sk\n')},rnKy:function(module,exports,__webpack_require__){"use strict";eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(\"KtZj\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {\n  /**\n   *\n   * @type {Function}\n   * @constructor\n   */\n  var ElementQueries = function ElementQueries() {\n    //<style> element with our dynamically created styles\n    var cssStyleElement; //all rules found for element queries\n\n    var allQueries = {}; //association map to identify which selector belongs to a element from the animationstart event.\n\n    var idToSelectorMapping = [];\n    /**\n     *\n     * @param element\n     * @returns {Number}\n     */\n\n    function getEmSize(element) {\n      if (!element) {\n        element = document.documentElement;\n      }\n\n      var fontSize = window.getComputedStyle(element, null).fontSize;\n      return parseFloat(fontSize) || 16;\n    }\n    /**\n     * Get element size\n     * @param {HTMLElement} element\n     * @returns {Object} {width, height}\n     */\n\n\n    function getElementSize(element) {\n      if (!element.getBoundingClientRect) {\n        return {\n          width: element.offsetWidth,\n          height: element.offsetHeight\n        };\n      }\n\n      var rect = element.getBoundingClientRect();\n      return {\n        width: Math.round(rect.width),\n        height: Math.round(rect.height)\n      };\n    }\n    /**\n     *\n     * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n     *\n     * @param {HTMLElement} element\n     * @param {*} value\n     * @returns {*}\n     */\n\n\n    function convertToPx(element, value) {\n      var numbers = value.split(/\\d/);\n      var units = numbers[numbers.length - 1];\n      value = parseFloat(value);\n\n      switch (units) {\n        case \"px\":\n          return value;\n\n        case \"em\":\n          return value * getEmSize(element);\n\n        case \"rem\":\n          return value * getEmSize();\n        // Viewport units!\n        // According to http://quirksmode.org/mobile/tableViewport.html\n        // documentElement.clientWidth/Height gets us the most reliable info\n\n        case \"vw\":\n          return value * document.documentElement.clientWidth / 100;\n\n        case \"vh\":\n          return value * document.documentElement.clientHeight / 100;\n\n        case \"vmin\":\n        case \"vmax\":\n          var vw = document.documentElement.clientWidth / 100;\n          var vh = document.documentElement.clientHeight / 100;\n          var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n          return value * chooser(vw, vh);\n\n        default:\n          return value;\n        // for now, not supporting physical units (since they are just a set number of px)\n        // or ex/ch (getting accurate measurements is hard)\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     * @param {String} id\n     * @constructor\n     */\n\n\n    function SetupInformation(element, id) {\n      this.element = element;\n      var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;\n      var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n      /**\n       * Extracts the computed width/height and sets to min/max- attribute.\n       */\n\n      this.call = function () {\n        // extract current dimensions\n        elementSize = getElementSize(this.element);\n        attrValues = {};\n\n        for (key in allQueries[id]) {\n          if (!allQueries[id].hasOwnProperty(key)) {\n            continue;\n          }\n\n          option = allQueries[id][key];\n          value = convertToPx(this.element, option.value);\n          actualValue = option.property === 'width' ? elementSize.width : elementSize.height;\n          attrName = option.mode + '-' + option.property;\n          attrValue = '';\n\n          if (option.mode === 'min' && actualValue >= value) {\n            attrValue += option.value;\n          }\n\n          if (option.mode === 'max' && actualValue <= value) {\n            attrValue += option.value;\n          }\n\n          if (!attrValues[attrName]) attrValues[attrName] = '';\n\n          if (attrValue && -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')) {\n            attrValues[attrName] += ' ' + attrValue;\n          }\n        }\n\n        for (var k in attributes) {\n          if (!attributes.hasOwnProperty(k)) continue;\n\n          if (attrValues[attributes[k]]) {\n            this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n          } else {\n            this.element.removeAttribute(attributes[k]);\n          }\n        }\n      };\n    }\n    /**\n     * @param {HTMLElement} element\n     * @param {Object}      id\n     */\n\n\n    function setupElement(element, id) {\n      if (!element.elementQueriesSetupInformation) {\n        element.elementQueriesSetupInformation = new SetupInformation(element, id);\n      }\n\n      if (!element.elementQueriesSensor) {\n        element.elementQueriesSensor = new ResizeSensor(element, function () {\n          element.elementQueriesSetupInformation.call();\n        });\n      }\n    }\n    /**\n     * Stores rules to the selector that should be applied once resized.\n     *\n     * @param {String} selector\n     * @param {String} mode min|max\n     * @param {String} property width|height\n     * @param {String} value\n     */\n\n\n    function queueQuery(selector, mode, property, value) {\n      if (typeof allQueries[selector] === 'undefined') {\n        allQueries[selector] = []; // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM\n\n        var id = idToSelectorMapping.length;\n        cssStyleElement.innerHTML += '\\n' + selector + ' {animation: 0.1s element-queries;}';\n        cssStyleElement.innerHTML += '\\n' + selector + ' > .resize-sensor {min-width: ' + id + 'px;}';\n        idToSelectorMapping.push(selector);\n      }\n\n      allQueries[selector].push({\n        mode: mode,\n        property: property,\n        value: value\n      });\n    }\n\n    function getQuery(container) {\n      var query;\n      if (document.querySelectorAll) query = container ? container.querySelectorAll.bind(container) : document.querySelectorAll.bind(document);\n      if (!query && 'undefined' !== typeof $$) query = $$;\n      if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n      if (!query) {\n        throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n      }\n\n      return query;\n    }\n    /**\n     * If animationStart didn't catch a new element in the DOM, we can manually search for it\n     */\n\n\n    function findElementQueriesElements(container) {\n      var query = getQuery(container);\n\n      for (var selector in allQueries) {\n        if (allQueries.hasOwnProperty(selector)) {\n          // find all elements based on the extract query selector from the element query rule\n          var elements = query(selector, container);\n\n          for (var i = 0, j = elements.length; i < j; i++) {\n            setupElement(elements[i], selector);\n          }\n        }\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     */\n\n\n    function attachResponsiveImage(element) {\n      var children = [];\n      var rules = [];\n      var sources = [];\n      var defaultImageId = 0;\n      var lastActiveImage = -1;\n      var loadedImages = [];\n\n      for (var i in element.children) {\n        if (!element.children.hasOwnProperty(i)) continue;\n\n        if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n          children.push(element.children[i]);\n          var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width'); //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n\n          var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n          sources.push(src);\n          var rule = {\n            minWidth: minWidth\n          };\n          rules.push(rule);\n\n          if (!minWidth) {\n            defaultImageId = children.length - 1;\n            element.children[i].style.display = 'block';\n          } else {\n            element.children[i].style.display = 'none';\n          }\n        }\n      }\n\n      lastActiveImage = defaultImageId;\n\n      function check() {\n        var imageToDisplay = false,\n            i;\n\n        for (i in children) {\n          if (!children.hasOwnProperty(i)) continue;\n\n          if (rules[i].minWidth) {\n            if (element.offsetWidth > rules[i].minWidth) {\n              imageToDisplay = i;\n            }\n          }\n        }\n\n        if (!imageToDisplay) {\n          //no rule matched, show default\n          imageToDisplay = defaultImageId;\n        }\n\n        if (lastActiveImage !== imageToDisplay) {\n          //image change\n          if (!loadedImages[imageToDisplay]) {\n            //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n            //no content\n            var image = new Image();\n\n            image.onload = function () {\n              children[imageToDisplay].src = sources[imageToDisplay];\n              children[lastActiveImage].style.display = 'none';\n              children[imageToDisplay].style.display = 'block';\n              loadedImages[imageToDisplay] = true;\n              lastActiveImage = imageToDisplay;\n            };\n\n            image.src = sources[imageToDisplay];\n          } else {\n            children[lastActiveImage].style.display = 'none';\n            children[imageToDisplay].style.display = 'block';\n            lastActiveImage = imageToDisplay;\n          }\n        } else {\n          //make sure for initial check call the .src is set correctly\n          children[imageToDisplay].src = sources[imageToDisplay];\n        }\n      }\n\n      element.resizeSensorInstance = new ResizeSensor(element, check);\n      check();\n    }\n\n    function findResponsiveImages() {\n      var query = getQuery();\n      var elements = query('[data-responsive-image],[responsive-image]');\n\n      for (var i = 0, j = elements.length; i < j; i++) {\n        attachResponsiveImage(elements[i]);\n      }\n    }\n\n    var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n    var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n    /**\n     * @param {String} css\n     */\n\n    function extractQuery(css) {\n      var match, smatch, attrs, attrMatch;\n      css = css.replace(/'/g, '\"');\n\n      while (null !== (match = regex.exec(css))) {\n        smatch = match[1] + match[3];\n        attrs = match[2];\n\n        while (null !== (attrMatch = attrRegex.exec(attrs))) {\n          queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n        }\n      }\n    }\n    /**\n     * @param {CssRule[]|String} rules\n     */\n\n\n    function readRules(rules) {\n      var selector = '';\n\n      if (!rules) {\n        return;\n      }\n\n      if ('string' === typeof rules) {\n        rules = rules.toLowerCase();\n\n        if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n          extractQuery(rules);\n        }\n      } else {\n        for (var i = 0, j = rules.length; i < j; i++) {\n          if (1 === rules[i].type) {\n            selector = rules[i].selectorText || rules[i].cssText;\n\n            if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n              extractQuery(selector);\n            } else if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n              extractQuery(selector);\n            }\n          } else if (4 === rules[i].type) {\n            readRules(rules[i].cssRules || rules[i].rules);\n          } else if (3 === rules[i].type) {\n            if (rules[i].styleSheet.hasOwnProperty(\"cssRules\")) {\n              readRules(rules[i].styleSheet.cssRules);\n            }\n          }\n        }\n      }\n    }\n\n    var defaultCssInjected = false;\n    /**\n     * Searches all css rules and setups the event listener to all elements with element query rules..\n     */\n\n    this.init = function () {\n      var animationStart = 'animationstart';\n\n      if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {\n        animationStart = 'webkitAnimationStart';\n      } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {\n        animationStart = 'mozanimationstart';\n      } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {\n        animationStart = 'oanimationstart';\n      }\n\n      document.body.addEventListener(animationStart, function (e) {\n        var element = e.target;\n        var styles = element && window.getComputedStyle(element, null);\n        var animationName = styles && styles.getPropertyValue('animation-name');\n        var requiresSetup = animationName && -1 !== animationName.indexOf('element-queries');\n\n        if (requiresSetup) {\n          element.elementQueriesSensor = new ResizeSensor(element, function () {\n            if (element.elementQueriesSetupInformation) {\n              element.elementQueriesSetupInformation.call();\n            }\n          });\n          var sensorStyles = window.getComputedStyle(element.resizeSensor, null);\n          var id = sensorStyles.getPropertyValue('min-width');\n          id = parseInt(id.replace('px', ''));\n          setupElement(e.target, idToSelectorMapping[id]);\n        }\n      });\n\n      if (!defaultCssInjected) {\n        cssStyleElement = document.createElement('style');\n        cssStyleElement.type = 'text/css';\n        cssStyleElement.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}'; //safari wants at least one rule in keyframes to start working\n\n        cssStyleElement.innerHTML += '\\n@keyframes element-queries { 0% { visibility: inherit; } }';\n        document.getElementsByTagName('head')[0].appendChild(cssStyleElement);\n        defaultCssInjected = true;\n      }\n\n      for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n        try {\n          if (document.styleSheets[i].href && 0 === document.styleSheets[i].href.indexOf('file://')) {\n            console.warn(\"CssElementQueries: unable to parse local css files, \" + document.styleSheets[i].href);\n          }\n\n          readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n        } catch (e) {}\n      }\n\n      findResponsiveImages();\n    };\n    /**\n     * Go through all collected rules (readRules()) and attach the resize-listener.\n     * Not necessary to call it manually, since we detect automatically when new elements\n     * are available in the DOM. However, sometimes handy for dirty DOM modifications.\n     *\n     * @param {HTMLElement} container only elements of the container are considered (document.body if not set)\n     */\n\n\n    this.findElementQueriesElements = function (container) {\n      findElementQueriesElements(container);\n    };\n\n    this.update = function () {\n      this.init();\n    };\n  };\n\n  ElementQueries.update = function () {\n    ElementQueries.instance.update();\n  };\n  /**\n   * Removes all sensor and elementquery information from the element.\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  ElementQueries.detach = function (element) {\n    if (element.elementQueriesSetupInformation) {\n      //element queries\n      element.elementQueriesSensor.detach();\n      delete element.elementQueriesSetupInformation;\n      delete element.elementQueriesSensor;\n    } else if (element.resizeSensorInstance) {\n      //responsive image\n      element.resizeSensorInstance.detach();\n      delete element.resizeSensorInstance;\n    }\n  };\n\n  ElementQueries.init = function () {\n    if (!ElementQueries.instance) {\n      ElementQueries.instance = new ElementQueries();\n    }\n\n    ElementQueries.instance.init();\n  };\n\n  var domLoaded = function domLoaded(callback) {\n    /* Mozilla, Chrome, Opera */\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', callback, false);\n    }\n    /* Safari, iCab, Konqueror */\n    else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n      var DOMLoadTimer = setInterval(function () {\n        if (/loaded|complete/i.test(document.readyState)) {\n          callback();\n          clearInterval(DOMLoadTimer);\n        }\n      }, 10);\n    }\n    /* Other web browsers */\n    else window.onload = callback;\n  };\n\n  ElementQueries.findElementQueriesElements = function (container) {\n    ElementQueries.instance.findElementQueriesElements(container);\n  };\n\n  ElementQueries.listen = function () {\n    domLoaded(ElementQueries.init);\n  };\n\n  return ElementQueries;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///rnKy\n")}}]);