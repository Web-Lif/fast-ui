(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[9],{"/FUP":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;\n\nvar _flattenNames = __webpack_require__("W3HW");\n\nvar _flattenNames2 = _interopRequireDefault(_flattenNames);\n\nvar _mergeClasses = __webpack_require__("lreK");\n\nvar _mergeClasses2 = _interopRequireDefault(_mergeClasses);\n\nvar _autoprefix = __webpack_require__("KfSR");\n\nvar _autoprefix2 = _interopRequireDefault(_autoprefix);\n\nvar _hover2 = __webpack_require__("VYtm");\n\nvar _hover3 = _interopRequireDefault(_hover2);\n\nvar _active = __webpack_require__("XQvf");\n\nvar _active2 = _interopRequireDefault(_active);\n\nvar _loop2 = __webpack_require__("B5Mt");\n\nvar _loop3 = _interopRequireDefault(_loop2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nexports.hover = _hover3["default"];\nexports.handleHover = _hover3["default"];\nexports.handleActive = _active2["default"];\nexports.loop = _loop3["default"];\n\nvar ReactCSS = exports.ReactCSS = function ReactCSS(classes) {\n  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    activations[_key - 1] = arguments[_key];\n  }\n\n  var activeNames = (0, _flattenNames2["default"])(activations);\n  var merged = (0, _mergeClasses2["default"])(classes, activeNames);\n  return (0, _autoprefix2["default"])(merged);\n};\n\nexports["default"] = ReactCSS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2luZGV4LmpzP2ZjNTUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFjdENTUyIsImxvb3AiLCJoYW5kbGVBY3RpdmUiLCJoYW5kbGVIb3ZlciIsImhvdmVyIiwidW5kZWZpbmVkIiwiX2ZsYXR0ZW5OYW1lcyIsInJlcXVpcmUiLCJfZmxhdHRlbk5hbWVzMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWVyZ2VDbGFzc2VzIiwiX21lcmdlQ2xhc3NlczIiLCJfYXV0b3ByZWZpeCIsIl9hdXRvcHJlZml4MiIsIl9ob3ZlcjIiLCJfaG92ZXIzIiwiX2FjdGl2ZSIsIl9hY3RpdmUyIiwiX2xvb3AyIiwiX2xvb3AzIiwib2JqIiwiX19lc01vZHVsZSIsImNsYXNzZXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYWN0aXZhdGlvbnMiLCJBcnJheSIsIl9rZXkiLCJhY3RpdmVOYW1lcyIsIm1lcmdlZCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFFBQVIsR0FBbUJGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFlBQVIsR0FBdUJKLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQkwsT0FBTyxDQUFDTSxLQUFSLEdBQWdCQyxTQUEvRjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUEzQjs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDSCxhQUFELENBQTNDOztBQUVBLElBQUlJLGFBQWEsR0FBR0gsbUJBQU8sQ0FBQyxNQUFELENBQTNCOztBQUVBLElBQUlJLGNBQWMsR0FBR0Ysc0JBQXNCLENBQUNDLGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUUsV0FBVyxHQUFHTCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSU0sWUFBWSxHQUFHSixzQkFBc0IsQ0FBQ0csV0FBRCxDQUF6Qzs7QUFFQSxJQUFJRSxPQUFPLEdBQUdQLG1CQUFPLENBQUMsTUFBRCxDQUFyQjs7QUFFQSxJQUFJUSxPQUFPLEdBQUdOLHNCQUFzQixDQUFDSyxPQUFELENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR1QsbUJBQU8sQ0FBQyxNQUFELENBQXJCOztBQUVBLElBQUlVLFFBQVEsR0FBR1Isc0JBQXNCLENBQUNPLE9BQUQsQ0FBckM7O0FBRUEsSUFBSUUsTUFBTSxHQUFHWCxtQkFBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsSUFBSVksTUFBTSxHQUFHVixzQkFBc0IsQ0FBQ1MsTUFBRCxDQUFuQzs7QUFFQSxTQUFTVCxzQkFBVCxDQUFnQ1csR0FBaEMsRUFBcUM7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7SUFBRSxXQUFTQTtFQUFYLENBQXJDO0FBQXdEOztBQUUvRnRCLE9BQU8sQ0FBQ00sS0FBUixHQUFnQlcsT0FBTyxXQUF2QjtBQUNBakIsT0FBTyxDQUFDSyxXQUFSLEdBQXNCWSxPQUFPLFdBQTdCO0FBQ0FqQixPQUFPLENBQUNJLFlBQVIsR0FBdUJlLFFBQVEsV0FBL0I7QUFDQW5CLE9BQU8sQ0FBQ0csSUFBUixHQUFla0IsTUFBTSxXQUFyQjs7QUFDQSxJQUFJbkIsUUFBUSxHQUFHRixPQUFPLENBQUNFLFFBQVIsR0FBbUIsU0FBU0EsUUFBVCxDQUFrQnNCLE9BQWxCLEVBQTJCO0VBQzNELEtBQUssSUFBSUMsSUFBSSxHQUFHQyxTQUFTLENBQUNDLE1BQXJCLEVBQTZCQyxXQUFXLEdBQUdDLEtBQUssQ0FBQ0osSUFBSSxHQUFHLENBQVAsR0FBV0EsSUFBSSxHQUFHLENBQWxCLEdBQXNCLENBQXZCLENBQWhELEVBQTJFSyxJQUFJLEdBQUcsQ0FBdkYsRUFBMEZBLElBQUksR0FBR0wsSUFBakcsRUFBdUdLLElBQUksRUFBM0csRUFBK0c7SUFDN0dGLFdBQVcsQ0FBQ0UsSUFBSSxHQUFHLENBQVIsQ0FBWCxHQUF3QkosU0FBUyxDQUFDSSxJQUFELENBQWpDO0VBQ0Q7O0VBRUQsSUFBSUMsV0FBVyxHQUFHLENBQUMsR0FBR3JCLGNBQWMsV0FBbEIsRUFBNEJrQixXQUE1QixDQUFsQjtFQUNBLElBQUlJLE1BQU0sR0FBRyxDQUFDLEdBQUduQixjQUFjLFdBQWxCLEVBQTRCVyxPQUE1QixFQUFxQ08sV0FBckMsQ0FBYjtFQUNBLE9BQU8sQ0FBQyxHQUFHaEIsWUFBWSxXQUFoQixFQUEwQmlCLE1BQTFCLENBQVA7QUFDRCxDQVJEOztBQVVBaEMsT0FBTyxXQUFQLEdBQWtCRSxRQUFsQiIsImZpbGUiOiIvRlVQLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SZWFjdENTUyA9IGV4cG9ydHMubG9vcCA9IGV4cG9ydHMuaGFuZGxlQWN0aXZlID0gZXhwb3J0cy5oYW5kbGVIb3ZlciA9IGV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZmxhdHRlbk5hbWVzID0gcmVxdWlyZSgnLi9mbGF0dGVuTmFtZXMnKTtcblxudmFyIF9mbGF0dGVuTmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxhdHRlbk5hbWVzKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSByZXF1aXJlKCcuL21lcmdlQ2xhc3NlcycpO1xuXG52YXIgX21lcmdlQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZUNsYXNzZXMpO1xuXG52YXIgX2F1dG9wcmVmaXggPSByZXF1aXJlKCcuL2F1dG9wcmVmaXgnKTtcblxudmFyIF9hdXRvcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9wcmVmaXgpO1xuXG52YXIgX2hvdmVyMiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9ob3ZlcicpO1xuXG52YXIgX2hvdmVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvdmVyMik7XG5cbnZhciBfYWN0aXZlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FjdGl2ZScpO1xuXG52YXIgX2FjdGl2ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmUpO1xuXG52YXIgX2xvb3AyID0gcmVxdWlyZSgnLi9sb29wJyk7XG5cbnZhciBfbG9vcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb29wMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuaG92ZXIgPSBfaG92ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmhhbmRsZUhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVBY3RpdmUgPSBfYWN0aXZlMi5kZWZhdWx0O1xuZXhwb3J0cy5sb29wID0gX2xvb3AzLmRlZmF1bHQ7XG52YXIgUmVhY3RDU1MgPSBleHBvcnRzLlJlYWN0Q1NTID0gZnVuY3Rpb24gUmVhY3RDU1MoY2xhc3Nlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWN0aXZhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYWN0aXZhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGl2ZU5hbWVzID0gKDAsIF9mbGF0dGVuTmFtZXMyLmRlZmF1bHQpKGFjdGl2YXRpb25zKTtcbiAgdmFyIG1lcmdlZCA9ICgwLCBfbWVyZ2VDbGFzc2VzMi5kZWZhdWx0KShjbGFzc2VzLCBhY3RpdmVOYW1lcyk7XG4gIHJldHVybiAoMCwgX2F1dG9wcmVmaXgyLmRlZmF1bHQpKG1lcmdlZCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdENTUzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:////FUP\n')},"15kH":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* reexport */ sketch_Sketch; });\n\n// UNUSED EXPORTS: AlphaPicker, BlockPicker, CirclePicker, default, ChromePicker, CompactPicker, GithubPicker, HuePicker, MaterialPicker, PhotoshopPicker, SliderPicker, SwatchesPicker, TwitterPicker, GooglePicker, CustomPicker\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__(\"kM82\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/reactcss/lib/index.js\nvar lib = __webpack_require__(\"/FUP\");\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/alpha.js\nvar calculateChange = function calculateChange(e, hsl, direction, initialA, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var a = void 0;\n\n    if (top < 0) {\n      a = 0;\n    } else if (top > containerHeight) {\n      a = 1;\n    } else {\n      a = Math.round(top * 100 / containerHeight) / 100;\n    }\n\n    if (hsl.a !== a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: a,\n        source: 'rgb'\n      };\n    }\n  } else {\n    var _a = void 0;\n\n    if (left < 0) {\n      _a = 0;\n    } else if (left > containerWidth) {\n      _a = 1;\n    } else {\n      _a = Math.round(left * 100 / containerWidth) / 100;\n    }\n\n    if (initialA !== _a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: _a,\n        source: 'rgb'\n      };\n    }\n  }\n\n  return null;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/checkboard.js\nvar checkboardCache = {};\nvar checkboard_render = function render(c1, c2, size, serverCanvas) {\n  if (typeof document === 'undefined' && !serverCanvas) {\n    return null;\n  }\n\n  var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');\n  canvas.width = size * 2;\n  canvas.height = size * 2;\n  var ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return null;\n  } // If no context can be found, return early.\n\n\n  ctx.fillStyle = c1;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = c2;\n  ctx.fillRect(0, 0, size, size);\n  ctx.translate(size, size);\n  ctx.fillRect(0, 0, size, size);\n  return canvas.toDataURL();\n};\nvar get = function get(c1, c2, size, serverCanvas) {\n  var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');\n\n  if (checkboardCache[key]) {\n    return checkboardCache[key];\n  }\n\n  var checkboard = checkboard_render(c1, c2, size, serverCanvas);\n  checkboardCache[key] = checkboard;\n  return checkboard;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Checkboard.js\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\nvar Checkboard_Checkboard = function Checkboard(_ref) {\n  var white = _ref.white,\n      grey = _ref.grey,\n      size = _ref.size,\n      renderers = _ref.renderers,\n      borderRadius = _ref.borderRadius,\n      boxShadow = _ref.boxShadow,\n      children = _ref.children;\n  var styles = lib_default()({\n    'default': {\n      grid: {\n        borderRadius: borderRadius,\n        boxShadow: boxShadow,\n        absolute: '0px 0px 0px 0px',\n        background: 'url(' + get(white, grey, size, renderers.canvas) + ') center left'\n      }\n    }\n  });\n  return Object(react[\"isValidElement\"])(children) ? react_default.a.cloneElement(children, _extends({}, children.props, {\n    style: _extends({}, children.props.style, styles.grid)\n  })) : react_default.a.createElement('div', {\n    style: styles.grid\n  });\n};\nCheckboard_Checkboard.defaultProps = {\n  size: 8,\n  white: 'transparent',\n  grey: 'rgba(0,0,0,.08)',\n  renderers: {}\n};\n/* harmony default export */ var common_Checkboard = (Checkboard_Checkboard);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Alpha.js\nvar Alpha_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\nvar Alpha_Alpha = function (_ref) {\n  _inherits(Alpha, _ref);\n\n  function Alpha() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Alpha);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleChange);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Alpha, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var rgb = this.props.rgb;\n      var styles = lib_default()({\n        'default': {\n          alpha: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          checkboard: {\n            absolute: '0px 0px 0px 0px',\n            overflow: 'hidden',\n            borderRadius: this.props.radius\n          },\n          gradient: {\n            absolute: '0px 0px 0px 0px',\n            background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          container: {\n            position: 'relative',\n            height: '100%',\n            margin: '0 3px'\n          },\n          pointer: {\n            position: 'absolute',\n            left: rgb.a * 100 + '%'\n          },\n          slider: {\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            marginTop: '1px',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          gradient: {\n            background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'\n          },\n          pointer: {\n            left: 0,\n            top: rgb.a * 100 + '%'\n          }\n        },\n        'overwrite': Alpha_extends({}, this.props.style)\n      }, {\n        vertical: this.props.direction === 'vertical',\n        overwrite: true\n      });\n      return react_default.a.createElement('div', {\n        style: styles.alpha\n      }, react_default.a.createElement('div', {\n        style: styles.checkboard\n      }, react_default.a.createElement(common_Checkboard, {\n        renderers: this.props.renderers\n      })), react_default.a.createElement('div', {\n        style: styles.gradient\n      }), react_default.a.createElement('div', {\n        style: styles.container,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.slider\n      }))));\n    }\n  }]);\n\n  return Alpha;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Alpha = (Alpha_Alpha);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/EditableInput.js\nvar EditableInput_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction EditableInput_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction EditableInput_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction EditableInput_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\nvar DEFAULT_ARROW_OFFSET = 1;\nvar UP_KEY_CODE = 38;\nvar DOWN_KEY_CODE = 40;\nvar VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];\n\nvar isValidKeyCode = function isValidKeyCode(keyCode) {\n  return VALID_KEY_CODES.indexOf(keyCode) > -1;\n};\n\nvar getNumberValue = function getNumberValue(value) {\n  return Number(String(value).replace(/%/g, ''));\n};\n\nvar idCounter = 1;\nvar EditableInput_EditableInput = function (_ref) {\n  EditableInput_inherits(EditableInput, _ref);\n\n  function EditableInput(props) {\n    EditableInput_classCallCheck(this, EditableInput);\n\n    var _this = EditableInput_possibleConstructorReturn(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));\n\n    _this.handleBlur = function () {\n      if (_this.state.blurValue) {\n        _this.setState({\n          value: _this.state.blurValue,\n          blurValue: null\n        });\n      }\n    };\n\n    _this.handleChange = function (e) {\n      _this.setUpdatedValue(e.target.value, e);\n    };\n\n    _this.handleKeyDown = function (e) {\n      // In case `e.target.value` is a percentage remove the `%` character\n      // and update accordingly with a percentage\n      // https://github.com/casesandberg/react-color/issues/383\n      var value = getNumberValue(e.target.value);\n\n      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {\n        var offset = _this.getArrowOffset();\n\n        var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;\n\n        _this.setUpdatedValue(updatedValue, e);\n      }\n    };\n\n    _this.handleDrag = function (e) {\n      if (_this.props.dragLabel) {\n        var newValue = Math.round(_this.props.value + e.movementX);\n\n        if (newValue >= 0 && newValue <= _this.props.dragMax) {\n          _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);\n        }\n      }\n    };\n\n    _this.handleMouseDown = function (e) {\n      if (_this.props.dragLabel) {\n        e.preventDefault();\n\n        _this.handleDrag(e);\n\n        window.addEventListener('mousemove', _this.handleDrag);\n        window.addEventListener('mouseup', _this.handleMouseUp);\n      }\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleDrag);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.state = {\n      value: String(props.value).toUpperCase(),\n      blurValue: String(props.value).toUpperCase()\n    };\n    _this.inputId = 'rc-editable-input-' + idCounter++;\n    return _this;\n  }\n\n  EditableInput_createClass(EditableInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {\n        if (this.input === document.activeElement) {\n          this.setState({\n            blurValue: String(this.props.value).toUpperCase()\n          });\n        } else {\n          this.setState({\n            value: String(this.props.value).toUpperCase(),\n            blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()\n          });\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getValueObjectWithLabel',\n    value: function getValueObjectWithLabel(value) {\n      return _defineProperty({}, this.props.label, value);\n    }\n  }, {\n    key: 'getArrowOffset',\n    value: function getArrowOffset() {\n      return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;\n    }\n  }, {\n    key: 'setUpdatedValue',\n    value: function setUpdatedValue(value, e) {\n      var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;\n      this.props.onChange && this.props.onChange(onChangeValue, e);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = lib_default()({\n        'default': {\n          wrap: {\n            position: 'relative'\n          }\n        },\n        'user-override': {\n          wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},\n          input: this.props.style && this.props.style.input ? this.props.style.input : {},\n          label: this.props.style && this.props.style.label ? this.props.style.label : {}\n        },\n        'dragLabel-true': {\n          label: {\n            cursor: 'ew-resize'\n          }\n        }\n      }, {\n        'user-override': true\n      }, this.props);\n      return react_default.a.createElement('div', {\n        style: styles.wrap\n      }, react_default.a.createElement('input', {\n        id: this.inputId,\n        style: styles.input,\n        ref: function ref(input) {\n          return _this2.input = input;\n        },\n        value: this.state.value,\n        onKeyDown: this.handleKeyDown,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur,\n        placeholder: this.props.placeholder,\n        spellCheck: 'false'\n      }), this.props.label && !this.props.hideLabel ? react_default.a.createElement('label', {\n        htmlFor: this.inputId,\n        style: styles.label,\n        onMouseDown: this.handleMouseDown\n      }, this.props.label) : null);\n    }\n  }]);\n\n  return EditableInput;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_EditableInput = (EditableInput_EditableInput);\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/hue.js\nvar hue_calculateChange = function calculateChange(e, direction, hsl, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var h = void 0;\n\n    if (top < 0) {\n      h = 359;\n    } else if (top > containerHeight) {\n      h = 0;\n    } else {\n      var percent = -(top * 100 / containerHeight) + 100;\n      h = 360 * percent / 100;\n    }\n\n    if (hsl.h !== h) {\n      return {\n        h: h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  } else {\n    var _h = void 0;\n\n    if (left < 0) {\n      _h = 0;\n    } else if (left > containerWidth) {\n      _h = 359;\n    } else {\n      var _percent = left * 100 / containerWidth;\n\n      _h = 360 * _percent / 100;\n    }\n\n    if (hsl.h !== _h) {\n      return {\n        h: _h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  }\n\n  return null;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Hue.js\nvar Hue_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Hue_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Hue_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Hue_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\nvar Hue_Hue = function (_ref) {\n  Hue_inherits(Hue, _ref);\n\n  function Hue() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    Hue_classCallCheck(this, Hue);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = Hue_possibleConstructorReturn(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = hue_calculateChange(e, _this.props.direction, _this.props.hsl, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _temp), Hue_possibleConstructorReturn(_this, _ret);\n  }\n\n  Hue_createClass(Hue, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      window.removeEventListener('mousemove', this.handleChange);\n      window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props$direction = this.props.direction,\n          direction = _props$direction === undefined ? 'horizontal' : _props$direction;\n      var styles = lib_default()({\n        'default': {\n          hue: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius,\n            boxShadow: this.props.shadow\n          },\n          container: {\n            padding: '0 2px',\n            position: 'relative',\n            height: '100%',\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            left: this.props.hsl.h * 100 / 360 + '%'\n          },\n          slider: {\n            marginTop: '1px',\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          pointer: {\n            left: '0px',\n            top: -(this.props.hsl.h * 100 / 360) + 100 + '%'\n          }\n        }\n      }, {\n        vertical: direction === 'vertical'\n      });\n      return react_default.a.createElement('div', {\n        style: styles.hue\n      }, react_default.a.createElement('div', {\n        className: 'hue-' + direction,\n        style: styles.container,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('style', null, '\\n            .hue-horizontal {\\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n\\n            .hue-vertical {\\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n          '), react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.slider\n      }))));\n    }\n  }]);\n\n  return Hue;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Hue = (Hue_Hue);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(\"17x9\");\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/lodash-es/merge.js + 29 modules\nvar merge = __webpack_require__(\"oaNE\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Raised.js\n\n\n\n\nvar Raised_Raised = function Raised(_ref) {\n  var zDepth = _ref.zDepth,\n      radius = _ref.radius,\n      background = _ref.background,\n      children = _ref.children,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      wrap: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      content: {\n        position: 'relative'\n      },\n      bg: {\n        absolute: '0px 0px 0px 0px',\n        boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',\n        borderRadius: radius,\n        background: background\n      }\n    },\n    'zDepth-0': {\n      bg: {\n        boxShadow: 'none'\n      }\n    },\n    'zDepth-1': {\n      bg: {\n        boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'\n      }\n    },\n    'zDepth-2': {\n      bg: {\n        boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'\n      }\n    },\n    'zDepth-3': {\n      bg: {\n        boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'\n      }\n    },\n    'zDepth-4': {\n      bg: {\n        boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'\n      }\n    },\n    'zDepth-5': {\n      bg: {\n        boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'\n      }\n    },\n    'square': {\n      bg: {\n        borderRadius: '0'\n      }\n    },\n    'circle': {\n      bg: {\n        borderRadius: '50%'\n      }\n    }\n  }, passedStyles), {\n    'zDepth-1': zDepth === 1\n  });\n  return react_default.a.createElement('div', {\n    style: styles.wrap\n  }, react_default.a.createElement('div', {\n    style: styles.bg\n  }), react_default.a.createElement('div', {\n    style: styles.content\n  }, children));\n};\nRaised_Raised.propTypes = {\n  background: prop_types_default.a.string,\n  zDepth: prop_types_default.a.oneOf([0, 1, 2, 3, 4, 5]),\n  radius: prop_types_default.a.number,\n  styles: prop_types_default.a.object\n};\nRaised_Raised.defaultProps = {\n  background: '#fff',\n  zDepth: 1,\n  radius: 2,\n  styles: {}\n};\n/* harmony default export */ var common_Raised = (Raised_Raised);\n// EXTERNAL MODULE: ./node_modules/lodash-es/throttle.js\nvar throttle = __webpack_require__(\"UXvI\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/saturation.js\nvar saturation_calculateChange = function calculateChange(e, hsl, container) {\n  var _container$getBoundin = container.getBoundingClientRect(),\n      containerWidth = _container$getBoundin.width,\n      containerHeight = _container$getBoundin.height;\n\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (left < 0) {\n    left = 0;\n  } else if (left > containerWidth) {\n    left = containerWidth;\n  }\n\n  if (top < 0) {\n    top = 0;\n  } else if (top > containerHeight) {\n    top = containerHeight;\n  }\n\n  var saturation = left / containerWidth;\n  var bright = 1 - top / containerHeight;\n  return {\n    h: hsl.h,\n    s: saturation,\n    v: bright,\n    a: hsl.a,\n    source: 'hsv'\n  };\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Saturation.js\nvar Saturation_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Saturation_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Saturation_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Saturation_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\nvar Saturation_Saturation = function (_ref) {\n  Saturation_inherits(Saturation, _ref);\n\n  function Saturation(props) {\n    Saturation_classCallCheck(this, Saturation);\n\n    var _this = Saturation_possibleConstructorReturn(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));\n\n    _this.handleChange = function (e) {\n      typeof _this.props.onChange === 'function' && _this.throttle(_this.props.onChange, saturation_calculateChange(e, _this.props.hsl, _this.container), e);\n    };\n\n    _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      var renderWindow = _this.getContainerRenderWindow();\n\n      renderWindow.addEventListener('mousemove', _this.handleChange);\n      renderWindow.addEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.throttle = Object(throttle[\"a\" /* default */])(function (fn, data, e) {\n      fn(data, e);\n    }, 50);\n    return _this;\n  }\n\n  Saturation_createClass(Saturation, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.throttle.cancel();\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getContainerRenderWindow',\n    value: function getContainerRenderWindow() {\n      var container = this.container;\n      var renderWindow = window;\n\n      while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {\n        renderWindow = renderWindow.parent;\n      }\n\n      return renderWindow;\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      var renderWindow = this.getContainerRenderWindow();\n      renderWindow.removeEventListener('mousemove', this.handleChange);\n      renderWindow.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _ref2 = this.props.style || {},\n          color = _ref2.color,\n          white = _ref2.white,\n          black = _ref2.black,\n          pointer = _ref2.pointer,\n          circle = _ref2.circle;\n\n      var styles = lib_default()({\n        'default': {\n          color: {\n            absolute: '0px 0px 0px 0px',\n            background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',\n            borderRadius: this.props.radius\n          },\n          white: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          black: {\n            absolute: '0px 0px 0px 0px',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            top: -(this.props.hsv.v * 100) + 100 + '%',\n            left: this.props.hsv.s * 100 + '%',\n            cursor: 'default'\n          },\n          circle: {\n            width: '4px',\n            height: '4px',\n            boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\\n            0 0 1px 2px rgba(0,0,0,.4)',\n            borderRadius: '50%',\n            cursor: 'hand',\n            transform: 'translate(-2px, -2px)'\n          }\n        },\n        'custom': {\n          color: color,\n          white: white,\n          black: black,\n          pointer: pointer,\n          circle: circle\n        }\n      }, {\n        'custom': !!this.props.style\n      });\n      return react_default.a.createElement('div', {\n        style: styles.color,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('style', null, '\\n          .saturation-white {\\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\\n          }\\n          .saturation-black {\\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\\n          }\\n        '), react_default.a.createElement('div', {\n        style: styles.white,\n        className: 'saturation-white'\n      }, react_default.a.createElement('div', {\n        style: styles.black,\n        className: 'saturation-black'\n      }), react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.circle\n      }))));\n    }\n  }]);\n\n  return Saturation;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Saturation = (Saturation_Saturation);\n// EXTERNAL MODULE: ./node_modules/lodash-es/debounce.js + 4 modules\nvar debounce = __webpack_require__(\"hbEN\");\n\n// EXTERNAL MODULE: ./node_modules/lodash-es/forEach.js + 2 modules\nvar forEach = __webpack_require__(\"OZf9\");\n\n// EXTERNAL MODULE: ./node_modules/tinycolor2/tinycolor.js\nvar tinycolor = __webpack_require__(\"Zss7\");\nvar tinycolor_default = /*#__PURE__*/__webpack_require__.n(tinycolor);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/color.js\n\n\nvar color_simpleCheckForValidColor = function simpleCheckForValidColor(data) {\n  var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];\n  var checked = 0;\n  var passed = 0;\n  Object(forEach[\"a\" /* default */])(keysToCheck, function (letter) {\n    if (data[letter]) {\n      checked += 1;\n\n      if (!isNaN(data[letter])) {\n        passed += 1;\n      }\n\n      if (letter === 's' || letter === 'l') {\n        var percentPatt = /^\\d+%$/;\n\n        if (percentPatt.test(data[letter])) {\n          passed += 1;\n        }\n      }\n    }\n  });\n  return checked === passed ? data : false;\n};\nvar color_toState = function toState(data, oldHue) {\n  var color = data.hex ? tinycolor_default()(data.hex) : tinycolor_default()(data);\n  var hsl = color.toHsl();\n  var hsv = color.toHsv();\n  var rgb = color.toRgb();\n  var hex = color.toHex();\n\n  if (hsl.s === 0) {\n    hsl.h = oldHue || 0;\n    hsv.h = oldHue || 0;\n  }\n\n  var transparent = hex === '000000' && rgb.a === 0;\n  return {\n    hsl: hsl,\n    hex: transparent ? 'transparent' : '#' + hex,\n    rgb: rgb,\n    hsv: hsv,\n    oldHue: data.h || oldHue || hsl.h,\n    source: data.source\n  };\n};\nvar color_isValidHex = function isValidHex(hex) {\n  if (hex === 'transparent') {\n    return true;\n  } // disable hex4 and hex8\n\n\n  var lh = String(hex).charAt(0) === '#' ? 1 : 0;\n  return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor_default()(hex).isValid();\n};\nvar getContrastingColor = function getContrastingColor(data) {\n  if (!data) {\n    return '#fff';\n  }\n\n  var col = color_toState(data);\n\n  if (col.hex === 'transparent') {\n    return 'rgba(0,0,0,0.4)';\n  }\n\n  var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;\n  return yiq >= 128 ? '#000' : '#fff';\n};\nvar red = {\n  hsl: {\n    a: 1,\n    h: 0,\n    l: 0.5,\n    s: 1\n  },\n  hex: '#ff0000',\n  rgb: {\n    r: 255,\n    g: 0,\n    b: 0,\n    a: 1\n  },\n  hsv: {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  }\n};\nvar color_isvalidColorString = function isvalidColorString(string, type) {\n  var stringWithoutDegree = string.replace('\xb0', '');\n  return tinycolor_default()(type + ' (' + stringWithoutDegree + ')')._ok;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/ColorWrap.js\nvar ColorWrap_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar ColorWrap_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction ColorWrap_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction ColorWrap_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction ColorWrap_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\nvar ColorWrap_ColorWrap = function ColorWrap(Picker) {\n  var ColorPicker = function (_ref) {\n    ColorWrap_inherits(ColorPicker, _ref);\n\n    function ColorPicker(props) {\n      ColorWrap_classCallCheck(this, ColorPicker);\n\n      var _this = ColorWrap_possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));\n\n      _this.handleChange = function (data, event) {\n        var isValidColor = color_simpleCheckForValidColor(data);\n\n        if (isValidColor) {\n          var colors = color_toState(data, data.h || _this.state.oldHue);\n\n          _this.setState(colors);\n\n          _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);\n          _this.props.onChange && _this.props.onChange(colors, event);\n        }\n      };\n\n      _this.handleSwatchHover = function (data, event) {\n        var isValidColor = color_simpleCheckForValidColor(data);\n\n        if (isValidColor) {\n          var colors = color_toState(data, data.h || _this.state.oldHue);\n          _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);\n        }\n      };\n\n      _this.state = ColorWrap_extends({}, color_toState(props.color, 0));\n      _this.debounce = Object(debounce[\"a\" /* default */])(function (fn, data, event) {\n        fn(data, event);\n      }, 100);\n      return _this;\n    }\n\n    ColorWrap_createClass(ColorPicker, [{\n      key: 'render',\n      value: function render() {\n        var optionalEvents = {};\n\n        if (this.props.onSwatchHover) {\n          optionalEvents.onSwatchHover = this.handleSwatchHover;\n        }\n\n        return react_default.a.createElement(Picker, ColorWrap_extends({}, this.props, this.state, {\n          onChange: this.handleChange\n        }, optionalEvents));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, state) {\n        return ColorWrap_extends({}, color_toState(nextProps.color, state.oldHue));\n      }\n    }]);\n\n    return ColorPicker;\n  }(react[\"PureComponent\"] || react[\"Component\"]);\n\n  ColorPicker.propTypes = ColorWrap_extends({}, Picker.propTypes);\n  ColorPicker.defaultProps = ColorWrap_extends({}, Picker.defaultProps, {\n    color: {\n      h: 250,\n      s: 0.50,\n      l: 0.20,\n      a: 1\n    }\n  });\n  return ColorPicker;\n};\n/* harmony default export */ var common_ColorWrap = (ColorWrap_ColorWrap);\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/interaction.js\nvar interaction_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar interaction_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction interaction_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction interaction_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction interaction_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-invalid-this */\n\n\n\nvar interaction_handleFocus = function handleFocus(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';\n  return function (_React$Component) {\n    interaction_inherits(Focus, _React$Component);\n\n    function Focus() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      interaction_classCallCheck(this, Focus);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = interaction_possibleConstructorReturn(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        focus: false\n      }, _this.handleFocus = function () {\n        return _this.setState({\n          focus: true\n        });\n      }, _this.handleBlur = function () {\n        return _this.setState({\n          focus: false\n        });\n      }, _temp), interaction_possibleConstructorReturn(_this, _ret);\n    }\n\n    interaction_createClass(Focus, [{\n      key: 'render',\n      value: function render() {\n        return react_default.a.createElement(Span, {\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur\n        }, react_default.a.createElement(Component, interaction_extends({}, this.props, this.state)));\n      }\n    }]);\n\n    return Focus;\n  }(react_default.a.Component);\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Swatch.js\nvar Swatch_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar ENTER = 13;\nvar Swatch_Swatch = function Swatch(_ref) {\n  var color = _ref.color,\n      style = _ref.style,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onHover = _ref.onHover,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? color : _ref$title,\n      children = _ref.children,\n      focus = _ref.focus,\n      _ref$focusStyle = _ref.focusStyle,\n      focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;\n  var transparent = color === 'transparent';\n  var styles = lib_default()({\n    \"default\": {\n      swatch: Swatch_extends({\n        background: color,\n        height: '100%',\n        width: '100%',\n        cursor: 'pointer',\n        position: 'relative',\n        outline: 'none'\n      }, style, focus ? focusStyle : {})\n    }\n  });\n\n  var handleClick = function handleClick(e) {\n    return onClick(color, e);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    return e.keyCode === ENTER && onClick(color, e);\n  };\n\n  var handleHover = function handleHover(e) {\n    return onHover(color, e);\n  };\n\n  var optionalEvents = {};\n\n  if (onHover) {\n    optionalEvents.onMouseOver = handleHover;\n  }\n\n  return react_default.a.createElement('div', Swatch_extends({\n    style: styles.swatch,\n    onClick: handleClick,\n    title: title,\n    tabIndex: 0,\n    onKeyDown: handleKeyDown\n  }, optionalEvents), children, transparent && react_default.a.createElement(common_Checkboard, {\n    borderRadius: styles.swatch.borderRadius,\n    boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'\n  }));\n};\n/* harmony default export */ var common_Swatch = (interaction_handleFocus(Swatch_Swatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/index.js\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/alpha/AlphaPointer.js\n\n\nvar AlphaPointer_AlphaPointer = function AlphaPointer(_ref) {\n  var direction = _ref.direction;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, {\n    vertical: direction === 'vertical'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var alpha_AlphaPointer = (AlphaPointer_AlphaPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/alpha/Alpha.js\nvar alpha_Alpha_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar Alpha_AlphaPicker = function AlphaPicker(_ref) {\n  var rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      direction = _ref.direction,\n      style = _ref.style,\n      renderers = _ref.renderers,\n      pointer = _ref.pointer,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      alpha: {\n        radius: '2px',\n        style: style\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'alpha-picker ' + className\n  }, react_default.a.createElement(common_Alpha, alpha_Alpha_extends({}, styles.alpha, {\n    rgb: rgb,\n    hsl: hsl,\n    pointer: pointer,\n    renderers: renderers,\n    onChange: onChange,\n    direction: direction\n  })));\n};\nAlpha_AlphaPicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: alpha_AlphaPointer\n};\n/* harmony default export */ var alpha_Alpha = (common_ColorWrap(Alpha_AlphaPicker));\n// EXTERNAL MODULE: ./node_modules/lodash-es/map.js + 48 modules\nvar map = __webpack_require__(\"zmn3\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/block/BlockSwatches.js\n\n\n\n\nvar BlockSwatches_BlockSwatches = function BlockSwatches(_ref) {\n  var colors = _ref.colors,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        marginRight: '-10px'\n      },\n      swatch: {\n        width: '22px',\n        height: '22px',\n        \"float\": 'left',\n        marginRight: '10px',\n        marginBottom: '10px',\n        borderRadius: '4px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatches\n  }, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(common_Swatch, {\n      key: c,\n      color: c,\n      style: styles.swatch,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: '0 0 4px ' + c\n      }\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  }));\n};\n/* harmony default export */ var block_BlockSwatches = (BlockSwatches_BlockSwatches);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/block/Block.js\n\n\n\n\n\n\n\nvar Block_Block = function Block(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var transparent = hex === 'transparent';\n\n  var handleChange = function handleChange(hexCode, e) {\n    color_isValidHex(hexCode) && onChange({\n      hex: hexCode,\n      source: 'hex'\n    }, e);\n  };\n\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        boxShadow: '0 1px rgba(0,0,0,.1)',\n        borderRadius: '6px',\n        position: 'relative'\n      },\n      head: {\n        height: '110px',\n        background: hex,\n        borderRadius: '6px 6px 0 0',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative'\n      },\n      body: {\n        padding: '10px'\n      },\n      label: {\n        fontSize: '18px',\n        color: getContrastingColor(hex),\n        position: 'relative'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 10px 10px 10px',\n        borderColor: 'transparent transparent ' + hex + ' transparent',\n        position: 'absolute',\n        top: '-10px',\n        left: '50%',\n        marginLeft: '-10px'\n      },\n      input: {\n        width: '100%',\n        fontSize: '12px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '22px',\n        boxShadow: 'inset 0 0 0 1px #ddd',\n        borderRadius: '4px',\n        padding: '0 7px',\n        boxSizing: 'border-box'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'block-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangle\n  }), react_default.a.createElement('div', {\n    style: styles.head\n  }, transparent && react_default.a.createElement(common_Checkboard, {\n    borderRadius: '6px 6px 0 0'\n  }), react_default.a.createElement('div', {\n    style: styles.label\n  }, hex)), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement(block_BlockSwatches, {\n    colors: colors,\n    onClick: handleChange,\n    onSwatchHover: onSwatchHover\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input\n    },\n    value: hex,\n    onChange: handleChange\n  })));\n};\nBlock_Block.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  triangle: prop_types_default.a.oneOf(['top', 'hide']),\n  styles: prop_types_default.a.object\n};\nBlock_Block.defaultProps = {\n  width: 170,\n  colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#dce775', '#ff8a65', '#ba68c8'],\n  triangle: 'top',\n  styles: {}\n};\n/* harmony default export */ var block_Block = (common_ColorWrap(Block_Block));\n// EXTERNAL MODULE: ./node_modules/material-colors/dist/colors.es2015.js\nvar colors_es2015 = __webpack_require__(\"wME1\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/circle/CircleSwatch.js\n\n\n\nvar CircleSwatch_CircleSwatch = function CircleSwatch(_ref) {\n  var color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      hover = _ref.hover,\n      active = _ref.active,\n      circleSize = _ref.circleSize,\n      circleSpacing = _ref.circleSpacing;\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        width: circleSize,\n        height: circleSize,\n        marginRight: circleSpacing,\n        marginBottom: circleSpacing,\n        transform: 'scale(1)',\n        transition: '100ms transform ease'\n      },\n      Swatch: {\n        borderRadius: '50%',\n        background: 'transparent',\n        boxShadow: 'inset 0 0 0 ' + (circleSize / 2 + 1) + 'px ' + color,\n        transition: '100ms box-shadow ease'\n      }\n    },\n    'hover': {\n      swatch: {\n        transform: 'scale(1.2)'\n      }\n    },\n    'active': {\n      Swatch: {\n        boxShadow: 'inset 0 0 0 3px ' + color\n      }\n    }\n  }, {\n    hover: hover,\n    active: active\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(common_Swatch, {\n    style: styles.Swatch,\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: styles.Swatch.boxShadow + ', 0 0 5px ' + color\n    }\n  }));\n};\nCircleSwatch_CircleSwatch.defaultProps = {\n  circleSize: 28,\n  circleSpacing: 14\n};\n/* harmony default export */ var circle_CircleSwatch = (Object(lib[\"handleHover\"])(CircleSwatch_CircleSwatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/circle/Circle.js\n\n\n\n\n\n\n\n\nvar Circle_Circle = function Circle(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      circleSize = _ref.circleSize,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      circleSpacing = _ref.circleSpacing,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginRight: -circleSpacing,\n        marginBottom: -circleSpacing\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(hexCode, e) {\n    return onChange({\n      hex: hexCode,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'circle-picker ' + className\n  }, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(circle_CircleSwatch, {\n      key: c,\n      color: c,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover,\n      active: hex === c.toLowerCase(),\n      circleSize: circleSize,\n      circleSpacing: circleSpacing\n    });\n  }));\n};\nCircle_Circle.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  circleSize: prop_types_default.a.number,\n  circleSpacing: prop_types_default.a.number,\n  styles: prop_types_default.a.object\n};\nCircle_Circle.defaultProps = {\n  width: 252,\n  circleSize: 28,\n  circleSpacing: 14,\n  colors: [colors_es2015[\"p\" /* red */]['500'], colors_es2015[\"n\" /* pink */]['500'], colors_es2015[\"o\" /* purple */]['500'], colors_es2015[\"g\" /* deepPurple */]['500'], colors_es2015[\"i\" /* indigo */]['500'], colors_es2015[\"b\" /* blue */]['500'], colors_es2015[\"j\" /* lightBlue */]['500'], colors_es2015[\"e\" /* cyan */]['500'], colors_es2015[\"q\" /* teal */]['500'], colors_es2015[\"h\" /* green */]['500'], colors_es2015[\"k\" /* lightGreen */]['500'], colors_es2015[\"l\" /* lime */]['500'], colors_es2015[\"r\" /* yellow */]['500'], colors_es2015[\"a\" /* amber */]['500'], colors_es2015[\"m\" /* orange */]['500'], colors_es2015[\"f\" /* deepOrange */]['500'], colors_es2015[\"d\" /* brown */]['500'], colors_es2015[\"c\" /* blueGrey */]['500']],\n  styles: {}\n};\n/* harmony default export */ var circle_Circle = (common_ColorWrap(Circle_Circle));\n// EXTERNAL MODULE: ./node_modules/lodash-es/isUndefined.js\nvar isUndefined = __webpack_require__(\"3Hq1\");\n\n// EXTERNAL MODULE: ./node_modules/@icons/material/UnfoldMoreHorizontalIcon.js\nvar UnfoldMoreHorizontalIcon = __webpack_require__(\"9F0J\");\nvar UnfoldMoreHorizontalIcon_default = /*#__PURE__*/__webpack_require__.n(UnfoldMoreHorizontalIcon);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromeFields.js\nvar ChromeFields_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction ChromeFields_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction ChromeFields_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction ChromeFields_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/no-did-mount-set-state, no-param-reassign */\n\n\n\n\n\n\n\n\nvar ChromeFields_ChromeFields = function (_React$Component) {\n  ChromeFields_inherits(ChromeFields, _React$Component);\n\n  function ChromeFields(props) {\n    ChromeFields_classCallCheck(this, ChromeFields);\n\n    var _this = ChromeFields_possibleConstructorReturn(this, (ChromeFields.__proto__ || Object.getPrototypeOf(ChromeFields)).call(this));\n\n    _this.toggleViews = function () {\n      if (_this.state.view === 'hex') {\n        _this.setState({\n          view: 'rgb'\n        });\n      } else if (_this.state.view === 'rgb') {\n        _this.setState({\n          view: 'hsl'\n        });\n      } else if (_this.state.view === 'hsl') {\n        if (_this.props.hsl.a === 1) {\n          _this.setState({\n            view: 'hex'\n          });\n        } else {\n          _this.setState({\n            view: 'rgb'\n          });\n        }\n      }\n    };\n\n    _this.handleChange = function (data, e) {\n      if (data.hex) {\n        color_isValidHex(data.hex) && _this.props.onChange({\n          hex: data.hex,\n          source: 'hex'\n        }, e);\n      } else if (data.r || data.g || data.b) {\n        _this.props.onChange({\n          r: data.r || _this.props.rgb.r,\n          g: data.g || _this.props.rgb.g,\n          b: data.b || _this.props.rgb.b,\n          source: 'rgb'\n        }, e);\n      } else if (data.a) {\n        if (data.a < 0) {\n          data.a = 0;\n        } else if (data.a > 1) {\n          data.a = 1;\n        }\n\n        _this.props.onChange({\n          h: _this.props.hsl.h,\n          s: _this.props.hsl.s,\n          l: _this.props.hsl.l,\n          a: Math.round(data.a * 100) / 100,\n          source: 'rgb'\n        }, e);\n      } else if (data.h || data.s || data.l) {\n        // Remove any occurances of '%'.\n        if (typeof data.s === 'string' && data.s.includes('%')) {\n          data.s = data.s.replace('%', '');\n        }\n\n        if (typeof data.l === 'string' && data.l.includes('%')) {\n          data.l = data.l.replace('%', '');\n        } // We store HSL as a unit interval so we need to override the 1 input to 0.01\n\n\n        if (data.s == 1) {\n          data.s = 0.01;\n        } else if (data.l == 1) {\n          data.l = 0.01;\n        }\n\n        _this.props.onChange({\n          h: data.h || _this.props.hsl.h,\n          s: Number(!Object(isUndefined[\"a\" /* default */])(data.s) ? data.s : _this.props.hsl.s),\n          l: Number(!Object(isUndefined[\"a\" /* default */])(data.l) ? data.l : _this.props.hsl.l),\n          source: 'hsl'\n        }, e);\n      }\n    };\n\n    _this.showHighlight = function (e) {\n      e.currentTarget.style.background = '#eee';\n    };\n\n    _this.hideHighlight = function (e) {\n      e.currentTarget.style.background = 'transparent';\n    };\n\n    if (props.hsl.a !== 1 && props.view === \"hex\") {\n      _this.state = {\n        view: \"rgb\"\n      };\n    } else {\n      _this.state = {\n        view: props.view\n      };\n    }\n\n    return _this;\n  }\n\n  ChromeFields_createClass(ChromeFields, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = lib_default()({\n        'default': {\n          wrap: {\n            paddingTop: '16px',\n            display: 'flex'\n          },\n          fields: {\n            flex: '1',\n            display: 'flex',\n            marginLeft: '-6px'\n          },\n          field: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          alpha: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          toggle: {\n            width: '32px',\n            textAlign: 'right',\n            position: 'relative'\n          },\n          icon: {\n            marginRight: '-4px',\n            marginTop: '12px',\n            cursor: 'pointer',\n            position: 'relative'\n          },\n          iconHighlight: {\n            position: 'absolute',\n            width: '24px',\n            height: '28px',\n            background: '#eee',\n            borderRadius: '4px',\n            top: '10px',\n            left: '12px',\n            display: 'none'\n          },\n          input: {\n            fontSize: '11px',\n            color: '#333',\n            width: '100%',\n            borderRadius: '2px',\n            border: 'none',\n            boxShadow: 'inset 0 0 0 1px #dadada',\n            height: '21px',\n            textAlign: 'center'\n          },\n          label: {\n            textTransform: 'uppercase',\n            fontSize: '11px',\n            lineHeight: '11px',\n            color: '#969696',\n            textAlign: 'center',\n            display: 'block',\n            marginTop: '12px'\n          },\n          svg: {\n            fill: '#333',\n            width: '24px',\n            height: '24px',\n            border: '1px transparent solid',\n            borderRadius: '5px'\n          }\n        },\n        'disableAlpha': {\n          alpha: {\n            display: 'none'\n          }\n        }\n      }, this.props, this.state);\n      var fields = void 0;\n\n      if (this.state.view === 'hex') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'hex',\n          value: this.props.hex,\n          onChange: this.handleChange\n        })));\n      } else if (this.state.view === 'rgb') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'r',\n          value: this.props.rgb.r,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'g',\n          value: this.props.rgb.g,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'b',\n          value: this.props.rgb.b,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.alpha\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'a',\n          value: this.props.rgb.a,\n          arrowOffset: 0.01,\n          onChange: this.handleChange\n        })));\n      } else if (this.state.view === 'hsl') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'h',\n          value: Math.round(this.props.hsl.h),\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 's',\n          value: Math.round(this.props.hsl.s * 100) + '%',\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'l',\n          value: Math.round(this.props.hsl.l * 100) + '%',\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.alpha\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'a',\n          value: this.props.hsl.a,\n          arrowOffset: 0.01,\n          onChange: this.handleChange\n        })));\n      }\n\n      return react_default.a.createElement('div', {\n        style: styles.wrap,\n        className: 'flexbox-fix'\n      }, fields, react_default.a.createElement('div', {\n        style: styles.toggle\n      }, react_default.a.createElement('div', {\n        style: styles.icon,\n        onClick: this.toggleViews,\n        ref: function ref(icon) {\n          return _this2.icon = icon;\n        }\n      }, react_default.a.createElement(UnfoldMoreHorizontalIcon_default.a, {\n        style: styles.svg,\n        onMouseOver: this.showHighlight,\n        onMouseEnter: this.showHighlight,\n        onMouseOut: this.hideHighlight\n      }))));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if (nextProps.hsl.a !== 1 && state.view === 'hex') {\n        return {\n          view: 'rgb'\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ChromeFields;\n}(react_default.a.Component);\nChromeFields_ChromeFields.defaultProps = {\n  view: \"hex\"\n};\n/* harmony default export */ var chrome_ChromeFields = (ChromeFields_ChromeFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromePointer.js\n\n\nvar ChromePointer_ChromePointer = function ChromePointer() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        transform: 'translate(-6px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var chrome_ChromePointer = (ChromePointer_ChromePointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromePointerCircle.js\n\n\nvar ChromePointerCircle_ChromePointerCircle = function ChromePointerCircle() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var chrome_ChromePointerCircle = (ChromePointerCircle_ChromePointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/Chrome.js\n\n\n\n\n\n\n\n\nvar Chrome_Chrome = function Chrome(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      disableAlpha = _ref.disableAlpha,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className,\n      defaultView = _ref.defaultView;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        borderRadius: '2px',\n        boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',\n        boxSizing: 'initial',\n        fontFamily: 'Menlo'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '55%',\n        position: 'relative',\n        borderRadius: '2px 2px 0 0',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '2px 2px 0 0'\n      },\n      body: {\n        padding: '16px 16px 12px'\n      },\n      controls: {\n        display: 'flex'\n      },\n      color: {\n        width: '32px'\n      },\n      swatch: {\n        marginTop: '6px',\n        width: '16px',\n        height: '16px',\n        borderRadius: '8px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      active: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '8px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + rgb.a + ')',\n        zIndex: '2'\n      },\n      toggles: {\n        flex: '1'\n      },\n      hue: {\n        height: '10px',\n        position: 'relative',\n        marginBottom: '8px'\n      },\n      Hue: {\n        radius: '2px'\n      },\n      alpha: {\n        height: '10px',\n        position: 'relative'\n      },\n      Alpha: {\n        radius: '2px'\n      }\n    },\n    'disableAlpha': {\n      color: {\n        width: '22px'\n      },\n      alpha: {\n        display: 'none'\n      },\n      hue: {\n        marginBottom: '0px'\n      },\n      swatch: {\n        width: '10px',\n        height: '10px',\n        marginTop: '0px'\n      }\n    }\n  }, passedStyles), {\n    disableAlpha: disableAlpha\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'chrome-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    style: styles.Saturation,\n    hsl: hsl,\n    hsv: hsv,\n    pointer: chrome_ChromePointerCircle,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.color\n  }, react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement('div', {\n    style: styles.active\n  }), react_default.a.createElement(common_Checkboard, {\n    renderers: renderers\n  }))), react_default.a.createElement('div', {\n    style: styles.toggles\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    pointer: chrome_ChromePointer,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_Alpha, {\n    style: styles.Alpha,\n    rgb: rgb,\n    hsl: hsl,\n    pointer: chrome_ChromePointer,\n    renderers: renderers,\n    onChange: onChange\n  })))), react_default.a.createElement(chrome_ChromeFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    view: defaultView,\n    onChange: onChange,\n    disableAlpha: disableAlpha\n  })));\n};\nChrome_Chrome.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  disableAlpha: prop_types_default.a.bool,\n  styles: prop_types_default.a.object,\n  defaultView: prop_types_default.a.oneOf([\"hex\", \"rgb\", \"hsl\"])\n};\nChrome_Chrome.defaultProps = {\n  width: 225,\n  disableAlpha: false,\n  styles: {}\n};\n/* harmony default export */ var chrome_Chrome = (common_ColorWrap(Chrome_Chrome));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/CompactColor.js\n\n\n\n\nvar CompactColor_CompactColor = function CompactColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      color: {\n        background: color,\n        width: '15px',\n        height: '15px',\n        \"float\": 'left',\n        marginRight: '5px',\n        marginBottom: '5px',\n        position: 'relative',\n        cursor: 'pointer'\n      },\n      dot: {\n        absolute: '5px 5px 5px 5px',\n        background: getContrastingColor(color),\n        borderRadius: '50%',\n        opacity: '0'\n      }\n    },\n    'active': {\n      dot: {\n        opacity: '1'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      dot: {\n        background: '#000'\n      }\n    },\n    'transparent': {\n      dot: {\n        background: '#000'\n      }\n    }\n  }, {\n    active: active,\n    'color-#FFFFFF': color === '#FFFFFF',\n    'transparent': color === 'transparent'\n  });\n  return react_default.a.createElement(common_Swatch, {\n    style: styles.color,\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: '0 0 4px ' + color\n    }\n  }, react_default.a.createElement('div', {\n    style: styles.dot\n  }));\n};\n/* harmony default export */ var compact_CompactColor = (CompactColor_CompactColor);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/CompactFields.js\n\n\n\nvar CompactFields_CompactFields = function CompactFields(_ref) {\n  var hex = _ref.hex,\n      rgb = _ref.rgb,\n      onChange = _ref.onChange;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingBottom: '6px',\n        paddingRight: '5px',\n        position: 'relative'\n      },\n      active: {\n        position: 'absolute',\n        top: '6px',\n        left: '5px',\n        height: '9px',\n        width: '9px',\n        background: hex\n      },\n      HEXwrap: {\n        flex: '6',\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '80%',\n        padding: '0px',\n        paddingLeft: '20%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      HEXlabel: {\n        display: 'none'\n      },\n      RGBwrap: {\n        flex: '3',\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '70%',\n        padding: '0px',\n        paddingLeft: '30%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '3px',\n        left: '0px',\n        lineHeight: '16px',\n        textTransform: 'uppercase',\n        fontSize: '12px',\n        color: '#999'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else {\n      onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.active\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  }));\n};\n/* harmony default export */ var compact_CompactFields = (CompactFields_CompactFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/Compact.js\n\n\n\n\n\n\n\n\n\nvar Compact_Compact = function Compact(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      Compact: {\n        background: '#f6f6f6',\n        radius: '4px'\n      },\n      compact: {\n        paddingTop: '5px',\n        paddingLeft: '5px',\n        boxSizing: 'initial',\n        width: '240px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else {\n      onChange(data, e);\n    }\n  };\n\n  return react_default.a.createElement(common_Raised, {\n    style: styles.Compact,\n    styles: passedStyles\n  }, react_default.a.createElement('div', {\n    style: styles.compact,\n    className: 'compact-picker ' + className\n  }, react_default.a.createElement('div', null, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(compact_CompactColor, {\n      key: c,\n      color: c,\n      active: c.toLowerCase() === hex,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })), react_default.a.createElement(compact_CompactFields, {\n    hex: hex,\n    rgb: rgb,\n    onChange: handleChange\n  })));\n};\nCompact_Compact.propTypes = {\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  styles: prop_types_default.a.object\n};\nCompact_Compact.defaultProps = {\n  colors: ['#4D4D4D', '#999999', '#FFFFFF', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'],\n  styles: {}\n};\n/* harmony default export */ var compact_Compact = (common_ColorWrap(Compact_Compact));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/github/GithubSwatch.js\n\n\n\nvar GithubSwatch_GithubSwatch = function GithubSwatch(_ref) {\n  var hover = _ref.hover,\n      color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var hoverSwatch = {\n    position: 'relative',\n    zIndex: '2',\n    outline: '2px solid #fff',\n    boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)'\n  };\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        width: '25px',\n        height: '25px',\n        fontSize: '0'\n      }\n    },\n    'hover': {\n      swatch: hoverSwatch\n    }\n  }, {\n    hover: hover\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(common_Swatch, {\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: hoverSwatch\n  }));\n};\n/* harmony default export */ var github_GithubSwatch = (Object(lib[\"handleHover\"])(GithubSwatch_GithubSwatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/github/Github.js\n\n\n\n\n\n\n\nvar Github_Github = function Github(_ref) {\n  var width = _ref.width,\n      colors = _ref.colors,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '1px solid rgba(0,0,0,0.2)',\n        boxShadow: '0 3px 12px rgba(0,0,0,0.15)',\n        borderRadius: '4px',\n        position: 'relative',\n        padding: '5px',\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      triangle: {\n        position: 'absolute',\n        border: '7px solid transparent',\n        borderBottomColor: '#fff'\n      },\n      triangleShadow: {\n        position: 'absolute',\n        border: '8px solid transparent',\n        borderBottomColor: 'rgba(0,0,0,0.15)'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-14px',\n        left: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        left: '9px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-14px',\n        right: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        right: '9px'\n      }\n    },\n    'bottom-left-triangle': {\n      triangle: {\n        top: '35px',\n        left: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        left: '9px',\n        transform: 'rotate(180deg)'\n      }\n    },\n    'bottom-right-triangle': {\n      triangle: {\n        top: '35px',\n        right: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        right: '9px',\n        transform: 'rotate(180deg)'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right',\n    'bottom-left-triangle': triangle === 'bottom-left',\n    'bottom-right-triangle': triangle === 'bottom-right'\n  });\n\n  var handleChange = function handleChange(hex, e) {\n    return onChange({\n      hex: hex,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'github-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangleShadow\n  }), react_default.a.createElement('div', {\n    style: styles.triangle\n  }), Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(github_GithubSwatch, {\n      color: c,\n      key: c,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }));\n};\nGithub_Github.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  triangle: prop_types_default.a.oneOf(['hide', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),\n  styles: prop_types_default.a.object\n};\nGithub_Github.defaultProps = {\n  width: 200,\n  colors: ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'],\n  triangle: 'top-left',\n  styles: {}\n};\n/* harmony default export */ var github_Github = (common_ColorWrap(Github_Github));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/hue/HuePointer.js\n\n\nvar HuePointer_SliderPointer = function SliderPointer(_ref) {\n  var direction = _ref.direction;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, {\n    vertical: direction === 'vertical'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var HuePointer = (HuePointer_SliderPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/hue/Hue.js\nvar Hue_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\nvar Hue_HuePicker = function HuePicker(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      hsl = _ref.hsl,\n      direction = _ref.direction,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles)); // Overwrite to provide pure hue color\n\n  var handleChange = function handleChange(data) {\n    return onChange({\n      a: 1,\n      h: data.h,\n      l: 0.5,\n      s: 1\n    });\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'hue-picker ' + className\n  }, react_default.a.createElement(common_Hue, Hue_extends({}, styles.hue, {\n    hsl: hsl,\n    pointer: pointer,\n    onChange: handleChange,\n    direction: direction\n  })));\n};\nHue_HuePicker.propTypes = {\n  styles: prop_types_default.a.object\n};\nHue_HuePicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: HuePointer,\n  styles: {}\n};\n/* harmony default export */ var hue_Hue = (common_ColorWrap(Hue_HuePicker));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/material/Material.js\n\n\n\n\n\nvar Material_Material = function Material(_ref) {\n  var onChange = _ref.onChange,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      material: {\n        width: '98px',\n        height: '98px',\n        padding: '16px',\n        fontFamily: 'Roboto'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '2px solid ' + hex,\n        outline: 'none',\n        height: '30px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      Hex: {\n        style: {}\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '1px solid #eee',\n        outline: 'none',\n        height: '30px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      split: {\n        display: 'flex',\n        marginRight: '-10px',\n        paddingTop: '11px'\n      },\n      third: {\n        flex: '1',\n        paddingRight: '10px'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement(common_Raised, {\n    styles: passedStyles\n  }, react_default.a.createElement('div', {\n    style: styles.material,\n    className: 'material-picker ' + className\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.split,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  })))));\n};\n/* harmony default export */ var material_Material = (common_ColorWrap(Material_Material));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopFields.js\n\n\n\n\nvar PhotoshopFields_PhotoshopPicker = function PhotoshopPicker(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsv = _ref.hsv,\n      hex = _ref.hex;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        paddingTop: '5px',\n        paddingBottom: '9px',\n        width: '80px',\n        position: 'relative'\n      },\n      divider: {\n        height: '5px'\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        marginLeft: '40%',\n        width: '40%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '5px',\n        fontSize: '13px',\n        paddingLeft: '3px',\n        marginRight: '10px'\n      },\n      RGBlabel: {\n        left: '0px',\n        top: '0px',\n        width: '34px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px',\n        position: 'absolute'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        marginLeft: '20%',\n        width: '80%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '6px',\n        fontSize: '13px',\n        paddingLeft: '3px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        width: '14px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px'\n      },\n      fieldSymbols: {\n        position: 'absolute',\n        top: '5px',\n        right: '-7px',\n        fontSize: '13px'\n      },\n      symbol: {\n        height: '20px',\n        lineHeight: '22px',\n        paddingBottom: '7px'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data['#']) {\n      color_isValidHex(data['#']) && onChange({\n        hex: data['#'],\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else if (data.h || data.s || data.v) {\n      onChange({\n        h: data.h || hsv.h,\n        s: data.s || hsv.s,\n        v: data.v || hsv.v,\n        source: 'hsv'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'h',\n    value: Math.round(hsv.h),\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 's',\n    value: Math.round(hsv.s * 100),\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'v',\n    value: Math.round(hsv.v * 100),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.divider\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.divider\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: '#',\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.fieldSymbols\n  }, react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '\\xB0'), react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '%'), react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '%')));\n};\n/* harmony default export */ var PhotoshopFields = (PhotoshopFields_PhotoshopPicker);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPointerCircle.js\n\n\nvar PhotoshopPointerCircle_PhotoshopPointerCircle = function PhotoshopPointerCircle(_ref) {\n  var hsl = _ref.hsl;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    },\n    'black-outline': {\n      picker: {\n        boxShadow: 'inset 0 0 0 1px #000'\n      }\n    }\n  }, {\n    'black-outline': hsl.l > 0.5\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var photoshop_PhotoshopPointerCircle = (PhotoshopPointerCircle_PhotoshopPointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPointer.js\n\n\nvar PhotoshopPointer_PhotoshopPointerCircle = function PhotoshopPointerCircle() {\n  var styles = lib_default()({\n    'default': {\n      triangle: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '4px 0 4px 6px',\n        borderColor: 'transparent transparent transparent #fff',\n        position: 'absolute',\n        top: '1px',\n        left: '1px'\n      },\n      triangleBorder: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '5px 0 5px 8px',\n        borderColor: 'transparent transparent transparent #555'\n      },\n      left: {\n        Extend: 'triangleBorder',\n        transform: 'translate(-13px, -4px)'\n      },\n      leftInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      },\n      right: {\n        Extend: 'triangleBorder',\n        transform: 'translate(20px, -14px) rotate(180deg)'\n      },\n      rightInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.pointer\n  }, react_default.a.createElement('div', {\n    style: styles.left\n  }, react_default.a.createElement('div', {\n    style: styles.leftInside\n  })), react_default.a.createElement('div', {\n    style: styles.right\n  }, react_default.a.createElement('div', {\n    style: styles.rightInside\n  })));\n};\n/* harmony default export */ var PhotoshopPointer = (PhotoshopPointer_PhotoshopPointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopButton.js\n\n\nvar PhotoshopButton_PhotoshopButton = function PhotoshopButton(_ref) {\n  var onClick = _ref.onClick,\n      label = _ref.label,\n      children = _ref.children,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      button: {\n        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',\n        border: '1px solid #878787',\n        borderRadius: '2px',\n        height: '20px',\n        boxShadow: '0 1px 0 0 #EAEAEA',\n        fontSize: '14px',\n        color: '#000',\n        lineHeight: '20px',\n        textAlign: 'center',\n        marginBottom: '10px',\n        cursor: 'pointer'\n      }\n    },\n    'active': {\n      button: {\n        boxShadow: '0 0 0 1px #878787'\n      }\n    }\n  }, {\n    active: active\n  });\n  return react_default.a.createElement('div', {\n    style: styles.button,\n    onClick: onClick\n  }, label || children);\n};\n/* harmony default export */ var photoshop_PhotoshopButton = (PhotoshopButton_PhotoshopButton);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPreviews.js\n\n\nvar PhotoshopPreviews_PhotoshopPreviews = function PhotoshopPreviews(_ref) {\n  var rgb = _ref.rgb,\n      currentColor = _ref.currentColor;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        border: '1px solid #B3B3B3',\n        borderBottom: '1px solid #F0F0F0',\n        marginBottom: '2px',\n        marginTop: '1px'\n      },\n      \"new\": {\n        height: '34px',\n        background: 'rgb(' + rgb.r + ',' + rgb.g + ', ' + rgb.b + ')',\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000'\n      },\n      current: {\n        height: '34px',\n        background: currentColor,\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000'\n      },\n      label: {\n        fontSize: '14px',\n        color: '#000',\n        textAlign: 'center'\n      }\n    }\n  });\n  return react_default.a.createElement('div', null, react_default.a.createElement('div', {\n    style: styles.label\n  }, 'new'), react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement('div', {\n    style: styles[\"new\"]\n  }), react_default.a.createElement('div', {\n    style: styles.current\n  })), react_default.a.createElement('div', {\n    style: styles.label\n  }, 'current'));\n};\n/* harmony default export */ var photoshop_PhotoshopPreviews = (PhotoshopPreviews_PhotoshopPreviews);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/Photoshop.js\nvar Photoshop_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Photoshop_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Photoshop_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Photoshop_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\n\n\n\n\n\n\nvar Photoshop_Photoshop = function (_React$Component) {\n  Photoshop_inherits(Photoshop, _React$Component);\n\n  function Photoshop(props) {\n    Photoshop_classCallCheck(this, Photoshop);\n\n    var _this = Photoshop_possibleConstructorReturn(this, (Photoshop.__proto__ || Object.getPrototypeOf(Photoshop)).call(this));\n\n    _this.state = {\n      currentColor: props.hex\n    };\n    return _this;\n  }\n\n  Photoshop_createClass(Photoshop, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$styles = _props.styles,\n          passedStyles = _props$styles === undefined ? {} : _props$styles,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className;\n      var styles = lib_default()(Object(merge[\"a\" /* default */])({\n        'default': {\n          picker: {\n            background: '#DCDCDC',\n            borderRadius: '4px',\n            boxShadow: '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',\n            boxSizing: 'initial',\n            width: '513px'\n          },\n          head: {\n            backgroundImage: 'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',\n            borderBottom: '1px solid #B1B1B1',\n            boxShadow: 'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',\n            height: '23px',\n            lineHeight: '24px',\n            borderRadius: '4px 4px 0 0',\n            fontSize: '13px',\n            color: '#4D4D4D',\n            textAlign: 'center'\n          },\n          body: {\n            padding: '15px 15px 0',\n            display: 'flex'\n          },\n          saturation: {\n            width: '256px',\n            height: '256px',\n            position: 'relative',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0',\n            overflow: 'hidden'\n          },\n          hue: {\n            position: 'relative',\n            height: '256px',\n            width: '19px',\n            marginLeft: '10px',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0'\n          },\n          controls: {\n            width: '180px',\n            marginLeft: '10px'\n          },\n          top: {\n            display: 'flex'\n          },\n          previews: {\n            width: '60px'\n          },\n          actions: {\n            flex: '1',\n            marginLeft: '20px'\n          }\n        }\n      }, passedStyles));\n      return react_default.a.createElement('div', {\n        style: styles.picker,\n        className: 'photoshop-picker ' + className\n      }, react_default.a.createElement('div', {\n        style: styles.head\n      }, this.props.header), react_default.a.createElement('div', {\n        style: styles.body,\n        className: 'flexbox-fix'\n      }, react_default.a.createElement('div', {\n        style: styles.saturation\n      }, react_default.a.createElement(common_Saturation, {\n        hsl: this.props.hsl,\n        hsv: this.props.hsv,\n        pointer: photoshop_PhotoshopPointerCircle,\n        onChange: this.props.onChange\n      })), react_default.a.createElement('div', {\n        style: styles.hue\n      }, react_default.a.createElement(common_Hue, {\n        direction: 'vertical',\n        hsl: this.props.hsl,\n        pointer: PhotoshopPointer,\n        onChange: this.props.onChange\n      })), react_default.a.createElement('div', {\n        style: styles.controls\n      }, react_default.a.createElement('div', {\n        style: styles.top,\n        className: 'flexbox-fix'\n      }, react_default.a.createElement('div', {\n        style: styles.previews\n      }, react_default.a.createElement(photoshop_PhotoshopPreviews, {\n        rgb: this.props.rgb,\n        currentColor: this.state.currentColor\n      })), react_default.a.createElement('div', {\n        style: styles.actions\n      }, react_default.a.createElement(photoshop_PhotoshopButton, {\n        label: 'OK',\n        onClick: this.props.onAccept,\n        active: true\n      }), react_default.a.createElement(photoshop_PhotoshopButton, {\n        label: 'Cancel',\n        onClick: this.props.onCancel\n      }), react_default.a.createElement(PhotoshopFields, {\n        onChange: this.props.onChange,\n        rgb: this.props.rgb,\n        hsv: this.props.hsv,\n        hex: this.props.hex\n      }))))));\n    }\n  }]);\n\n  return Photoshop;\n}(react_default.a.Component);\nPhotoshop_Photoshop.propTypes = {\n  header: prop_types_default.a.string,\n  styles: prop_types_default.a.object\n};\nPhotoshop_Photoshop.defaultProps = {\n  header: 'Color Picker',\n  styles: {}\n};\n/* harmony default export */ var photoshop_Photoshop = (common_ColorWrap(Photoshop_Photoshop));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/SketchFields.js\n/* eslint-disable no-param-reassign */\n\n\n\n\nvar SketchFields_SketchFields = function SketchFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      disableAlpha = _ref.disableAlpha;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingTop: '4px'\n      },\n      single: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      alpha: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      \"double\": {\n        flex: '2'\n      },\n      input: {\n        width: '80%',\n        padding: '4px 10% 3px',\n        border: 'none',\n        boxShadow: 'inset 0 0 0 1px #ccc',\n        fontSize: '11px'\n      },\n      label: {\n        display: 'block',\n        textAlign: 'center',\n        fontSize: '11px',\n        color: '#222',\n        paddingTop: '3px',\n        paddingBottom: '4px',\n        textTransform: 'capitalize'\n      }\n    },\n    'disableAlpha': {\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, {\n    disableAlpha: disableAlpha\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        a: rgb.a,\n        source: 'rgb'\n      }, e);\n    } else if (data.a) {\n      if (data.a < 0) {\n        data.a = 0;\n      } else if (data.a > 100) {\n        data.a = 100;\n      }\n\n      data.a /= 100;\n      onChange({\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: data.a,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles[\"double\"]\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'hex',\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'a',\n    value: Math.round(rgb.a * 100),\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '100'\n  })));\n};\n/* harmony default export */ var sketch_SketchFields = (SketchFields_SketchFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/SketchPresetColors.js\nvar SketchPresetColors_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar SketchPresetColors_SketchPresetColors = function SketchPresetColors(_ref) {\n  var colors = _ref.colors,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var styles = lib_default()({\n    'default': {\n      colors: {\n        margin: '0 -10px',\n        padding: '10px 0 0 10px',\n        borderTop: '1px solid #eee',\n        display: 'flex',\n        flexWrap: 'wrap',\n        position: 'relative'\n      },\n      swatchWrap: {\n        width: '16px',\n        height: '16px',\n        margin: '0 10px 10px 0'\n      },\n      swatch: {\n        borderRadius: '3px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'\n      }\n    },\n    'no-presets': {\n      colors: {\n        display: 'none'\n      }\n    }\n  }, {\n    'no-presets': !colors || !colors.length\n  });\n\n  var handleClick = function handleClick(hex, e) {\n    onClick({\n      hex: hex,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.colors,\n    className: 'flexbox-fix'\n  }, colors.map(function (colorObjOrString) {\n    var c = typeof colorObjOrString === 'string' ? {\n      color: colorObjOrString\n    } : colorObjOrString;\n    var key = '' + c.color + (c.title || '');\n    return react_default.a.createElement('div', {\n      key: key,\n      style: styles.swatchWrap\n    }, react_default.a.createElement(common_Swatch, SketchPresetColors_extends({}, c, {\n      style: styles.swatch,\n      onClick: handleClick,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color\n      }\n    })));\n  }));\n};\nSketchPresetColors_SketchPresetColors.propTypes = {\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.shape({\n    color: prop_types_default.a.string,\n    title: prop_types_default.a.string\n  })])).isRequired\n};\n/* harmony default export */ var sketch_SketchPresetColors = (SketchPresetColors_SketchPresetColors);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/Sketch.js\nvar Sketch_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\nvar Sketch_Sketch = function Sketch(_ref) {\n  var width = _ref.width,\n      rgb = _ref.rgb,\n      hex = _ref.hex,\n      hsv = _ref.hsv,\n      hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      disableAlpha = _ref.disableAlpha,\n      presetColors = _ref.presetColors,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': Sketch_extends({\n      picker: {\n        width: width,\n        padding: '10px 10px 0',\n        boxSizing: 'initial',\n        background: '#fff',\n        borderRadius: '4px',\n        boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '75%',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '3px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      controls: {\n        display: 'flex'\n      },\n      sliders: {\n        padding: '4px 0',\n        flex: '1'\n      },\n      color: {\n        width: '24px',\n        height: '24px',\n        position: 'relative',\n        marginTop: '4px',\n        marginLeft: '4px',\n        borderRadius: '3px'\n      },\n      activeColor: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '2px',\n        background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      hue: {\n        position: 'relative',\n        height: '10px',\n        overflow: 'hidden'\n      },\n      Hue: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      alpha: {\n        position: 'relative',\n        height: '10px',\n        marginTop: '4px',\n        overflow: 'hidden'\n      },\n      Alpha: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      }\n    }, passedStyles),\n    'disableAlpha': {\n      color: {\n        height: '10px'\n      },\n      hue: {\n        height: '10px'\n      },\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), {\n    disableAlpha: disableAlpha\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'sketch-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    style: styles.Saturation,\n    hsl: hsl,\n    hsv: hsv,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.sliders\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_Alpha, {\n    style: styles.Alpha,\n    rgb: rgb,\n    hsl: hsl,\n    renderers: renderers,\n    onChange: onChange\n  }))), react_default.a.createElement('div', {\n    style: styles.color\n  }, react_default.a.createElement(common_Checkboard, null), react_default.a.createElement('div', {\n    style: styles.activeColor\n  }))), react_default.a.createElement(sketch_SketchFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    onChange: onChange,\n    disableAlpha: disableAlpha\n  }), react_default.a.createElement(sketch_SketchPresetColors, {\n    colors: presetColors,\n    onClick: onChange,\n    onSwatchHover: onSwatchHover\n  }));\n};\nSketch_Sketch.propTypes = {\n  disableAlpha: prop_types_default.a.bool,\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  styles: prop_types_default.a.object\n};\nSketch_Sketch.defaultProps = {\n  disableAlpha: false,\n  width: 200,\n  styles: {},\n  presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']\n};\n/* harmony default export */ var sketch_Sketch = (common_ColorWrap(Sketch_Sketch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderSwatch.js\n\n\nvar SliderSwatch_SliderSwatch = function SliderSwatch(_ref) {\n  var hsl = _ref.hsl,\n      offset = _ref.offset,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      active = _ref.active,\n      first = _ref.first,\n      last = _ref.last;\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        height: '12px',\n        background: 'hsl(' + hsl.h + ', 50%, ' + offset * 100 + '%)',\n        cursor: 'pointer'\n      }\n    },\n    'first': {\n      swatch: {\n        borderRadius: '2px 0 0 2px'\n      }\n    },\n    'last': {\n      swatch: {\n        borderRadius: '0 2px 2px 0'\n      }\n    },\n    'active': {\n      swatch: {\n        transform: 'scaleY(1.8)',\n        borderRadius: '3.6px/2px'\n      }\n    }\n  }, {\n    active: active,\n    first: first,\n    last: last\n  });\n\n  var handleClick = function handleClick(e) {\n    return onClick({\n      h: hsl.h,\n      s: 0.5,\n      l: offset,\n      source: 'hsl'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.swatch,\n    onClick: handleClick\n  });\n};\n/* harmony default export */ var slider_SliderSwatch = (SliderSwatch_SliderSwatch);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderSwatches.js\n\n\n\nvar SliderSwatches_SliderSwatches = function SliderSwatches(_ref) {\n  var onClick = _ref.onClick,\n      hsl = _ref.hsl;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        marginTop: '20px'\n      },\n      swatch: {\n        boxSizing: 'border-box',\n        width: '20%',\n        paddingRight: '1px',\n        \"float\": 'left'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }); // Acceptible difference in floating point equality\n\n  var epsilon = 0.1;\n  return react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.80',\n    active: Math.abs(hsl.l - 0.80) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick,\n    first: true\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.65',\n    active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.50',\n    active: Math.abs(hsl.l - 0.50) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.35',\n    active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.20',\n    active: Math.abs(hsl.l - 0.20) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick,\n    last: true\n  })), react_default.a.createElement('div', {\n    style: styles.clear\n  }));\n};\n/* harmony default export */ var slider_SliderSwatches = (SliderSwatches_SliderSwatches);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderPointer.js\n\n\nvar SliderPointer_SliderPointer = function SliderPointer() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '14px',\n        height: '14px',\n        borderRadius: '6px',\n        transform: 'translate(-7px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var slider_SliderPointer = (SliderPointer_SliderPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/Slider.js\n\n\n\n\n\n\n\nvar Slider_Slider = function Slider(_ref) {\n  var hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      hue: {\n        height: '12px',\n        position: 'relative'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n  return react_default.a.createElement('div', {\n    style: styles.wrap || {},\n    className: 'slider-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    pointer: pointer,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement(slider_SliderSwatches, {\n    hsl: hsl,\n    onClick: onChange\n  })));\n};\nSlider_Slider.propTypes = {\n  styles: prop_types_default.a.object\n};\nSlider_Slider.defaultProps = {\n  pointer: slider_SliderPointer,\n  styles: {}\n};\n/* harmony default export */ var slider_Slider = (common_ColorWrap(Slider_Slider));\n// EXTERNAL MODULE: ./node_modules/@icons/material/CheckIcon.js\nvar CheckIcon = __webpack_require__(\"ql/k\");\nvar CheckIcon_default = /*#__PURE__*/__webpack_require__.n(CheckIcon);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/SwatchesColor.js\n\n\n\n\n\nvar SwatchesColor_SwatchesColor = function SwatchesColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      first = _ref.first,\n      last = _ref.last,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      color: {\n        width: '40px',\n        height: '24px',\n        cursor: 'pointer',\n        background: color,\n        marginBottom: '1px'\n      },\n      check: {\n        color: getContrastingColor(color),\n        marginLeft: '8px',\n        display: 'none'\n      }\n    },\n    'first': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '2px 2px 0 0'\n      }\n    },\n    'last': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '0 0 2px 2px'\n      }\n    },\n    'active': {\n      check: {\n        display: 'block'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      check: {\n        color: '#333'\n      }\n    },\n    'transparent': {\n      check: {\n        color: '#333'\n      }\n    }\n  }, {\n    first: first,\n    last: last,\n    active: active,\n    'color-#FFFFFF': color === '#FFFFFF',\n    'transparent': color === 'transparent'\n  });\n  return react_default.a.createElement(common_Swatch, {\n    color: color,\n    style: styles.color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: '0 0 4px ' + color\n    }\n  }, react_default.a.createElement('div', {\n    style: styles.check\n  }, react_default.a.createElement(CheckIcon_default.a, null)));\n};\n/* harmony default export */ var swatches_SwatchesColor = (SwatchesColor_SwatchesColor);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/SwatchesGroup.js\n\n\n\n\nvar SwatchesGroup_SwatchesGroup = function SwatchesGroup(_ref) {\n  var onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      group = _ref.group,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      group: {\n        paddingBottom: '10px',\n        width: '40px',\n        \"float\": 'left',\n        marginRight: '10px'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.group\n  }, Object(map[\"a\" /* default */])(group, function (color, i) {\n    return react_default.a.createElement(swatches_SwatchesColor, {\n      key: color,\n      color: color,\n      active: color.toLowerCase() === active,\n      first: i === 0,\n      last: i === group.length - 1,\n      onClick: onClick,\n      onSwatchHover: onSwatchHover\n    });\n  }));\n};\n/* harmony default export */ var swatches_SwatchesGroup = (SwatchesGroup_SwatchesGroup);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/Swatches.js\n\n\n\n\n\n\n\n\nvar Swatches_Swatches = function Swatches(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        height: height\n      },\n      overflow: {\n        height: height,\n        overflowY: 'scroll'\n      },\n      body: {\n        padding: '16px 0 6px 16px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    return onChange({\n      hex: data,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'swatches-picker ' + className\n  }, react_default.a.createElement(common_Raised, null, react_default.a.createElement('div', {\n    style: styles.overflow\n  }, react_default.a.createElement('div', {\n    style: styles.body\n  }, Object(map[\"a\" /* default */])(colors, function (group) {\n    return react_default.a.createElement(swatches_SwatchesGroup, {\n      key: group.toString(),\n      group: group,\n      active: hex,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })))));\n};\nSwatches_Swatches.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  height: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.arrayOf(prop_types_default.a.string)),\n  styles: prop_types_default.a.object\n  /* eslint-disable max-len */\n\n};\nSwatches_Swatches.defaultProps = {\n  width: 320,\n  height: 240,\n  colors: [[colors_es2015[\"p\" /* red */]['900'], colors_es2015[\"p\" /* red */]['700'], colors_es2015[\"p\" /* red */]['500'], colors_es2015[\"p\" /* red */]['300'], colors_es2015[\"p\" /* red */]['100']], [colors_es2015[\"n\" /* pink */]['900'], colors_es2015[\"n\" /* pink */]['700'], colors_es2015[\"n\" /* pink */]['500'], colors_es2015[\"n\" /* pink */]['300'], colors_es2015[\"n\" /* pink */]['100']], [colors_es2015[\"o\" /* purple */]['900'], colors_es2015[\"o\" /* purple */]['700'], colors_es2015[\"o\" /* purple */]['500'], colors_es2015[\"o\" /* purple */]['300'], colors_es2015[\"o\" /* purple */]['100']], [colors_es2015[\"g\" /* deepPurple */]['900'], colors_es2015[\"g\" /* deepPurple */]['700'], colors_es2015[\"g\" /* deepPurple */]['500'], colors_es2015[\"g\" /* deepPurple */]['300'], colors_es2015[\"g\" /* deepPurple */]['100']], [colors_es2015[\"i\" /* indigo */]['900'], colors_es2015[\"i\" /* indigo */]['700'], colors_es2015[\"i\" /* indigo */]['500'], colors_es2015[\"i\" /* indigo */]['300'], colors_es2015[\"i\" /* indigo */]['100']], [colors_es2015[\"b\" /* blue */]['900'], colors_es2015[\"b\" /* blue */]['700'], colors_es2015[\"b\" /* blue */]['500'], colors_es2015[\"b\" /* blue */]['300'], colors_es2015[\"b\" /* blue */]['100']], [colors_es2015[\"j\" /* lightBlue */]['900'], colors_es2015[\"j\" /* lightBlue */]['700'], colors_es2015[\"j\" /* lightBlue */]['500'], colors_es2015[\"j\" /* lightBlue */]['300'], colors_es2015[\"j\" /* lightBlue */]['100']], [colors_es2015[\"e\" /* cyan */]['900'], colors_es2015[\"e\" /* cyan */]['700'], colors_es2015[\"e\" /* cyan */]['500'], colors_es2015[\"e\" /* cyan */]['300'], colors_es2015[\"e\" /* cyan */]['100']], [colors_es2015[\"q\" /* teal */]['900'], colors_es2015[\"q\" /* teal */]['700'], colors_es2015[\"q\" /* teal */]['500'], colors_es2015[\"q\" /* teal */]['300'], colors_es2015[\"q\" /* teal */]['100']], ['#194D33', colors_es2015[\"h\" /* green */]['700'], colors_es2015[\"h\" /* green */]['500'], colors_es2015[\"h\" /* green */]['300'], colors_es2015[\"h\" /* green */]['100']], [colors_es2015[\"k\" /* lightGreen */]['900'], colors_es2015[\"k\" /* lightGreen */]['700'], colors_es2015[\"k\" /* lightGreen */]['500'], colors_es2015[\"k\" /* lightGreen */]['300'], colors_es2015[\"k\" /* lightGreen */]['100']], [colors_es2015[\"l\" /* lime */]['900'], colors_es2015[\"l\" /* lime */]['700'], colors_es2015[\"l\" /* lime */]['500'], colors_es2015[\"l\" /* lime */]['300'], colors_es2015[\"l\" /* lime */]['100']], [colors_es2015[\"r\" /* yellow */]['900'], colors_es2015[\"r\" /* yellow */]['700'], colors_es2015[\"r\" /* yellow */]['500'], colors_es2015[\"r\" /* yellow */]['300'], colors_es2015[\"r\" /* yellow */]['100']], [colors_es2015[\"a\" /* amber */]['900'], colors_es2015[\"a\" /* amber */]['700'], colors_es2015[\"a\" /* amber */]['500'], colors_es2015[\"a\" /* amber */]['300'], colors_es2015[\"a\" /* amber */]['100']], [colors_es2015[\"m\" /* orange */]['900'], colors_es2015[\"m\" /* orange */]['700'], colors_es2015[\"m\" /* orange */]['500'], colors_es2015[\"m\" /* orange */]['300'], colors_es2015[\"m\" /* orange */]['100']], [colors_es2015[\"f\" /* deepOrange */]['900'], colors_es2015[\"f\" /* deepOrange */]['700'], colors_es2015[\"f\" /* deepOrange */]['500'], colors_es2015[\"f\" /* deepOrange */]['300'], colors_es2015[\"f\" /* deepOrange */]['100']], [colors_es2015[\"d\" /* brown */]['900'], colors_es2015[\"d\" /* brown */]['700'], colors_es2015[\"d\" /* brown */]['500'], colors_es2015[\"d\" /* brown */]['300'], colors_es2015[\"d\" /* brown */]['100']], [colors_es2015[\"c\" /* blueGrey */]['900'], colors_es2015[\"c\" /* blueGrey */]['700'], colors_es2015[\"c\" /* blueGrey */]['500'], colors_es2015[\"c\" /* blueGrey */]['300'], colors_es2015[\"c\" /* blueGrey */]['100']], ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF']],\n  styles: {}\n};\n/* harmony default export */ var swatches_Swatches = (common_ColorWrap(Swatches_Swatches));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/twitter/Twitter.js\n\n\n\n\n\n\n\nvar Twitter_Twitter = function Twitter(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '0 solid rgba(0,0,0,0.25)',\n        boxShadow: '0 1px 4px rgba(0,0,0,0.25)',\n        borderRadius: '4px',\n        position: 'relative'\n      },\n      body: {\n        padding: '15px 9px 9px 15px'\n      },\n      label: {\n        fontSize: '18px',\n        color: '#fff'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent #fff transparent',\n        position: 'absolute'\n      },\n      triangleShadow: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent rgba(0,0,0,.1) transparent',\n        position: 'absolute'\n      },\n      hash: {\n        background: '#F0F0F0',\n        height: '30px',\n        width: '30px',\n        borderRadius: '4px 0 0 4px',\n        \"float\": 'left',\n        color: '#98A1A4',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      input: {\n        width: '100px',\n        fontSize: '14px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '28px',\n        boxShadow: 'inset 0 0 0 1px #F0F0F0',\n        boxSizing: 'content-box',\n        borderRadius: '0 4px 4px 0',\n        \"float\": 'left',\n        paddingLeft: '8px'\n      },\n      swatch: {\n        width: '30px',\n        height: '30px',\n        \"float\": 'left',\n        borderRadius: '4px',\n        margin: '0 6px 6px 0'\n      },\n      clear: {\n        clear: 'both'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-10px',\n        left: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        left: '12px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-10px',\n        right: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        right: '12px'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right'\n  });\n\n  var handleChange = function handleChange(hexcode, e) {\n    color_isValidHex(hexcode) && onChange({\n      hex: hexcode,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'twitter-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangleShadow\n  }), react_default.a.createElement('div', {\n    style: styles.triangle\n  }), react_default.a.createElement('div', {\n    style: styles.body\n  }, Object(map[\"a\" /* default */])(colors, function (c, i) {\n    return react_default.a.createElement(common_Swatch, {\n      key: i,\n      color: c,\n      hex: c,\n      style: styles.swatch,\n      onClick: handleChange,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: '0 0 4px ' + c\n      }\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.hash\n  }, '#'), react_default.a.createElement(common_EditableInput, {\n    label: null,\n    style: {\n      input: styles.input\n    },\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })));\n};\nTwitter_Twitter.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  triangle: prop_types_default.a.oneOf(['hide', 'top-left', 'top-right']),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  styles: prop_types_default.a.object\n};\nTwitter_Twitter.defaultProps = {\n  width: 276,\n  colors: ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'],\n  triangle: 'top-left',\n  styles: {}\n};\n/* harmony default export */ var twitter_Twitter = (common_ColorWrap(Twitter_Twitter));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GooglePointerCircle.js\n\n\n\nvar GooglePointerCircle_GooglePointerCircle = function GooglePointerCircle(props) {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        border: '2px #fff solid',\n        transform: 'translate(-12px, -13px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', ' + Math.round(props.hsl.s * 100) + '%, ' + Math.round(props.hsl.l * 100) + '%)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\nGooglePointerCircle_GooglePointerCircle.propTypes = {\n  hsl: prop_types_default.a.shape({\n    h: prop_types_default.a.number,\n    s: prop_types_default.a.number,\n    l: prop_types_default.a.number,\n    a: prop_types_default.a.number\n  })\n};\nGooglePointerCircle_GooglePointerCircle.defaultProps = {\n  hsl: {\n    a: 1,\n    h: 249.94,\n    l: 0.2,\n    s: 0.50\n  }\n};\n/* harmony default export */ var google_GooglePointerCircle = (GooglePointerCircle_GooglePointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GooglePointer.js\n\n\n\nvar GooglePointer_GooglePointer = function GooglePointer(props) {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        transform: 'translate(-10px, -7px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', 100%, 50%)',\n        border: '2px white solid'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\nGooglePointer_GooglePointer.propTypes = {\n  hsl: prop_types_default.a.shape({\n    h: prop_types_default.a.number,\n    s: prop_types_default.a.number,\n    l: prop_types_default.a.number,\n    a: prop_types_default.a.number\n  })\n};\nGooglePointer_GooglePointer.defaultProps = {\n  hsl: {\n    a: 1,\n    h: 249.94,\n    l: 0.2,\n    s: 0.50\n  }\n};\n/* harmony default export */ var google_GooglePointer = (GooglePointer_GooglePointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GoogleFields.js\n\n\n\n\nvar GoogleFields_GoogleFields = function GoogleFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      hsv = _ref.hsv;\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.rgb) {\n      var values = data.rgb.split(',');\n      color_isvalidColorString(data.rgb, 'rgb') && onChange({\n        r: values[0],\n        g: values[1],\n        b: values[2],\n        a: 1,\n        source: 'rgb'\n      }, e);\n    } else if (data.hsv) {\n      var _values = data.hsv.split(',');\n\n      if (color_isvalidColorString(data.hsv, 'hsv')) {\n        _values[2] = _values[2].replace('%', '');\n        _values[1] = _values[1].replace('%', '');\n        _values[0] = _values[0].replace('\xb0', '');\n\n        if (_values[1] == 1) {\n          _values[1] = 0.01;\n        } else if (_values[2] == 1) {\n          _values[2] = 0.01;\n        }\n\n        onChange({\n          h: Number(_values[0]),\n          s: Number(_values[1]),\n          v: Number(_values[2]),\n          source: 'hsv'\n        }, e);\n      }\n    } else if (data.hsl) {\n      var _values2 = data.hsl.split(',');\n\n      if (color_isvalidColorString(data.hsl, 'hsl')) {\n        _values2[2] = _values2[2].replace('%', '');\n        _values2[1] = _values2[1].replace('%', '');\n        _values2[0] = _values2[0].replace('\xb0', '');\n\n        if (hsvValue[1] == 1) {\n          hsvValue[1] = 0.01;\n        } else if (hsvValue[2] == 1) {\n          hsvValue[2] = 0.01;\n        }\n\n        onChange({\n          h: Number(_values2[0]),\n          s: Number(_values2[1]),\n          v: Number(_values2[2]),\n          source: 'hsl'\n        }, e);\n      }\n    }\n  };\n\n  var styles = lib_default()({\n    'default': {\n      wrap: {\n        display: 'flex',\n        height: '100px',\n        marginTop: '4px'\n      },\n      fields: {\n        width: '100%'\n      },\n      column: {\n        paddingTop: '10px',\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      \"double\": {\n        padding: '0px 4.4px',\n        boxSizing: 'border-box'\n      },\n      input: {\n        width: '100%',\n        height: '38px',\n        boxSizing: 'border-box',\n        padding: '4px 10% 3px',\n        textAlign: 'center',\n        border: '1px solid #dadce0',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      input2: {\n        height: '38px',\n        width: '100%',\n        border: '1px solid #dadce0',\n        boxSizing: 'border-box',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        paddingLeft: '10px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label: {\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '35px',\n        top: '-6px',\n        left: '0',\n        right: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label2: {\n        left: '10px',\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '32px',\n        top: '-6px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      single: {\n        flexGrow: '1',\n        margin: '0px 4.4px'\n      }\n    }\n  });\n  var rgbValue = rgb.r + ', ' + rgb.g + ', ' + rgb.b;\n  var hslValue = Math.round(hsl.h) + '\\xB0, ' + Math.round(hsl.s * 100) + '%, ' + Math.round(hsl.l * 100) + '%';\n  var hsvValue = Math.round(hsv.h) + '\\xB0, ' + Math.round(hsv.s * 100) + '%, ' + Math.round(hsv.v * 100) + '%';\n  return react_default.a.createElement('div', {\n    style: styles.wrap,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.fields\n  }, react_default.a.createElement('div', {\n    style: styles[\"double\"]\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.column\n  }, react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'rgb',\n    value: rgbValue,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'hsv',\n    value: hsvValue,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'hsl',\n    value: hslValue,\n    onChange: handleChange\n  })))));\n};\n/* harmony default export */ var google_GoogleFields = (GoogleFields_GoogleFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/Google.js\n\n\n\n\n\n\n\n\nvar Google_Google = function Google(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      header = _ref.header,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        border: '1px solid #dfe1e5',\n        boxSizing: 'initial',\n        display: 'flex',\n        flexWrap: 'wrap',\n        borderRadius: '8px 8px 0px 0px'\n      },\n      head: {\n        height: '57px',\n        width: '100%',\n        paddingTop: '16px',\n        paddingBottom: '16px',\n        paddingLeft: '16px',\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        fontFamily: 'Roboto-Regular,HelveticaNeue,Arial,sans-serif'\n      },\n      saturation: {\n        width: '70%',\n        padding: '0px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      swatch: {\n        width: '30%',\n        height: '228px',\n        padding: '0px',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 1)',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      body: {\n        margin: 'auto',\n        width: '95%'\n      },\n      controls: {\n        display: 'flex',\n        boxSizing: 'border-box',\n        height: '52px',\n        paddingTop: '22px'\n      },\n      color: {\n        width: '32px'\n      },\n      hue: {\n        height: '8px',\n        position: 'relative',\n        margin: '0px 16px 0px 16px',\n        width: '100%'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'google-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.head\n  }, header), react_default.a.createElement('div', {\n    style: styles.swatch\n  }), react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    hsl: hsl,\n    hsv: hsv,\n    pointer: google_GooglePointerCircle,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    radius: '4px',\n    pointer: google_GooglePointer,\n    onChange: onChange\n  }))), react_default.a.createElement(google_GoogleFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    hsv: hsv,\n    onChange: onChange\n  })));\n};\nGoogle_Google.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  styles: prop_types_default.a.object,\n  header: prop_types_default.a.string\n};\nGoogle_Google.defaultProps = {\n  width: 652,\n  styles: {},\n  header: 'Color picker'\n};\n/* harmony default export */ var google_Google = (common_ColorWrap(Google_Google));\n// CONCATENATED MODULE: ./node_modules/react-color/es/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15kH\n")},B5Mt:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar loopable = function loopable(i, length) {\n  var props = {};\n\n  var setProp = function setProp(name) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    props[name] = value;\n  };\n\n  i === 0 && setProp('first-child');\n  i === length - 1 && setProp('last-child');\n  (i === 0 || i % 2 === 0) && setProp('even');\n  Math.abs(i % 2) === 1 && setProp('odd');\n  setProp('nth-child', i);\n  return props;\n};\n\nexports[\"default\"] = loopable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2xvb3AuanM/MDc5MyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvb3BhYmxlIiwiaSIsImxlbmd0aCIsInByb3BzIiwic2V0UHJvcCIsIm5hbWUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztFQUMzQ0MsS0FBSyxFQUFFO0FBRG9DLENBQTdDOztBQUdBLElBQUlDLFFBQVEsR0FBRyxTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQkMsTUFBckIsRUFBNkI7RUFDMUMsSUFBSUMsS0FBSyxHQUFHLEVBQVo7O0VBQ0EsSUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCO0lBQ25DLElBQUlOLEtBQUssR0FBR08sU0FBUyxDQUFDSixNQUFWLEdBQW1CLENBQW5CLElBQXdCSSxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCQyxTQUF6QyxHQUFxREQsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7SUFFQUgsS0FBSyxDQUFDRSxJQUFELENBQUwsR0FBY04sS0FBZDtFQUNELENBSkQ7O0VBTUFFLENBQUMsS0FBSyxDQUFOLElBQVdHLE9BQU8sQ0FBQyxhQUFELENBQWxCO0VBQ0FILENBQUMsS0FBS0MsTUFBTSxHQUFHLENBQWYsSUFBb0JFLE9BQU8sQ0FBQyxZQUFELENBQTNCO0VBQ0EsQ0FBQ0gsQ0FBQyxLQUFLLENBQU4sSUFBV0EsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUF0QixLQUE0QkcsT0FBTyxDQUFDLE1BQUQsQ0FBbkM7RUFDQUksSUFBSSxDQUFDQyxHQUFMLENBQVNSLENBQUMsR0FBRyxDQUFiLE1BQW9CLENBQXBCLElBQXlCRyxPQUFPLENBQUMsS0FBRCxDQUFoQztFQUNBQSxPQUFPLENBQUMsV0FBRCxFQUFjSCxDQUFkLENBQVA7RUFFQSxPQUFPRSxLQUFQO0FBQ0QsQ0FmRDs7QUFpQkFMLE9BQU8sV0FBUCxHQUFrQkUsUUFBbEIiLCJmaWxlIjoiQjVNdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsb29wYWJsZSA9IGZ1bmN0aW9uIGxvb3BhYmxlKGksIGxlbmd0aCkge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHNldFByb3AgPSBmdW5jdGlvbiBzZXRQcm9wKG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBwcm9wc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIGkgPT09IDAgJiYgc2V0UHJvcCgnZmlyc3QtY2hpbGQnKTtcbiAgaSA9PT0gbGVuZ3RoIC0gMSAmJiBzZXRQcm9wKCdsYXN0LWNoaWxkJyk7XG4gIChpID09PSAwIHx8IGkgJSAyID09PSAwKSAmJiBzZXRQcm9wKCdldmVuJyk7XG4gIE1hdGguYWJzKGkgJSAyKSA9PT0gMSAmJiBzZXRQcm9wKCdvZGQnKTtcbiAgc2V0UHJvcCgnbnRoLWNoaWxkJywgaSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbG9vcGFibGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///B5Mt\n")},KfSR:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.autoprefix = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar transforms = {\n  borderRadius: function borderRadius(value) {\n    return {\n      msBorderRadius: value,\n      MozBorderRadius: value,\n      OBorderRadius: value,\n      WebkitBorderRadius: value,\n      borderRadius: value\n    };\n  },\n  boxShadow: function boxShadow(value) {\n    return {\n      msBoxShadow: value,\n      MozBoxShadow: value,\n      OBoxShadow: value,\n      WebkitBoxShadow: value,\n      boxShadow: value\n    };\n  },\n  userSelect: function userSelect(value) {\n    return {\n      WebkitTouchCallout: value,\n      KhtmlUserSelect: value,\n      MozUserSelect: value,\n      msUserSelect: value,\n      WebkitUserSelect: value,\n      userSelect: value\n    };\n  },\n  flex: function flex(value) {\n    return {\n      WebkitBoxFlex: value,\n      MozBoxFlex: value,\n      WebkitFlex: value,\n      msFlex: value,\n      flex: value\n    };\n  },\n  flexBasis: function flexBasis(value) {\n    return {\n      WebkitFlexBasis: value,\n      flexBasis: value\n    };\n  },\n  justifyContent: function justifyContent(value) {\n    return {\n      WebkitJustifyContent: value,\n      justifyContent: value\n    };\n  },\n  transition: function transition(value) {\n    return {\n      msTransition: value,\n      MozTransition: value,\n      OTransition: value,\n      WebkitTransition: value,\n      transition: value\n    };\n  },\n  transform: function transform(value) {\n    return {\n      msTransform: value,\n      MozTransform: value,\n      OTransform: value,\n      WebkitTransform: value,\n      transform: value\n    };\n  },\n  absolute: function absolute(value) {\n    var direction = value && value.split(\' \');\n    return {\n      position: \'absolute\',\n      top: direction && direction[0],\n      right: direction && direction[1],\n      bottom: direction && direction[2],\n      left: direction && direction[3]\n    };\n  },\n  extend: function extend(name, otherElementStyles) {\n    var otherStyle = otherElementStyles[name];\n\n    if (otherStyle) {\n      return otherStyle;\n    }\n\n    return {\n      \'extend\': name\n    };\n  }\n};\n\nvar autoprefix = exports.autoprefix = function autoprefix(elements) {\n  var prefixed = {};\n  (0, _forOwn3["default"])(elements, function (styles, element) {\n    var expanded = {};\n    (0, _forOwn3["default"])(styles, function (value, key) {\n      var transform = transforms[key];\n\n      if (transform) {\n        expanded = _extends({}, expanded, transform(value));\n      } else {\n        expanded[key] = value;\n      }\n    });\n    prefixed[element] = expanded;\n  });\n  return prefixed;\n};\n\nexports["default"] = autoprefix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2F1dG9wcmVmaXguanM/MjlmNCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImF1dG9wcmVmaXgiLCJ1bmRlZmluZWQiLCJfZm9yT3duMiIsInJlcXVpcmUiLCJfZm9yT3duMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJvYmoiLCJfX2VzTW9kdWxlIiwidHJhbnNmb3JtcyIsImJvcmRlclJhZGl1cyIsIm1zQm9yZGVyUmFkaXVzIiwiTW96Qm9yZGVyUmFkaXVzIiwiT0JvcmRlclJhZGl1cyIsIldlYmtpdEJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsIm1zQm94U2hhZG93IiwiTW96Qm94U2hhZG93IiwiT0JveFNoYWRvdyIsIldlYmtpdEJveFNoYWRvdyIsInVzZXJTZWxlY3QiLCJXZWJraXRUb3VjaENhbGxvdXQiLCJLaHRtbFVzZXJTZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwibXNVc2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsImZsZXgiLCJXZWJraXRCb3hGbGV4IiwiTW96Qm94RmxleCIsIldlYmtpdEZsZXgiLCJtc0ZsZXgiLCJmbGV4QmFzaXMiLCJXZWJraXRGbGV4QmFzaXMiLCJqdXN0aWZ5Q29udGVudCIsIldlYmtpdEp1c3RpZnlDb250ZW50IiwidHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJ0cmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJhYnNvbHV0ZSIsImRpcmVjdGlvbiIsInNwbGl0IiwicG9zaXRpb24iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJleHRlbmQiLCJuYW1lIiwib3RoZXJFbGVtZW50U3R5bGVzIiwib3RoZXJTdHlsZSIsImVsZW1lbnRzIiwicHJlZml4ZWQiLCJzdHlsZXMiLCJlbGVtZW50IiwiZXhwYW5kZWQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0VBQzNDQyxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxVQUFSLEdBQXFCQyxTQUFyQjs7QUFFQSxJQUFJQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUF0Qjs7QUFFQSxJQUFJQyxRQUFRLEdBQUdDLHNCQUFzQixDQUFDSCxRQUFELENBQXJDOztBQUVBLElBQUlJLFFBQVEsR0FBR1YsTUFBTSxDQUFDVyxNQUFQLElBQWlCLFVBQVVDLE1BQVYsRUFBa0I7RUFBRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBOUIsRUFBc0NGLENBQUMsRUFBdkMsRUFBMkM7SUFBRSxJQUFJRyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0QsQ0FBRCxDQUF0Qjs7SUFBMkIsS0FBSyxJQUFJSSxHQUFULElBQWdCRCxNQUFoQixFQUF3QjtNQUFFLElBQUloQixNQUFNLENBQUNrQixTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNKLE1BQXJDLEVBQTZDQyxHQUE3QyxDQUFKLEVBQXVEO1FBQUVMLE1BQU0sQ0FBQ0ssR0FBRCxDQUFOLEdBQWNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQjtNQUE0QjtJQUFFO0VBQUU7O0VBQUMsT0FBT0wsTUFBUDtBQUFnQixDQUFoUTs7QUFFQSxTQUFTSCxzQkFBVCxDQUFnQ1ksR0FBaEMsRUFBcUM7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFB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LFVBQWxCIiwiZmlsZSI6IktmU1IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmF1dG9wcmVmaXggPSB1bmRlZmluZWQ7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0cmFuc2Zvcm1zID0ge1xuICBib3JkZXJSYWRpdXM6IGZ1bmN0aW9uIGJvcmRlclJhZGl1cyh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtc0JvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBNb3pCb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgT0JvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBXZWJraXRCb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgYm9yZGVyUmFkaXVzOiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIGJveFNoYWRvdzogZnVuY3Rpb24gYm94U2hhZG93KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zQm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIE1vekJveFNoYWRvdzogdmFsdWUsXG4gICAgICBPQm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIFdlYmtpdEJveFNoYWRvdzogdmFsdWUsXG4gICAgICBib3hTaGFkb3c6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgdXNlclNlbGVjdDogZnVuY3Rpb24gdXNlclNlbGVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRUb3VjaENhbGxvdXQ6IHZhbHVlLFxuICAgICAgS2h0bWxVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIE1velVzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgbXNVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIFdlYmtpdFVzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgdXNlclNlbGVjdDogdmFsdWVcbiAgICB9O1xuICB9LFxuXG4gIGZsZXg6IGZ1bmN0aW9uIGZsZXgodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0Qm94RmxleDogdmFsdWUsXG4gICAgICBNb3pCb3hGbGV4OiB2YWx1ZSxcbiAgICAgIFdlYmtpdEZsZXg6IHZhbHVlLFxuICAgICAgbXNGbGV4OiB2YWx1ZSxcbiAgICAgIGZsZXg6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgZmxleEJhc2lzOiBmdW5jdGlvbiBmbGV4QmFzaXModmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0RmxleEJhc2lzOiB2YWx1ZSxcbiAgICAgIGZsZXhCYXNpczogdmFsdWVcbiAgICB9O1xuICB9LFxuICBqdXN0aWZ5Q29udGVudDogZnVuY3Rpb24ganVzdGlmeUNvbnRlbnQodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0SnVzdGlmeUNvbnRlbnQ6IHZhbHVlLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IHZhbHVlXG4gICAgfTtcbiAgfSxcblxuICB0cmFuc2l0aW9uOiBmdW5jdGlvbiB0cmFuc2l0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zVHJhbnNpdGlvbjogdmFsdWUsXG4gICAgICBNb3pUcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIE9UcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246IHZhbHVlLFxuICAgICAgdHJhbnNpdGlvbjogdmFsdWVcbiAgICB9O1xuICB9LFxuXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zVHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIE1velRyYW5zZm9ybTogdmFsdWUsXG4gICAgICBPVHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIFdlYmtpdFRyYW5zZm9ybTogdmFsdWUsXG4gICAgICB0cmFuc2Zvcm06IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgYWJzb2x1dGU6IGZ1bmN0aW9uIGFic29sdXRlKHZhbHVlKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHZhbHVlICYmIHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzBdLFxuICAgICAgcmlnaHQ6IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bMV0sXG4gICAgICBib3R0b206IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bMl0sXG4gICAgICBsZWZ0OiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzNdXG4gICAgfTtcbiAgfSxcbiAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQobmFtZSwgb3RoZXJFbGVtZW50U3R5bGVzKSB7XG4gICAgdmFyIG90aGVyU3R5bGUgPSBvdGhlckVsZW1lbnRTdHlsZXNbbmFtZV07XG4gICAgaWYgKG90aGVyU3R5bGUpIHtcbiAgICAgIHJldHVybiBvdGhlclN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgJ2V4dGVuZCc6IG5hbWVcbiAgICB9O1xuICB9XG59O1xuXG52YXIgYXV0b3ByZWZpeCA9IGV4cG9ydHMuYXV0b3ByZWZpeCA9IGZ1bmN0aW9uIGF1dG9wcmVmaXgoZWxlbWVudHMpIHtcbiAgdmFyIHByZWZpeGVkID0ge307XG4gICgwLCBfZm9yT3duMy5kZWZhdWx0KShlbGVtZW50cywgZnVuY3Rpb24gKHN0eWxlcywgZWxlbWVudCkge1xuICAgIHZhciBleHBhbmRlZCA9IHt9O1xuICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KShzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc1trZXldO1xuICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICBleHBhbmRlZCA9IF9leHRlbmRzKHt9LCBleHBhbmRlZCwgdHJhbnNmb3JtKHZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBhbmRlZFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlZml4ZWRbZWxlbWVudF0gPSBleHBhbmRlZDtcbiAgfSk7XG4gIHJldHVybiBwcmVmaXhlZDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGF1dG9wcmVmaXg7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///KfSR\n')},TOwV:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("qT12");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7RUFDekNDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxNQUFELENBQXhCO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IlRPd1YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///TOwV\n')},VYtm:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.hover = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar hover = exports.hover = function hover(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Hover, _React$Component);\n\n    function Hover() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Hover);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        hover: false\n      }, _this.handleMouseOver = function () {\n        return _this.setState({\n          hover: true\n        });\n      }, _this.handleMouseOut = function () {\n        return _this.setState({\n          hover: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseOver: _this.handleMouseOver,\n          onMouseOut: _this.handleMouseOut\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Hover;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = hover;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2NvbXBvbmVudHMvaG92ZXIuanM/NTU4YiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhvdmVyIiwidW5kZWZpbmVkIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX3JlYWN0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJDb21wb25lbnQiLCJTcGFuIiwiX1JlYWN0JENvbXBvbmVudCIsIkhvdmVyIiwiX3JlZiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJoYW5kbGVNb3VzZU92ZXIiLCJzZXRTdGF0ZSIsImhhbmRsZU1vdXNlT3V0IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIm9uTW91c2VPdmVyIiwib25Nb3VzZU91dCIsInByb3BzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2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QUssQ0FBQ1csUUFBTixDQUFlO1VBQUVyRCxLQUFLLEVBQUU7UUFBVCxDQUFmLENBQVA7TUFDRCxDQUpjLEVBSVowQyxLQUFLLENBQUNhLE1BQU4sR0FBZSxZQUFZO1FBQzVCLE9BQU94QyxPQUFPLFdBQVAsQ0FBZ0J5QyxhQUFoQixDQUNMbkIsSUFESyxFQUVMO1VBQUVvQixXQUFXLEVBQUVmLEtBQUssQ0FBQ1UsZUFBckI7VUFBc0NNLFVBQVUsRUFBRWhCLEtBQUssQ0FBQ1k7UUFBeEQsQ0FGSyxFQUdMdkMsT0FBTyxXQUFQLENBQWdCeUMsYUFBaEIsQ0FBOEJwQixTQUE5QixFQUF5Q2xDLFFBQVEsQ0FBQyxFQUFELEVBQUt3QyxLQUFLLENBQUNpQixLQUFYLEVBQWtCakIsS0FBSyxDQUFDUyxLQUF4QixDQUFqRCxDQUhLLENBQVA7TUFLRCxDQVZjLEVBVVpWLEtBVlEsQ0FBSixFQVVJbEIsMEJBQTBCLENBQUNtQixLQUFELEVBQVFDLElBQVIsQ0FWckM7SUFXRDs7SUFFRCxPQUFPSixLQUFQO0VBQ0QsQ0E1Qk0sQ0E0Qkx4QixPQUFPLFdBQVAsQ0FBZ0JxQixTQTVCWCxDQUFQO0FBNkJELENBaENEOztBQWtDQXRDLE9BQU8sV0FBUCxHQUFrQkUsS0FBbEIiLCJmaWxlIjoiVll0bS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgaG92ZXIgPSBleHBvcnRzLmhvdmVyID0gZnVuY3Rpb24gaG92ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBTcGFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc3Bhbic7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEhvdmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEhvdmVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb3Zlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBIb3Zlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhvdmVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7IGhvdmVyOiBmYWxzZSB9LCBfdGhpcy5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pO1xuICAgICAgfSwgX3RoaXMuaGFuZGxlTW91c2VPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiBmYWxzZSB9KTtcbiAgICAgIH0sIF90aGlzLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFNwYW4sXG4gICAgICAgICAgeyBvbk1vdXNlT3ZlcjogX3RoaXMuaGFuZGxlTW91c2VPdmVyLCBvbk1vdXNlT3V0OiBfdGhpcy5oYW5kbGVNb3VzZU91dCB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSkpXG4gICAgICAgICk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gSG92ZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBob3ZlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///VYtm\n')},W3HW:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.flattenNames = undefined;\n\nvar _isString2 = __webpack_require__("4qC0");\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _isPlainObject2 = __webpack_require__("YO3V");\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _map2 = __webpack_require__("3WF5");\n\nvar _map3 = _interopRequireDefault(_map2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar flattenNames = exports.flattenNames = function flattenNames() {\n  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var names = [];\n  (0, _map3["default"])(things, function (thing) {\n    if (Array.isArray(thing)) {\n      flattenNames(thing).map(function (name) {\n        return names.push(name);\n      });\n    } else if ((0, _isPlainObject3["default"])(thing)) {\n      (0, _forOwn3["default"])(thing, function (value, key) {\n        value === true && names.push(key);\n        names.push(key + \'-\' + value);\n      });\n    } else if ((0, _isString3["default"])(thing)) {\n      names.push(thing);\n    }\n  });\n  return names;\n};\n\nexports["default"] = flattenNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2ZsYXR0ZW5OYW1lcy5qcz81YjcxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmxhdHRlbk5hbWVzIiwidW5kZWZpbmVkIiwiX2lzU3RyaW5nMiIsInJlcXVpcmUiLCJfaXNTdHJpbmczIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9mb3JPd24yIiwiX2Zvck93bjMiLCJfaXNQbGFpbk9iamVjdDIiLCJfaXNQbGFpbk9iamVjdDMiLCJfbWFwMiIsIl9tYXAzIiwib2JqIiwiX19lc01vZHVsZSIsInRoaW5ncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwidGhpbmciLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJuYW1lIiwicHVzaCIsImtleSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXhCOztBQUVBLElBQUlDLFVBQVUsR0FBR0Msc0JBQXNCLENBQUNILFVBQUQsQ0FBdkM7O0FBRUEsSUFBSUksUUFBUSxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBRUEsSUFBSUksUUFBUSxHQUFHRixzQkFBc0IsQ0FBQ0MsUUFBRCxDQUFyQzs7QUFFQSxJQUFJRSxlQUFlLEdBQUdMLG1CQUFPLENBQUMsTUFBRCxDQUE3Qjs7QUFFQSxJQUFJTSxlQUFlLEdBQUdKLHNCQUFzQixDQUFDRyxlQUFELENBQTVDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyxNQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0lBQUUsV0FBU0E7RUFBWCxDQUFyQztBQUF3RDs7QUFFL0YsSUFBSVosWUFBWSxHQUFHRixPQUFPLENBQUNFLFlBQVIsR0FBdUIsU0FBU0EsWUFBVCxHQUF3QjtFQUNoRSxJQUFJYyxNQUFNLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmQsU0FBekMsR0FBcURjLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQWpGO0VBRUEsSUFBSUUsS0FBSyxHQUFHLEVBQVo7RUFFQSxDQUFDLEdBQUdOLEtBQUssV0FBVCxFQUFtQkcsTUFBbkIsRUFBMkIsVUFBVUksS0FBVixFQUFpQjtJQUMxQyxJQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBZCxDQUFKLEVBQTBCO01BQ3hCbEIsWUFBWSxDQUFDa0IsS0FBRCxDQUFaLENBQW9CRyxHQUFwQixDQUF3QixVQUFVQyxJQUFWLEVBQWdCO1FBQ3RDLE9BQU9MLEtBQUssQ0FBQ00sSUFBTixDQUFXRCxJQUFYLENBQVA7TUFDRCxDQUZEO0lBR0QsQ0FKRCxNQUlPLElBQUksQ0FBQyxHQUFHYixlQUFlLFdBQW5CLEVBQTZCUyxLQUE3QixDQUFKLEVBQXlDO01BQzlDLENBQUMsR0FBR1gsUUFBUSxXQUFaLEVBQXNCVyxLQUF0QixFQUE2QixVQUFVbkIsS0FBVixFQUFpQnlCLEdBQWpCLEVBQXNCO1FBQ2pEekIsS0FBSyxLQUFLLElBQVYsSUFBa0JrQixLQUFLLENBQUNNLElBQU4sQ0FBV0MsR0FBWCxDQUFsQjtRQUNBUCxLQUFLLENBQUNNLElBQU4sQ0FBV0MsR0FBRyxHQUFHLEdBQU4sR0FBWXpCLEtBQXZCO01BQ0QsQ0FIRDtJQUlELENBTE0sTUFLQSxJQUFJLENBQUMsR0FBR0ssVUFBVSxXQUFkLEVBQXdCYyxLQUF4QixDQUFKLEVBQW9DO01BQ3pDRCxLQUFLLENBQUNNLElBQU4sQ0FBV0wsS0FBWDtJQUNEO0VBQ0YsQ0FiRDtFQWVBLE9BQU9ELEtBQVA7QUFDRCxDQXJCRDs7QUF1QkFuQixPQUFPLFdBQVAsR0FBa0JFLFlBQWxCIiwiZmlsZSI6IlczSFcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZsYXR0ZW5OYW1lcyA9IHVuZGVmaW5lZDtcblxudmFyIF9pc1N0cmluZzIgPSByZXF1aXJlKCdsb2Rhc2gvaXNTdHJpbmcnKTtcblxudmFyIF9pc1N0cmluZzMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1N0cmluZzIpO1xuXG52YXIgX2Zvck93bjIgPSByZXF1aXJlKCdsb2Rhc2gvZm9yT3duJyk7XG5cbnZhciBfZm9yT3duMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvck93bjIpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QyID0gcmVxdWlyZSgnbG9kYXNoL2lzUGxhaW5PYmplY3QnKTtcblxudmFyIF9pc1BsYWluT2JqZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUGxhaW5PYmplY3QyKTtcblxudmFyIF9tYXAyID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXAyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZsYXR0ZW5OYW1lcyA9IGV4cG9ydHMuZmxhdHRlbk5hbWVzID0gZnVuY3Rpb24gZmxhdHRlbk5hbWVzKCkge1xuICB2YXIgdGhpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICB2YXIgbmFtZXMgPSBbXTtcblxuICAoMCwgX21hcDMuZGVmYXVsdCkodGhpbmdzLCBmdW5jdGlvbiAodGhpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZsYXR0ZW5OYW1lcyh0aGluZykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzUGxhaW5PYmplY3QzLmRlZmF1bHQpKHRoaW5nKSkge1xuICAgICAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKHRoaW5nLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YWx1ZSA9PT0gdHJ1ZSAmJiBuYW1lcy5wdXNoKGtleSk7XG4gICAgICAgIG5hbWVzLnB1c2goa2V5ICsgJy0nICsgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzU3RyaW5nMy5kZWZhdWx0KSh0aGluZykpIHtcbiAgICAgIG5hbWVzLnB1c2godGhpbmcpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZmxhdHRlbk5hbWVzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///W3HW\n')},X0wg:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorType", function() { return AnchorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bottom", function() { return Bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomResizable", function() { return BottomResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenterType", function() { return CenterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Centered", function() { return Centered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenteredVertically", function() { return CenteredVertically; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Custom", function() { return Custom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layer", function() { return Layer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Left", function() { return Left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftResizable", function() { return LeftResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positioned", function() { return Positioned; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeHandlePlacement", function() { return ResizeHandlePlacement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeType", function() { return ResizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Right", function() { return Right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightResizable", function() { return RightResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Top", function() { return Top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopResizable", function() { return TopResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPort", function() { return ViewPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anchoredProps", function() { return anchoredProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizableProps", function() { return resizableProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCurrentSpace", function() { return useCurrentSpace; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("h9Sk");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === \'undefined\') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName(\'head\')[0];\n  var style = document.createElement(\'style\');\n  style.type = \'text/css\';\n\n  if (insertAt === \'top\') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = ".spaces-centered-vertically {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n}\\r\\n\\r\\n.spaces-centered {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n\\ttext-align: center;\\r\\n}\\r\\n\\r\\n.spaces-clearfix:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tdisplay: table;\\r\\n\\tclear: both;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9999;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:before {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tz-index: 2;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9998;\\r\\n\\tpointer-events: all;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left:before {\\r\\n\\tcursor: w-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right:before {\\r\\n\\tcursor: e-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top:before {\\r\\n\\tcursor: n-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom:before {\\r\\n\\tcursor: s-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-space {\\r\\n\\toverflow: hidden;\\r\\n\\ttouch-action: none;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-resizing .spaces-space {\\r\\n\\ttransition: none !important;\\r\\n}\\r\\n\\r\\n.spaces-space .spaces-space-inner {\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-space.scrollable .spaces-space-inner {\\r\\n\\toverflow: auto;\\r\\n\\ttouch-action: auto;\\r\\n}\\r\\n";\nstyleInject(css_248z);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Type;\n\n(function (Type) {\n  Type["ViewPort"] = "viewport";\n  Type["Fixed"] = "fixed";\n  Type["Fill"] = "fill";\n  Type["Positioned"] = "positioned";\n  Type["Anchored"] = "anchored";\n  Type["Custom"] = "custom";\n})(Type || (Type = {}));\n\nvar AnchorType;\n\n(function (AnchorType) {\n  AnchorType["Left"] = "anchor-left";\n  AnchorType["Right"] = "anchor-right";\n  AnchorType["Top"] = "anchor-top";\n  AnchorType["Bottom"] = "anchor-bottom";\n})(AnchorType || (AnchorType = {}));\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";\n  Orientation[Orientation["Vertical"] = 1] = "Vertical";\n})(Orientation || (Orientation = {}));\n\nvar ResizeType;\n\n(function (ResizeType) {\n  ResizeType["Left"] = "resize-left";\n  ResizeType["Right"] = "resize-right";\n  ResizeType["Top"] = "resize-top";\n  ResizeType["Bottom"] = "resize-bottom";\n  ResizeType["TopLeft"] = "resize-topleft";\n  ResizeType["TopRight"] = "resize-topright";\n  ResizeType["BottomLeft"] = "resize-bottomleft";\n  ResizeType["BottomRight"] = "resize-bottomright";\n})(ResizeType || (ResizeType = {}));\n\nvar ResizeHandlePlacement;\n\n(function (ResizeHandlePlacement) {\n  ResizeHandlePlacement["OverlayInside"] = "overlay-inside";\n  ResizeHandlePlacement["Inside"] = "inside";\n  ResizeHandlePlacement["OverlayBoundary"] = "overlay-boundary";\n})(ResizeHandlePlacement || (ResizeHandlePlacement = {}));\n\nvar CenterType;\n\n(function (CenterType) {\n  CenterType["None"] = "none";\n  CenterType["Vertical"] = "vertical";\n  CenterType["HorizontalVertical"] = "horizontalVertical";\n})(CenterType || (CenterType = {}));\n\nvar MoveEvent;\n\n(function (MoveEvent) {\n  MoveEvent["Mouse"] = "mousemove";\n  MoveEvent["Touch"] = "touchmove";\n})(MoveEvent || (MoveEvent = {}));\n\nvar EndEvent;\n\n(function (EndEvent) {\n  EndEvent["Mouse"] = "mouseup";\n  EndEvent["Touch"] = "touchend";\n})(EndEvent || (EndEvent = {}));\n\nfunction shortuuid() {\n  var firstPart = Math.random() * 46656 | 0;\n  var secondPart = Math.random() * 46656 | 0;\n  return ("000" + firstPart.toString(36)).slice(-3) + ("000" + secondPart.toString(36)).slice(-3);\n}\n\nfunction getSizeString(size) {\n  return typeof size === "string" ? size : size + "px";\n}\n\nfunction css(size, dontAddCalc) {\n  if (size.size === 0 && size.adjusted.length === 0 && size.resized === 0) {\n    return "0px";\n  }\n\n  var parts = [];\n\n  if (size.size !== undefined) {\n    parts.push(getSizeString(size.size));\n  }\n\n  size.adjusted.forEach(function (l) {\n    return parts.push(getSizeString(l));\n  });\n\n  if (size.resized !== 0) {\n    parts.push(getSizeString(size.resized));\n  }\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  if (parts.length === 1) {\n    return parts[0];\n  }\n\n  if (dontAddCalc) {\n    return parts.join(" + ");\n  }\n\n  return "calc(" + parts.join(" + ") + ")";\n}\n\nfunction coalesce() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.find(function (x) {\n    return x !== null && x !== undefined;\n  });\n}\n\nfunction adjustmentsEqual(item1, item2) {\n  if (item1.length !== item2.length) {\n    return false;\n  }\n\n  for (var i = 0, len = item1.length; i < len; i++) {\n    if (item1[i] !== item2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction throttle(callback, limit) {\n  var wait = false; // Initially, we\'re not waiting\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // We return a throttled function\n\n\n    if (!wait) {\n      // If we\'re not waiting\n      callback.apply(void 0, args); // Execute users function\n\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nfunction styleDefinition(space) {\n  var cssElements = [];\n  var style = {\n    position: space.position,\n    left: css(space.left),\n    top: css(space.top),\n    right: css(space.right),\n    bottom: css(space.bottom),\n    width: css(space.width),\n    height: css(space.height),\n    zIndex: space.zIndex\n  };\n  var cssString = [];\n\n  if (style.position) {\n    cssString.push("position: " + style.position + ";");\n  }\n\n  if (style.left) {\n    cssString.push("left: " + style.left + ";");\n  }\n\n  if (style.top) {\n    cssString.push("top: " + style.top + ";");\n  }\n\n  if (style.right) {\n    cssString.push("right: " + style.right + ";");\n  }\n\n  if (style.bottom) {\n    cssString.push("bottom: " + style.bottom + ";");\n  }\n\n  if (style.width) {\n    cssString.push("width: " + style.width + ";");\n  }\n\n  if (style.height) {\n    cssString.push("height: " + style.height + ";");\n  }\n\n  if (style.zIndex) {\n    cssString.push("z-index: " + style.zIndex + ";");\n  }\n\n  if (space.allowOverflow) {\n    cssString.push("overflow: visible;");\n  }\n\n  if (cssString.length > 0) {\n    cssElements.push("#" + space.id + " { " + cssString.join(" ") + " }");\n  }\n\n  if (space.scrollable) {\n    cssElements.push("#" + space.id + " > .spaces-space-inner { overflow: auto; touch-action: auto; }");\n  }\n\n  var handleOffset = 0;\n  var touchHandleSize = space.touchHandleSize / 2 - space.handleSize / 2;\n\n  switch (space.handlePlacement) {\n    case ResizeHandlePlacement.Inside:\n    case ResizeHandlePlacement.OverlayInside:\n      handleOffset = space.handleSize;\n\n      if (space.type === Type.Positioned) {\n        handleOffset = 0;\n      }\n\n      break;\n\n    case ResizeHandlePlacement.OverlayBoundary:\n      handleOffset = space.handleSize / 2;\n      break;\n  }\n\n  if (space.type === Type.Positioned) {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { left: calc(" + css(space.left, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { top: calc(" + css(space.top, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n\n      if (space.width.size) {\n        cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + space.handleSize + "px + " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mr { right: calc(" + css(space.right, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      if (space.height.size) {\n        cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + space.handleSize + "px + " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mb { bottom: calc(" + css(space.bottom, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  } else {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { right: calc(" + css(space.right, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-ml:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { bottom: calc(" + css(space.bottom, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  }\n\n  return cssElements.join(" ");\n}\n\nfunction updateStyleDefinition(space) {\n  var definition = styleDefinition(space);\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    if (existing.innerHTML !== definition) {\n      existing.innerHTML = definition;\n    }\n  } else {\n    var newStyle = document.createElement("style");\n    newStyle.id = "style_" + space.id;\n    newStyle.innerHTML = definition;\n    document.head.appendChild(newStyle);\n  }\n}\n\nfunction removeStyleDefinition(space) {\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    document.head.removeChild(existing);\n  }\n}\n\nvar RESIZE_THROTTLE = 0;\n\nfunction isHorizontal(resizeType) {\n  return resizeType === ResizeType.Left || resizeType === ResizeType.Right;\n}\n\nfunction createAdjuster(resizeType, space, originalX, originalY) {\n  var dimensionToAdjust = function () {\n    if (resizeType === ResizeType.Left) {\n      return space.left;\n    } else if (resizeType === ResizeType.Right) {\n      return space.right;\n    } else if (resizeType === ResizeType.Bottom) {\n      return space.bottom;\n    } else if (resizeType === ResizeType.Top) {\n      return space.top;\n    } else {\n      throw new Error("unknown resize type");\n    }\n  }();\n\n  var negater = resizeType === ResizeType.Right || resizeType === ResizeType.Bottom ? function (val) {\n    return -val;\n  } : function (val) {\n    return val;\n  };\n  var candidateOppositeDimensionToAdjust = isHorizontal(resizeType) ? space.width : space.height;\n  var offset1 = dimensionToAdjust.resized;\n  var offset2 = candidateOppositeDimensionToAdjust.resized;\n  var rect = space.element.getBoundingClientRect();\n  var size = isHorizontal(resizeType) ? rect.width : rect.height;\n  var minimumAdjust = coalesce(space.minimumSize, 20) - size + 0;\n  var maximumAdjust = space.maximumSize ? space.maximumSize - size + 0 : undefined;\n  return function (currentX, currentY) {\n    var adjustment = (isHorizontal(resizeType) ? originalX : originalY) - (isHorizontal(resizeType) ? currentX : currentY);\n    var dimensionResized = negater(adjustment);\n\n    if (space.type !== Type.Positioned) {\n      dimensionResized = Math.max(negater(adjustment), minimumAdjust);\n\n      if (dimensionResized < minimumAdjust) {\n        dimensionResized = minimumAdjust;\n      }\n\n      if (typeof maximumAdjust === "number") {\n        if (dimensionResized > maximumAdjust) {\n          dimensionResized = maximumAdjust;\n        }\n      }\n    }\n\n    if (dimensionToAdjust.size !== undefined) {\n      dimensionToAdjust.resized = negater(-adjustment) + offset1;\n\n      if (candidateOppositeDimensionToAdjust.size) {\n        candidateOppositeDimensionToAdjust.resized = negater(adjustment) + offset2;\n      }\n    } else {\n      candidateOppositeDimensionToAdjust.resized = dimensionResized + offset2;\n    }\n  };\n}\n\nfunction createResize(store) {\n  return {\n    startResize: function startResize(e, resizeType, space, endEvent, moveEvent, getCoords, onResizeEnd) {\n      if (space.onResizeStart) {\n        var result = space.onResizeStart(resizeType);\n\n        if (typeof result === "boolean" && !result) {\n          return;\n        }\n      }\n\n      var originalCoords = getCoords(e);\n      var adjuster = createAdjuster(resizeType, space, originalCoords.x, originalCoords.y);\n      space.resizing = true;\n      space.updateParent();\n      var lastX = 0;\n      var lastY = 0;\n      var moved = false;\n\n      var resize = function resize(currentX, currentY) {\n        adjuster(currentX, currentY);\n        store.updateStyles(space);\n      };\n\n      var withPreventDefault = function withPreventDefault(e) {\n        moved = true;\n        var newCoords = getCoords(e);\n        lastX = newCoords.x;\n        lastY = newCoords.y;\n        e.preventDefault();\n        throttle(function (x, y) {\n          return window.requestAnimationFrame(function () {\n            return resize(x, y);\n          });\n        }, RESIZE_THROTTLE)(lastX, lastY);\n      };\n\n      var removeListener = function removeListener() {\n        if (moved) {\n          resize(lastX, lastY);\n        }\n\n        window.removeEventListener(moveEvent, withPreventDefault);\n        window.removeEventListener(endEvent, removeListener);\n        space.resizing = false;\n        space.updateParent();\n        var resizeEnd = onResizeEnd || space.onResizeEnd;\n\n        if (resizeEnd) {\n          var currentRect = space.element.getBoundingClientRect();\n          resizeEnd(Math.floor(isHorizontal(resizeType) ? currentRect.width : currentRect.height), currentRect, resizeType);\n        }\n      };\n\n      window.addEventListener(moveEvent, withPreventDefault);\n      window.addEventListener(endEvent, removeListener);\n    }\n  };\n}\n\nfunction createDrag(store) {\n  function onMove(space, originalX, originalY, x, y) {\n    var adjustmentX = -(originalX - x);\n    var adjustmentY = -(originalY - y);\n    space.left.adjusted = [adjustmentX];\n    space.top.adjusted = [adjustmentY];\n\n    if (space.right.size) {\n      space.right.adjusted = [-adjustmentX];\n    }\n\n    if (space.bottom.size) {\n      space.bottom.adjusted = [-adjustmentY];\n    }\n\n    store.updateStyles(space);\n  }\n\n  return {\n    startDrag: function startDrag(e, space, endEvent, moveEvent, getCoords, onDragEnd) {\n      if (space.element) {\n        var coords = getCoords(e);\n        var adjustedLeft = space.left.adjusted.length === 0 ? 0 : space.left.adjusted[0];\n        var adjustedTop = space.top.adjusted.length === 0 ? 0 : space.top.adjusted[0];\n        var originalMouseX_1 = coords.x - adjustedLeft;\n        var originalMouseY_1 = coords.y - adjustedTop;\n        var lastX_1 = 0;\n        var lastY_1 = 0;\n        var moved_1 = false;\n\n        var mouseMove_1 = function mouseMove_1(x, y) {\n          return onMove(space, originalMouseX_1, originalMouseY_1, x, y);\n        };\n\n        var throttledMouseMove_1 = throttle(mouseMove_1, 5);\n\n        var withPreventDefault_1 = function withPreventDefault_1(e) {\n          moved_1 = true;\n          var newCoords = getCoords(e);\n          lastX_1 = newCoords.x;\n          lastY_1 = newCoords.y;\n          e.preventDefault();\n          throttledMouseMove_1(lastX_1, lastY_1);\n        };\n\n        var removeListener_1 = function removeListener_1() {\n          var _a;\n\n          if (moved_1) {\n            mouseMove_1(lastX_1, lastY_1);\n          }\n\n          window.removeEventListener(moveEvent, withPreventDefault_1);\n          window.removeEventListener(endEvent, removeListener_1);\n\n          if (onDragEnd) {\n            var parentInfo = space.parentId && ((_a = store.getSpace(space.parentId)) === null || _a === void 0 ? void 0 : _a.element.getBoundingClientRect()) || {\n              left: 0,\n              top: 0,\n              right: 0,\n              bottom: 0,\n              width: 0,\n              height: 0\n            };\n\n            var info = function (_a) {\n              var left = _a.left,\n                  top = _a.top,\n                  right = _a.right,\n                  bottom = _a.bottom,\n                  width = _a.width,\n                  height = _a.height;\n              return {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n                width: width,\n                height: height\n              };\n            }(space.element.getBoundingClientRect());\n\n            onDragEnd(_assign(_assign({}, info), {\n              left: info.left - parentInfo.left,\n              top: info.top - parentInfo.top\n            }), moved_1);\n          }\n        };\n\n        window.addEventListener(moveEvent, withPreventDefault_1);\n        window.addEventListener(endEvent, removeListener_1);\n      }\n    }\n  };\n}\n\nvar spaceDefaults = {\n  id: "",\n  zIndex: 0,\n  scrollable: false,\n  resizing: false,\n  allowOverflow: false,\n  centerContent: "none",\n  dimension: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  },\n  handleSize: 5,\n  touchHandleSize: 5,\n  handlePlacement: ResizeHandlePlacement.OverlayInside,\n  adjustLeft: function adjustLeft() {\n    return false;\n  },\n  adjustRight: function adjustRight() {\n    return false;\n  },\n  adjustTop: function adjustTop() {\n    return false;\n  },\n  adjustBottom: function adjustBottom() {\n    return false;\n  },\n  adjustEdge: function adjustEdge() {\n    return false;\n  },\n  anchoredChildren: function anchoredChildren() {\n    return [];\n  }\n};\nvar anchorTypes = [AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom];\n\nfunction getPosition(type) {\n  if (type === Type.ViewPort) {\n    return "fixed";\n  }\n\n  if (type === Type.Fixed) {\n    return "relative";\n  }\n\n  return "absolute";\n}\n\nfunction getOrientation(anchor) {\n  return anchor === AnchorType.Bottom || anchor === AnchorType.Top ? Orientation.Vertical : Orientation.Horizontal;\n}\n\nfunction anchorUpdates(space) {\n  return [{\n    anchor: AnchorType.Left,\n    update: space.adjustLeft\n  }, {\n    anchor: AnchorType.Top,\n    update: space.adjustTop\n  }, {\n    anchor: AnchorType.Right,\n    update: space.adjustRight\n  }, {\n    anchor: AnchorType.Bottom,\n    update: space.adjustBottom\n  }];\n}\n\nfunction sizeInfoDefault(size) {\n  return {\n    size: size,\n    adjusted: [],\n    resized: 0\n  };\n}\n\nfunction createStore() {\n  var spaces = [];\n\n  var setSpaces = function setSpaces(newSpaces) {\n    spaces = newSpaces;\n  };\n\n  var getSpace = function getSpace(id) {\n    return getSpaces().find(function (s) {\n      return s.id === id;\n    });\n  };\n\n  var getSpaces = function getSpaces() {\n    return spaces;\n  };\n\n  var recalcSpaces = function recalcSpaces(parent) {\n    var onlyUnique = function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    };\n\n    var addDefaultOrders = function addDefaultOrders(spaces) {\n      var result = [];\n      anchorTypes.forEach(function (t) {\n        var anchoredSpaces = spaces.filter(function (s) {\n          return s.anchor !== undefined && s.anchor === t;\n        });\n        var zIndices = anchoredSpaces.map(function (s) {\n          return s.zIndex;\n        }).filter(onlyUnique);\n        zIndices.forEach(function (i) {\n          var anchoredSpacesInLayer = anchoredSpaces.filter(function (s) {\n            return s.zIndex === i;\n          });\n          var orderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order !== undefined;\n          });\n          var unorderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order === undefined;\n          });\n          var maxOrder = orderedSpaces.length > 0 ? orderedSpaces.map(function (a) {\n            return a.order;\n          }).reduce(function (a, b) {\n            return Math.max(a, b);\n          }) : 0;\n          result = __spreadArray(__spreadArray([], result, true), __spreadArray(__spreadArray([], orderedSpaces, true), unorderedSpaces.map(function (c, idx) {\n            return _assign(_assign({}, c), {\n              order: maxOrder + idx + 1\n            });\n          }), true), true);\n        });\n      });\n      return __spreadArray(__spreadArray([], result, true), spaces.filter(function (s) {\n        return s.anchor === undefined;\n      }), true);\n    };\n\n    var orderedSpaces = addDefaultOrders(parent.children);\n\n    var _loop_1 = function _loop_1() {\n      var space = orderedSpaces[i];\n      var changed = false;\n\n      if (space.type === Type.Fill) {\n        anchorUpdates(space).forEach(function (info) {\n          var adjusted = [];\n          var anchoredSpaces = parent.anchoredChildren(orderedSpaces, info.anchor, space.zIndex);\n          anchoredSpaces.forEach(function (as) {\n            if (as.orientation === Orientation.Vertical) {\n              if (as.height.size) {\n                adjusted.push(as.height.size);\n              }\n\n              if (as.height.resized) {\n                adjusted.push(as.height.resized);\n              }\n            } else {\n              if (as.width.size) {\n                adjusted.push(as.width.size);\n              }\n\n              if (as.width.resized) {\n                adjusted.push(as.width.resized);\n              }\n            }\n          });\n\n          if (info.update(adjusted)) {\n            changed = true;\n          }\n        });\n      } else if (space.type === Type.Anchored) {\n        var adjusted_1 = [];\n        var anchoredSpaces = parent.anchoredChildren(orderedSpaces, space.anchor, space.zIndex).filter(function (s) {\n          return s.id !== space.id && s.order <= space.order;\n        });\n        anchoredSpaces.forEach(function (as) {\n          if (as.orientation === Orientation.Vertical) {\n            if (as.height.size) {\n              adjusted_1.push(as.height.size);\n            }\n\n            if (as.height.resized) {\n              adjusted_1.push(as.height.resized);\n            }\n          } else {\n            if (as.width.size) {\n              adjusted_1.push(as.width.size);\n            }\n\n            if (as.width.resized) {\n              adjusted_1.push(as.width.resized);\n            }\n          }\n        });\n\n        if (space.adjustEdge(adjusted_1)) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        updateStyleDefinition(space);\n      }\n    };\n\n    for (var i = 0, len = orderedSpaces.length; i < len; i++) {\n      _loop_1();\n    }\n  };\n\n  var store = {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    addSpace: function addSpace(space) {\n      getSpaces().push(space);\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children.push(space);\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    removeSpace: function removeSpace(space) {\n      setSpaces(getSpaces().filter(function (s) {\n        return s.id !== space.id;\n      }));\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children = parentSpace.children.filter(function (s) {\n            return s.id !== space.id;\n          });\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      removeStyleDefinition(space);\n    },\n    updateStyles: function updateStyles(space) {\n      if (space.parentId) {\n        var parent_1 = getSpace(space.parentId);\n\n        if (parent_1) {\n          recalcSpaces(parent_1);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    updateSpace: function updateSpace(space, props) {\n      var type = props.type,\n          anchor = props.anchor,\n          order = props.order,\n          zIndex = props.zIndex,\n          scrollable = props.scrollable,\n          position = props.position,\n          centerContent = props.centerContent,\n          minimumSize = props.minimumSize,\n          maximumSize = props.maximumSize,\n          handleSize = props.handleSize,\n          touchHandleSize = props.touchHandleSize,\n          handlePlacement = props.handlePlacement,\n          allowOverflow = props.allowOverflow;\n      var canResizeLeft = position && position.leftResizable || false;\n      var canResizeRight = position && position.rightResizable || false;\n      var canResizeTop = position && position.topResizable || false;\n      var canResizeBottom = position && position.bottomResizable || false;\n      var changed = false;\n\n      if (space.type !== type) {\n        space.type = type;\n        space.position = getPosition(type);\n        changed = true;\n      }\n\n      if (space.anchor !== anchor) {\n        space.anchor = anchor;\n        space.orientation = getOrientation(anchor);\n        changed = true;\n\n        if (type === Type.Anchored) {\n          if (anchor === AnchorType.Left) {\n            space.adjustEdge = space.adjustLeft;\n          } else if (anchor === AnchorType.Top) {\n            space.adjustEdge = space.adjustTop;\n          } else if (anchor === AnchorType.Right) {\n            space.adjustEdge = space.adjustRight;\n          } else if (anchor === AnchorType.Bottom) {\n            space.adjustEdge = space.adjustBottom;\n          }\n        }\n      }\n\n      if (space.left.size !== (position && position.left)) {\n        space.left.size = position && position.left;\n        space.left.resized = 0;\n        space.left.adjusted = [];\n        changed = true;\n      }\n\n      if (space.right.size !== (position && position.right)) {\n        space.right.size = position && position.right;\n        space.right.resized = 0;\n        space.right.adjusted = [];\n        changed = true;\n      }\n\n      if (space.top.size !== (position && position.top)) {\n        space.top.size = position && position.top;\n        space.top.resized = 0;\n        space.top.adjusted = [];\n        changed = true;\n      }\n\n      if (space.bottom.size !== (position && position.bottom)) {\n        space.bottom.size = position && position.bottom;\n        space.bottom.resized = 0;\n        space.bottom.adjusted = [];\n        changed = true;\n      }\n\n      if (space.width.size !== (position && position.width)) {\n        space.width.size = position && position.width;\n        space.width.resized = 0;\n        space.width.adjusted = [];\n        changed = true;\n      }\n\n      if (space.height.size !== (position && position.height)) {\n        space.height.size = position && position.height;\n        space.height.resized = 0;\n        space.height.adjusted = [];\n        changed = true;\n      }\n\n      if (coalesce(space.order, 0) !== coalesce(order, 0)) {\n        space.order = coalesce(order, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.zIndex, 0) !== coalesce(zIndex, 0)) {\n        space.zIndex = coalesce(zIndex, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.scrollable, false) !== coalesce(scrollable, false)) {\n        space.scrollable = coalesce(scrollable, false);\n        changed = true;\n      }\n\n      if (space.minimumSize !== minimumSize) {\n        space.minimumSize = minimumSize;\n        changed = true;\n      }\n\n      if (space.maximumSize !== maximumSize) {\n        space.maximumSize = maximumSize;\n        changed = true;\n      }\n\n      if (coalesce(space.centerContent, CenterType.None) !== coalesce(centerContent, CenterType.None)) {\n        space.centerContent = coalesce(centerContent, CenterType.None);\n        changed = true;\n      }\n\n      if (space.handleSize !== handleSize) {\n        space.handleSize = handleSize || spaceDefaults.handleSize;\n        changed = true;\n      }\n\n      if (space.touchHandleSize !== touchHandleSize) {\n        space.touchHandleSize = touchHandleSize || spaceDefaults.touchHandleSize;\n        changed = true;\n      }\n\n      if (space.handlePlacement !== handlePlacement) {\n        space.handlePlacement = handlePlacement || spaceDefaults.handlePlacement;\n        changed = true;\n      }\n\n      if (space.canResizeBottom !== canResizeBottom) {\n        space.canResizeBottom = canResizeBottom;\n        changed = true;\n      }\n\n      if (space.canResizeTop !== canResizeTop) {\n        space.canResizeTop = canResizeTop;\n        changed = true;\n      }\n\n      if (space.canResizeLeft !== canResizeLeft) {\n        space.canResizeLeft = canResizeLeft;\n        changed = true;\n      }\n\n      if (space.canResizeRight !== canResizeRight) {\n        space.canResizeRight = canResizeRight;\n        changed = true;\n      }\n\n      if (space.allowOverflow !== allowOverflow) {\n        space.allowOverflow = allowOverflow || spaceDefaults.allowOverflow;\n        changed = true;\n      }\n\n      if (changed) {\n        if (space.parentId) {\n          var parentSpace = getSpace(space.parentId);\n\n          if (parentSpace) {\n            recalcSpaces(parentSpace);\n          }\n        }\n\n        updateStyleDefinition(space);\n      }\n    },\n    createSpace: function createSpace() {\n      return {};\n    },\n    startMouseResize: function startMouseResize() {\n      return null;\n    },\n    startTouchResize: function startTouchResize() {\n      return null;\n    },\n    startMouseDrag: function startMouseDrag() {\n      return null;\n    },\n    startTouchDrag: function startTouchDrag() {\n      return null;\n    }\n  };\n  var resize = createResize(store);\n  var drag = createDrag(store);\n\n  store.createSpace = function (parentId, props, update) {\n    var position = props.position,\n        anchor = props.anchor,\n        type = props.type,\n        commonProps = __rest(props, ["position", "anchor", "type"]);\n\n    var canResizeLeft = position && position.rightResizable || false;\n    var canResizeRight = position && position.leftResizable || false;\n    var canResizeTop = position && position.bottomResizable || false;\n    var canResizeBottom = position && position.topResizable || false;\n\n    var newSpace = _assign(_assign(_assign({}, spaceDefaults), commonProps), {\n      store: store,\n      update: update,\n      updateParent: function updateParent() {\n        if (parentId) {\n          var parentSpace = store.getSpace(parentId);\n\n          if (parentSpace) {\n            parentSpace.update();\n          }\n        }\n      },\n      parentId: parentId,\n      children: [],\n      anchor: anchor,\n      type: type,\n      orientation: getOrientation(anchor),\n      position: getPosition(type),\n      left: sizeInfoDefault(position && position.left),\n      right: sizeInfoDefault(position && position.right),\n      top: sizeInfoDefault(position && position.top),\n      bottom: sizeInfoDefault(position && position.bottom),\n      width: sizeInfoDefault(position && position.width),\n      height: sizeInfoDefault(position && position.height),\n      canResizeLeft: canResizeLeft,\n      canResizeRight: canResizeRight,\n      canResizeTop: canResizeTop,\n      canResizeBottom: canResizeBottom\n    });\n\n    newSpace.anchoredChildren = function (children, anchor, zIndex) {\n      return children.filter(function (s) {\n        return s.type === Type.Anchored && s.anchor === anchor && s.zIndex === zIndex;\n      });\n    };\n\n    newSpace.adjustLeft = function (adjusted) {\n      if (adjustmentsEqual(newSpace.left.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.left.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustRight = function (adjusted) {\n      if (adjustmentsEqual(newSpace.right.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.right.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustTop = function (adjusted) {\n      if (adjustmentsEqual(newSpace.top.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.top.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustBottom = function (adjusted) {\n      if (adjustmentsEqual(newSpace.bottom.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.bottom.adjusted = adjusted;\n      return true;\n    };\n\n    if (type === Type.Anchored) {\n      if (anchor === AnchorType.Left) {\n        newSpace.adjustEdge = newSpace.adjustLeft;\n      } else if (anchor === AnchorType.Top) {\n        newSpace.adjustEdge = newSpace.adjustTop;\n      } else if (anchor === AnchorType.Right) {\n        newSpace.adjustEdge = newSpace.adjustRight;\n      } else if (anchor === AnchorType.Bottom) {\n        newSpace.adjustEdge = newSpace.adjustBottom;\n      }\n    }\n\n    return newSpace;\n  };\n\n  store.startMouseResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startTouchResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startMouseDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onDragEnd);\n  };\n\n  store.startTouchDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onDragEnd);\n  };\n\n  return store;\n} // WORKAROUND for React18 strict mode\n// https://blog.ag-grid.com/avoiding-react-18-double-mount/\n\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  var destroyFunc = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();\n  var effectCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n  var renderAfterCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n\n  var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);\n\n  _a[0];\n  var setVal = _a[1];\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    } // this forces one render after the effect is run\n\n\n    setVal(function (val) {\n      return val + 1;\n    });\n    return function () {\n      // if the comp didn\'t render since the useEffect was called,\n      // we know it\'s the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n\nvar ParentContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar DOMRectContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar LayerContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar OptionsContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"]({});\nvar currentStore = createStore();\nvar commonProps = {\n  id: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  className: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["object"], prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]]),\n  as: prop_types__WEBPACK_IMPORTED_MODULE_2__["any"],\n  centerContent: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([CenterType.None, CenterType.Vertical, CenterType.HorizontalVertical]),\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  scrollable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  trackSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  allowOverflow: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onDoubleClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n};\n\nfunction useForceUpdate() {\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](0),\n      setTick = _a[1];\n\n  var update = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useSpace(props) {\n  var store = currentStore;\n  var update = useForceUpdate();\n  var parent = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var debug = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](OptionsContext).debug;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useState"](props.id || "s" + shortuuid())[0];\n  var elementRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n  var resizeSensor = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](),\n      domRect = _a[0],\n      setDomRect = _a[1];\n\n  var space = store.getSpace(spaceId);\n\n  if (debug) {\n    console.table(store.getSpaces());\n  }\n\n  var parsedProps = _assign(_assign({}, props), {\n    id: spaceId,\n    zIndex: coalesce(props.zIndex, layer)\n  });\n\n  if (!space) {\n    space = store.createSpace(parent, parsedProps, update);\n    store.addSpace(space);\n  } else {\n    store.updateSpace(space, parsedProps);\n  }\n\n  var resizeHandles = useSpaceResizeHandles(store, space);\n  useEffectOnce(function () {\n    var rect = elementRef.current.getBoundingClientRect();\n    space.dimension = _assign(_assign({}, rect), {\n      left: Math.floor(rect.left),\n      top: Math.floor(rect.top),\n      right: Math.floor(rect.right),\n      bottom: Math.floor(rect.bottom),\n      width: Math.floor(rect.width),\n      height: Math.floor(rect.height),\n      x: Math.floor(rect.x),\n      y: Math.floor(rect.y)\n    });\n    setDomRect(space.dimension);\n\n    if (props.trackSize) {\n      resizeSensor.current = new css_element_queries__WEBPACK_IMPORTED_MODULE_1__["ResizeSensor"](elementRef.current, function (size) {\n        space.dimension = _assign(_assign({}, rect), {\n          width: Math.floor(size.width),\n          height: Math.floor(size.height)\n        });\n        setDomRect(space.dimension);\n      });\n    }\n\n    return function () {\n      resizeSensor.current && resizeSensor.current.detach();\n      store.removeSpace(space);\n    };\n  });\n  return {\n    space: space,\n    resizeHandles: resizeHandles,\n    domRect: domRect,\n    elementRef: elementRef\n  };\n}\n\nfunction useSpaceResizeHandles(store, space) {\n  var mouseHandles = [];\n\n  if (space.canResizeLeft) {\n    mouseHandles.push({\n      id: space.id + "-ml",\n      key: "left",\n      className: "spaces-resize-handle resize-left",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Left, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Left, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeRight) {\n    mouseHandles.push({\n      id: space.id + "-mr",\n      key: "right",\n      className: "spaces-resize-handle resize-right",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Right, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Right, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeTop) {\n    mouseHandles.push({\n      id: space.id + "-mt",\n      key: "top",\n      className: "spaces-resize-handle resize-top",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Top, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Top, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeBottom) {\n    mouseHandles.push({\n      id: space.id + "-mb",\n      key: "bottom",\n      className: "spaces-resize-handle resize-bottom",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Bottom, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Bottom, space, event);\n      }\n    });\n  }\n\n  return {\n    mouseHandles: mouseHandles\n  };\n}\n\nfunction useCurrentSpace() {\n  var store = currentStore;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var space = spaceId ? store.getSpace(spaceId) : undefined;\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var onMouseDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startMouseDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onTouchDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startTouchDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onForceUpdate = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    return space ? store.updateStyles(space) : null;\n  }, [spaceId]);\n  var defaults = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n\n  var size = _assign(_assign({}, defaults), domRect);\n\n  return {\n    size: size,\n    layer: layer || 0,\n    startMouseDrag: onMouseDrag,\n    startTouchDrag: onTouchDrag,\n    forceUpdate: onForceUpdate\n  };\n}\n\nvar Centered = function Centered(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered"\n  }, props.children);\n};\n\nvar CenteredVertically = function CenteredVertically(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered-vertically"\n  }, props.children);\n};\n\nfunction applyCentering(children, centerType) {\n  switch (centerType) {\n    case CenterType.Vertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](CenteredVertically, null, children);\n\n    case CenterType.HorizontalVertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Centered, null, children);\n  }\n\n  return children;\n}\n\nvar Space =\n/** @class */\nfunction (_super) {\n  __extends(Space, _super);\n\n  function Space() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Space.prototype.render = function () {\n    return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SpaceInner, _assign({}, this.props, {\n      wrapperInstance: this\n    }));\n  };\n\n  return Space;\n}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\nvar SpaceInner = function SpaceInner(props) {\n  if (!props.id && !props.wrapperInstance["_react_spaces_uniqueid"]) {\n    props.wrapperInstance["_react_spaces_uniqueid"] = "s" + shortuuid();\n  }\n\n  var style = props.style,\n      className = props.className,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      onMouseDown = props.onMouseDown,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseMove = props.onMouseMove,\n      onTouchStart = props.onTouchStart,\n      onTouchMove = props.onTouchMove,\n      onTouchEnd = props.onTouchEnd,\n      children = props.children,\n      handleRender = props.handleRender;\n  var events = {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseMove: onMouseMove,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n\n  var _a = useSpace(_assign(_assign({}, props), {\n    id: props.id || props.wrapperInstance["_react_spaces_uniqueid"]\n  })),\n      space = _a.space,\n      domRect = _a.domRect,\n      elementRef = _a.elementRef,\n      resizeHandles = _a.resizeHandles;\n\n  useEffectOnce(function () {\n    space.element = elementRef.current;\n  });\n  var userClasses = className ? className.split(" ").map(function (c) {\n    return c.trim();\n  }) : [];\n\n  var outerClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], ["spaces-space", space.children.find(function (s) {\n    return s.resizing;\n  }) ? "spaces-resizing" : undefined], false), [space.type === Type.Fixed ? "spaces-fixedsize-layout" : undefined], false), [space.type === Type.ViewPort ? "spaces-fullpage-layout" : undefined], false), userClasses.map(function (c) {\n    return c + "-container";\n  }), true).filter(function (c) {\n    return c;\n  });\n\n  var innerClasses = __spreadArray(__spreadArray([], ["spaces-space-inner"], false), userClasses, true);\n\n  var innerStyle = style;\n\n  if (space.handlePlacement === ResizeHandlePlacement.Inside) {\n    innerStyle = _assign(_assign({}, style), {\n      left: space.anchor === AnchorType.Right ? space.handleSize : undefined,\n      right: space.anchor === AnchorType.Left ? space.handleSize : undefined,\n      top: space.anchor === AnchorType.Bottom ? space.handleSize : undefined,\n      bottom: space.anchor === AnchorType.Top ? space.handleSize : undefined\n    });\n  }\n\n  var centeredContent = applyCentering(children, props.centerContent);\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, resizeHandles.mouseHandles.map(function (handleProps) {\n    return (handleRender === null || handleRender === void 0 ? void 0 : handleRender(handleProps)) || react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", _assign({}, handleProps));\n  }), react__WEBPACK_IMPORTED_MODULE_0__["createElement"](props.as || "div", _assign({\n    id: space.id,\n    ref: elementRef,\n    className: outerClasses.join(" ")\n  }, events), react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: innerClasses.join(" "),\n    style: innerStyle\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ParentContext.Provider, {\n    value: space.id\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: undefined\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DOMRectContext.Provider, {\n    value: domRect\n  }, centeredContent))))));\n};\n\nvar resizableProps = _assign(_assign({}, commonProps), {\n  size: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired,\n  order: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  touchHandleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handlePlacement: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([ResizeHandlePlacement.Inside, ResizeHandlePlacement.OverlayBoundary, ResizeHandlePlacement.OverlayInside]),\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  minimumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  maximumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  onResizeStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onResizeEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n});\n\nvar anchoredProps = _assign(_assign({}, resizableProps), {\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"]\n});\n\nvar LeftResizable = function LeftResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nLeftResizable.propTypes = resizableProps;\n\nvar Left = function Left(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nLeft.propTypes = anchoredProps;\n\nvar TopResizable = function TopResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nTopResizable.propTypes = resizableProps;\n\nvar Top = function Top(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nTop.propTypes = anchoredProps;\n\nvar RightResizable = function RightResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nRightResizable.propTypes = resizableProps;\n\nvar Right = function Right(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nRight.propTypes = anchoredProps;\n\nvar BottomResizable = function BottomResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nBottomResizable.propTypes = resizableProps;\n\nvar Bottom = function Bottom(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nBottom.propTypes = anchoredProps;\n\nvar customProps = _assign(_assign({}, anchoredProps), {\n  type: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([Type.Positioned, Type.Fill, Type.Anchored]),\n  anchor: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom]),\n  anchorSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizeTypes: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n\nvar Custom = function Custom(_a) {\n  var children = _a.children,\n      type = _a.type,\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      anchorSize = _a.anchorSize,\n      anchor = _a.anchor,\n      resizable = _a.resizable,\n      resizeTypes = _a.resizeTypes,\n      props = __rest(_a, ["children", "type", "left", "top", "right", "bottom", "width", "height", "anchorSize", "anchor", "resizable", "resizeTypes"]);\n\n  var position;\n  type = type || Type.Fill;\n\n  if (type === Type.Positioned) {\n    position = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      leftResizable: resizeTypes && resizeTypes.includes(ResizeType.Left),\n      topResizable: resizeTypes && resizeTypes.includes(ResizeType.Top),\n      rightResizable: resizeTypes && resizeTypes.includes(ResizeType.Right),\n      bottomResizable: resizeTypes && resizeTypes.includes(ResizeType.Bottom)\n    };\n  } else {\n    if (anchor === AnchorType.Left) {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        rightResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Right) {\n      position = {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        leftResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Top) {\n      position = {\n        left: 0,\n        top: 0,\n        right: 0,\n        height: anchorSize,\n        bottomResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Bottom) {\n      position = {\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: anchorSize,\n        topResizable: resizable\n      };\n      type = Type.Anchored;\n    } else {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n      type = Type.Fill;\n    }\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: type,\n    anchor: anchor,\n    position: position\n  }), children);\n};\n\nCustom.propTypes = customProps;\n\nvar Fill = function Fill(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Fill,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    }\n  }), props.children);\n};\n\nFill.propTypes = commonProps;\n\nvar Fixed = function Fixed(_a) {\n  var width = _a.width,\n      height = _a.height,\n      children = _a.children,\n      commonProps = __rest(_a, ["width", "height", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Fixed,\n    position: {\n      width: width,\n      height: height\n    }\n  }), children);\n};\n\nFixed.propTypes = _assign(_assign({}, commonProps), {\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired\n});\n\nvar Layer = function Layer(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: props.zIndex\n  }, props.children);\n};\n\nLayer.propTypes = {\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"].isRequired\n};\n\nvar Positioned = function Positioned(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      resizable = _a.resizable,\n      props = __rest(_a, ["left", "top", "right", "bottom", "width", "height", "resizable"]);\n\n  var resizeTypes = resizable || [];\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Positioned,\n    position: {\n      left: left,\n      leftResizable: resizeTypes.includes(ResizeType.Left),\n      top: top,\n      topResizable: resizeTypes.includes(ResizeType.Top),\n      right: right,\n      rightResizable: resizeTypes.includes(ResizeType.Right),\n      bottom: bottom,\n      bottomResizable: resizeTypes.includes(ResizeType.Bottom),\n      width: width,\n      height: height\n    }\n  }), props.children);\n};\n\nPositioned.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n/**\r\n * @deprecated use useCurrentSpace() hook instead\r\n */\n\nvar Info = function Info(props) {\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n\n  if (domRect) {\n    return props.children(domRect);\n  }\n\n  return props.children({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  });\n};\n\nvar ViewPort = function ViewPort(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      children = _a.children,\n      commonProps = __rest(_a, ["left", "top", "right", "bottom", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.ViewPort,\n    position: {\n      left: left || 0,\n      top: top || 0,\n      right: right || 0,\n      bottom: bottom || 0\n    }\n  }), children);\n};\n\nViewPort.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]])\n});\n\nvar Options = function Options(_a) {\n  var children = _a.children,\n      opts = __rest(_a, ["children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](OptionsContext.Provider, {\n    value: opts\n  }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///X0wg\n')},XQvf:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.active = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar active = exports.active = function active(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Active, _React$Component);\n\n    function Active() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Active);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        active: false\n      }, _this.handleMouseDown = function () {\n        return _this.setState({\n          active: true\n        });\n      }, _this.handleMouseUp = function () {\n        return _this.setState({\n          active: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseDown: _this.handleMouseDown,\n          onMouseUp: _this.handleMouseUp\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Active;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = active;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///XQvf\n')},Zss7:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n(function (Math) {\n  var trimLeft = /^\\s+/,\n      trimRight = /\\s+$/,\n      tinyCounter = 0,\n      mathRound = Math.round,\n      mathMin = Math.min,\n      mathMax = Math.max,\n      mathRandom = Math.random;\n\n  function tinycolor(color, opts) {\n    color = color ? color : \'\';\n    opts = opts || {}; // If input is already a tinycolor, return itself\n\n    if (color instanceof tinycolor) {\n      return color;\n    } // If we are called as a function, call using new instead\n\n\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType; // Don\'t let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this._r < 1) {\n      this._r = mathRound(this._r);\n    }\n\n    if (this._g < 1) {\n      this._g = mathRound(this._g);\n    }\n\n    if (this._b < 1) {\n      this._b = mathRound(this._b);\n    }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n  }\n\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n\n      if (RsRGB <= 0.03928) {\n        R = RsRGB / 12.92;\n      } else {\n        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (GsRGB <= 0.03928) {\n        G = GsRGB / 12.92;\n      } else {\n        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (BsRGB <= 0.03928) {\n        B = BsRGB / 12.92;\n      } else {\n        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = mathRound(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = mathRound(hsv.h * 360),\n          s = mathRound(hsv.s * 100),\n          v = mathRound(hsv.v * 100);\n      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = mathRound(hsl.h * 360),\n          s = mathRound(hsl.s * 100),\n          l = mathRound(hsl.l * 100);\n      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \'#\' + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \'#\' + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: mathRound(this._r),\n        g: mathRound(this._g),\n        b: mathRound(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: mathRound(bound01(this._r, 255) * 100) + "%",\n        g: mathRound(bound01(this._g, 255) * 100) + "%",\n        b: mathRound(bound01(this._b, 255) * 100) + "%",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return "transparent";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \'#\' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? "GradientType = 1, " : "";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \'#\' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");\n\n      if (needsAlphaFormat) {\n        // Special case for "transparent", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === "name" && this._a === 0) {\n          return this.toName();\n        }\n\n        return this.toRgbString();\n      }\n\n      if (format === "rgb") {\n        formattedString = this.toRgbString();\n      }\n\n      if (format === "prgb") {\n        formattedString = this.toPercentageRgbString();\n      }\n\n      if (format === "hex" || format === "hex6") {\n        formattedString = this.toHexString();\n      }\n\n      if (format === "hex3") {\n        formattedString = this.toHexString(true);\n      }\n\n      if (format === "hex4") {\n        formattedString = this.toHex8String(true);\n      }\n\n      if (format === "hex8") {\n        formattedString = this.toHex8String();\n      }\n\n      if (format === "name") {\n        formattedString = this.toName();\n      }\n\n      if (format === "hsl") {\n        formattedString = this.toHslString();\n      }\n\n      if (format === "hsv") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    triad: function triad() {\n      return this._applyCombination(_triad, arguments);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(_tetrad, arguments);\n    }\n  }; // If input is an object, force 1 into "1.0" to handle ratios properly\n  // String input requires "1.0" as input, so 1 will be treated as 1\n\n  tinycolor.fromRatio = function (color, opts) {\n    if (typeof color == "object") {\n      var newColor = {};\n\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === "a") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  }; // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     "red"\n  //     "#f00" or "f00"\n  //     "#ff0000" or "ff0000"\n  //     "#ff000000" or "ff000000"\n  //     "rgb 255 0 0" or "rgb (255, 0, 0)"\n  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"\n  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"\n  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"\n  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"\n  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"\n  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"\n  //\n\n\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == "string") {\n      color = stringInputToObject(color);\n    }\n\n    if (typeof color == "object") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = "hsv";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = "hsl";\n      }\n\n      if (color.hasOwnProperty("a")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: mathMin(255, mathMax(rgb.r, 0)),\n      g: mathMin(255, mathMax(rgb.g, 0)),\n      b: mathMin(255, mathMax(rgb.b, 0)),\n      a: a\n    };\n  } // Conversion Functions\n  // --------------------\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n\n\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  } // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n\n\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  } // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n\n\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  } // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n\n\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible\n\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join("");\n  } // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n\n\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible\n\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join("");\n  } // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for "toFilter()"\n\n\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n    return hex.join("");\n  } // `equals`\n  // Can be called with any tinycolor input\n\n\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) {\n      return false;\n    }\n\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: mathRandom(),\n      g: mathRandom(),\n      b: mathRandom()\n    });\n  }; // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n\n\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  } // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function _triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 120) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 240) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 90) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 180) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 270) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n\n    return ret;\n  }\n\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n        s = hsv.s,\n        v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  } // Utility Functions\n  // ---------------------\n\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  }; // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\n\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  }; // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the \'level\' property states \'AA\' or \'AAA\' - if missing or invalid, it defaults to \'AA\';\n  //      the \'size\' property states \'large\' or \'small\' - if missing or invalid, it defaults to \'small\'.\n  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.\n  // *Example*\n  //    tinycolor.isReadable("#000", "#111") => false\n  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false\n\n\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case "AAsmall":\n      case "AAAlarge":\n        out = readability >= 4.5;\n        break;\n\n      case "AAlarge":\n        out = readability >= 3;\n        break;\n\n      case "AAAsmall":\n        out = readability >= 7;\n        break;\n    }\n\n    return out;\n  }; // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"\n  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"\n  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"\n  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"\n\n\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      "level": level,\n      "size": size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);\n    }\n  }; // Big List of Colors\n  // ------------------\n  // <http://www.w3.org/TR/css3-color/#svg-color>\n\n\n  var names = tinycolor.names = {\n    aliceblue: "f0f8ff",\n    antiquewhite: "faebd7",\n    aqua: "0ff",\n    aquamarine: "7fffd4",\n    azure: "f0ffff",\n    beige: "f5f5dc",\n    bisque: "ffe4c4",\n    black: "000",\n    blanchedalmond: "ffebcd",\n    blue: "00f",\n    blueviolet: "8a2be2",\n    brown: "a52a2a",\n    burlywood: "deb887",\n    burntsienna: "ea7e5d",\n    cadetblue: "5f9ea0",\n    chartreuse: "7fff00",\n    chocolate: "d2691e",\n    coral: "ff7f50",\n    cornflowerblue: "6495ed",\n    cornsilk: "fff8dc",\n    crimson: "dc143c",\n    cyan: "0ff",\n    darkblue: "00008b",\n    darkcyan: "008b8b",\n    darkgoldenrod: "b8860b",\n    darkgray: "a9a9a9",\n    darkgreen: "006400",\n    darkgrey: "a9a9a9",\n    darkkhaki: "bdb76b",\n    darkmagenta: "8b008b",\n    darkolivegreen: "556b2f",\n    darkorange: "ff8c00",\n    darkorchid: "9932cc",\n    darkred: "8b0000",\n    darksalmon: "e9967a",\n    darkseagreen: "8fbc8f",\n    darkslateblue: "483d8b",\n    darkslategray: "2f4f4f",\n    darkslategrey: "2f4f4f",\n    darkturquoise: "00ced1",\n    darkviolet: "9400d3",\n    deeppink: "ff1493",\n    deepskyblue: "00bfff",\n    dimgray: "696969",\n    dimgrey: "696969",\n    dodgerblue: "1e90ff",\n    firebrick: "b22222",\n    floralwhite: "fffaf0",\n    forestgreen: "228b22",\n    fuchsia: "f0f",\n    gainsboro: "dcdcdc",\n    ghostwhite: "f8f8ff",\n    gold: "ffd700",\n    goldenrod: "daa520",\n    gray: "808080",\n    green: "008000",\n    greenyellow: "adff2f",\n    grey: "808080",\n    honeydew: "f0fff0",\n    hotpink: "ff69b4",\n    indianred: "cd5c5c",\n    indigo: "4b0082",\n    ivory: "fffff0",\n    khaki: "f0e68c",\n    lavender: "e6e6fa",\n    lavenderblush: "fff0f5",\n    lawngreen: "7cfc00",\n    lemonchiffon: "fffacd",\n    lightblue: "add8e6",\n    lightcoral: "f08080",\n    lightcyan: "e0ffff",\n    lightgoldenrodyellow: "fafad2",\n    lightgray: "d3d3d3",\n    lightgreen: "90ee90",\n    lightgrey: "d3d3d3",\n    lightpink: "ffb6c1",\n    lightsalmon: "ffa07a",\n    lightseagreen: "20b2aa",\n    lightskyblue: "87cefa",\n    lightslategray: "789",\n    lightslategrey: "789",\n    lightsteelblue: "b0c4de",\n    lightyellow: "ffffe0",\n    lime: "0f0",\n    limegreen: "32cd32",\n    linen: "faf0e6",\n    magenta: "f0f",\n    maroon: "800000",\n    mediumaquamarine: "66cdaa",\n    mediumblue: "0000cd",\n    mediumorchid: "ba55d3",\n    mediumpurple: "9370db",\n    mediumseagreen: "3cb371",\n    mediumslateblue: "7b68ee",\n    mediumspringgreen: "00fa9a",\n    mediumturquoise: "48d1cc",\n    mediumvioletred: "c71585",\n    midnightblue: "191970",\n    mintcream: "f5fffa",\n    mistyrose: "ffe4e1",\n    moccasin: "ffe4b5",\n    navajowhite: "ffdead",\n    navy: "000080",\n    oldlace: "fdf5e6",\n    olive: "808000",\n    olivedrab: "6b8e23",\n    orange: "ffa500",\n    orangered: "ff4500",\n    orchid: "da70d6",\n    palegoldenrod: "eee8aa",\n    palegreen: "98fb98",\n    paleturquoise: "afeeee",\n    palevioletred: "db7093",\n    papayawhip: "ffefd5",\n    peachpuff: "ffdab9",\n    peru: "cd853f",\n    pink: "ffc0cb",\n    plum: "dda0dd",\n    powderblue: "b0e0e6",\n    purple: "800080",\n    rebeccapurple: "663399",\n    red: "f00",\n    rosybrown: "bc8f8f",\n    royalblue: "4169e1",\n    saddlebrown: "8b4513",\n    salmon: "fa8072",\n    sandybrown: "f4a460",\n    seagreen: "2e8b57",\n    seashell: "fff5ee",\n    sienna: "a0522d",\n    silver: "c0c0c0",\n    skyblue: "87ceeb",\n    slateblue: "6a5acd",\n    slategray: "708090",\n    slategrey: "708090",\n    snow: "fffafa",\n    springgreen: "00ff7f",\n    steelblue: "4682b4",\n    tan: "d2b48c",\n    teal: "008080",\n    thistle: "d8bfd8",\n    tomato: "ff6347",\n    turquoise: "40e0d0",\n    violet: "ee82ee",\n    wheat: "f5deb3",\n    white: "fff",\n    whitesmoke: "f5f5f5",\n    yellow: "ff0",\n    yellowgreen: "9acd32"\n  }; // Make it easy to access colors via `hexNames[hex]`\n\n  var hexNames = tinycolor.hexNames = flip(names); // Utilities\n  // ---------\n  // `{ \'name1\': \'val1\' }` becomes `{ \'val1\': \'name1\' }`\n\n  function flip(o) {\n    var flipped = {};\n\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n\n    return flipped;\n  } // Return a valid alpha value [0,1] with all invalid values being set to 1\n\n\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  } // Take input from [0, n] and return it as [0, 1]\n\n\n  function bound01(n, max) {\n    if (isOnePointZero(n)) {\n      n = "100%";\n    }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number\n\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    } // Handle floating point rounding errors\n\n\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    } // Convert into [0, 1] range if it isn\'t already\n\n\n    return n % max / parseFloat(max);\n  } // Force a number between 0 and 1\n\n\n  function clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n  } // Parse a base-16 hex value into a base-10 integer\n\n\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\n  function isOnePointZero(n) {\n    return typeof n == "string" && n.indexOf(\'.\') != -1 && parseFloat(n) === 1;\n  } // Check to see if string passed in is a percentage\n\n\n  function isPercentage(n) {\n    return typeof n === "string" && n.indexOf(\'%\') != -1;\n  } // Force a hex value to have 2 characters\n\n\n  function pad2(c) {\n    return c.length == 1 ? \'0\' + c : \'\' + c;\n  } // Replace a decimal with it\'s percentage value\n\n\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + "%";\n    }\n\n    return n;\n  } // Converts a decimal to a hex value\n\n\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  } // Converts a hex value to a decimal\n\n\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = "[-\\\\+]?\\\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>\n\n    var CSS_NUMBER = "[-\\\\+]?\\\\d*\\\\.\\\\d+%?"; // Allow positive/negative integer/number.  Don\'t capture the either/or, just the entire outcome.\n\n    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n\n    var PERMISSIVE_MATCH3 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n    var PERMISSIVE_MATCH4 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),\n      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),\n      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),\n      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),\n      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),\n      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }(); // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n\n\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  } // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\n\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \'\').replace(trimRight, \'\').toLowerCase();\n    var named = false;\n\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \'transparent\') {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: "name"\n      };\n    } // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don\'t worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\n\n    var match;\n\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? "name" : "hex8"\n      };\n    }\n\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? "name" : "hex"\n      };\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \'\' + match[1]),\n        g: parseIntFromHex(match[2] + \'\' + match[2]),\n        b: parseIntFromHex(match[3] + \'\' + match[3]),\n        a: convertHexToDecimal(match[4] + \'\' + match[4]),\n        format: named ? "name" : "hex8"\n      };\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \'\' + match[1]),\n        g: parseIntFromHex(match[2] + \'\' + match[2]),\n        b: parseIntFromHex(match[3] + \'\' + match[3]),\n        format: named ? "name" : "hex"\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {"level":"AA", "size":"small"}\n    var level, size;\n    parms = parms || {\n      "level": "AA",\n      "size": "small"\n    };\n    level = (parms.level || "AA").toUpperCase();\n    size = (parms.size || "small").toLowerCase();\n\n    if (level !== "AA" && level !== "AAA") {\n      level = "AA";\n    }\n\n    if (size !== "small" && size !== "large") {\n      size = "small";\n    }\n\n    return {\n      "level": level,\n      "size": size\n    };\n  } // Node: Export function\n\n\n  if ( true && module.exports) {\n    module.exports = tinycolor;\n  } // AMD/requirejs: Define the module\n  else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return tinycolor;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } // Browser: Expose to window\n  else {}\n})(Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Zss7\n')},jjJg:function(__webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export CHARSET */\n/* unused harmony export COMMENT */\n/* unused harmony export COUNTER_STYLE */\n/* unused harmony export DECLARATION */\n/* unused harmony export DOCUMENT */\n/* unused harmony export FONT_FACE */\n/* unused harmony export FONT_FEATURE_VALUES */\n/* unused harmony export IMPORT */\n/* unused harmony export KEYFRAMES */\n/* unused harmony export MEDIA */\n/* unused harmony export MOZ */\n/* unused harmony export MS */\n/* unused harmony export NAMESPACE */\n/* unused harmony export PAGE */\n/* unused harmony export RULESET */\n/* unused harmony export SUPPORTS */\n/* unused harmony export VIEWPORT */\n/* unused harmony export WEBKIT */\n/* unused harmony export abs */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return U; });\n/* unused harmony export append */\n/* unused harmony export assign */\n/* unused harmony export caret */\n/* unused harmony export char */\n/* unused harmony export character */\n/* unused harmony export characters */\n/* unused harmony export charat */\n/* unused harmony export column */\n/* unused harmony export combine */\n/* unused harmony export comment */\n/* unused harmony export commenter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ce; });\n/* unused harmony export copy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return V; });\n/* unused harmony export declaration */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return W; });\n/* unused harmony export delimiter */\n/* unused harmony export escaping */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return d; });\n/* unused harmony export hash */\n/* unused harmony export identifier */\n/* unused harmony export indexof */\n/* unused harmony export length */\n/* unused harmony export line */\n/* unused harmony export match */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return le; });\n/* unused harmony export namespace */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return N; });\n/* unused harmony export node */\n/* unused harmony export parse */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return P; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return F; });\n/* unused harmony export prefix */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return he; });\n/* unused harmony export prev */\n/* unused harmony export replace */\n/* unused harmony export ruleset */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return ve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return fe; });\n/* unused harmony export sizeof */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return R; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return oe; });\n/* unused harmony export strlen */\n/* unused harmony export substr */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return T; });\n/* unused harmony export tokenize */\n/* unused harmony export tokenizer */\n/* unused harmony export trim */\n/* unused harmony export whitespace */\nvar e = "-ms-";\nvar r = "-moz-";\nvar a = "-webkit-";\nvar c = "comm";\nvar n = "rule";\nvar t = "decl";\nvar s = "@page";\nvar u = "@media";\nvar i = "@import";\nvar f = "@charset";\nvar o = "@viewport";\nvar l = "@supports";\nvar v = "@document";\nvar h = "@namespace";\nvar p = "@keyframes";\nvar b = "@font-face";\nvar w = "@counter-style";\nvar $ = "@font-feature-values";\nvar k = Math.abs;\nvar d = String.fromCharCode;\nvar g = Object.assign;\n\nfunction m(e, r) {\n  return (((r << 2 ^ z(e, 0)) << 2 ^ z(e, 1)) << 2 ^ z(e, 2)) << 2 ^ z(e, 3);\n}\n\nfunction x(e) {\n  return e.trim();\n}\n\nfunction y(e, r) {\n  return (e = r.exec(e)) ? e[0] : e;\n}\n\nfunction j(e, r, a) {\n  return e.replace(r, a);\n}\n\nfunction C(e, r) {\n  return e.indexOf(r);\n}\n\nfunction z(e, r) {\n  return e.charCodeAt(r) | 0;\n}\n\nfunction A(e, r, a) {\n  return e.slice(r, a);\n}\n\nfunction O(e) {\n  return e.length;\n}\n\nfunction M(e) {\n  return e.length;\n}\n\nfunction S(e, r) {\n  return r.push(e), e;\n}\n\nfunction q(e, r) {\n  return e.map(r).join("");\n}\n\nvar B = 1;\nvar D = 1;\nvar E = 0;\nvar F = 0;\nvar G = 0;\nvar H = "";\n\nfunction I(e, r, a, c, n, t, s) {\n  return {\n    value: e,\n    root: r,\n    parent: a,\n    type: c,\n    props: n,\n    children: t,\n    line: B,\n    column: D,\n    length: s,\n    "return": ""\n  };\n}\n\nfunction J(e, r) {\n  return g(I("", null, null, "", null, null, 0), e, {\n    length: -e.length\n  }, r);\n}\n\nfunction K() {\n  return G;\n}\n\nfunction L() {\n  G = F > 0 ? z(H, --F) : 0;\n  if (D--, G === 10) D = 1, B--;\n  return G;\n}\n\nfunction N() {\n  G = F < E ? z(H, F++) : 0;\n  if (D++, G === 10) D = 1, B++;\n  return G;\n}\n\nfunction P() {\n  return z(H, F);\n}\n\nfunction Q() {\n  return F;\n}\n\nfunction R(e, r) {\n  return A(H, e, r);\n}\n\nfunction T(e) {\n  switch (e) {\n    case 0:\n    case 9:\n    case 10:\n    case 13:\n    case 32:\n      return 5;\n\n    case 33:\n    case 43:\n    case 44:\n    case 47:\n    case 62:\n    case 64:\n    case 126:\n    case 59:\n    case 123:\n    case 125:\n      return 4;\n\n    case 58:\n      return 3;\n\n    case 34:\n    case 39:\n    case 40:\n    case 91:\n      return 2;\n\n    case 41:\n    case 93:\n      return 1;\n  }\n\n  return 0;\n}\n\nfunction U(e) {\n  return B = D = 1, E = O(H = e), F = 0, [];\n}\n\nfunction V(e) {\n  return H = "", e;\n}\n\nfunction W(e) {\n  return x(R(F - 1, ee(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));\n}\n\nfunction X(e) {\n  return V(Z(U(e)));\n}\n\nfunction Y(e) {\n  while (G = P()) {\n    if (G < 33) N();else break;\n  }\n\n  return T(e) > 2 || T(G) > 3 ? "" : " ";\n}\n\nfunction Z(e) {\n  while (N()) {\n    switch (T(G)) {\n      case 0:\n        S(ae(F - 1), e);\n        break;\n\n      case 2:\n        S(W(G), e);\n        break;\n\n      default:\n        S(d(G), e);\n    }\n  }\n\n  return e;\n}\n\nfunction _(e, r) {\n  while (--r && N()) {\n    if (G < 48 || G > 102 || G > 57 && G < 65 || G > 70 && G < 97) break;\n  }\n\n  return R(e, Q() + (r < 6 && P() == 32 && N() == 32));\n}\n\nfunction ee(e) {\n  while (N()) {\n    switch (G) {\n      case e:\n        return F;\n\n      case 34:\n      case 39:\n        if (e !== 34 && e !== 39) ee(G);\n        break;\n\n      case 40:\n        if (e === 41) ee(e);\n        break;\n\n      case 92:\n        N();\n        break;\n    }\n  }\n\n  return F;\n}\n\nfunction re(e, r) {\n  while (N()) {\n    if (e + G === 47 + 10) break;else if (e + G === 42 + 42 && P() === 47) break;\n  }\n\n  return "/*" + R(r, F - 1) + "*" + d(e === 47 ? e : N());\n}\n\nfunction ae(e) {\n  while (!T(P())) {\n    N();\n  }\n\n  return R(e, F);\n}\n\nfunction ce(e) {\n  return V(ne("", null, null, null, [""], e = U(e), 0, [0], e));\n}\n\nfunction ne(e, r, a, c, n, t, s, u, i) {\n  var f = 0;\n  var o = 0;\n  var l = s;\n  var v = 0;\n  var h = 0;\n  var p = 0;\n  var b = 1;\n  var w = 1;\n  var $ = 1;\n  var k = 0;\n  var g = "";\n  var m = n;\n  var x = t;\n  var y = c;\n  var z = g;\n\n  while (w) {\n    switch (p = k, k = N()) {\n      case 40:\n        if (p != 108 && z.charCodeAt(l - 1) == 58) {\n          if (C(z += j(W(k), "&", "&\\f"), "&\\f") != -1) $ = -1;\n          break;\n        }\n\n      case 34:\n      case 39:\n      case 91:\n        z += W(k);\n        break;\n\n      case 9:\n      case 10:\n      case 13:\n      case 32:\n        z += Y(p);\n        break;\n\n      case 92:\n        z += _(Q() - 1, 7);\n        continue;\n\n      case 47:\n        switch (P()) {\n          case 42:\n          case 47:\n            S(se(re(N(), Q()), r, a), i);\n            break;\n\n          default:\n            z += "/";\n        }\n\n        break;\n\n      case 123 * b:\n        u[f++] = O(z) * $;\n\n      case 125 * b:\n      case 59:\n      case 0:\n        switch (k) {\n          case 0:\n          case 125:\n            w = 0;\n\n          case 59 + o:\n            if (h > 0 && O(z) - l) S(h > 32 ? ue(z + ";", c, a, l - 1) : ue(j(z, " ", "") + ";", c, a, l - 2), i);\n            break;\n\n          case 59:\n            z += ";";\n\n          default:\n            S(y = te(z, r, a, f, o, n, u, g, m = [], x = [], l), t);\n            if (k === 123) if (o === 0) ne(z, r, y, y, m, t, l, u, x);else switch (v) {\n              case 100:\n              case 109:\n              case 115:\n                ne(e, y, y, c && S(te(e, y, y, 0, 0, n, u, g, n, m = [], l), x), n, x, l, u, c ? m : x);\n                break;\n\n              default:\n                ne(z, y, y, y, [""], x, 0, u, x);\n            }\n        }\n\n        f = o = h = 0, b = $ = 1, g = z = "", l = s;\n        break;\n\n      case 58:\n        l = 1 + O(z), h = p;\n\n      default:\n        if (b < 1) if (k == 123) --b;else if (k == 125 && b++ == 0 && L() == 125) continue;\n\n        switch (z += d(k), k * b) {\n          case 38:\n            $ = o > 0 ? 1 : (z += "\\f", -1);\n            break;\n\n          case 44:\n            u[f++] = (O(z) - 1) * $, $ = 1;\n            break;\n\n          case 64:\n            if (P() === 45) z += W(N());\n            v = P(), o = l = O(g = z += ae(Q())), k++;\n            break;\n\n          case 45:\n            if (p === 45 && O(z) == 2) b = 0;\n        }\n\n    }\n  }\n\n  return t;\n}\n\nfunction te(e, r, a, c, t, s, u, i, f, o, l) {\n  var v = t - 1;\n  var h = t === 0 ? s : [""];\n  var p = M(h);\n\n  for (var b = 0, w = 0, $ = 0; b < c; ++b) {\n    for (var d = 0, g = A(e, v + 1, v = k(w = u[b])), m = e; d < p; ++d) {\n      if (m = x(w > 0 ? h[d] + " " + g : j(g, /&\\f/g, h[d]))) f[$++] = m;\n    }\n  }\n\n  return I(e, r, a, t === 0 ? n : i, f, o, l);\n}\n\nfunction se(e, r, a) {\n  return I(e, r, a, c, d(K()), A(e, 2, -2), 0);\n}\n\nfunction ue(e, r, a, c) {\n  return I(e, r, a, t, A(e, 0, c), A(e, c + 1, -1), c);\n}\n\nfunction ie(c, n) {\n  switch (m(c, n)) {\n    case 5103:\n      return a + "print-" + c + c;\n\n    case 5737:\n    case 4201:\n    case 3177:\n    case 3433:\n    case 1641:\n    case 4457:\n    case 2921:\n    case 5572:\n    case 6356:\n    case 5844:\n    case 3191:\n    case 6645:\n    case 3005:\n    case 6391:\n    case 5879:\n    case 5623:\n    case 6135:\n    case 4599:\n    case 4855:\n    case 4215:\n    case 6389:\n    case 5109:\n    case 5365:\n    case 5621:\n    case 3829:\n      return a + c + c;\n\n    case 5349:\n    case 4246:\n    case 4810:\n    case 6968:\n    case 2756:\n      return a + c + r + c + e + c + c;\n\n    case 6828:\n    case 4268:\n      return a + c + e + c + c;\n\n    case 6165:\n      return a + c + e + "flex-" + c + c;\n\n    case 5187:\n      return a + c + j(c, /(\\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + c;\n\n    case 5443:\n      return a + c + e + "flex-item-" + j(c, /flex-|-self/, "") + c;\n\n    case 4675:\n      return a + c + e + "flex-line-pack" + j(c, /align-content|flex-|-self/, "") + c;\n\n    case 5548:\n      return a + c + e + j(c, "shrink", "negative") + c;\n\n    case 5292:\n      return a + c + e + j(c, "basis", "preferred-size") + c;\n\n    case 6060:\n      return a + "box-" + j(c, "-grow", "") + a + c + e + j(c, "grow", "positive") + c;\n\n    case 4554:\n      return a + j(c, /([^-])(transform)/g, "$1" + a + "$2") + c;\n\n    case 6187:\n      return j(j(j(c, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), c, "") + c;\n\n    case 5495:\n    case 3959:\n      return j(c, /(image-set\\([^]*)/, a + "$1" + "$`$1");\n\n    case 4968:\n      return j(j(c, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + c + c;\n\n    case 4095:\n    case 3583:\n    case 4068:\n    case 2532:\n      return j(c, /(.+)-inline(.+)/, a + "$1$2") + c;\n\n    case 8116:\n    case 7059:\n    case 5753:\n    case 5535:\n    case 5445:\n    case 5701:\n    case 4933:\n    case 4677:\n    case 5533:\n    case 5789:\n    case 5021:\n    case 4765:\n      if (O(c) - 1 - n > 6) switch (z(c, n + 1)) {\n        case 109:\n          if (z(c, n + 4) !== 45) break;\n\n        case 102:\n          return j(c, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (z(c, n + 3) == 108 ? "$3" : "$2-$3")) + c;\n\n        case 115:\n          return ~C(c, "stretch") ? ie(j(c, "stretch", "fill-available"), n) + c : c;\n      }\n      break;\n\n    case 4949:\n      if (z(c, n + 1) !== 115) break;\n\n    case 6444:\n      switch (z(c, O(c) - 3 - (~C(c, "!important") && 10))) {\n        case 107:\n          return j(c, ":", ":" + a) + c;\n\n        case 101:\n          return j(c, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (z(c, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + c;\n      }\n\n      break;\n\n    case 5936:\n      switch (z(c, n + 11)) {\n        case 114:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "tb") + c;\n\n        case 108:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "tb-rl") + c;\n\n        case 45:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "lr") + c;\n      }\n\n      return a + c + e + c + c;\n  }\n\n  return c;\n}\n\nfunction fe(e, r) {\n  var a = "";\n  var c = M(e);\n\n  for (var n = 0; n < c; n++) {\n    a += r(e[n], n, e, r) || "";\n  }\n\n  return a;\n}\n\nfunction oe(e, r, a, s) {\n  switch (e.type) {\n    case i:\n    case t:\n      return e["return"] = e["return"] || e.value;\n\n    case c:\n      return "";\n\n    case p:\n      return e["return"] = e.value + "{" + fe(e.children, s) + "}";\n\n    case n:\n      e.value = e.props.join(",");\n  }\n\n  return O(a = fe(e.children, s)) ? e["return"] = e.value + "{" + a + "}" : "";\n}\n\nfunction le(e) {\n  var r = M(e);\n  return function (a, c, n, t) {\n    var s = "";\n\n    for (var u = 0; u < r; u++) {\n      s += e[u](a, c, n, t) || "";\n    }\n\n    return s;\n  };\n}\n\nfunction ve(e) {\n  return function (r) {\n    if (!r.root) if (r = r["return"]) e(r);\n  };\n}\n\nfunction he(c, s, u, i) {\n  if (c.length > -1) if (!c["return"]) switch (c.type) {\n    case t:\n      c["return"] = ie(c.value, c.length);\n      break;\n\n    case p:\n      return fe([J(c, {\n        value: j(c.value, "@", "@" + a)\n      })], i);\n\n    case n:\n      if (c.length) return q(c.props, function (n) {\n        switch (y(n, /(::plac\\w+|:read-\\w+)/)) {\n          case ":read-only":\n          case ":read-write":\n            return fe([J(c, {\n              props: [j(n, /:(read-\\w+)/, ":" + r + "$1")]\n            })], i);\n\n          case "::placeholder":\n            return fe([J(c, {\n              props: [j(n, /:(plac\\w+)/, ":" + a + "input-$1")]\n            }), J(c, {\n              props: [j(n, /:(plac\\w+)/, ":" + r + "$1")]\n            }), J(c, {\n              props: [j(n, /:(plac\\w+)/, e + "input-$1")]\n            })], i);\n        }\n\n        return "";\n      });\n  }\n}\n\nfunction pe(e) {\n  switch (e.type) {\n    case n:\n      e.props = e.props.map(function (r) {\n        return q(X(r), function (r, a, c) {\n          switch (z(r, 0)) {\n            case 12:\n              return A(r, 1, O(r));\n\n            case 0:\n            case 40:\n            case 43:\n            case 62:\n            case 126:\n              return r;\n\n            case 58:\n              if (c[++a] === "global") c[a] = "", c[++a] = "\\f" + A(c[a], a = 1, -1);\n\n            case 32:\n              return a === 1 ? "" : r;\n\n            default:\n              switch (a) {\n                case 0:\n                  e = r;\n                  return M(c) > 1 ? "" : r;\n\n                case a = M(c) - 1:\n                case 2:\n                  return a === 2 ? r + e + e : r + e;\n\n                default:\n                  return r;\n              }\n\n          }\n        });\n      });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///jjJg\n')},lreK:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.mergeClasses = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _cloneDeep2 = __webpack_require__("BkRI");\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar mergeClasses = exports.mergeClasses = function mergeClasses(classes) {\n  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var styles = classes["default"] && (0, _cloneDeep3["default"])(classes["default"]) || {};\n  activeNames.map(function (name) {\n    var toMerge = classes[name];\n\n    if (toMerge) {\n      (0, _forOwn3["default"])(toMerge, function (value, key) {\n        if (!styles[key]) {\n          styles[key] = {};\n        }\n\n        styles[key] = _extends({}, styles[key], toMerge[key]);\n      });\n    }\n\n    return name;\n  });\n  return styles;\n};\n\nexports["default"] = mergeClasses;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL21lcmdlQ2xhc3Nlcy5qcz85NmI3Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWVyZ2VDbGFzc2VzIiwidW5kZWZpbmVkIiwiX2Zvck93bjIiLCJyZXF1aXJlIiwiX2Zvck93bjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Nsb25lRGVlcDIiLCJfY2xvbmVEZWVwMyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjbGFzc2VzIiwiYWN0aXZlTmFtZXMiLCJzdHlsZXMiLCJtYXAiLCJuYW1lIiwidG9NZXJnZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXRCOztBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNILFFBQUQsQ0FBckM7O0FBRUEsSUFBSUksV0FBVyxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSUksV0FBVyxHQUFHRixzQkFBc0IsQ0FBQ0MsV0FBRCxDQUF4Qzs7QUFFQSxJQUFJRSxRQUFRLEdBQUdaLE1BQU0sQ0FBQ2EsTUFBUCxJQUFpQixVQUFVQyxNQUFWLEVBQWtCO0VBQUUsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0lBQUUsSUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBdEI7O0lBQTJCLEtBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7TUFBRSxJQUFJbEIsTUFBTSxDQUFDb0IsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDSixNQUFyQyxFQUE2Q0MsR0FBN0MsQ0FBSixFQUF1RDtRQUFFTCxNQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEI7TUFBNEI7SUFBRTtFQUFFOztFQUFDLE9BQU9MLE1BQVA7QUFBZ0IsQ0FBaFE7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NjLEdBQWhDLEVBQXFDO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0lBQUUsV0FBU0E7RUFBWCxDQUFyQztBQUF3RDs7QUFFL0YsSUFBSW5CLFlBQVksR0FBR0YsT0FBTyxDQUFDRSxZQUFSLEdBQXVCLFNBQVNBLFlBQVQsQ0FBc0JxQixPQUF0QixFQUErQjtFQUN2RSxJQUFJQyxXQUFXLEdBQUdWLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQlgsU0FBekMsR0FBcURXLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQXRGO0VBRUEsSUFBSVcsTUFBTSxHQUFHRixPQUFPLFdBQVAsSUFBbUIsQ0FBQyxHQUFHZCxXQUFXLFdBQWYsRUFBeUJjLE9BQU8sV0FBaEMsQ0FBbkIsSUFBZ0UsRUFBN0U7RUFDQUMsV0FBVyxDQUFDRSxHQUFaLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7SUFDOUIsSUFBSUMsT0FBTyxHQUFHTCxPQUFPLENBQUNJLElBQUQsQ0FBckI7O0lBQ0EsSUFBSUMsT0FBSixFQUFhO01BQ1gsQ0FBQyxHQUFHdEIsUUFBUSxXQUFaLEVBQXNCc0IsT0FBdEIsRUFBK0IsVUFBVTNCLEtBQVYsRUFBaUJnQixHQUFqQixFQUFzQjtRQUNuRCxJQUFJLENBQUNRLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCO1VBQ2hCUSxNQUFNLENBQUNSLEdBQUQsQ0FBTixHQUFjLEVBQWQ7UUFDRDs7UUFFRFEsTUFBTSxDQUFDUixHQUFELENBQU4sR0FBY1AsUUFBUSxDQUFDLEVBQUQsRUFBS2UsTUFBTSxDQUFDUixHQUFELENBQVgsRUFBa0JXLE9BQU8sQ0FBQ1gsR0FBRCxDQUF6QixDQUF0QjtNQUNELENBTkQ7SUFPRDs7SUFFRCxPQUFPVSxJQUFQO0VBQ0QsQ0FiRDtFQWNBLE9BQU9GLE1BQVA7QUFDRCxDQW5CRDs7QUFxQkF6QixPQUFPLFdBQVAsR0FBa0JFLFlBQWxCIiwiZmlsZSI6ImxyZUsuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lcmdlQ2xhc3NlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9jbG9uZURlZXAyID0gcmVxdWlyZSgnbG9kYXNoL2Nsb25lRGVlcCcpO1xuXG52YXIgX2Nsb25lRGVlcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZURlZXAyKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1lcmdlQ2xhc3NlcyA9IGV4cG9ydHMubWVyZ2VDbGFzc2VzID0gZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGNsYXNzZXMpIHtcbiAgdmFyIGFjdGl2ZU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICB2YXIgc3R5bGVzID0gY2xhc3Nlcy5kZWZhdWx0ICYmICgwLCBfY2xvbmVEZWVwMy5kZWZhdWx0KShjbGFzc2VzLmRlZmF1bHQpIHx8IHt9O1xuICBhY3RpdmVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdG9NZXJnZSA9IGNsYXNzZXNbbmFtZV07XG4gICAgaWYgKHRvTWVyZ2UpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0b01lcmdlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIXN0eWxlc1trZXldKSB7XG4gICAgICAgICAgc3R5bGVzW2tleV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlc1trZXldID0gX2V4dGVuZHMoe30sIHN0eWxlc1trZXldLCB0b01lcmdlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///lreK\n')},qT12:function(module,exports,__webpack_require__){"use strict";eval('/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = Symbol["for"]("react.element"),\n    c = Symbol["for"]("react.portal"),\n    d = Symbol["for"]("react.fragment"),\n    e = Symbol["for"]("react.strict_mode"),\n    f = Symbol["for"]("react.profiler"),\n    g = Symbol["for"]("react.provider"),\n    h = Symbol["for"]("react.context"),\n    k = Symbol["for"]("react.server_context"),\n    l = Symbol["for"]("react.forward_ref"),\n    m = Symbol["for"]("react.suspense"),\n    n = Symbol["for"]("react.suspense_list"),\n    p = Symbol["for"]("react.memo"),\n    q = Symbol["for"]("react.lazy"),\n    t = Symbol["for"]("react.offscreen"),\n    u;\nu = Symbol["for"]("react.module.reference");\n\nfunction v(a) {\n  if ("object" === typeof a && null !== a) {\n    var r = a.$$typeof;\n\n    switch (r) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case m:\n          case n:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case h:\n              case l:\n              case q:\n              case p:\n              case g:\n                return a;\n\n              default:\n                return r;\n            }\n\n        }\n\n      case c:\n        return r;\n    }\n  }\n}\n\nexports.ContextConsumer = h;\nexports.ContextProvider = g;\nexports.Element = b;\nexports.ForwardRef = l;\nexports.Fragment = d;\nexports.Lazy = q;\nexports.Memo = p;\nexports.Portal = c;\nexports.Profiler = f;\nexports.StrictMode = e;\nexports.Suspense = m;\nexports.SuspenseList = n;\n\nexports.isAsyncMode = function () {\n  return !1;\n};\n\nexports.isConcurrentMode = function () {\n  return !1;\n};\n\nexports.isContextConsumer = function (a) {\n  return v(a) === h;\n};\n\nexports.isContextProvider = function (a) {\n  return v(a) === g;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === b;\n};\n\nexports.isForwardRef = function (a) {\n  return v(a) === l;\n};\n\nexports.isFragment = function (a) {\n  return v(a) === d;\n};\n\nexports.isLazy = function (a) {\n  return v(a) === q;\n};\n\nexports.isMemo = function (a) {\n  return v(a) === p;\n};\n\nexports.isPortal = function (a) {\n  return v(a) === c;\n};\n\nexports.isProfiler = function (a) {\n  return v(a) === f;\n};\n\nexports.isStrictMode = function (a) {\n  return v(a) === e;\n};\n\nexports.isSuspense = function (a) {\n  return v(a) === m;\n};\n\nexports.isSuspenseList = function (a) {\n  return v(a) === n;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;\n};\n\nexports.typeOf = v;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzP2E5M2QiXSwibmFtZXMiOlsiYiIsIlN5bWJvbCIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImsiLCJsIiwibSIsIm4iLCJwIiwicSIsInQiLCJ1IiwidiIsImEiLCJyIiwiJCR0eXBlb2YiLCJ0eXBlIiwiZXhwb3J0cyIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiU3VzcGVuc2VMaXN0IiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNTdXNwZW5zZUxpc3QiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJnZXRNb2R1bGVJZCIsInR5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxlQUFYLENBQU47QUFBQSxJQUFrQ0MsQ0FBQyxHQUFDRCxNQUFNLE9BQU4sQ0FBVyxjQUFYLENBQXBDO0FBQUEsSUFBK0RFLENBQUMsR0FBQ0YsTUFBTSxPQUFOLENBQVcsZ0JBQVgsQ0FBakU7QUFBQSxJQUE4RkcsQ0FBQyxHQUFDSCxNQUFNLE9BQU4sQ0FBVyxtQkFBWCxDQUFoRztBQUFBLElBQWdJSSxDQUFDLEdBQUNKLE1BQU0sT0FBTixDQUFX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bnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGM9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxkPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxlPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxmPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxnPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxoPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LnNlcnZlcl9jb250ZXh0XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLG09U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikscD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSx1O3U9U3ltYm9sLmZvcihcInJlYWN0Lm1vZHVsZS5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiB2KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciByPWEuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBtOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgaDpjYXNlIGw6Y2FzZSBxOmNhc2UgcDpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gcn19Y2FzZSBjOnJldHVybiByfX19ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1nO2V4cG9ydHMuRWxlbWVudD1iO2V4cG9ydHMuRm9yd2FyZFJlZj1sO2V4cG9ydHMuRnJhZ21lbnQ9ZDtleHBvcnRzLkxhenk9cTtleHBvcnRzLk1lbW89cDtleHBvcnRzLlBvcnRhbD1jO2V4cG9ydHMuUHJvZmlsZXI9ZjtleHBvcnRzLlN0cmljdE1vZGU9ZTtleHBvcnRzLlN1c3BlbnNlPW07XG5leHBvcnRzLlN1c3BlbnNlTGlzdD1uO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bH07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1xfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXB9O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bX07ZXhwb3J0cy5pc1N1c3BlbnNlTGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09ZXx8YT09PW18fGE9PT1ufHxhPT09dHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09bHx8YS4kJHR5cGVvZj09PXV8fHZvaWQgMCE9PWEuZ2V0TW9kdWxlSWQpPyEwOiExfTtleHBvcnRzLnR5cGVPZj12O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///qT12\n')},vOnD:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerStyleSheet", function() { return Je; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetConsumer", function() { return le; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetContext", function() { return ue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetManager", function() { return ye; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeConsumer", function() { return Le; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeContext", function() { return Ge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeProvider", function() { return Fe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__PRIVATE__", function() { return Ke; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createGlobalStyle", function() { return We; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return Ce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStyledComponent", function() { return N; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return Ue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useTheme", function() { return Ze; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return C; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withTheme", function() { return Xe; });\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("TOwV");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("Gytx");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("0x0X");\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("ME5O");\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("CTjV");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("2mql");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nfunction v() {\n  return (v = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  }).apply(this, arguments);\n}\n\nvar g = function g(e, t) {\n  for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1) {\n    n.push(t[r], e[r + 1]);\n  }\n\n  return n;\n},\n    S = function S(t) {\n  return null !== t && "object" == typeof t && "[object Object]" === (t.toString ? t.toString() : Object.prototype.toString.call(t)) && !Object(react_is__WEBPACK_IMPORTED_MODULE_0__["typeOf"])(t);\n},\n    w = Object.freeze([]),\n    E = Object.freeze({});\n\nfunction b(e) {\n  return "function" == typeof e;\n}\n\nfunction _(e) {\n  return  false || e.displayName || e.name || "Component";\n}\n\nfunction N(e) {\n  return e && "string" == typeof e.styledComponentId;\n}\n\nvar A = "undefined" != typeof process && (Object({"NODE_ENV":"production"}).REACT_APP_SC_ATTR || Object({"NODE_ENV":"production"}).SC_ATTR) || "data-styled",\n    C = "5.3.5",\n    I = "undefined" != typeof window && "HTMLElement" in window,\n    P = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY && "" !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY ? "false" !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY && Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY && "" !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY ? "false" !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY && Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY : "production" !== "production"),\n    O = {},\n    R =  false ? undefined : {};\n\nfunction D() {\n  for (var e = arguments.length <= 0 ? void 0 : arguments[0], t = [], n = 1, r = arguments.length; n < r; n += 1) {\n    t.push(n < 0 || arguments.length <= n ? void 0 : arguments[n]);\n  }\n\n  return t.forEach(function (t) {\n    e = e.replace(/%[a-z]/, t);\n  }), e;\n}\n\nfunction j(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  throw  true ? new Error("An error occurred. See https://git.io/JUIaE#" + e + " for more information." + (n.length > 0 ? " Args: " + n.join(", ") : "")) : undefined;\n}\n\nvar T = function () {\n  function e(e) {\n    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;\n  }\n\n  var t = e.prototype;\n  return t.indexOfGroup = function (e) {\n    for (var t = 0, n = 0; n < e; n++) {\n      t += this.groupSizes[n];\n    }\n\n    return t;\n  }, t.insertRules = function (e, t) {\n    if (e >= this.groupSizes.length) {\n      for (var n = this.groupSizes, r = n.length, o = r; e >= o;) {\n        (o <<= 1) < 0 && j(16, "" + e);\n      }\n\n      this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;\n\n      for (var s = r; s < o; s++) {\n        this.groupSizes[s] = 0;\n      }\n    }\n\n    for (var i = this.indexOfGroup(e + 1), a = 0, c = t.length; a < c; a++) {\n      this.tag.insertRule(i, t[a]) && (this.groupSizes[e]++, i++);\n    }\n  }, t.clearGroup = function (e) {\n    if (e < this.length) {\n      var t = this.groupSizes[e],\n          n = this.indexOfGroup(e),\n          r = n + t;\n      this.groupSizes[e] = 0;\n\n      for (var o = n; o < r; o++) {\n        this.tag.deleteRule(n);\n      }\n    }\n  }, t.getGroup = function (e) {\n    var t = "";\n    if (e >= this.length || 0 === this.groupSizes[e]) return t;\n\n    for (var n = this.groupSizes[e], r = this.indexOfGroup(e), o = r + n, s = r; s < o; s++) {\n      t += this.tag.getRule(s) + "/*!sc*/\\n";\n    }\n\n    return t;\n  }, e;\n}(),\n    x = new Map(),\n    k = new Map(),\n    V = 1,\n    B = function B(e) {\n  if (x.has(e)) return x.get(e);\n\n  for (; k.has(V);) {\n    V++;\n  }\n\n  var t = V++;\n  return  false && false, x.set(e, t), k.set(t, e), t;\n},\n    z = function z(e) {\n  return k.get(e);\n},\n    M = function M(e, t) {\n  t >= V && (V = t + 1), x.set(e, t), k.set(t, e);\n},\n    G = "style[" + A + \'][data-styled-version="5.3.5"]\',\n    L = new RegExp("^" + A + \'\\\\.g(\\\\d+)\\\\[id="([\\\\w\\\\d-]+)"\\\\].*?"([^"]*)\'),\n    F = function F(e, t, n) {\n  for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++) {\n    (r = o[s]) && e.registerName(t, r);\n  }\n},\n    Y = function Y(e, t) {\n  for (var n = (t.textContent || "").split("/*!sc*/\\n"), r = [], o = 0, s = n.length; o < s; o++) {\n    var i = n[o].trim();\n\n    if (i) {\n      var a = i.match(L);\n\n      if (a) {\n        var c = 0 | parseInt(a[1], 10),\n            u = a[2];\n        0 !== c && (M(u, c), F(e, u, a[3]), e.getTag().insertRules(c, r)), r.length = 0;\n      } else r.push(i);\n    }\n  }\n},\n    q = function q() {\n  return "undefined" != typeof window && void 0 !== window.__webpack_nonce__ ? window.__webpack_nonce__ : null;\n},\n    H = function H(e) {\n  var t = document.head,\n      n = e || t,\n      r = document.createElement("style"),\n      o = function (e) {\n    for (var t = e.childNodes, n = t.length; n >= 0; n--) {\n      var r = t[n];\n      if (r && 1 === r.nodeType && r.hasAttribute(A)) return r;\n    }\n  }(n),\n      s = void 0 !== o ? o.nextSibling : null;\n\n  r.setAttribute(A, "active"), r.setAttribute("data-styled-version", "5.3.5");\n  var i = q();\n  return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;\n},\n    $ = function () {\n  function e(e) {\n    var t = this.element = H(e);\n    t.appendChild(document.createTextNode("")), this.sheet = function (e) {\n      if (e.sheet) return e.sheet;\n\n      for (var t = document.styleSheets, n = 0, r = t.length; n < r; n++) {\n        var o = t[n];\n        if (o.ownerNode === e) return o;\n      }\n\n      j(17);\n    }(t), this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    try {\n      return this.sheet.insertRule(t, e), this.length++, !0;\n    } catch (e) {\n      return !1;\n    }\n  }, t.deleteRule = function (e) {\n    this.sheet.deleteRule(e), this.length--;\n  }, t.getRule = function (e) {\n    var t = this.sheet.cssRules[e];\n    return void 0 !== t && "string" == typeof t.cssText ? t.cssText : "";\n  }, e;\n}(),\n    W = function () {\n  function e(e) {\n    var t = this.element = H(e);\n    this.nodes = t.childNodes, this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    if (e <= this.length && e >= 0) {\n      var n = document.createTextNode(t),\n          r = this.nodes[e];\n      return this.element.insertBefore(n, r || null), this.length++, !0;\n    }\n\n    return !1;\n  }, t.deleteRule = function (e) {\n    this.element.removeChild(this.nodes[e]), this.length--;\n  }, t.getRule = function (e) {\n    return e < this.length ? this.nodes[e].textContent : "";\n  }, e;\n}(),\n    U = function () {\n  function e(e) {\n    this.rules = [], this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);\n  }, t.deleteRule = function (e) {\n    this.rules.splice(e, 1), this.length--;\n  }, t.getRule = function (e) {\n    return e < this.length ? this.rules[e] : "";\n  }, e;\n}(),\n    J = I,\n    X = {\n  isServer: !I,\n  useCSSOMInjection: !P\n},\n    Z = function () {\n  function e(e, t, n) {\n    void 0 === e && (e = E), void 0 === t && (t = {}), this.options = v({}, X, {}, e), this.gs = t, this.names = new Map(n), this.server = !!e.isServer, !this.server && I && J && (J = !1, function (e) {\n      for (var t = document.querySelectorAll(G), n = 0, r = t.length; n < r; n++) {\n        var o = t[n];\n        o && "active" !== o.getAttribute(A) && (Y(e, o), o.parentNode && o.parentNode.removeChild(o));\n      }\n    }(this));\n  }\n\n  e.registerId = function (e) {\n    return B(e);\n  };\n\n  var t = e.prototype;\n  return t.reconstructWithOptions = function (t, n) {\n    return void 0 === n && (n = !0), new e(v({}, this.options, {}, t), this.gs, n && this.names || void 0);\n  }, t.allocateGSInstance = function (e) {\n    return this.gs[e] = (this.gs[e] || 0) + 1;\n  }, t.getTag = function () {\n    return this.tag || (this.tag = (n = (t = this.options).isServer, r = t.useCSSOMInjection, o = t.target, e = n ? new U(o) : r ? new $(o) : new W(o), new T(e)));\n    var e, t, n, r, o;\n  }, t.hasNameForId = function (e, t) {\n    return this.names.has(e) && this.names.get(e).has(t);\n  }, t.registerName = function (e, t) {\n    if (B(e), this.names.has(e)) this.names.get(e).add(t);else {\n      var n = new Set();\n      n.add(t), this.names.set(e, n);\n    }\n  }, t.insertRules = function (e, t, n) {\n    this.registerName(e, t), this.getTag().insertRules(B(e), n);\n  }, t.clearNames = function (e) {\n    this.names.has(e) && this.names.get(e).clear();\n  }, t.clearRules = function (e) {\n    this.getTag().clearGroup(B(e)), this.clearNames(e);\n  }, t.clearTag = function () {\n    this.tag = void 0;\n  }, t.toString = function () {\n    return function (e) {\n      for (var t = e.getTag(), n = t.length, r = "", o = 0; o < n; o++) {\n        var s = z(o);\n\n        if (void 0 !== s) {\n          var i = e.names.get(s),\n              a = t.getGroup(o);\n\n          if (i && a && i.size) {\n            var c = A + ".g" + o + \'[id="\' + s + \'"]\',\n                u = "";\n            void 0 !== i && i.forEach(function (e) {\n              e.length > 0 && (u += e + ",");\n            }), r += "" + a + c + \'{content:"\' + u + \'"}/*!sc*/\\n\';\n          }\n        }\n      }\n\n      return r;\n    }(this);\n  }, e;\n}(),\n    K = /(a)(d)/gi,\n    Q = function Q(e) {\n  return String.fromCharCode(e + (e > 25 ? 39 : 97));\n};\n\nfunction ee(e) {\n  var t,\n      n = "";\n\n  for (t = Math.abs(e); t > 52; t = t / 52 | 0) {\n    n = Q(t % 52) + n;\n  }\n\n  return (Q(t % 52) + n).replace(K, "$1-$2");\n}\n\nvar te = function te(e, t) {\n  for (var n = t.length; n;) {\n    e = 33 * e ^ t.charCodeAt(--n);\n  }\n\n  return e;\n},\n    ne = function ne(e) {\n  return te(5381, e);\n};\n\nfunction re(e) {\n  for (var t = 0; t < e.length; t += 1) {\n    var n = e[t];\n    if (b(n) && !N(n)) return !1;\n  }\n\n  return !0;\n}\n\nvar oe = ne("5.3.5"),\n    se = function () {\n  function e(e, t, n) {\n    this.rules = e, this.staticRulesId = "", this.isStatic =  true && (void 0 === n || n.isStatic) && re(e), this.componentId = t, this.baseHash = te(oe, t), this.baseStyle = n, Z.registerId(t);\n  }\n\n  return e.prototype.generateAndInjectStyles = function (e, t, n) {\n    var r = this.componentId,\n        o = [];\n    if (this.baseStyle && o.push(this.baseStyle.generateAndInjectStyles(e, t, n)), this.isStatic && !n.hash) {\n      if (this.staticRulesId && t.hasNameForId(r, this.staticRulesId)) o.push(this.staticRulesId);else {\n        var s = Ne(this.rules, e, t, n).join(""),\n            i = ee(te(this.baseHash, s) >>> 0);\n\n        if (!t.hasNameForId(r, i)) {\n          var a = n(s, "." + i, void 0, r);\n          t.insertRules(r, i, a);\n        }\n\n        o.push(i), this.staticRulesId = i;\n      }\n    } else {\n      for (var c = this.rules.length, u = te(this.baseHash, n.hash), l = "", d = 0; d < c; d++) {\n        var h = this.rules[d];\n        if ("string" == typeof h) l += h,  false && (false);else if (h) {\n          var p = Ne(h, e, t, n),\n              f = Array.isArray(p) ? p.join("") : p;\n          u = te(u, f + d), l += f;\n        }\n      }\n\n      if (l) {\n        var m = ee(u >>> 0);\n\n        if (!t.hasNameForId(r, m)) {\n          var y = n(l, "." + m, void 0, r);\n          t.insertRules(r, m, y);\n        }\n\n        o.push(m);\n      }\n    }\n    return o.join(" ");\n  }, e;\n}(),\n    ie = /^\\s*\\/\\/.*$/gm,\n    ae = [":", "[", ".", "#"];\n\nfunction ce(e) {\n  var t,\n      n,\n      r,\n      o,\n      s = void 0 === e ? E : e,\n      i = s.options,\n      a = void 0 === i ? E : i,\n      c = s.plugins,\n      u = void 0 === c ? w : c,\n      l = new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](a),\n      d = [],\n      h = function (e) {\n    function t(t) {\n      if (t) try {\n        e(t + "}");\n      } catch (e) {}\n    }\n\n    return function (n, r, o, s, i, a, c, u, l, d) {\n      switch (n) {\n        case 1:\n          if (0 === l && 64 === r.charCodeAt(0)) return e(r + ";"), "";\n          break;\n\n        case 2:\n          if (0 === u) return r + "/*|*/";\n          break;\n\n        case 3:\n          switch (u) {\n            case 102:\n            case 112:\n              return e(o[0] + r), "";\n\n            default:\n              return r + (0 === d ? "/*|*/" : "");\n          }\n\n        case -2:\n          r.split("/*|*/}").forEach(t);\n      }\n    };\n  }(function (e) {\n    d.push(e);\n  }),\n      f = function f(e, r, s) {\n    return 0 === r && -1 !== ae.indexOf(s[n.length]) || s.match(o) ? e : "." + t;\n  };\n\n  function m(e, s, i, a) {\n    void 0 === a && (a = "&");\n    var c = e.replace(ie, ""),\n        u = s && i ? i + " " + s + " { " + c + " }" : c;\n    return t = a, n = s, r = new RegExp("\\\\" + n + "\\\\b", "g"), o = new RegExp("(\\\\" + n + "\\\\b){2,}"), l(i || !s ? "" : s, u);\n  }\n\n  return l.use([].concat(u, [function (e, t, o) {\n    2 === e && o.length && o[0].lastIndexOf(n) > 0 && (o[0] = o[0].replace(r, f));\n  }, h, function (e) {\n    if (-2 === e) {\n      var t = d;\n      return d = [], t;\n    }\n  }])), m.hash = u.length ? u.reduce(function (e, t) {\n    return t.name || j(15), te(e, t.name);\n  }, 5381).toString() : "", m;\n}\n\nvar ue = react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    le = ue.Consumer,\n    de = react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    he = (de.Consumer, new Z()),\n    pe = ce();\n\nfunction fe() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ue) || he;\n}\n\nfunction me() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(de) || pe;\n}\n\nfunction ye(e) {\n  var t = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(e.stylisPlugins),\n      n = t[0],\n      s = t[1],\n      c = fe(),\n      u = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    var t = c;\n    return e.sheet ? t = e.sheet : e.target && (t = t.reconstructWithOptions({\n      target: e.target\n    }, !1)), e.disableCSSOMInjection && (t = t.reconstructWithOptions({\n      useCSSOMInjection: !1\n    })), t;\n  }, [e.disableCSSOMInjection, e.sheet, e.target]),\n      l = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    return ce({\n      options: {\n        prefix: !e.disableVendorPrefixes\n      },\n      plugins: n\n    });\n  }, [e.disableVendorPrefixes, n]);\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {\n    shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n, e.stylisPlugins) || s(e.stylisPlugins);\n  }, [e.stylisPlugins]), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ue.Provider, {\n    value: u\n  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(de.Provider, {\n    value: l\n  },  false ? undefined : e.children));\n}\n\nvar ve = function () {\n  function e(e, t) {\n    var n = this;\n    this.inject = function (e, t) {\n      void 0 === t && (t = pe);\n      var r = n.name + t.hash;\n      e.hasNameForId(n.id, r) || e.insertRules(n.id, r, t(n.rules, r, "@keyframes"));\n    }, this.toString = function () {\n      return j(12, String(n.name));\n    }, this.name = e, this.id = "sc-keyframes-" + e, this.rules = t;\n  }\n\n  return e.prototype.getName = function (e) {\n    return void 0 === e && (e = pe), this.name + e.hash;\n  }, e;\n}(),\n    ge = /([A-Z])/,\n    Se = /([A-Z])/g,\n    we = /^ms-/,\n    Ee = function Ee(e) {\n  return "-" + e.toLowerCase();\n};\n\nfunction be(e) {\n  return ge.test(e) ? e.replace(Se, Ee).replace(we, "-ms-") : e;\n}\n\nvar _e = function _e(e) {\n  return null == e || !1 === e || "" === e;\n};\n\nfunction Ne(e, n, r, o) {\n  if (Array.isArray(e)) {\n    for (var s, i = [], a = 0, c = e.length; a < c; a += 1) {\n      "" !== (s = Ne(e[a], n, r, o)) && (Array.isArray(s) ? i.push.apply(i, s) : i.push(s));\n    }\n\n    return i;\n  }\n\n  if (_e(e)) return "";\n  if (N(e)) return "." + e.styledComponentId;\n\n  if (b(e)) {\n    if ("function" != typeof (l = e) || l.prototype && l.prototype.isReactComponent || !n) return e;\n    var u = e(n);\n    return  false && false, Ne(u, n, r, o);\n  }\n\n  var l;\n  return e instanceof ve ? r ? (e.inject(r, o), e.getName(o)) : e : S(e) ? function e(t, n) {\n    var r,\n        o,\n        s = [];\n\n    for (var i in t) {\n      t.hasOwnProperty(i) && !_e(t[i]) && (Array.isArray(t[i]) && t[i].isCss || b(t[i]) ? s.push(be(i) + ":", t[i], ";") : S(t[i]) ? s.push.apply(s, e(t[i], i)) : s.push(be(i) + ": " + (r = i, null == (o = t[i]) || "boolean" == typeof o || "" === o ? "" : "number" != typeof o || 0 === o || r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"] ? String(o).trim() : o + "px") + ";"));\n    }\n\n    return n ? [n + " {"].concat(s, ["}"]) : s;\n  }(e) : e.toString();\n}\n\nvar Ae = function Ae(e) {\n  return Array.isArray(e) && (e.isCss = !0), e;\n};\n\nfunction Ce(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  return b(e) || S(e) ? Ae(Ne(g(w, [e].concat(n)))) : 0 === n.length && 1 === e.length && "string" == typeof e[0] ? e : Ae(Ne(g(e, n)));\n}\n\nvar Ie = /invalid hook call/i,\n    Pe = new Set(),\n    Oe = function Oe(e, t) {\n  if (false) { var o, n, r; }\n},\n    Re = function Re(e, t, n) {\n  return void 0 === n && (n = E), e.theme !== n.theme && e.theme || t || n.theme;\n},\n    De = /[!"#$%&\'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,\n    je = /(^-|-$)/g;\n\nfunction Te(e) {\n  return e.replace(De, "-").replace(je, "");\n}\n\nvar xe = function xe(e) {\n  return ee(ne(e) >>> 0);\n};\n\nfunction ke(e) {\n  return "string" == typeof e && ( true || false);\n}\n\nvar Ve = function Ve(e) {\n  return "function" == typeof e || "object" == typeof e && null !== e && !Array.isArray(e);\n},\n    Be = function Be(e) {\n  return "__proto__" !== e && "constructor" !== e && "prototype" !== e;\n};\n\nfunction ze(e, t, n) {\n  var r = e[n];\n  Ve(t) && Ve(r) ? Me(r, t) : e[n] = t;\n}\n\nfunction Me(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  for (var o = 0, s = n; o < s.length; o++) {\n    var i = s[o];\n    if (Ve(i)) for (var a in i) {\n      Be(a) && ze(e, i[a], a);\n    }\n  }\n\n  return e;\n}\n\nvar Ge = react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    Le = Ge.Consumer;\n\nfunction Fe(e) {\n  var t = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n      n = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    return function (e, t) {\n      if (!e) return j(14);\n\n      if (b(e)) {\n        var n = e(t);\n        return  true ? n : undefined;\n      }\n\n      return Array.isArray(e) || "object" != typeof e ? j(8) : t ? v({}, t, {}, e) : e;\n    }(e.theme, t);\n  }, [e.theme, t]);\n  return e.children ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Ge.Provider, {\n    value: n\n  }, e.children) : null;\n}\n\nvar Ye = {};\n\nfunction qe(e, t, n) {\n  var o = N(e),\n      i = !ke(e),\n      a = t.attrs,\n      c = void 0 === a ? w : a,\n      d = t.componentId,\n      h = void 0 === d ? function (e, t) {\n    var n = "string" != typeof e ? "sc" : Te(e);\n    Ye[n] = (Ye[n] || 0) + 1;\n    var r = n + "-" + xe("5.3.5" + n + Ye[n]);\n    return t ? t + "-" + r : r;\n  }(t.displayName, t.parentComponentId) : d,\n      p = t.displayName,\n      f = void 0 === p ? function (e) {\n    return ke(e) ? "styled." + e : "Styled(" + _(e) + ")";\n  }(e) : p,\n      g = t.displayName && t.componentId ? Te(t.displayName) + "-" + t.componentId : t.componentId || h,\n      S = o && e.attrs ? Array.prototype.concat(e.attrs, c).filter(Boolean) : c,\n      A = t.shouldForwardProp;\n  o && e.shouldForwardProp && (A = t.shouldForwardProp ? function (n, r, o) {\n    return e.shouldForwardProp(n, r, o) && t.shouldForwardProp(n, r, o);\n  } : e.shouldForwardProp);\n\n  var C,\n      I = new se(n, g, o ? e.componentStyle : void 0),\n      P = I.isStatic && 0 === c.length,\n      O = function O(e, t) {\n    return function (e, t, n, r) {\n      var o = e.attrs,\n          i = e.componentStyle,\n          a = e.defaultProps,\n          c = e.foldedComponentIds,\n          d = e.shouldForwardProp,\n          h = e.styledComponentId,\n          p = e.target;\n       false && false;\n\n      var f = function (e, t, n) {\n        void 0 === e && (e = E);\n        var r = v({}, t, {\n          theme: e\n        }),\n            o = {};\n        return n.forEach(function (e) {\n          var t,\n              n,\n              s,\n              i = e;\n\n          for (t in b(i) && (i = i(r)), i) {\n            r[t] = o[t] = "className" === t ? (n = o[t], s = i[t], n && s ? n + " " + s : n || s) : i[t];\n          }\n        }), [r, o];\n      }(Re(t, Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge), a) || E, t, o),\n          y = f[0],\n          g = f[1],\n          S = function (e, t, n, r) {\n        var o = fe(),\n            s = me(),\n            i = t ? e.generateAndInjectStyles(E, o, s) : e.generateAndInjectStyles(n, o, s);\n        return  false && false,  false && false, i;\n      }(i, r, y,  false ? undefined : void 0),\n          w = n,\n          _ = g.$as || t.$as || g.as || t.as || p,\n          N = ke(_),\n          A = g !== t ? v({}, t, {}, g) : t,\n          C = {};\n\n      for (var I in A) {\n        "$" !== I[0] && "as" !== I && ("forwardedAs" === I ? C.as = A[I] : (d ? d(I, _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"], _) : !N || Object(_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(I)) && (C[I] = A[I]));\n      }\n\n      return t.style && g.style !== t.style && (C.style = v({}, t.style, {}, g.style)), C.className = Array.prototype.concat(c, h, S !== h ? S : null, t.className, g.className).filter(Boolean).join(" "), C.ref = w, Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(_, C);\n    }(C, e, t, P);\n  };\n\n  return O.displayName = f, (C = react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef(O)).attrs = S, C.componentStyle = I, C.displayName = f, C.shouldForwardProp = A, C.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : w, C.styledComponentId = g, C.target = o ? e.target : e, C.withComponent = function (e) {\n    var r = t.componentId,\n        o = function (e, t) {\n      if (null == e) return {};\n      var n,\n          r,\n          o = {},\n          s = Object.keys(e);\n\n      for (r = 0; r < s.length; r++) {\n        n = s[r], t.indexOf(n) >= 0 || (o[n] = e[n]);\n      }\n\n      return o;\n    }(t, ["componentId"]),\n        s = r && r + "-" + (ke(e) ? e : Te(_(e)));\n\n    return qe(e, v({}, o, {\n      attrs: S,\n      componentId: s\n    }), n);\n  }, Object.defineProperty(C, "defaultProps", {\n    get: function get() {\n      return this._foldedDefaultProps;\n    },\n    set: function set(t) {\n      this._foldedDefaultProps = o ? Me({}, e.defaultProps, t) : t;\n    }\n  }),  false && (false), C.toString = function () {\n    return "." + C.styledComponentId;\n  }, i && hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C, e, {\n    attrs: !0,\n    componentStyle: !0,\n    displayName: !0,\n    foldedComponentIds: !0,\n    shouldForwardProp: !0,\n    styledComponentId: !0,\n    target: !0,\n    withComponent: !0\n  }), C;\n}\n\nvar He = function He(e) {\n  return function e(t, r, o) {\n    if (void 0 === o && (o = E), !Object(react_is__WEBPACK_IMPORTED_MODULE_0__["isValidElementType"])(r)) return j(1, String(r));\n\n    var s = function s() {\n      return t(r, o, Ce.apply(void 0, arguments));\n    };\n\n    return s.withConfig = function (n) {\n      return e(t, r, v({}, o, {}, n));\n    }, s.attrs = function (n) {\n      return e(t, r, v({}, o, {\n        attrs: Array.prototype.concat(o.attrs, n).filter(Boolean)\n      }));\n    }, s;\n  }(qe, e);\n};\n\n["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function (e) {\n  He[e] = He(e);\n});\n\nvar $e = function () {\n  function e(e, t) {\n    this.rules = e, this.componentId = t, this.isStatic = re(e), Z.registerId(this.componentId + 1);\n  }\n\n  var t = e.prototype;\n  return t.createStyles = function (e, t, n, r) {\n    var o = r(Ne(this.rules, t, n, r).join(""), ""),\n        s = this.componentId + e;\n    n.insertRules(s, s, o);\n  }, t.removeStyles = function (e, t) {\n    t.clearRules(this.componentId + e);\n  }, t.renderStyles = function (e, t, n, r) {\n    e > 2 && Z.registerId(this.componentId + e), this.removeStyles(e, n), this.createStyles(e, t, n, r);\n  }, e;\n}();\n\nfunction We(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {\n    n[o - 1] = arguments[o];\n  }\n\n  var i = Ce.apply(void 0, [e].concat(n)),\n      a = "sc-global-" + xe(JSON.stringify(i)),\n      u = new $e(i, a);\n\n  function l(e) {\n    var t = fe(),\n        n = me(),\n        o = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n        l = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])(t.allocateGSInstance(a)).current;\n    return  false && false,  false && false, t.server && h(l, e, t, o, n), Object(react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"])(function () {\n      if (!t.server) return h(l, e, t, o, n), function () {\n        return u.removeStyles(l, t);\n      };\n    }, [l, e, t, o, n]), null;\n  }\n\n  function h(e, t, n, r, o) {\n    if (u.isStatic) u.renderStyles(e, O, n, o);else {\n      var s = v({}, t, {\n        theme: Re(t, r, l.defaultProps)\n      });\n      u.renderStyles(e, s, n, o);\n    }\n  }\n\n  return  false && false, react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(l);\n}\n\nfunction Ue(e) {\n   false && false;\n\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  var o = Ce.apply(void 0, [e].concat(n)).join(""),\n      s = xe(o);\n  return new ve(s, o);\n}\n\nvar Je = function () {\n  function e() {\n    var e = this;\n    this._emitSheetCSS = function () {\n      var t = e.instance.toString();\n      if (!t) return "";\n      var n = q();\n      return "<style " + [n && \'nonce="\' + n + \'"\', A + \'="true"\', \'data-styled-version="5.3.5"\'].filter(Boolean).join(" ") + ">" + t + "</style>";\n    }, this.getStyleTags = function () {\n      return e.sealed ? j(2) : e._emitSheetCSS();\n    }, this.getStyleElement = function () {\n      var t;\n      if (e.sealed) return j(2);\n      var n = ((t = {})[A] = "", t["data-styled-version"] = "5.3.5", t.dangerouslySetInnerHTML = {\n        __html: e.instance.toString()\n      }, t),\n          o = q();\n      return o && (n.nonce = o), [react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("style", v({}, n, {\n        key: "sc-0-0"\n      }))];\n    }, this.seal = function () {\n      e.sealed = !0;\n    }, this.instance = new Z({\n      isServer: !0\n    }), this.sealed = !1;\n  }\n\n  var t = e.prototype;\n  return t.collectStyles = function (e) {\n    return this.sealed ? j(2) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ye, {\n      sheet: this.instance\n    }, e);\n  }, t.interleaveWithNodeStream = function (e) {\n    return j(3);\n  }, e;\n}(),\n    Xe = function Xe(e) {\n  var t = react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef(function (t, n) {\n    var o = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n        i = e.defaultProps,\n        a = Re(t, o, i);\n    return  false && false, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(e, v({}, t, {\n      theme: a,\n      ref: n\n    }));\n  });\n  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t, e), t.displayName = "WithTheme(" + _(e) + ")", t;\n},\n    Ze = function Ze() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge);\n},\n    Ke = {\n  StyleSheet: Z,\n  masterSheet: he\n};\n\n false && false,  false && (false);\n/* harmony default export */ __webpack_exports__["default"] = (He);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("Q2Ig")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2ludGVybGVhdmUuanM/ZDAwMCIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzUGxhaW5PYmplY3QuanM/MTZhZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2VtcHRpZXMuanM/MjhjYSIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzRnVuY3Rpb24uanM/YWUzYSIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldENvbXBvbmVudE5hbWUuanM/ZWNmMCIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzU3R5bGVkQ29tcG9uZW50LmpzP2NiNTAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25zdGFudHMuanM/NDdjOCIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2Vycm9yLmpzPzcyOTgiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9lcnJvcnMuanM/NDg0ZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3NoZWV0L0dyb3VwZWRUYWcuanM/NmE0OSIsIndlYnBhY2s6Ly8vLi4vc3JjL3NoZWV0L0dyb3VwSURBbGxvY2F0b3IuanM/ZTZiZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3NoZWV0L1JlaHlkcmF0aW9uLmpzP2IwYTEiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9ub25jZS5qcz9jOTUzIiwid2VicGFjazovLy8uLi9zcmMvc2hlZXQvZG9tLmpzPzIzZDMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zaGVldC9UYWcuanM/OGY4YiIsIndlYnBhY2s6Ly8vLi4vc3JjL3NoZWV0L1NoZWV0LmpzPzY5Y2IiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZW5lcmF0ZUFscGhhYmV0aWNOYW1lLmpzPzkzN2MiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9oYXNoLmpzPzJiODUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pc1N0YXRpY1J1bGVzLmpzPzkwYTIiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RlbHMvQ29tcG9uZW50U3R5bGUuanM/YzUyNyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3N0eWxpcy5qcz83MjYzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvc3R5bGlzUGx1Z2luSW5zZXJ0UnVsZS5qcz82NDIzIiwid2VicGFjazovLy8uLi9zcmMvbW9kZWxzL1N0eWxlU2hlZXRNYW5hZ2VyLmpzPzA2MzAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RlbHMvS2V5ZnJhbWVzLmpzPzBjZDEiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9oeXBoZW5hdGVTdHlsZU5hbWUuanM/YjM3ZCIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2ZsYXR0ZW4uanM/Y2IyZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzU3RhdGVsZXNzRnVuY3Rpb24uanM/NzlhZiIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2FkZFVuaXRJZk5lZWRlZC5qcz9mNWZkIiwid2VicGFjazovLy8uLi9zcmMvY29uc3RydWN0b3JzL2Nzcy5qcz8xZDYyIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvY2hlY2tEeW5hbWljQ3JlYXRpb24uanM/ODM3YyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2RldGVybWluZVRoZW1lLmpzPzE2YTciLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9lc2NhcGUuanM/YmQ3NSIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dlbmVyYXRlQ29tcG9uZW50SWQuanM/YzQ3YyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzVGFnLmpzP2VkNGMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9taXhpbkRlZXAuanM/Y2EzZSIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGVscy9UaGVtZVByb3ZpZGVyLmpzPzM1MmMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RlbHMvU3R5bGVkQ29tcG9uZW50LmpzPzdmMTciLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZW5lcmF0ZURpc3BsYXlOYW1lLmpzP2M0MGMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9qb2luU3RyaW5ncy5qcz8yNWQ3Iiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZG9tRWxlbWVudHMuanM/MDdiNyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnN0cnVjdG9ycy9zdHlsZWQuanM/YjY2ZSIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnN0cnVjdG9ycy9jb25zdHJ1Y3RXaXRoT3B0aW9ucy5qcz9jY2RmIiwid2VicGFjazovLy8uLi9zcmMvbW9kZWxzL0dsb2JhbFN0eWxlLmpzPzkwYTUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25zdHJ1Y3RvcnMvY3JlYXRlR2xvYmFsU3R5bGUuanM/M2EzNCIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnN0cnVjdG9ycy9rZXlmcmFtZXMuanM/OTA1YiIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGVscy9TZXJ2ZXJTdHlsZVNoZWV0LmpzPzdjOWMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9ob2Mvd2l0aFRoZW1lLmpzP2ZiOGMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9ob29rcy91c2VUaGVtZS5qcz9lYmY5Iiwid2VicGFjazovLy8uLi9zcmMvc2VjcmV0SW50ZXJuYWxzLmpzPzA3YTEiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9iYXNlLmpzP2U5YjAiXSwibmFtZXMiOlsic3RyaW5ncyIsImludGVycG9sYXRpb25zIiwicmVzdWx0IiwiaSIsImxlbiIsImxlbmd0aCIsInB1c2giLCJ4IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwidHlwZU9mIiwiRU1QVFlfQVJSQVkiLCJmcmVlemUiLCJFTVBUWV9PQkpFQ1QiLCJpc0Z1bmN0aW9uIiwidGVzdCIsImdldENvbXBvbmVudE5hbWUiLCJ0YXJnZXQiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJpc1N0eWxlZENvbXBvbmVudCIsInN0eWxlZENvbXBvbmVudElkIiwiU0NfQVRUUiIsInByb2Nlc3MiLCJSRUFDVF9BUFBfU0NfQVRUUiIsIlNDX1ZFUlNJT04iLCJfX1ZFUlNJT05fXyIsIklTX0JST1dTRVIiLCJ3aW5kb3ciLCJESVNBQkxFX1NQRUVEWSIsIkJvb2xlYW4iLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsIlNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCIsIkVSUk9SUyIsImZvcm1hdCIsImEiLCJiIiwiYyIsImFyZ3VtZW50cyIsImZvckVhY2giLCJyZXBsYWNlIiwiZCIsInRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yIiwiY29kZSIsIkVycm9yIiwiam9pbiIsIkRlZmF1bHRHcm91cGVkVGFnIiwidGFnIiwiZ3JvdXBTaXplcyIsIlVpbnQzMkFycmF5IiwiaW5kZXhPZkdyb3VwIiwiZ3JvdXAiLCJpbmRleCIsInRoaXMiLCJpbnNlcnRSdWxlcyIsInJ1bGVzIiwib2xkQnVmZmVyIiwib2xkU2l6ZSIsIm5ld1NpemUiLCJ0aHJvd1N0eWxlZEVycm9yIiwic2V0IiwicnVsZUluZGV4IiwibCIsImluc2VydFJ1bGUiLCJjbGVhckdyb3VwIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiZGVsZXRlUnVsZSIsImdldEdyb3VwIiwiY3NzIiwiZ2V0UnVsZSIsImdyb3VwSURSZWdpc3RlciIsIk1hcCIsInJldmVyc2VSZWdpc3RlciIsIm5leHRGcmVlR3JvdXAiLCJnZXRHcm91cEZvcklkIiwiaWQiLCJoYXMiLCJnZXQiLCJnZXRJZEZvckdyb3VwIiwic2V0R3JvdXBGb3JJZCIsIlNFTEVDVE9SIiwiTUFSS0VSX1JFIiwiUmVnRXhwIiwicmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudCIsInNoZWV0IiwiY29udGVudCIsIm5hbWVzIiwic3BsaXQiLCJyZWdpc3Rlck5hbWUiLCJyZWh5ZHJhdGVTaGVldEZyb21UYWciLCJzdHlsZSIsInBhcnRzIiwidGV4dENvbnRlbnQiLCJwYXJ0IiwidHJpbSIsIm1hcmtlciIsIm1hdGNoIiwicGFyc2VJbnQiLCJnZXRUYWciLCJnZXROb25jZSIsIl9fd2VicGFja19ub25jZV9fIiwibWFrZVN0eWxlVGFnIiwiaGVhZCIsImRvY3VtZW50IiwicGFyZW50IiwiY3JlYXRlRWxlbWVudCIsInByZXZTdHlsZSIsImNoaWxkTm9kZXMiLCJjaGlsZCIsIm5vZGVUeXBlIiwiaGFzQXR0cmlidXRlIiwiZmluZExhc3RTdHlsZVRhZyIsIm5leHRTaWJsaW5nIiwidW5kZWZpbmVkIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJpbnNlcnRCZWZvcmUiLCJDU1NPTVRhZyIsImVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJnZXRTaGVldCIsInJ1bGUiLCJfZXJyb3IiLCJ0IiwiY3NzUnVsZXMiLCJjc3NUZXh0IiwiZSIsIlRleHRUYWciLCJub2RlcyIsIm5vZGUiLCJyZWZOb2RlIiwicmVtb3ZlQ2hpbGQiLCJWaXJ0dWFsVGFnIiwiX3RhcmdldCIsInNwbGljZSIsIlNIT1VMRF9SRUhZRFJBVEUiLCJkZWZhdWx0T3B0aW9ucyIsImlzU2VydmVyIiwidXNlQ1NTT01JbmplY3Rpb24iLCJTdHlsZVNoZWV0Iiwib3B0aW9ucyIsImdsb2JhbFN0eWxlcyIsImdzIiwic2VydmVyIiwicXVlcnlTZWxlY3RvckFsbCIsImdldEF0dHJpYnV0ZSIsInBhcmVudE5vZGUiLCJyZWh5ZHJhdGVTaGVldCIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwid2l0aE5hbWVzIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiYWRkIiwiZ3JvdXBOYW1lcyIsIlNldCIsImNsZWFyTmFtZXMiLCJjbGVhciIsImNsZWFyUnVsZXMiLCJjbGVhclRhZyIsInNpemUiLCJzZWxlY3RvciIsIm91dHB1dFNoZWV0IiwiQURfUkVQTEFDRVJfUiIsImdldEFscGhhYmV0aWNDaGFyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZ2VuZXJhdGVBbHBoYWJldGljTmFtZSIsIk1hdGgiLCJhYnMiLCJwaGFzaCIsImgiLCJjaGFyQ29kZUF0IiwiaGFzaCIsImlzU3RhdGljUnVsZXMiLCJTRUVEIiwiQ29tcG9uZW50U3R5bGUiLCJjb21wb25lbnRJZCIsImJhc2VTdHlsZSIsInN0YXRpY1J1bGVzSWQiLCJpc1N0YXRpYyIsIk5PREVfRU5WIiwiYmFzZUhhc2giLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImV4ZWN1dGlvbkNvbnRleHQiLCJzdHlsZVNoZWV0Iiwic3R5bGlzIiwiY3NzU3RhdGljIiwiZmxhdHRlbiIsImdlbmVyYXRlTmFtZSIsImNzc1N0YXRpY0Zvcm1hdHRlZCIsImR5bmFtaWNIYXNoIiwicGFydFJ1bGUiLCJwYXJ0Q2h1bmsiLCJwYXJ0U3RyaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzRm9ybWF0dGVkIiwiQ09NTUVOVF9SRUdFWCIsIkNPTVBMRVhfU0VMRUNUT1JfUFJFRklYIiwiY3JlYXRlU3R5bGlzSW5zdGFuY2UiLCJfY29tcG9uZW50SWQiLCJfc2VsZWN0b3IiLCJfc2VsZWN0b3JSZWdleHAiLCJfY29uc2VjdXRpdmVTZWxmUmVmUmVnRXhwIiwicGx1Z2lucyIsIlN0eWxpcyIsInBhcnNpbmdSdWxlcyIsInBhcnNlUnVsZXNQbHVnaW4iLCJ0b1NoZWV0IiwiYmxvY2siLCJjb250ZXh0Iiwic2VsZWN0b3JzIiwicGFyZW50cyIsImxpbmUiLCJjb2x1bW4iLCJucyIsImRlcHRoIiwiYXQiLCJkZWxpbWl0ZXIiLCJpbnNlcnRSdWxlUGx1Z2luIiwic2VsZlJlZmVyZW5jZVJlcGxhY2VyIiwib2Zmc2V0Iiwic3RyaW5nIiwiaW5kZXhPZiIsInN0cmluZ2lmeVJ1bGVzIiwicHJlZml4IiwiZmxhdENTUyIsImNzc1N0ciIsInVzZSIsIl8iLCJsYXN0SW5kZXhPZiIsInBhcnNlZFJ1bGVzIiwicmVkdWNlIiwiYWNjIiwicGx1Z2luIiwiU3R5bGVTaGVldENvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJDb25zdW1lciIsIlN0eWxpc0NvbnRleHQiLCJtYXN0ZXJTaGVldCIsIm1hc3RlclN0eWxpcyIsInVzZVN0eWxlU2hlZXQiLCJ1c2VDb250ZXh0IiwidXNlU3R5bGlzIiwiU3R5bGVTaGVldE1hbmFnZXIiLCJwcm9wcyIsInVzZVN0YXRlIiwic3R5bGlzUGx1Z2lucyIsInNldFBsdWdpbnMiLCJjb250ZXh0U3R5bGVTaGVldCIsInVzZU1lbW8iLCJkaXNhYmxlQ1NTT01JbmplY3Rpb24iLCJkaXNhYmxlVmVuZG9yUHJlZml4ZXMiLCJ1c2VFZmZlY3QiLCJzaGFsbG93ZXF1YWwiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJLZXlmcmFtZXMiLCJpbmplY3QiLCJzdHlsaXNJbnN0YW5jZSIsInJlc29sdmVkTmFtZSIsIl90aGlzIiwiZ2V0TmFtZSIsInVwcGVyY2FzZUNoZWNrIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInByZWZpeEFuZExvd2VyQ2FzZSIsImNoYXIiLCJ0b0xvd2VyQ2FzZSIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsImlzRmFsc2lzaCIsImNodW5rIiwicnVsZVNldCIsImlzUmVhY3RDb21wb25lbnQiLCJjb25zb2xlIiwiaXNQbGFpbk9iamVjdCIsIm9ialRvQ3NzQXJyYXkiLCJvYmoiLCJwcmV2S2V5Iiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJpc0NzcyIsImh5cGhlbmF0ZSIsInVuaXRsZXNzIiwiYWRkVGFnIiwiYXJnIiwic3R5bGVzIiwiaW50ZXJsZWF2ZSIsImludmFsaWRIb29rQ2FsbFJlIiwic2VlbiIsImNoZWNrRHluYW1pY0NyZWF0aW9uIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJwcm92aWRlZFRoZW1lIiwiZGVmYXVsdFByb3BzIiwidGhlbWUiLCJlc2NhcGVSZWdleCIsImRhc2hlc0F0RW5kcyIsImVzY2FwZSIsInN0ciIsImlzVGFnIiwiaXNPYmplY3QiLCJ2YWwiLCJpc1ZhbGlkS2V5IiwibWl4aW4iLCJtaXhpbkRlZXAiLCJyZXN0IiwiVGhlbWVDb250ZXh0IiwiVGhlbWVDb25zdW1lciIsIlRoZW1lUHJvdmlkZXIiLCJvdXRlclRoZW1lIiwidGhlbWVDb250ZXh0IiwibWVyZ2VkVGhlbWUiLCJtZXJnZVRoZW1lIiwiaWRlbnRpZmllcnMiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJpc1RhcmdldFN0eWxlZENvbXAiLCJpc0NvbXBvc2l0ZUNvbXBvbmVudCIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJnZW5lcmF0ZUNvbXBvbmVudElkIiwiZ2VuZXJhdGVJZCIsImdlbmVyYXRlRGlzcGxheU5hbWUiLCJmaW5hbEF0dHJzIiwiY29uY2F0IiwiZmlsdGVyIiwic2hvdWxkRm9yd2FyZFByb3AiLCJwcm9wIiwiZmlsdGVyRm4iLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJXcmFwcGVkU3R5bGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJmb3J3YXJkUmVmIiwicmVmIiwiZm9yd2FyZGVkQ29tcG9uZW50IiwiZm9yd2FyZGVkUmVmIiwiY29tcG9uZW50QXR0cnMiLCJmb2xkZWRDb21wb25lbnRJZHMiLCJ1c2VEZWJ1Z1ZhbHVlIiwicmVzb2x2ZWRBdHRycyIsImF0dHJEZWYiLCJyZXNvbHZlZEF0dHJEZWYiLCJ1c2VSZXNvbHZlZEF0dHJzIiwiZGV0ZXJtaW5lVGhlbWUiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJ3YXJuVG9vTWFueUNsYXNzZXMiLCJjbGFzc05hbWUiLCJ1c2VJbmplY3RlZFN0eWxlIiwicmVmVG9Gb3J3YXJkIiwiJGFzIiwiYXMiLCJpc1RhcmdldFRhZyIsImNvbXB1dGVkUHJvcHMiLCJwcm9wc0ZvckVsZW1lbnQiLCJ2YWxpZEF0dHIiLCJ3aXRoQ29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnRJZCIsIm9wdGlvbnNUb0NvcHkiLCJuZXdDb21wb25lbnRJZCIsImRlZmluZVByb3BlcnR5IiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsIm1lcmdlIiwiaG9pc3QiLCJzdHlsZWQiLCJjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImNvbXBvbmVudENvbnN0cnVjdG9yIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidGVtcGxhdGVGdW5jdGlvbiIsIndpdGhDb25maWciLCJjb25maWciLCJTdHlsZWRDb21wb25lbnQiLCJkb21FbGVtZW50IiwiR2xvYmFsU3R5bGUiLCJjcmVhdGVTdHlsZXMiLCJpbnN0YW5jZSIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsImdsb2JhbFN0eWxlIiwiR2xvYmFsU3R5bGVDb21wb25lbnQiLCJ1c2VSZWYiLCJjdXJyZW50IiwidXNlTGF5b3V0RWZmZWN0IiwibWVtbyIsImtleWZyYW1lcyIsIlNlcnZlclN0eWxlU2hlZXQiLCJfZW1pdFNoZWV0Q1NTIiwiU0NfQVRUUl9WRVJTSU9OIiwiZ2V0U3R5bGVUYWdzIiwic2VhbGVkIiwiZ2V0U3R5bGVFbGVtZW50IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJzZWFsIiwiY29sbGVjdFN0eWxlcyIsImludGVybGVhdmVXaXRoTm9kZVN0cmVhbSIsImlucHV0IiwiWGUiLCJDb21wb25lbnQiLCJXaXRoVGhlbWUiLCJ0aGVtZVByb3AiLCJob2lzdFN0YXRpY3MiLCJ1c2VUaGVtZSIsIl9fUFJJVkFURV9fIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUFBLG1CQUNFQSxDQURGLEVBRUVDLENBRkYsRUFFRUE7RUFBQUEsU0FFTUMsSUFBUyxDQUFDRixFQUFRLENBQVJBLENBQUQsQ0FGZkMsRUFJU0UsSUFBSSxDQUpiRixFQUlnQkcsSUFBTUgsRUFBZUksTUFKckNKLEVBSTZDRSxJQUFJQyxDQUpqREgsRUFJc0RFLEtBQUssQ0FKM0RGO0lBS0VDLEVBQU9JLElBQVBKLENBQVlELEVBQWVFLENBQWZGLENBQVpDLEVBQStCRixFQUFRRyxJQUFJLENBQVpILENBQS9CRTtFQUxGRDs7RUFLNkMsT0FHdENDLENBSHNDO0FBR3RDQSxDQVZUO0FBQUEs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Q2EsRUF5Q2IsSUF6Q2EsRUEwQ2IsSUExQ2EsRUEyQ2IsSUEzQ2EsRUE0Q2IsSUE1Q2EsRUE2Q2IsSUE3Q2EsRUE4Q2IsTUE5Q2EsRUErQ2IsUUEvQ2EsRUFnRGIsUUFoRGEsRUFpRGIsSUFqRGEsRUFrRGIsTUFsRGEsRUFtRGIsR0FuRGEsRUFvRGIsUUFwRGEsRUFxRGIsS0FyRGEsRUFzRGIsT0F0RGEsRUF1RGIsS0F2RGEsRUF3RGIsS0F4RGEsRUF5RGIsUUF6RGEsRUEwRGIsT0ExRGEsRUEyRGIsUUEzRGEsRUE0RGIsSUE1RGEsRUE2RGIsTUE3RGEsRUE4RGIsTUE5RGEsRUErRGIsS0EvRGEsRUFnRWIsTUFoRWEsRUFpRWIsU0FqRWEsRUFrRWIsTUFsRWEsRUFtRWIsVUFuRWEsRUFvRWIsTUFwRWEsRUFxRWIsT0FyRWEsRUFzRWIsS0F0RWEsRUF1RWIsVUF2RWEsRUF3RWIsUUF4RWEsRUF5RWIsSUF6RWEsRUEwRWIsVUExRWEsRUEyRWIsUUEzRWEsRUE0RWIsUUE1RWEsRUE2RWIsR0E3RWEsRUE4RWIsT0E5RWEsRUErRWIsU0EvRWEsRUFnRmIsS0FoRmEsRUFpRmIsVUFqRmEsRUFrRmIsR0FsRmEsRUFtRmIsSUFuRmEsRUFvRmIsSUFwRmEsRUFxRmIsTUFyRmEsRUFzRmIsR0F0RmEsRUF1RmIsTUF2RmEsRUF3RmIsUUF4RmEsRUF5RmIsU0F6RmEsRUEwRmIsUUExRmEsRUEyRmIsT0EzRmEsRUE0RmIsUUE1RmEsRUE2RmIsTUE3RmEsRUE4RmIsUUE5RmEsRUErRmIsT0EvRmEsRUFnR2IsS0FoR2EsRUFpR2IsU0FqR2EsRUFrR2IsS0FsR2EsRUFtR2IsT0FuR2EsRUFvR2IsT0FwR2EsRUFxR2IsSUFyR2EsRUFzR2IsVUF0R2EsRUF1R2IsT0F2R2EsRUF3R2IsSUF4R2EsRUF5R2IsT0F6R2EsRUEwR2IsTUExR2EsRUEyR2IsT0EzR2EsRUE0R2IsSUE1R2EsRUE2R2IsT0E3R2EsRUE4R2IsR0E5R2EsRUErR2IsSUEvR2EsRUFnSGIsS0FoSGEsRUFpSGIsT0FqSGEsRUFrSGIsS0FsSGEsRUFxSGIsUUFy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QUV6QnVHO0FBRnlCLENKb0JFL0w7O0FLQ0YsVUFLekJtTyxLQUx5QixFQWFFLFdBQzNCL1AsS0FEMkIsQ0FiRjtBQTBCZSIsImZpbGUiOiJ2T25ELmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSW50ZXJwb2xhdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgKFxuICBzdHJpbmdzOiBBcnJheTxzdHJpbmc+LFxuICBpbnRlcnBvbGF0aW9uczogQXJyYXk8SW50ZXJwb2xhdGlvbj5cbik6IEFycmF5PEludGVycG9sYXRpb24+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW3N0cmluZ3NbMF1dO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbnRlcnBvbGF0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRpb25zW2ldLCBzdHJpbmdzW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyB0eXBlT2YgfSBmcm9tICdyZWFjdC1pcyc7XG5cbmV4cG9ydCBkZWZhdWx0ICh4OiBhbnkpOiBib29sZWFuID0+XG4gIHggIT09IG51bGwgJiZcbiAgdHlwZW9mIHggPT09ICdvYmplY3QnICYmXG4gICh4LnRvU3RyaW5nID8geC50b1N0cmluZygpIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiZcbiAgIXR5cGVPZih4KTtcbiIsIi8vIEBmbG93XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcbmV4cG9ydCBjb25zdCBFTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHRlc3Q6IGFueSk6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiB0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IElTdHlsZWRDb21wb25lbnQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoXG4gIHRhcmdldDogJFByb3BlcnR5VHlwZTxJU3R5bGVkQ29tcG9uZW50LCAndGFyZ2V0Jz5cbik6IHN0cmluZyB7XG4gIHJldHVybiAoXG4gICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQgOiBmYWxzZSkgfHxcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGFyZ2V0LmRpc3BsYXlOYW1lIHx8XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRhcmdldC5uYW1lIHx8XG4gICAgJ0NvbXBvbmVudCdcbiAgKTtcbn1cbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQ6IGFueSk6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG4iLCIvLyBAZmxvd1xuXG5kZWNsYXJlIHZhciBTQ19ESVNBQkxFX1NQRUVEWTogP2Jvb2xlYW47XG5kZWNsYXJlIHZhciBfX1ZFUlNJT05fXzogc3RyaW5nO1xuXG5leHBvcnQgY29uc3QgU0NfQVRUUjogc3RyaW5nID1cbiAgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikpIHx8XG4gICdkYXRhLXN0eWxlZCc7XG5cbmV4cG9ydCBjb25zdCBTQ19BVFRSX0FDVElWRSA9ICdhY3RpdmUnO1xuZXhwb3J0IGNvbnN0IFNDX0FUVFJfVkVSU0lPTiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcbmV4cG9ydCBjb25zdCBTQ19WRVJTSU9OID0gX19WRVJTSU9OX187XG5leHBvcnQgY29uc3QgU1BMSVRURVIgPSAnLyohc2MqL1xcbic7XG5cbmV4cG9ydCBjb25zdCBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG5cbmV4cG9ydCBjb25zdCBESVNBQkxFX1NQRUVEWSA9XG4gIEJvb2xlYW4odHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbidcbiAgICA/IFNDX0RJU0FCTEVfU1BFRURZXG4gICAgOiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSAhPT0gJydcbiAgICAgID8gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFlcbiAgICAgIDogKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZICE9PSAnJ1xuICAgICAgICA/IHByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWVxuICAgICAgICA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgIClcbiAgICApKTtcblxuLy8gU2hhcmVkIGVtcHR5IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gZ2VuZXJhdGluZyBzdGF0aWMgc3R5bGVzXG5leHBvcnQgY29uc3QgU1RBVElDX0VYRUNVVElPTl9DT05URVhUID0ge307XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGVycm9yTWFwIGZyb20gJy4vZXJyb3JzJztcblxuY29uc3QgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGVycm9yTWFwIDoge307XG5cbi8qKlxuICogc3VwZXIgYmFzaWMgdmVyc2lvbiBvZiBzcHJpbnRmXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdCguLi5hcmdzKSB7XG4gIGxldCBhID0gYXJnc1swXTtcbiAgY29uc3QgYiA9IFtdO1xuXG4gIGZvciAobGV0IGMgPSAxLCBsZW4gPSBhcmdzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3NbY10pO1xuICB9XG5cbiAgYi5mb3JFYWNoKGQgPT4ge1xuICAgIGEgPSBhLnJlcGxhY2UoLyVbYS16XS8sIGQpO1xuICB9KTtcblxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXJyb3IgZmlsZSBvdXQgb2YgZXJyb3JzLm1kIGZvciBkZXZlbG9wbWVudCBhbmQgYSBzaW1wbGUgd2ViIGxpbmsgdG8gdGhlIGZ1bGwgZXJyb3JzXG4gKiBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm93U3R5bGVkQ29tcG9uZW50c0Vycm9yKFxuICBjb2RlOiBzdHJpbmcgfCBudW1iZXIsXG4gIC4uLmludGVycG9sYXRpb25zOiBBcnJheTxhbnk+XG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBodHRwczovL2dpdC5pby9KVUlhRSMke2NvZGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLiR7XG4gICAgICAgIGludGVycG9sYXRpb25zLmxlbmd0aCA+IDAgPyBgIEFyZ3M6ICR7aW50ZXJwb2xhdGlvbnMuam9pbignLCAnKX1gIDogJydcbiAgICAgIH1gXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SU1tjb2RlXSwgLi4uaW50ZXJwb2xhdGlvbnMpLnRyaW0oKSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcIjFcIjpcIkNhbm5vdCBjcmVhdGUgc3R5bGVkLWNvbXBvbmVudCBmb3IgY29tcG9uZW50OiAlcy5cXG5cXG5cIixcIjJcIjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLFwiM1wiOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXCI0XCI6XCJUaGUgYFN0eWxlU2hlZXRNYW5hZ2VyYCBleHBlY3RzIGEgdmFsaWQgdGFyZ2V0IG9yIHNoZWV0IHByb3AhXFxuXFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIGNsaWVudCBhbmQgaXMgeW91ciB0YXJnZXQgZmFsc3k/XFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIHNlcnZlciBhbmQgaXMgdGhlIHNoZWV0IGZhbHN5P1xcblxcblwiLFwiNVwiOlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIixcIjZcIjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXCI3XCI6XCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXFxcInRoZW1lXFxcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG5cIixcIjhcIjpcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXFxcInRoZW1lXFxcIiBwcm9wIGFuIG9iamVjdC5cXG5cXG5cIixcIjlcIjpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcIjEwXCI6XCJDYW5ub3QgZmluZCBhIFN0eWxlU2hlZXQgaW5zdGFuY2UuIFVzdWFsbHkgdGhpcyBoYXBwZW5zIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb3BpZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgbG9hZGVkIGF0IG9uY2UuIENoZWNrIG91dCB0aGlzIGlzc3VlIGZvciBob3cgdG8gdHJvdWJsZXNob290IGFuZCBmaXggdGhlIGNvbW1vbiBjYXNlcyB3aGVyZSB0aGlzIHNpdHVhdGlvbiBjYW4gaGFwcGVuOiBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVudHMvaXNzdWVzLzE5NDEjaXNzdWVjb21tZW50LTQxNzg2MjAyMVxcblxcblwiLFwiMTFcIjpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsXCIxMlwiOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsXCIxM1wiOlwiJXMgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlxcblxcblwiLFwiMTRcIjpcIlRoZW1lUHJvdmlkZXI6IFxcXCJ0aGVtZVxcXCIgcHJvcCBpcyByZXF1aXJlZC5cXG5cXG5cIixcIjE1XCI6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIixcIjE2XCI6XCJSZWFjaGVkIHRoZSBsaW1pdCBvZiBob3cgbWFueSBzdHlsZWQgY29tcG9uZW50cyBtYXkgYmUgY3JlYXRlZCBhdCBncm91cCAlcy5cXG5Zb3UgbWF5IG9ubHkgY3JlYXRlIHVwIHRvIDEsMDczLDc0MSw4MjQgY29tcG9uZW50cy4gSWYgeW91J3JlIGNyZWF0aW5nIGNvbXBvbmVudHMgZHluYW1pY2FsbHksXFxuYXMgZm9yIGluc3RhbmNlIGluIHlvdXIgcmVuZGVyIG1ldGhvZCB0aGVuIHlvdSBtYXkgYmUgcnVubmluZyBpbnRvIHRoaXMgbGltaXRhdGlvbi5cXG5cXG5cIixcIjE3XCI6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9OyIsIi8vIEBmbG93XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG5pbXBvcnQgdHlwZSB7IEdyb3VwZWRUYWcsIFRhZyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU1BMSVRURVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuXG4vKiogQ3JlYXRlIGEgR3JvdXBlZFRhZyB3aXRoIGFuIHVuZGVybHlpbmcgVGFnIGltcGxlbWVudGF0aW9uICovXG5leHBvcnQgY29uc3QgbWFrZUdyb3VwZWRUYWcgPSAodGFnOiBUYWcpOiBHcm91cGVkVGFnID0+IHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0R3JvdXBlZFRhZyh0YWcpO1xufTtcblxuY29uc3QgQkFTRV9TSVpFID0gMSA8PCA5O1xuXG5jbGFzcyBEZWZhdWx0R3JvdXBlZFRhZyBpbXBsZW1lbnRzIEdyb3VwZWRUYWcge1xuICBncm91cFNpemVzOiBVaW50MzJBcnJheTtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICB0YWc6IFRhZztcblxuICBjb25zdHJ1Y3Rvcih0YWc6IFRhZykge1xuICAgIHRoaXMuZ3JvdXBTaXplcyA9IG5ldyBVaW50MzJBcnJheShCQVNFX1NJWkUpO1xuICAgIHRoaXMubGVuZ3RoID0gQkFTRV9TSVpFO1xuICAgIHRoaXMudGFnID0gdGFnO1xuICB9XG5cbiAgaW5kZXhPZkdyb3VwKGdyb3VwOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cDsgaSsrKSB7XG4gICAgICBpbmRleCArPSB0aGlzLmdyb3VwU2l6ZXNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgaW5zZXJ0UnVsZXMoZ3JvdXA6IG51bWJlciwgcnVsZXM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKGdyb3VwID49IHRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG9sZEJ1ZmZlciA9IHRoaXMuZ3JvdXBTaXplcztcbiAgICAgIGNvbnN0IG9sZFNpemUgPSBvbGRCdWZmZXIubGVuZ3RoO1xuXG4gICAgICBsZXQgbmV3U2l6ZSA9IG9sZFNpemU7XG4gICAgICB3aGlsZSAoZ3JvdXAgPj0gbmV3U2l6ZSkge1xuICAgICAgICBuZXdTaXplIDw8PSAxO1xuICAgICAgICBpZiAobmV3U2l6ZSA8IDApIHtcbiAgICAgICAgICB0aHJvd1N0eWxlZEVycm9yKDE2LCBgJHtncm91cH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmdyb3VwU2l6ZXMgPSBuZXcgVWludDMyQXJyYXkobmV3U2l6ZSk7XG4gICAgICB0aGlzLmdyb3VwU2l6ZXMuc2V0KG9sZEJ1ZmZlcik7XG4gICAgICB0aGlzLmxlbmd0aCA9IG5ld1NpemU7XG5cbiAgICAgIGZvciAobGV0IGkgPSBvbGRTaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJ1bGVJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwICsgMSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBydWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnRhZy5pbnNlcnRSdWxlKHJ1bGVJbmRleCwgcnVsZXNbaV0pKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBTaXplc1tncm91cF0rKztcbiAgICAgICAgcnVsZUluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYXJHcm91cChncm91cDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKGdyb3VwIDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ3JvdXBTaXplc1tncm91cF07XG4gICAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5pbmRleE9mR3JvdXAoZ3JvdXApO1xuICAgICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbGVuZ3RoO1xuXG4gICAgICB0aGlzLmdyb3VwU2l6ZXNbZ3JvdXBdID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHRoaXMudGFnLmRlbGV0ZVJ1bGUoc3RhcnRJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0R3JvdXAoZ3JvdXA6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IGNzcyA9ICcnO1xuICAgIGlmIChncm91cCA+PSB0aGlzLmxlbmd0aCB8fCB0aGlzLmdyb3VwU2l6ZXNbZ3JvdXBdID09PSAwKSB7XG4gICAgICByZXR1cm4gY3NzO1xuICAgIH1cblxuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ3JvdXBTaXplc1tncm91cF07XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IHRoaXMuaW5kZXhPZkdyb3VwKGdyb3VwKTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBsZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGNzcyArPSBgJHt0aGlzLnRhZy5nZXRSdWxlKGkpfSR7U1BMSVRURVJ9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5cbmNvbnN0IE1BWF9TTUkgPSAxIDw8IDMxIC0gMTtcblxubGV0IGdyb3VwSURSZWdpc3RlcjogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbmxldCByZXZlcnNlUmVnaXN0ZXI6IE1hcDxudW1iZXIsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5sZXQgbmV4dEZyZWVHcm91cCA9IDE7XG5cbmV4cG9ydCBjb25zdCByZXNldEdyb3VwSWRzID0gKCkgPT4ge1xuICBncm91cElEUmVnaXN0ZXIgPSBuZXcgTWFwKCk7XG4gIHJldmVyc2VSZWdpc3RlciA9IG5ldyBNYXAoKTtcbiAgbmV4dEZyZWVHcm91cCA9IDE7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0R3JvdXBGb3JJZCA9IChpZDogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgaWYgKGdyb3VwSURSZWdpc3Rlci5oYXMoaWQpKSB7XG4gICAgcmV0dXJuIChncm91cElEUmVnaXN0ZXIuZ2V0KGlkKTogYW55KTtcbiAgfVxuXG4gIHdoaWxlIChyZXZlcnNlUmVnaXN0ZXIuaGFzKG5leHRGcmVlR3JvdXApKSB7XG4gICAgbmV4dEZyZWVHcm91cCsrO1xuICB9XG5cbiAgY29uc3QgZ3JvdXAgPSBuZXh0RnJlZUdyb3VwKys7XG5cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoKGdyb3VwIHwgMCkgPCAwIHx8IGdyb3VwID4gTUFYX1NNSSlcbiAgKSB7XG4gICAgdGhyb3dTdHlsZWRFcnJvcigxNiwgYCR7Z3JvdXB9YCk7XG4gIH1cblxuICBncm91cElEUmVnaXN0ZXIuc2V0KGlkLCBncm91cCk7XG4gIHJldmVyc2VSZWdpc3Rlci5zZXQoZ3JvdXAsIGlkKTtcbiAgcmV0dXJuIGdyb3VwO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldElkRm9yR3JvdXAgPSAoZ3JvdXA6IG51bWJlcik6IHZvaWQgfCBzdHJpbmcgPT4ge1xuICByZXR1cm4gcmV2ZXJzZVJlZ2lzdGVyLmdldChncm91cCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0R3JvdXBGb3JJZCA9IChpZDogc3RyaW5nLCBncm91cDogbnVtYmVyKSA9PiB7XG4gIGlmIChncm91cCA+PSBuZXh0RnJlZUdyb3VwKSB7XG4gICAgbmV4dEZyZWVHcm91cCA9IGdyb3VwICsgMTtcbiAgfVxuXG4gIGdyb3VwSURSZWdpc3Rlci5zZXQoaWQsIGdyb3VwKTtcbiAgcmV2ZXJzZVJlZ2lzdGVyLnNldChncm91cCwgaWQpO1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IFNQTElUVEVSLCBTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSwgU0NfQVRUUl9WRVJTSU9OLCBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldElkRm9yR3JvdXAsIHNldEdyb3VwRm9ySWQgfSBmcm9tICcuL0dyb3VwSURBbGxvY2F0b3InO1xuaW1wb3J0IHR5cGUgeyBTaGVldCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBTRUxFQ1RPUiA9IGBzdHlsZVske1NDX0FUVFJ9XVske1NDX0FUVFJfVkVSU0lPTn09XCIke1NDX1ZFUlNJT059XCJdYDtcbmNvbnN0IE1BUktFUl9SRSA9IG5ldyBSZWdFeHAoYF4ke1NDX0FUVFJ9XFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopYCk7XG5cbmV4cG9ydCBjb25zdCBvdXRwdXRTaGVldCA9IChzaGVldDogU2hlZXQpID0+IHtcbiAgY29uc3QgdGFnID0gc2hlZXQuZ2V0VGFnKCk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSB0YWc7XG5cbiAgbGV0IGNzcyA9ICcnO1xuICBmb3IgKGxldCBncm91cCA9IDA7IGdyb3VwIDwgbGVuZ3RoOyBncm91cCsrKSB7XG4gICAgY29uc3QgaWQgPSBnZXRJZEZvckdyb3VwKGdyb3VwKTtcbiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICBjb25zdCBuYW1lcyA9IHNoZWV0Lm5hbWVzLmdldChpZCk7XG4gICAgY29uc3QgcnVsZXMgPSB0YWcuZ2V0R3JvdXAoZ3JvdXApO1xuICAgIGlmICghbmFtZXMgfHwgIXJ1bGVzIHx8ICFuYW1lcy5zaXplKSBjb250aW51ZTtcblxuICAgIGNvbnN0IHNlbGVjdG9yID0gYCR7U0NfQVRUUn0uZyR7Z3JvdXB9W2lkPVwiJHtpZH1cIl1gO1xuXG4gICAgbGV0IGNvbnRlbnQgPSAnJztcbiAgICBpZiAobmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKG5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnRlbnQgKz0gYCR7bmFtZX0sYDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTk9URTogSXQncyBlYXNpZXIgdG8gY29sbGVjdCBydWxlcyBhbmQgaGF2ZSB0aGUgbWFya2VyXG4gICAgLy8gYWZ0ZXIgdGhlIGFjdHVhbCBydWxlcyB0byBzaW1wbGlmeSB0aGUgcmVoeWRyYXRpb25cbiAgICBjc3MgKz0gYCR7cnVsZXN9JHtzZWxlY3Rvcn17Y29udGVudDpcIiR7Y29udGVudH1cIn0ke1NQTElUVEVSfWA7XG4gIH1cblxuICByZXR1cm4gY3NzO1xufTtcblxuY29uc3QgcmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudCA9IChzaGVldDogU2hlZXQsIGlkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBuYW1lcyA9IGNvbnRlbnQuc3BsaXQoJywnKTtcbiAgbGV0IG5hbWU7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBpZiAoKG5hbWUgPSBuYW1lc1tpXSkpIHtcbiAgICAgIHNoZWV0LnJlZ2lzdGVyTmFtZShpZCwgbmFtZSk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZWh5ZHJhdGVTaGVldEZyb21UYWcgPSAoc2hlZXQ6IFNoZWV0LCBzdHlsZTogSFRNTFN0eWxlRWxlbWVudCkgPT4ge1xuICBjb25zdCBwYXJ0cyA9IChzdHlsZS50ZXh0Q29udGVudCB8fCAnJykuc3BsaXQoU1BMSVRURVIpO1xuICBjb25zdCBydWxlczogc3RyaW5nW10gPSBbXTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcblxuICAgIGNvbnN0IG1hcmtlciA9IHBhcnQubWF0Y2goTUFSS0VSX1JFKTtcblxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIGNvbnN0IGdyb3VwID0gcGFyc2VJbnQobWFya2VyWzFdLCAxMCkgfCAwO1xuICAgICAgY29uc3QgaWQgPSBtYXJrZXJbMl07XG5cbiAgICAgIGlmIChncm91cCAhPT0gMCkge1xuICAgICAgICAvLyBSZWh5ZHJhdGUgY29tcG9uZW50SWQgdG8gZ3JvdXAgaW5kZXggbWFwcGluZ1xuICAgICAgICBzZXRHcm91cEZvcklkKGlkLCBncm91cCk7XG4gICAgICAgIC8vIFJlaHlkcmF0ZSBuYW1lcyBhbmQgcnVsZXNcbiAgICAgICAgLy8gbG9va3MgbGlrZTogZGF0YS1zdHlsZWQuZzExW2lkPVwiaWRBXCJde2NvbnRlbnQ6XCJuYW1lQSxcIn1cbiAgICAgICAgcmVoeWRyYXRlTmFtZXNGcm9tQ29udGVudChzaGVldCwgaWQsIG1hcmtlclszXSk7XG4gICAgICAgIHNoZWV0LmdldFRhZygpLmluc2VydFJ1bGVzKGdyb3VwLCBydWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJ1bGVzLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bGVzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVoeWRyYXRlU2hlZXQgPSAoc2hlZXQ6IFNoZWV0KSA9PiB7XG4gIGNvbnN0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gKChub2Rlc1tpXTogYW55KTogSFRNTFN0eWxlRWxlbWVudCk7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoU0NfQVRUUikgIT09IFNDX0FUVFJfQUNUSVZFKSB7XG4gICAgICByZWh5ZHJhdGVTaGVldEZyb21UYWcoc2hlZXQsIG5vZGUpO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlLCBuby11bmRlZiAqL1xuXG5kZWNsYXJlIHZhciB3aW5kb3c6IHsgX193ZWJwYWNrX25vbmNlX186IHN0cmluZyB9O1xuXG5jb25zdCBnZXROb25jZSA9ICgpID0+IHtcblxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHR5cGVvZiB3aW5kb3cuX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnXG4gICAgICA/IHdpbmRvdy5fX3dlYnBhY2tfbm9uY2VfX1xuICAgICAgOiBudWxsXG4gICAgOiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0Tm9uY2U7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSwgU0NfQVRUUl9WRVJTSU9OLCBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBnZXROb25jZSBmcm9tICcuLi91dGlscy9ub25jZSc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5cbmNvbnN0IEVMRU1FTlRfVFlQRSA9IDE7IC8qIE5vZGUuRUxFTUVOVF9UWVBFICovXG5cbi8qKiBGaW5kIGxhc3Qgc3R5bGUgZWxlbWVudCBpZiBhbnkgaW5zaWRlIHRhcmdldCAqL1xuY29uc3QgZmluZExhc3RTdHlsZVRhZyA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50KTogdm9pZCB8IEhUTUxTdHlsZUVsZW1lbnQgPT4ge1xuICBjb25zdCB7IGNoaWxkTm9kZXMgfSA9IHRhcmdldDtcblxuICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgY2hpbGQgPSAoKGNoaWxkTm9kZXNbaV06IGFueSk6ID9IVE1MRWxlbWVudCk7XG4gICAgaWYgKGNoaWxkICYmIGNoaWxkLm5vZGVUeXBlID09PSBFTEVNRU5UX1RZUEUgJiYgY2hpbGQuaGFzQXR0cmlidXRlKFNDX0FUVFIpKSB7XG4gICAgICByZXR1cm4gKChjaGlsZDogYW55KTogSFRNTFN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKiBDcmVhdGUgYSBzdHlsZSBlbGVtZW50IGluc2lkZSBgdGFyZ2V0YCBvciA8aGVhZD4gYWZ0ZXIgdGhlIGxhc3QgKi9cbmV4cG9ydCBjb25zdCBtYWtlU3R5bGVUYWcgPSAodGFyZ2V0PzogSFRNTEVsZW1lbnQpOiBIVE1MU3R5bGVFbGVtZW50ID0+IHtcbiAgY29uc3QgaGVhZCA9ICgoZG9jdW1lbnQuaGVhZDogYW55KTogSFRNTEVsZW1lbnQpO1xuICBjb25zdCBwYXJlbnQgPSB0YXJnZXQgfHwgaGVhZDtcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBjb25zdCBwcmV2U3R5bGUgPSBmaW5kTGFzdFN0eWxlVGFnKHBhcmVudCk7XG4gIGNvbnN0IG5leHRTaWJsaW5nID0gcHJldlN0eWxlICE9PSB1bmRlZmluZWQgPyBwcmV2U3R5bGUubmV4dFNpYmxpbmcgOiBudWxsO1xuXG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSLCBTQ19BVFRSX0FDVElWRSk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZShTQ19BVFRSX1ZFUlNJT04sIFNDX1ZFUlNJT04pO1xuXG4gIGNvbnN0IG5vbmNlID0gZ2V0Tm9uY2UoKTtcblxuICBpZiAobm9uY2UpIHN0eWxlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG5cbiAgcGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbi8qKiBHZXQgdGhlIENTU1N0eWxlU2hlZXQgaW5zdGFuY2UgZm9yIGEgZ2l2ZW4gc3R5bGUgZWxlbWVudCAqL1xuZXhwb3J0IGNvbnN0IGdldFNoZWV0ID0gKHRhZzogSFRNTFN0eWxlRWxlbWVudCk6IENTU1N0eWxlU2hlZXQgPT4ge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuICgodGFnLnNoZWV0OiBhbnkpOiBDU1NTdHlsZVNoZWV0KTtcbiAgfVxuXG4gIC8vIEF2b2lkIEZpcmVmb3ggcXVpcmsgd2hlcmUgdGhlIHN0eWxlIGVsZW1lbnQgbWlnaHQgbm90IGhhdmUgYSBzaGVldCBwcm9wZXJ0eVxuICBjb25zdCB7IHN0eWxlU2hlZXRzIH0gPSBkb2N1bWVudDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBzdHlsZVNoZWV0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBzaGVldCA9IHN0eWxlU2hlZXRzW2ldO1xuICAgIGlmIChzaGVldC5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgcmV0dXJuICgoc2hlZXQ6IGFueSk6IENTU1N0eWxlU2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIHRocm93U3R5bGVkRXJyb3IoMTcpO1xuICByZXR1cm4gKHVuZGVmaW5lZDogYW55KTtcbn07XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuaW1wb3J0IHsgbWFrZVN0eWxlVGFnLCBnZXRTaGVldCB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB0eXBlIHsgU2hlZXRPcHRpb25zLCBUYWcgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIENyZWF0ZSBhIENTU1N0eWxlU2hlZXQtbGlrZSB0YWcgZGVwZW5kaW5nIG9uIHRoZSBlbnZpcm9ubWVudCAqL1xuZXhwb3J0IGNvbnN0IG1ha2VUYWcgPSAoeyBpc1NlcnZlciwgdXNlQ1NTT01JbmplY3Rpb24sIHRhcmdldCB9OiBTaGVldE9wdGlvbnMpOiBUYWcgPT4ge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFZpcnR1YWxUYWcodGFyZ2V0KTtcbiAgfSBlbHNlIGlmICh1c2VDU1NPTUluamVjdGlvbikge1xuICAgIHJldHVybiBuZXcgQ1NTT01UYWcodGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFRleHRUYWcodGFyZ2V0KTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIENTU09NVGFnIGltcGxlbWVudHMgVGFnIHtcbiAgZWxlbWVudDogSFRNTFN0eWxlRWxlbWVudDtcblxuICBzaGVldDogQ1NTU3R5bGVTaGVldDtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuXG4gICAgLy8gQXZvaWQgRWRnZSBidWcgd2hlcmUgZW1wdHkgc3R5bGUgZWxlbWVudHMgZG9uJ3QgY3JlYXRlIHNoZWV0c1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcblxuICAgIHRoaXMuc2hlZXQgPSBnZXRTaGVldChlbGVtZW50KTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBpbnNlcnRSdWxlKGluZGV4OiBudW1iZXIsIHJ1bGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnNoZWV0Lmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5sZW5ndGgtLTtcbiAgfVxuXG4gIGdldFJ1bGUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuc2hlZXQuY3NzUnVsZXNbaW5kZXhdO1xuICAgIC8vIEF2b2lkIElFMTEgcXVpcmsgd2hlcmUgY3NzVGV4dCBpcyBpbmFjY2Vzc2libGUgb24gc29tZSBpbnZhbGlkIHJ1bGVzXG4gICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcnVsZS5jc3NUZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHJ1bGUuY3NzVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuXG4vKiogQSBUYWcgdGhhdCBlbXVsYXRlcyB0aGUgQ1NTU3R5bGVTaGVldCBBUEkgYnV0IHVzZXMgdGV4dCBub2RlcyAqL1xuZXhwb3J0IGNsYXNzIFRleHRUYWcgaW1wbGVtZW50cyBUYWcge1xuICBlbGVtZW50OiBIVE1MU3R5bGVFbGVtZW50O1xuXG4gIG5vZGVzOiBOb2RlTGlzdDxOb2RlPjtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAodGhpcy5lbGVtZW50ID0gbWFrZVN0eWxlVGFnKHRhcmdldCkpO1xuICAgIHRoaXMubm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGggJiYgaW5kZXggPj0gMCkge1xuICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpO1xuICAgICAgY29uc3QgcmVmTm9kZSA9IHRoaXMubm9kZXNbaW5kZXhdO1xuICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlIHx8IG51bGwpO1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlUnVsZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbaW5kZXhdKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdLnRleHRDb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG5cbi8qKiBBIGNvbXBsZXRlbHkgdmlydHVhbCAoc2VydmVyLXNpZGUpIFRhZyB0aGF0IGRvZXNuJ3QgbWFuaXB1bGF0ZSB0aGUgRE9NICovXG5leHBvcnQgY2xhc3MgVmlydHVhbFRhZyBpbXBsZW1lbnRzIFRhZyB7XG4gIHJ1bGVzOiBzdHJpbmdbXTtcblxuICBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihfdGFyZ2V0PzogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShpbmRleDogbnVtYmVyLCBydWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZVJ1bGUoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG5cbiAgZ2V0UnVsZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoaW5kZXggPCB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXNbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgRElTQUJMRV9TUEVFRFksIElTX0JST1dTRVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgeyBtYWtlR3JvdXBlZFRhZyB9IGZyb20gJy4vR3JvdXBlZFRhZyc7XG5pbXBvcnQgeyBnZXRHcm91cEZvcklkIH0gZnJvbSAnLi9Hcm91cElEQWxsb2NhdG9yJztcbmltcG9ydCB7IG91dHB1dFNoZWV0LCByZWh5ZHJhdGVTaGVldCB9IGZyb20gJy4vUmVoeWRyYXRpb24nO1xuaW1wb3J0IHsgbWFrZVRhZyB9IGZyb20gJy4vVGFnJztcbmltcG9ydCB0eXBlIHsgR3JvdXBlZFRhZywgU2hlZXQsIFNoZWV0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5sZXQgU0hPVUxEX1JFSFlEUkFURSA9IElTX0JST1dTRVI7XG5cbnR5cGUgU2hlZXRDb25zdHJ1Y3RvckFyZ3MgPSB7XG4gIGlzU2VydmVyPzogYm9vbGVhbixcbiAgdXNlQ1NTT01JbmplY3Rpb24/OiBib29sZWFuLFxuICB0YXJnZXQ/OiBIVE1MRWxlbWVudCxcbn07XG5cbnR5cGUgR2xvYmFsU3R5bGVzQWxsb2NhdGlvbk1hcCA9IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG50eXBlIE5hbWVzQWxsb2NhdGlvbk1hcCA9IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFNoZWV0T3B0aW9ucyA9IHtcbiAgaXNTZXJ2ZXI6ICFJU19CUk9XU0VSLFxuICB1c2VDU1NPTUluamVjdGlvbjogIURJU0FCTEVfU1BFRURZLFxufTtcblxuLyoqIENvbnRhaW5zIHRoZSBtYWluIHN0eWxlc2hlZXQgbG9naWMgZm9yIHN0cmluZ2lmaWNhdGlvbiBhbmQgY2FjaGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVTaGVldCBpbXBsZW1lbnRzIFNoZWV0IHtcbiAgZ3M6IEdsb2JhbFN0eWxlc0FsbG9jYXRpb25NYXA7XG5cbiAgbmFtZXM6IE5hbWVzQWxsb2NhdGlvbk1hcDtcblxuICBvcHRpb25zOiBTaGVldE9wdGlvbnM7XG5cbiAgc2VydmVyOiBib29sZWFuO1xuXG4gIHRhZzogdm9pZCB8IEdyb3VwZWRUYWc7XG5cbiAgLyoqIFJlZ2lzdGVyIGEgZ3JvdXAgSUQgdG8gZ2l2ZSBpdCBhbiBpbmRleCAqL1xuICBzdGF0aWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0R3JvdXBGb3JJZChpZCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBvcHRpb25zOiBTaGVldENvbnN0cnVjdG9yQXJncyA9IEVNUFRZX09CSkVDVCxcbiAgICBnbG9iYWxTdHlsZXM/OiBHbG9iYWxTdHlsZXNBbGxvY2F0aW9uTWFwID0ge30sXG4gICAgbmFtZXM/OiBOYW1lc0FsbG9jYXRpb25NYXBcbiAgKSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG5cbiAgICB0aGlzLmdzID0gZ2xvYmFsU3R5bGVzO1xuICAgIHRoaXMubmFtZXMgPSBuZXcgTWFwKG5hbWVzKTtcbiAgICB0aGlzLnNlcnZlciA9ICEhb3B0aW9ucy5pc1NlcnZlcjtcblxuICAgIC8vIFdlIHJlaHlkcmF0ZSBvbmx5IG9uY2UgYW5kIHVzZSB0aGUgc2hlZXQgdGhhdCBpcyBjcmVhdGVkIGZpcnN0XG4gICAgaWYgKCF0aGlzLnNlcnZlciAmJiBJU19CUk9XU0VSICYmIFNIT1VMRF9SRUhZRFJBVEUpIHtcbiAgICAgIFNIT1VMRF9SRUhZRFJBVEUgPSBmYWxzZTtcbiAgICAgIHJlaHlkcmF0ZVNoZWV0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHJlY29uc3RydWN0V2l0aE9wdGlvbnMob3B0aW9uczogU2hlZXRDb25zdHJ1Y3RvckFyZ3MsIHdpdGhOYW1lcz86IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgcmV0dXJuIG5ldyBTdHlsZVNoZWV0KFxuICAgICAgeyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfSxcbiAgICAgIHRoaXMuZ3MsXG4gICAgICAod2l0aE5hbWVzICYmIHRoaXMubmFtZXMpIHx8IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICBhbGxvY2F0ZUdTSW5zdGFuY2UoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiAodGhpcy5nc1tpZF0gPSAodGhpcy5nc1tpZF0gfHwgMCkgKyAxKTtcbiAgfVxuXG4gIC8qKiBMYXppbHkgaW5pdGlhbGlzZXMgYSBHcm91cGVkVGFnIGZvciB3aGVuIGl0J3MgYWN0dWFsbHkgbmVlZGVkICovXG4gIGdldFRhZygpOiBHcm91cGVkVGFnIHtcbiAgICByZXR1cm4gdGhpcy50YWcgfHwgKHRoaXMudGFnID0gbWFrZUdyb3VwZWRUYWcobWFrZVRhZyh0aGlzLm9wdGlvbnMpKSk7XG4gIH1cblxuICAvKiogQ2hlY2sgd2hldGhlciBhIG5hbWUgaXMga25vd24gZm9yIGNhY2hpbmcgKi9cbiAgaGFzTmFtZUZvcklkKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5hbWVzLmhhcyhpZCkgJiYgKHRoaXMubmFtZXMuZ2V0KGlkKTogYW55KS5oYXMobmFtZSk7XG4gIH1cblxuICAvKiogTWFyayBhIGdyb3VwJ3MgbmFtZSBhcyBrbm93biBmb3IgY2FjaGluZyAqL1xuICByZWdpc3Rlck5hbWUoaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgZ2V0R3JvdXBGb3JJZChpZCk7XG5cbiAgICBpZiAoIXRoaXMubmFtZXMuaGFzKGlkKSkge1xuICAgICAgY29uc3QgZ3JvdXBOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIGdyb3VwTmFtZXMuYWRkKG5hbWUpO1xuICAgICAgdGhpcy5uYW1lcy5zZXQoaWQsIGdyb3VwTmFtZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmFkZChuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKiogSW5zZXJ0IG5ldyBydWxlcyB3aGljaCBhbHNvIG1hcmtzIHRoZSBuYW1lIGFzIGtub3duICovXG4gIGluc2VydFJ1bGVzKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcnVsZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5yZWdpc3Rlck5hbWUoaWQsIG5hbWUpO1xuICAgIHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoZ2V0R3JvdXBGb3JJZChpZCksIHJ1bGVzKTtcbiAgfVxuXG4gIC8qKiBDbGVhcnMgYWxsIGNhY2hlZCBuYW1lcyBmb3IgYSBnaXZlbiBncm91cCBJRCAqL1xuICBjbGVhck5hbWVzKGlkOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5uYW1lcy5oYXMoaWQpKSB7XG4gICAgICAodGhpcy5uYW1lcy5nZXQoaWQpOiBhbnkpLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIENsZWFycyBhbGwgcnVsZXMgZm9yIGEgZ2l2ZW4gZ3JvdXAgSUQgKi9cbiAgY2xlYXJSdWxlcyhpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKGdldEdyb3VwRm9ySWQoaWQpKTtcbiAgICB0aGlzLmNsZWFyTmFtZXMoaWQpO1xuICB9XG5cbiAgLyoqIENsZWFycyB0aGUgZW50aXJlIHRhZyB3aGljaCBkZWxldGVzIGFsbCBydWxlcyBidXQgbm90IGl0cyBuYW1lcyAqL1xuICBjbGVhclRhZygpIHtcbiAgICAvLyBOT1RFOiBUaGlzIGRvZXMgbm90IGNsZWFyIHRoZSBuYW1lcywgc2luY2UgaXQncyBvbmx5IHVzZWQgZHVyaW5nIFNTUlxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVvdXNseSBvdXRwdXQgb25seSBuZXcgcnVsZXNcbiAgICB0aGlzLnRhZyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKiBPdXRwdXRzIHRoZSBjdXJyZW50IHNoZWV0IGFzIGEgQ1NTIHN0cmluZyB3aXRoIG1hcmtlcnMgZm9yIFNTUiAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBvdXRwdXRTaGVldCh0aGlzKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuY29uc3QgQURfUkVQTEFDRVJfUiA9IC8oYSkoZCkvZ2k7XG5cbi8qIFRoaXMgaXMgdGhlIFwiY2FwYWNpdHlcIiBvZiBvdXIgYWxwaGFiZXQgaS5lLiAyeDI2IGZvciBhbGwgbGV0dGVycyBwbHVzIHRoZWlyIGNhcGl0YWxpc2VkXG4gKiBjb3VudGVycGFydHMgKi9cbmNvbnN0IGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbmNvbnN0IGdldEFscGhhYmV0aWNDaGFyID0gKGNvZGU6IG51bWJlcik6IHN0cmluZyA9PlxuICBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAoY29kZSA+IDI1ID8gMzkgOiA5NykpO1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlOiBudW1iZXIpOiBzdHJpbmcge1xuICBsZXQgbmFtZSA9ICcnO1xuICBsZXQgeDtcblxuICAvKiBnZXQgYSBjaGFyIGFuZCBkaXZpZGUgYnkgYWxwaGFiZXQtbGVuZ3RoICovXG4gIGZvciAoeCA9IE1hdGguYWJzKGNvZGUpOyB4ID4gY2hhcnNMZW5ndGg7IHggPSAoeCAvIGNoYXJzTGVuZ3RoKSB8IDApIHtcbiAgICBuYW1lID0gZ2V0QWxwaGFiZXRpY0NoYXIoeCAlIGNoYXJzTGVuZ3RoKSArIG5hbWU7XG4gIH1cblxuICByZXR1cm4gKGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lKS5yZXBsYWNlKEFEX1JFUExBQ0VSX1IsICckMS0kMicpO1xufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBjb25zdCBTRUVEID0gNTM4MTtcblxuLy8gV2hlbiB3ZSBoYXZlIHNlcGFyYXRlIHN0cmluZ3MgaXQncyB1c2VmdWwgdG8gcnVuIGEgcHJvZ3Jlc3NpdmVcbi8vIHZlcnNpb24gb2YgZGpiMiB3aGVyZSB3ZSBwcmV0ZW5kIHRoYXQgd2UncmUgc3RpbGwgbG9vcGluZyBvdmVyXG4vLyB0aGUgc2FtZSBzdHJpbmdcbmV4cG9ydCBjb25zdCBwaGFzaCA9IChoOiBudW1iZXIsIHg6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gIGxldCBpID0geC5sZW5ndGg7XG5cbiAgd2hpbGUgKGkpIHtcbiAgICBoID0gKGggKiAzMykgXiB4LmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIHJldHVybiBoO1xufTtcblxuLy8gVGhpcyBpcyBhIGRqYjIgaGFzaGluZyBmdW5jdGlvblxuZXhwb3J0IGNvbnN0IGhhc2ggPSAoeDogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHBoYXNoKFNFRUQsIHgpO1xufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGlzU3R5bGVkQ29tcG9uZW50IGZyb20gJy4vaXNTdHlsZWRDb21wb25lbnQnO1xuaW1wb3J0IHR5cGUgeyBSdWxlU2V0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0YXRpY1J1bGVzKHJ1bGVzOiBSdWxlU2V0KTogYm9vbGVhbiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBydWxlID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgUnVsZVNldCwgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuLi91dGlscy9mbGF0dGVuJztcbmltcG9ydCBnZW5lcmF0ZU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVBbHBoYWJldGljTmFtZSc7XG5pbXBvcnQgeyBoYXNoLCBwaGFzaCB9IGZyb20gJy4uL3V0aWxzL2hhc2gnO1xuaW1wb3J0IGlzU3RhdGljUnVsZXMgZnJvbSAnLi4vdXRpbHMvaXNTdGF0aWNSdWxlcyc7XG5cbmNvbnN0IFNFRUQgPSBoYXNoKFNDX1ZFUlNJT04pO1xuXG4vKipcbiAqIENvbXBvbmVudFN0eWxlIGlzIGFsbCB0aGUgQ1NTLXNwZWNpZmljIHN0dWZmLCBub3QgdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRTdHlsZSB7XG4gIGJhc2VIYXNoOiBudW1iZXI7XG5cbiAgYmFzZVN0eWxlOiA/Q29tcG9uZW50U3R5bGU7XG5cbiAgY29tcG9uZW50SWQ6IHN0cmluZztcblxuICBpc1N0YXRpYzogYm9vbGVhbjtcblxuICBydWxlczogUnVsZVNldDtcblxuICBzdGF0aWNSdWxlc0lkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocnVsZXM6IFJ1bGVTZXQsIGNvbXBvbmVudElkOiBzdHJpbmcsIGJhc2VTdHlsZT86IENvbXBvbmVudFN0eWxlKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuc3RhdGljUnVsZXNJZCA9ICcnO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAoYmFzZVN0eWxlID09PSB1bmRlZmluZWQgfHwgYmFzZVN0eWxlLmlzU3RhdGljKSAmJlxuICAgICAgaXNTdGF0aWNSdWxlcyhydWxlcyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgLy8gU0NfVkVSU0lPTiBnaXZlcyB1cyBpc29sYXRpb24gYmV0d2VlbiBtdWx0aXBsZSBydW50aW1lcyBvbiB0aGUgcGFnZSBhdCBvbmNlXG4gICAgLy8gdGhpcyBpcyBpbXByb3ZlZCBmdXJ0aGVyIHdpdGggdXNlIG9mIHRoZSBiYWJlbCBwbHVnaW4gXCJuYW1lc3BhY2VcIiBmZWF0dXJlXG4gICAgdGhpcy5iYXNlSGFzaCA9IHBoYXNoKFNFRUQsIGNvbXBvbmVudElkKTtcblxuICAgIHRoaXMuYmFzZVN0eWxlID0gYmFzZVN0eWxlO1xuXG4gICAgLy8gTk9URTogVGhpcyByZWdpc3RlcnMgdGhlIGNvbXBvbmVudElkLCB3aGljaCBlbnN1cmVzIGEgY29uc2lzdGVudCBvcmRlclxuICAgIC8vIGZvciB0aGlzIGNvbXBvbmVudCdzIHN0eWxlcyBjb21wYXJlZCB0byBvdGhlcnNcbiAgICBTdHlsZVNoZWV0LnJlZ2lzdGVySWQoY29tcG9uZW50SWQpO1xuICB9XG5cbiAgLypcbiAgICogRmxhdHRlbnMgYSBydWxlIHNldCBpbnRvIHZhbGlkIENTU1xuICAgKiBIYXNoZXMgaXQsIHdyYXBzIHRoZSB3aG9sZSBjaHVuayBpbiBhIC5oYXNoMTIzNCB7fVxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAqICovXG4gIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQ6IE9iamVjdCwgc3R5bGVTaGVldDogU3R5bGVTaGVldCwgc3R5bGlzOiBTdHJpbmdpZmllcikge1xuICAgIGNvbnN0IHsgY29tcG9uZW50SWQgfSA9IHRoaXM7XG5cbiAgICBjb25zdCBuYW1lcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuYmFzZVN0eWxlKSB7XG4gICAgICBuYW1lcy5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcykpO1xuICAgIH1cblxuICAgIC8vIGZvcmNlIGR5bmFtaWMgY2xhc3NuYW1lcyBpZiB1c2VyLXN1cHBsaWVkIHN0eWxpcyBwbHVnaW5zIGFyZSBpbiB1c2VcbiAgICBpZiAodGhpcy5pc1N0YXRpYyAmJiAhc3R5bGlzLmhhc2gpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRpY1J1bGVzSWQgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIHRoaXMuc3RhdGljUnVsZXNJZCkpIHtcbiAgICAgICAgbmFtZXMucHVzaCh0aGlzLnN0YXRpY1J1bGVzSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzU3RhdGljID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpLmpvaW4oJycpO1xuICAgICAgICBjb25zdCBuYW1lID0gZ2VuZXJhdGVOYW1lKHBoYXNoKHRoaXMuYmFzZUhhc2gsIGNzc1N0YXRpYykgPj4+IDApO1xuXG4gICAgICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIG5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgY3NzU3RhdGljRm9ybWF0dGVkID0gc3R5bGlzKGNzc1N0YXRpYywgYC4ke25hbWV9YCwgdW5kZWZpbmVkLCBjb21wb25lbnRJZCk7XG5cbiAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBuYW1lLCBjc3NTdGF0aWNGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgdGhpcy5zdGF0aWNSdWxlc0lkID0gbmFtZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXMucnVsZXM7XG4gICAgICBsZXQgZHluYW1pY0hhc2ggPSBwaGFzaCh0aGlzLmJhc2VIYXNoLCBzdHlsaXMuaGFzaCk7XG4gICAgICBsZXQgY3NzID0gJyc7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFydFJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcGFydFJ1bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY3NzICs9IHBhcnRSdWxlO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGR5bmFtaWNIYXNoID0gcGhhc2goZHluYW1pY0hhc2gsIHBhcnRSdWxlICsgaSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFydFJ1bGUpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0Q2h1bmsgPSBmbGF0dGVuKHBhcnRSdWxlLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgICAgICAgIGNvbnN0IHBhcnRTdHJpbmcgPSBBcnJheS5pc0FycmF5KHBhcnRDaHVuaykgPyBwYXJ0Q2h1bmsuam9pbignJykgOiBwYXJ0Q2h1bms7XG4gICAgICAgICAgZHluYW1pY0hhc2ggPSBwaGFzaChkeW5hbWljSGFzaCwgcGFydFN0cmluZyArIGkpO1xuICAgICAgICAgIGNzcyArPSBwYXJ0U3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGdlbmVyYXRlTmFtZShkeW5hbWljSGFzaCA+Pj4gMCk7XG5cbiAgICAgICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZChjb21wb25lbnRJZCwgbmFtZSkpIHtcbiAgICAgICAgICBjb25zdCBjc3NGb3JtYXR0ZWQgPSBzdHlsaXMoY3NzLCBgLiR7bmFtZX1gLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKTtcbiAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBuYW1lLCBjc3NGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXMuam9pbignICcpO1xuICB9XG59XG4iLCJpbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgeyB0eXBlIFN0cmluZ2lmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRU1QVFlfQVJSQVksIEVNUFRZX09CSkVDVCB9IGZyb20gJy4vZW1wdGllcyc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IHBoYXNoLCBTRUVEIH0gZnJvbSAnLi9oYXNoJztcbmltcG9ydCBpbnNlcnRSdWxlUGx1Z2luIGZyb20gJy4vc3R5bGlzUGx1Z2luSW5zZXJ0UnVsZSc7XG5cbmNvbnN0IENPTU1FTlRfUkVHRVggPSAvXlxccypcXC9cXC8uKiQvZ207XG5jb25zdCBDT01QTEVYX1NFTEVDVE9SX1BSRUZJWCA9IFsnOicsICdbJywgJy4nLCAnIyddO1xuXG50eXBlIFN0eWxpc0luc3RhbmNlQ29uc3RydWN0b3JBcmdzID0ge1xuICBvcHRpb25zPzogT2JqZWN0LFxuICBwbHVnaW5zPzogQXJyYXk8RnVuY3Rpb24+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGlzSW5zdGFuY2Uoe1xuICBvcHRpb25zID0gRU1QVFlfT0JKRUNULFxuICBwbHVnaW5zID0gRU1QVFlfQVJSQVksXG59OiBTdHlsaXNJbnN0YW5jZUNvbnN0cnVjdG9yQXJncyA9IEVNUFRZX09CSkVDVCkge1xuICBjb25zdCBzdHlsaXMgPSBuZXcgU3R5bGlzKG9wdGlvbnMpO1xuXG4gIC8vIFdyYXAgYGluc2VydFJ1bGVQbHVnaW4gdG8gYnVpbGQgYSBsaXN0IG9mIHJ1bGVzLFxuICAvLyBhbmQgdGhlbiBtYWtlIG91ciBvd24gcGx1Z2luIHRvIHJldHVybiB0aGUgcnVsZXMuIFRoaXNcbiAgLy8gbWFrZXMgaXQgZWFzaWVyIHRvIGhvb2sgaW50byB0aGUgZXhpc3RpbmcgU1NSIGFyY2hpdGVjdHVyZVxuXG4gIGxldCBwYXJzaW5nUnVsZXMgPSBbXTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgY29uc3QgcmV0dXJuUnVsZXNQbHVnaW4gPSBjb250ZXh0ID0+IHtcbiAgICBpZiAoY29udGV4dCA9PT0gLTIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZFJ1bGVzID0gcGFyc2luZ1J1bGVzO1xuICAgICAgcGFyc2luZ1J1bGVzID0gW107XG4gICAgICByZXR1cm4gcGFyc2VkUnVsZXM7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBhcnNlUnVsZXNQbHVnaW4gPSBpbnNlcnRSdWxlUGx1Z2luKHJ1bGUgPT4ge1xuICAgIHBhcnNpbmdSdWxlcy5wdXNoKHJ1bGUpO1xuICB9KTtcblxuICBsZXQgX2NvbXBvbmVudElkOiBzdHJpbmc7XG4gIGxldCBfc2VsZWN0b3I6IHN0cmluZztcbiAgbGV0IF9zZWxlY3RvclJlZ2V4cDogUmVnRXhwO1xuICBsZXQgX2NvbnNlY3V0aXZlU2VsZlJlZlJlZ0V4cDogUmVnRXhwO1xuXG4gIGNvbnN0IHNlbGZSZWZlcmVuY2VSZXBsYWNlciA9IChtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpID0+IHtcbiAgICBpZiAoXG4gICAgICAvLyBkbyBub3QgcmVwbGFjZSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBpZiBpdCBpcyBjb21wbGV4IChoYXMgYSBtb2RpZmllcilcbiAgICAgIChvZmZzZXQgPT09IDAgPyBDT01QTEVYX1NFTEVDVE9SX1BSRUZJWC5pbmRleE9mKHN0cmluZ1tfc2VsZWN0b3IubGVuZ3RoXSkgPT09IC0xIDogdHJ1ZSkgJiZcbiAgICAgIC8vIG5vIGNvbnNlY3V0aXZlIHNlbGYgcmVmcyAoLmIuYik7IHRoYXQgaXMgYSBwcmVjZWRlbmNlIGJvb3N0IGFuZCB0cmVhdGVkIGRpZmZlcmVudGx5XG4gICAgICAhc3RyaW5nLm1hdGNoKF9jb25zZWN1dGl2ZVNlbGZSZWZSZWdFeHApXG4gICAgKSB7XG4gICAgICByZXR1cm4gYC4ke19jb21wb25lbnRJZH1gO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcblxuICAvKipcbiAgICogV2hlbiB3cml0aW5nIGEgc3R5bGUgbGlrZVxuICAgKlxuICAgKiAmICsgJiB7XG4gICAqICAgY29sb3I6IHJlZDtcbiAgICogfVxuICAgKlxuICAgKiBUaGUgc2Vjb25kIGFtcGVyc2FuZCBzaG91bGQgYmUgYSByZWZlcmVuY2UgdG8gdGhlIHN0YXRpYyBjb21wb25lbnQgY2xhc3MuIHN0eWxpc1xuICAgKiBoYXMgbm8ga25vd2xlZGdlIG9mIHN0YXRpYyBjbGFzcyBzbyB3ZSBoYXZlIHRvIGludGVsbGlnZW50bHkgcmVwbGFjZSB0aGUgYmFzZSBzZWxlY3Rvci5cbiAgICpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS92My41LjQjcGx1Z2lucyA8LSBtb3JlIGluZm8gYWJvdXQgdGhlIGNvbnRleHQgcGhhc2UgdmFsdWVzXG4gICAqIFwiMlwiIG1lYW5zIHRoaXMgcGx1Z2luIGlzIHRha2luZyBlZmZlY3QgYXQgdGhlIHZlcnkgZW5kIGFmdGVyIGFsbCBvdGhlciBwcm9jZXNzaW5nIGlzIGNvbXBsZXRlXG4gICAqL1xuICBjb25zdCBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4gPSAoY29udGV4dCwgXywgc2VsZWN0b3JzKSA9PiB7XG4gICAgaWYgKGNvbnRleHQgPT09IDIgJiYgc2VsZWN0b3JzLmxlbmd0aCAmJiBzZWxlY3RvcnNbMF0ubGFzdEluZGV4T2YoX3NlbGVjdG9yKSA+IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgc2VsZWN0b3JzWzBdID0gc2VsZWN0b3JzWzBdLnJlcGxhY2UoX3NlbGVjdG9yUmVnZXhwLCBzZWxmUmVmZXJlbmNlUmVwbGFjZXIpO1xuICAgIH1cbiAgfTtcblxuICBzdHlsaXMudXNlKFsuLi5wbHVnaW5zLCBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4sIHBhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5UnVsZXMoY3NzLCBzZWxlY3RvciwgcHJlZml4LCBjb21wb25lbnRJZCA9ICcmJyk6IFN0cmluZ2lmaWVyIHtcbiAgICBjb25zdCBmbGF0Q1NTID0gY3NzLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpO1xuICAgIGNvbnN0IGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IGAke3ByZWZpeH0gJHtzZWxlY3Rvcn0geyAke2ZsYXRDU1N9IH1gIDogZmxhdENTUztcblxuICAgIC8vIHN0eWxpcyBoYXMgbm8gY29uY2VwdCBvZiBzdGF0ZSB0byBiZSBwYXNzZWQgdG8gcGx1Z2luc1xuICAgIC8vIGJ1dCBzaW5jZSBKUyBpcyBzaW5nbGUtdGhyZWFkZWQsIHdlIGNhbiByZWx5IG9uIHRoYXQgdG8gZW5zdXJlXG4gICAgLy8gdGhlc2UgcHJvcGVydGllcyBzdGF5IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCBzdHlsaXMgcnVuXG4gICAgX2NvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgX3NlbGVjdG9yUmVnZXhwID0gbmV3IFJlZ0V4cChgXFxcXCR7X3NlbGVjdG9yfVxcXFxiYCwgJ2cnKTtcbiAgICBfY29uc2VjdXRpdmVTZWxmUmVmUmVnRXhwID0gbmV3IFJlZ0V4cChgKFxcXFwke19zZWxlY3Rvcn1cXFxcYil7Mix9YCk7XG5cbiAgICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xuICB9XG5cbiAgc3RyaW5naWZ5UnVsZXMuaGFzaCA9IHBsdWdpbnMubGVuZ3RoXG4gICAgPyBwbHVnaW5zXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgcGx1Z2luKSA9PiB7XG4gICAgICAgICAgaWYgKCFwbHVnaW4ubmFtZSkge1xuICAgICAgICAgICAgdGhyb3dTdHlsZWRFcnJvcigxNSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBoYXNoKGFjYywgcGx1Z2luLm5hbWUpO1xuICAgICAgICB9LCBTRUVEKVxuICAgICAgICAudG9TdHJpbmcoKVxuICAgIDogJyc7XG5cbiAgcmV0dXJuIHN0cmluZ2lmeVJ1bGVzO1xufVxuIiwiLyoqXG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBTdWx0YW4gVGFyaW1vXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSxcbiAqIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuICogc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVEIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1JcbiAqIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc2VydFJ1bGUpIHtcbiAgY29uc3QgZGVsaW1pdGVyID0gJy8qfCovJztcbiAgY29uc3QgbmVlZGxlID0gYCR7ZGVsaW1pdGVyfX1gO1xuXG4gIGZ1bmN0aW9uIHRvU2hlZXQoYmxvY2spIHtcbiAgICBpZiAoYmxvY2spIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc2VydFJ1bGUoYCR7YmxvY2t9fWApO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0KFxuICAgIGNvbnRleHQsXG4gICAgY29udGVudCxcbiAgICBzZWxlY3RvcnMsXG4gICAgcGFyZW50cyxcbiAgICBsaW5lLFxuICAgIGNvbHVtbixcbiAgICBsZW5ndGgsXG4gICAgbnMsXG4gICAgZGVwdGgsXG4gICAgYXRcbiAgKSB7XG4gICAgc3dpdGNoIChjb250ZXh0KSB7XG4gICAgICAvLyBwcm9wZXJ0eVxuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyBAaW1wb3J0XG4gICAgICAgIGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KSByZXR1cm4gaW5zZXJ0UnVsZShgJHtjb250ZW50fTtgKSwgJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2VsZWN0b3JcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBhdC1ydWxlXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHN3aXRjaCAobnMpIHtcbiAgICAgICAgICAvLyBAZm9udC1mYWNlLCBAcGFnZVxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdICsgY29udGVudCksICcnO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAtMjpcbiAgICAgICAgY29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldCk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBSZWFjdCwgeyB0eXBlIENvbnRleHQsIHR5cGUgTm9kZSwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzaGFsbG93ZXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgY3JlYXRlU3R5bGlzSW5zdGFuY2UgZnJvbSAnLi4vdXRpbHMvc3R5bGlzJztcblxudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBOb2RlLFxuICBkaXNhYmxlQ1NTT01JbmplY3Rpb24/OiBib29sZWFuLFxuICBkaXNhYmxlVmVuZG9yUHJlZml4ZXM/OiBib29sZWFuLFxuICBzaGVldD86IFN0eWxlU2hlZXQsXG4gIHN0eWxpc1BsdWdpbnM/OiBBcnJheTxGdW5jdGlvbj4sXG4gIHRhcmdldD86IEhUTUxFbGVtZW50LFxufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlU2hlZXRDb250ZXh0OiBDb250ZXh0PFN0eWxlU2hlZXQgfCB2b2lkPiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbmV4cG9ydCBjb25zdCBTdHlsZVNoZWV0Q29uc3VtZXIgPSBTdHlsZVNoZWV0Q29udGV4dC5Db25zdW1lcjtcbmV4cG9ydCBjb25zdCBTdHlsaXNDb250ZXh0OiBDb250ZXh0PFN0cmluZ2lmaWVyIHwgdm9pZD4gPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgY29uc3QgU3R5bGlzQ29uc3VtZXIgPSBTdHlsaXNDb250ZXh0LkNvbnN1bWVyO1xuXG5leHBvcnQgY29uc3QgbWFzdGVyU2hlZXQ6IFN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCgpO1xuZXhwb3J0IGNvbnN0IG1hc3RlclN0eWxpczogU3RyaW5naWZpZXIgPSBjcmVhdGVTdHlsaXNJbnN0YW5jZSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3R5bGVTaGVldCgpOiBTdHlsZVNoZWV0IHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3R5bGVTaGVldENvbnRleHQpIHx8IG1hc3RlclNoZWV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3R5bGlzKCk6IFN0cmluZ2lmaWVyIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3R5bGlzQ29udGV4dCkgfHwgbWFzdGVyU3R5bGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgW3BsdWdpbnMsIHNldFBsdWdpbnNdID0gdXNlU3RhdGUocHJvcHMuc3R5bGlzUGx1Z2lucyk7XG4gIGNvbnN0IGNvbnRleHRTdHlsZVNoZWV0ID0gdXNlU3R5bGVTaGVldCgpO1xuXG4gIGNvbnN0IHN0eWxlU2hlZXQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2hlZXQgPSBjb250ZXh0U3R5bGVTaGVldDtcblxuICAgIGlmIChwcm9wcy5zaGVldCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICBzaGVldCA9IHByb3BzLnNoZWV0O1xuICAgIH0gZWxzZSBpZiAocHJvcHMudGFyZ2V0KSB7XG4gICAgICBzaGVldCA9IHNoZWV0LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoeyB0YXJnZXQ6IHByb3BzLnRhcmdldCB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmRpc2FibGVDU1NPTUluamVjdGlvbikge1xuICAgICAgc2hlZXQgPSBzaGVldC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHsgdXNlQ1NTT01JbmplY3Rpb246IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzaGVldDtcbiAgfSwgW3Byb3BzLmRpc2FibGVDU1NPTUluamVjdGlvbiwgcHJvcHMuc2hlZXQsIHByb3BzLnRhcmdldF0pO1xuXG4gIGNvbnN0IHN0eWxpcyA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGNyZWF0ZVN0eWxpc0luc3RhbmNlKHtcbiAgICAgICAgb3B0aW9uczogeyBwcmVmaXg6ICFwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXMgfSxcbiAgICAgICAgcGx1Z2lucyxcbiAgICAgIH0pLFxuICAgIFtwcm9wcy5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsIHBsdWdpbnNdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNoYWxsb3dlcXVhbChwbHVnaW5zLCBwcm9wcy5zdHlsaXNQbHVnaW5zKSkgc2V0UGx1Z2lucyhwcm9wcy5zdHlsaXNQbHVnaW5zKTtcbiAgfSwgW3Byb3BzLnN0eWxpc1BsdWdpbnNdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZVNoZWV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3R5bGVTaGVldH0+XG4gICAgICA8U3R5bGlzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3R5bGlzfT5cbiAgICAgICAge3Byb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkocHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgOiBwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvU3R5bGlzQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L1N0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB7IHR5cGUgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdGhyb3dTdHlsZWRFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5pbXBvcnQgeyBtYXN0ZXJTdHlsaXMgfSBmcm9tICcuL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5ZnJhbWVzIHtcbiAgaWQ6IHN0cmluZztcblxuICBuYW1lOiBzdHJpbmc7XG5cbiAgcnVsZXM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHJ1bGVzOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaWQgPSBgc2Mta2V5ZnJhbWVzLSR7bmFtZX1gO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgfVxuXG4gIGluamVjdCA9IChzdHlsZVNoZWV0OiBTdHlsZVNoZWV0LCBzdHlsaXNJbnN0YW5jZTogU3RyaW5naWZpZXIgPSBtYXN0ZXJTdHlsaXMpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZE5hbWUgPSB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuXG4gICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZCh0aGlzLmlkLCByZXNvbHZlZE5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGVzKFxuICAgICAgICB0aGlzLmlkLFxuICAgICAgICByZXNvbHZlZE5hbWUsXG4gICAgICAgIHN0eWxpc0luc3RhbmNlKHRoaXMucnVsZXMsIHJlc29sdmVkTmFtZSwgJ0BrZXlmcmFtZXMnKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMTIsIFN0cmluZyh0aGlzLm5hbWUpKTtcbiAgfTtcblxuICBnZXROYW1lKHN0eWxpc0luc3RhbmNlOiBTdHJpbmdpZmllciA9IG1hc3RlclN0eWxpcykge1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyBzdHlsaXNJbnN0YW5jZS5oYXNoO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG4vKipcbiAqIGlubGluZWQgdmVyc2lvbiBvZlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xuXG5jb25zdCB1cHBlcmNhc2VDaGVjayA9IC8oW0EtWl0pLztcbmNvbnN0IHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuY29uc3QgbXNQYXR0ZXJuID0gL15tcy0vO1xuY29uc3QgcHJlZml4QW5kTG93ZXJDYXNlID0gKGNoYXI6IHN0cmluZyk6IHN0cmluZyA9PiBgLSR7Y2hhci50b0xvd2VyQ2FzZSgpfWA7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVwcGVyY2FzZUNoZWNrLnRlc3Qoc3RyaW5nKVxuICA/IHN0cmluZ1xuICAgIC5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHByZWZpeEFuZExvd2VyQ2FzZSlcbiAgICAucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJylcbiAgOiBzdHJpbmc7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGdldENvbXBvbmVudE5hbWUgZnJvbSAnLi9nZXRDb21wb25lbnROYW1lJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgaXNTdGF0ZWxlc3NGdW5jdGlvbiBmcm9tICcuL2lzU3RhdGVsZXNzRnVuY3Rpb24nO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuL2lzU3R5bGVkQ29tcG9uZW50JztcbmltcG9ydCBLZXlmcmFtZXMgZnJvbSAnLi4vbW9kZWxzL0tleWZyYW1lcyc7XG5pbXBvcnQgaHlwaGVuYXRlIGZyb20gJy4vaHlwaGVuYXRlU3R5bGVOYW1lJztcbmltcG9ydCBhZGRVbml0SWZOZWVkZWQgZnJvbSAnLi9hZGRVbml0SWZOZWVkZWQnO1xuaW1wb3J0IHsgdHlwZSBTdHJpbmdpZmllciB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBJdCdzIGZhbHNpc2ggbm90IGZhbHN5IGJlY2F1c2UgMCBpcyBhbGxvd2VkLlxuICovXG5jb25zdCBpc0ZhbHNpc2ggPSBjaHVuayA9PiBjaHVuayA9PT0gdW5kZWZpbmVkIHx8IGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSBmYWxzZSB8fCBjaHVuayA9PT0gJyc7XG5cbmV4cG9ydCBjb25zdCBvYmpUb0Nzc0FycmF5ID0gKG9iajogT2JqZWN0LCBwcmV2S2V5Pzogc3RyaW5nKTogQXJyYXk8c3RyaW5nIHwgRnVuY3Rpb24+ID0+IHtcbiAgY29uc3QgcnVsZXMgPSBbXTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGlzRmFsc2lzaChvYmpba2V5XSkpIGNvbnRpbnVlO1xuXG4gICAgaWYgKChBcnJheS5pc0FycmF5KG9ialtrZXldKSAmJiBvYmpba2V5XS5pc0NzcykgfHwgaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJ1bGVzLnB1c2goYCR7aHlwaGVuYXRlKGtleSl9OmAsIG9ialtrZXldLCAnOycpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHtcbiAgICAgIHJ1bGVzLnB1c2goLi4ub2JqVG9Dc3NBcnJheShvYmpba2V5XSwga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bGVzLnB1c2goYCR7aHlwaGVuYXRlKGtleSl9OiAke2FkZFVuaXRJZk5lZWRlZChrZXksIG9ialtrZXldKX07YCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByZXZLZXkgPyBbYCR7cHJldktleX0ge2AsIC4uLnJ1bGVzLCAnfSddIDogcnVsZXM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0dGVuKFxuICBjaHVuazogYW55LFxuICBleGVjdXRpb25Db250ZXh0OiA/T2JqZWN0LFxuICBzdHlsZVNoZWV0OiA/T2JqZWN0LFxuICBzdHlsaXNJbnN0YW5jZTogP1N0cmluZ2lmaWVyXG4pOiBhbnkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaHVuaykpIHtcbiAgICBjb25zdCBydWxlU2V0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoLCByZXN1bHQ7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcmVzdWx0ID0gZmxhdHRlbihjaHVua1tpXSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCwgc3R5bGlzSW5zdGFuY2UpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSAnJykgY29udGludWU7XG4gICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHJ1bGVTZXQucHVzaCguLi5yZXN1bHQpO1xuICAgICAgZWxzZSBydWxlU2V0LnB1c2gocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZVNldDtcbiAgfVxuXG4gIGlmIChpc0ZhbHNpc2goY2h1bmspKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyogSGFuZGxlIG90aGVyIGNvbXBvbmVudHMgKi9cbiAgaWYgKGlzU3R5bGVkQ29tcG9uZW50KGNodW5rKSkge1xuICAgIHJldHVybiBgLiR7Y2h1bmsuc3R5bGVkQ29tcG9uZW50SWR9YDtcbiAgfVxuXG4gIC8qIEVpdGhlciBleGVjdXRlIG9yIGRlZmVyIHRoZSBmdW5jdGlvbiAqL1xuICBpZiAoaXNGdW5jdGlvbihjaHVuaykpIHtcbiAgICBpZiAoaXNTdGF0ZWxlc3NGdW5jdGlvbihjaHVuaykgJiYgZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2h1bmsoZXhlY3V0aW9uQ29udGV4dCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRWxlbWVudChyZXN1bHQpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgJHtnZXRDb21wb25lbnROYW1lKFxuICAgICAgICAgICAgY2h1bmtcbiAgICAgICAgICApfSBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdHRlbihyZXN1bHQsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpc0luc3RhbmNlKTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgaWYgKGNodW5rIGluc3RhbmNlb2YgS2V5ZnJhbWVzKSB7XG4gICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgIGNodW5rLmluamVjdChzdHlsZVNoZWV0LCBzdHlsaXNJbnN0YW5jZSk7XG4gICAgICByZXR1cm4gY2h1bmsuZ2V0TmFtZShzdHlsaXNJbnN0YW5jZSk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIC8qIEhhbmRsZSBvYmplY3RzICovXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzQXJyYXkoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cbiIsIi8vIEBmbG93XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3Q6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgIShcbiAgICAgIHRlc3QucHJvdG90eXBlXG4gICAgICAmJiB0ZXN0LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50XG4gICAgKVxuICApO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiBgJHt2YWx1ZX1weGA7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGludGVybGVhdmUgZnJvbSAnLi4vdXRpbHMvaW50ZXJsZWF2ZSc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBmbGF0dGVuIGZyb20gJy4uL3V0aWxzL2ZsYXR0ZW4nO1xuaW1wb3J0IHR5cGUgeyBJbnRlcnBvbGF0aW9uLCBSdWxlU2V0LCBTdHlsZXMgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVXNlZCB3aGVuIGZsYXR0ZW5pbmcgb2JqZWN0IHN0eWxlcyB0byBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkXG4gKiBleHBhbmQgYW4gYXJyYXkgb2Ygc3R5bGVzLlxuICovXG5jb25zdCBhZGRUYWcgPSBhcmcgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgYXJnLmlzQ3NzID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gYXJnO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzKHN0eWxlczogU3R5bGVzLCAuLi5pbnRlcnBvbGF0aW9uczogQXJyYXk8SW50ZXJwb2xhdGlvbj4pOiBSdWxlU2V0IHtcbiAgaWYgKGlzRnVuY3Rpb24oc3R5bGVzKSB8fCBpc1BsYWluT2JqZWN0KHN0eWxlcykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGFkZFRhZyhmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXMsIC4uLmludGVycG9sYXRpb25zXSkpKTtcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9ucy5sZW5ndGggPT09IDAgJiYgc3R5bGVzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2Ygc3R5bGVzWzBdID09PSAnc3RyaW5nJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gYWRkVGFnKGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSkpO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBpbnZhbGlkSG9va0NhbGxSZSA9IC9pbnZhbGlkIGhvb2sgY2FsbC9pO1xuY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRHluYW1pY0NyZWF0aW9uID0gKGRpc3BsYXlOYW1lOiBzdHJpbmcsIGNvbXBvbmVudElkPzogc3RyaW5nKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3QgcGFyc2VkSWRTdHJpbmcgPSBjb21wb25lbnRJZCA/IGAgd2l0aCB0aGUgaWQgb2YgXCIke2NvbXBvbmVudElkfVwiYCA6ICcnO1xuICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgYFRoZSBjb21wb25lbnQgJHtkaXNwbGF5TmFtZX0ke3BhcnNlZElkU3RyaW5nfSBoYXMgYmVlbiBjcmVhdGVkIGR5bmFtaWNhbGx5LlxcbmAgK1xuICAgICAgXCJZb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuXCIgK1xuICAgICAgJ1RvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuJztcblxuICAgIC8vIElmIGEgaG9vayBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGNvbXBvbmVudDpcbiAgICAvLyBSZWFjdCAxNyBhbmQgZWFybGllciB0aHJvdyBhbiBlcnJvclxuICAgIC8vIFJlYWN0IDE4IGFuZCBhYm92ZSB1c2UgY29uc29sZS5lcnJvclxuXG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHRyeSB7XG4gICAgICBsZXQgZGlkTm90Q2FsbEludmFsaWRIb29rID0gdHJ1ZVxuICAgICAgLyogJEZsb3dJZ25vcmVbY2Fubm90LXdyaXRlXSAqL1xuICAgICAgY29uc29sZS5lcnJvciA9IChjb25zb2xlRXJyb3JNZXNzYWdlLCAuLi5jb25zb2xlRXJyb3JBcmdzKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgLy8gVGhlIGVycm9yIGhlcmUgaXMgZXhwZWN0ZWQsIHNpbmNlIHdlJ3JlIGV4cGVjdGluZyBhbnl0aGluZyB0aGF0IHVzZXMgYGNoZWNrRHluYW1pY0NyZWF0aW9uYCB0b1xuICAgICAgLy8gYmUgY2FsbGVkIG91dHNpZGUgb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAgICAgIGlmIChpbnZhbGlkSG9va0NhbGxSZS50ZXN0KGNvbnNvbGVFcnJvck1lc3NhZ2UpKSB7XG4gICAgICAgICAgZGlkTm90Q2FsbEludmFsaWRIb29rID0gZmFsc2VcbiAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4sIGJ1dCByZXNldHMgYHdhcm5pbmdTZWVuYCBpZiB3ZSBoYWQgdGhpcyBlcnJvciBoYXBwZW4gaW50ZXJtaXR0ZW50bHlcbiAgICAgICAgICBzZWVuLmRlbGV0ZShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcmlnaW5hbENvbnNvbGVFcnJvcihjb25zb2xlRXJyb3JNZXNzYWdlLCAuLi5jb25zb2xlRXJyb3JBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgcHVycG9zZWZ1bGx5IGNhbGwgYHVzZVJlZmAgb3V0c2lkZSBvZiBhIGNvbXBvbmVudCBhbmQgZXhwZWN0IGl0IHRvIHRocm93XG4gICAgICAvLyBJZiBpdCBkb2Vzbid0LCB0aGVuIHdlJ3JlIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgdXNlUmVmKCk7XG5cbiAgICAgIGlmIChkaWROb3RDYWxsSW52YWxpZEhvb2sgJiYgIXNlZW4uaGFzKG1lc3NhZ2UpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgc2Vlbi5hZGQobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFRoZSBlcnJvciBoZXJlIGlzIGV4cGVjdGVkLCBzaW5jZSB3ZSdyZSBleHBlY3RpbmcgYW55dGhpbmcgdGhhdCB1c2VzIGBjaGVja0R5bmFtaWNDcmVhdGlvbmAgdG9cbiAgICAgIC8vIGJlIGNhbGxlZCBvdXRzaWRlIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgICAgaWYgKGludmFsaWRIb29rQ2FsbFJlLnRlc3QoZXJyb3IubWVzc2FnZSkpIHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuLCBidXQgcmVzZXRzIGB3YXJuaW5nU2VlbmAgaWYgd2UgaGFkIHRoaXMgZXJyb3IgaGFwcGVuIGludGVybWl0dGVudGx5XG4gICAgICAgIHNlZW4uZGVsZXRlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAvKiAkRmxvd0lnbm9yZVtjYW5ub3Qtd3JpdGVdICovXG4gICAgICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxDb25zb2xlRXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBFTVBUWV9PQkpFQ1QgfSBmcm9tICcuL2VtcHRpZXMnO1xuXG50eXBlIFByb3BzID0ge1xuICB0aGVtZT86IGFueSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wczogUHJvcHMsIHByb3ZpZGVkVGhlbWU6IGFueSwgZGVmYXVsdFByb3BzOiBhbnkgPSBFTVBUWV9PQkpFQ1QpID0+IHtcbiAgcmV0dXJuIChwcm9wcy50aGVtZSAhPT0gZGVmYXVsdFByb3BzLnRoZW1lICYmIHByb3BzLnRoZW1lKSB8fCBwcm92aWRlZFRoZW1lIHx8IGRlZmF1bHRQcm9wcy50aGVtZTtcbn07XG4iLCIvLyBAZmxvd1xuXG4vLyBTb3VyY2U6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3NvbS0xLyNzZXJpYWxpemUtYW4taWRlbnRpZmllclxuLy8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCBub24tbGV0dGVyIGZpcnN0IHN5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWRcbmNvbnN0IGVzY2FwZVJlZ2V4ID0gL1shXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX4tXSsvZztcblxuY29uc3QgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcblxuLyoqXG4gKiBUT0RPOiBFeHBsb3JlIHVzaW5nIENTUy5lc2NhcGUgd2hlbiBpdCBiZWNvbWVzIG1vcmUgYXZhaWxhYmxlXG4gKiBpbiBldmVyZ3JlZW4gYnJvd3NlcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVzY2FwZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiAoXG4gICAgc3RyXG4gICAgICAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gICAgICAucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKVxuXG4gICAgICAvLyBSZW1vdmUgZXh0cmFuZW91cyBoeXBoZW5zIGF0IHRoZSBzdGFydCBhbmQgZW5kXG4gICAgICAucmVwbGFjZShkYXNoZXNBdEVuZHMsICcnKVxuICApO1xufVxuIiwiLy8gQGZsb3dcbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgZ2VuZXJhdGVBbHBoYWJldGljTmFtZSBmcm9tICcuL2dlbmVyYXRlQWxwaGFiZXRpY05hbWUnO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gJy4vaGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKGhhc2goc3RyKSA+Pj4gMCk7XG59O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSVN0eWxlZENvbXBvbmVudCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWcodGFyZ2V0OiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPik6IGJvb2xlYW4gJWNoZWNrcyB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiZcbiAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgPyB0YXJnZXQuY2hhckF0KDApID09PSB0YXJnZXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKClcbiAgICAgIDogdHJ1ZSlcbiAgKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAgbWl4aW4tZGVlcDsgaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvbWl4aW4tZGVlcFxuICBJbmxpbmVkIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIGNvbnNpc3RlbnRseSB0cmFuc3BpbGVkIHRvIGFuIElFLWNvbXBhdGlibGUgc3ludGF4LlxuXG4gIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG4gIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgVEhFIFNPRlRXQVJFLlxuKi9cblxuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWwpKVxuICApO1xufTtcblxuY29uc3QgaXNWYWxpZEtleSA9IGtleSA9PiB7XG4gIHJldHVybiBrZXkgIT09ICdfX3Byb3RvX18nICYmIGtleSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiBrZXkgIT09ICdwcm90b3R5cGUnO1xufTtcblxuZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCB2YWwsIGtleSkge1xuICBjb25zdCBvYmogPSB0YXJnZXRba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHZhbCkgJiYgaXNPYmplY3Qob2JqKSkge1xuICAgIG1peGluRGVlcChvYmosIHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWl4aW5EZWVwKHRhcmdldCwgLi4ucmVzdCkge1xuICBmb3IgKGNvbnN0IG9iaiBvZiByZXN0KSB7XG4gICAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgICAgbWl4aW4odGFyZ2V0LCBvYmpba2V5XSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHR5cGUgRWxlbWVudCwgdHlwZSBDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXNGdW5jdGlvbic7XG5cbmV4cG9ydCB0eXBlIFRoZW1lID0geyBba2V5OiBzdHJpbmddOiBtaXhlZCB9O1xuXG50eXBlIFRoZW1lQXJndW1lbnQgPSBUaGVtZSB8ICgob3V0ZXJUaGVtZT86IFRoZW1lKSA9PiBUaGVtZSk7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuPzogRWxlbWVudDxhbnk+LFxuICB0aGVtZTogVGhlbWVBcmd1bWVudCxcbn07XG5cbmV4cG9ydCBjb25zdCBUaGVtZUNvbnRleHQ6IENvbnRleHQ8VGhlbWUgfCB2b2lkPiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuZXhwb3J0IGNvbnN0IFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbmZ1bmN0aW9uIG1lcmdlVGhlbWUodGhlbWU6IFRoZW1lQXJndW1lbnQsIG91dGVyVGhlbWU/OiBUaGVtZSk6IFRoZW1lIHtcbiAgaWYgKCF0aGVtZSkge1xuICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDE0KTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHRoZW1lKSkge1xuICAgIGNvbnN0IG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAobWVyZ2VkVGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JylcbiAgICApIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDcpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lKSB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoOCk7XG4gIH1cblxuICByZXR1cm4gb3V0ZXJUaGVtZSA/IHsgLi4ub3V0ZXJUaGVtZSwgLi4udGhlbWUgfSA6IHRoZW1lO1xufVxuXG4vKipcbiAqIFByb3ZpZGUgYSB0aGVtZSB0byBhbiBlbnRpcmUgcmVhY3QgY29tcG9uZW50IHRyZWUgdmlhIGNvbnRleHRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3Qgb3V0ZXJUaGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgY29uc3QgdGhlbWVDb250ZXh0ID0gdXNlTWVtbygoKSA9PiBtZXJnZVRoZW1lKHByb3BzLnRoZW1lLCBvdXRlclRoZW1lKSwgW1xuICAgIHByb3BzLnRoZW1lLFxuICAgIG91dGVyVGhlbWUsXG4gIF0pO1xuXG4gIGlmICghcHJvcHMuY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGVtZUNvbnRleHR9Pntwcm9wcy5jaGlsZHJlbn08L1RoZW1lQ29udGV4dC5Qcm92aWRlcj47XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBob2lzdCBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlRWxlbWVudCwgdHlwZSBSZWYsIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTQ19WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtcbiAgQXR0cnMsXG4gIElTdHlsZWRDb21wb25lbnQsXG4gIElTdHlsZWRTdGF0aWNzLFxuICBSdWxlU2V0LFxuICBTaG91bGRGb3J3YXJkUHJvcCxcbiAgVGFyZ2V0LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjaGVja0R5bmFtaWNDcmVhdGlvbiB9IGZyb20gJy4uL3V0aWxzL2NoZWNrRHluYW1pY0NyZWF0aW9uJztcbmltcG9ydCBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgZnJvbSAnLi4vdXRpbHMvY3JlYXRlV2FyblRvb01hbnlDbGFzc2VzJztcbmltcG9ydCBkZXRlcm1pbmVUaGVtZSBmcm9tICcuLi91dGlscy9kZXRlcm1pbmVUaGVtZSc7XG5pbXBvcnQgeyBFTVBUWV9BUlJBWSwgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5pbXBvcnQgZXNjYXBlIGZyb20gJy4uL3V0aWxzL2VzY2FwZSc7XG5pbXBvcnQgZ2VuZXJhdGVDb21wb25lbnRJZCBmcm9tICcuLi91dGlscy9nZW5lcmF0ZUNvbXBvbmVudElkJztcbmltcG9ydCBnZW5lcmF0ZURpc3BsYXlOYW1lIGZyb20gJy4uL3V0aWxzL2dlbmVyYXRlRGlzcGxheU5hbWUnO1xuaW1wb3J0IGdldENvbXBvbmVudE5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgaXNUYWcgZnJvbSAnLi4vdXRpbHMvaXNUYWcnO1xuaW1wb3J0IGpvaW5TdHJpbmdzIGZyb20gJy4uL3V0aWxzL2pvaW5TdHJpbmdzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi91dGlscy9taXhpbkRlZXAnO1xuaW1wb3J0IENvbXBvbmVudFN0eWxlIGZyb20gJy4vQ29tcG9uZW50U3R5bGUnO1xuaW1wb3J0IHsgdXNlU3R5bGVTaGVldCwgdXNlU3R5bGlzIH0gZnJvbSAnLi9TdHlsZVNoZWV0TWFuYWdlcic7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG5jb25zdCBpZGVudGlmaWVycyA9IHt9O1xuXG4vKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJZChkaXNwbGF5TmFtZT86IHN0cmluZywgcGFyZW50Q29tcG9uZW50SWQ/OiBzdHJpbmcpIHtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBkaXNwbGF5TmFtZSAhPT0gJ3N0cmluZycgPyAnc2MnIDogZXNjYXBlKGRpc3BsYXlOYW1lKTtcbiAgLy8gRW5zdXJlIHRoYXQgbm8gZGlzcGxheU5hbWUgY2FuIGxlYWQgdG8gZHVwbGljYXRlIGNvbXBvbmVudElkc1xuICBpZGVudGlmaWVyc1tuYW1lXSA9IChpZGVudGlmaWVyc1tuYW1lXSB8fCAwKSArIDE7XG5cbiAgY29uc3QgY29tcG9uZW50SWQgPSBgJHtuYW1lfS0ke2dlbmVyYXRlQ29tcG9uZW50SWQoXG4gICAgLy8gU0NfVkVSU0lPTiBnaXZlcyB1cyBpc29sYXRpb24gYmV0d2VlbiBtdWx0aXBsZSBydW50aW1lcyBvbiB0aGUgcGFnZSBhdCBvbmNlXG4gICAgLy8gdGhpcyBpcyBpbXByb3ZlZCBmdXJ0aGVyIHdpdGggdXNlIG9mIHRoZSBiYWJlbCBwbHVnaW4gXCJuYW1lc3BhY2VcIiBmZWF0dXJlXG4gICAgU0NfVkVSU0lPTiArIG5hbWUgKyBpZGVudGlmaWVyc1tuYW1lXVxuICApfWA7XG5cbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudElkID8gYCR7cGFyZW50Q29tcG9uZW50SWR9LSR7Y29tcG9uZW50SWR9YCA6IGNvbXBvbmVudElkO1xufVxuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZEF0dHJzPENvbmZpZz4odGhlbWU6IGFueSA9IEVNUFRZX09CSkVDVCwgcHJvcHM6IENvbmZpZywgYXR0cnM6IEF0dHJzKSB7XG4gIC8vIE5PVEU6IGNhbid0IG1lbW9pemUgdGhpc1xuICAvLyByZXR1cm5zIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXVxuICAvLyB3aGVyZSByZXNvbHZlZEF0dHJzIGlzIG9ubHkgdGhlIHRoaW5ncyBpbmplY3RlZCBieSB0aGUgYXR0cnMgdGhlbXNlbHZlc1xuICBjb25zdCBjb250ZXh0ID0geyAuLi5wcm9wcywgdGhlbWUgfTtcbiAgY29uc3QgcmVzb2x2ZWRBdHRycyA9IHt9O1xuXG4gIGF0dHJzLmZvckVhY2goYXR0ckRlZiA9PiB7XG4gICAgbGV0IHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgbGV0IGtleTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgIHJlc29sdmVkQXR0ckRlZiA9IHJlc29sdmVkQXR0ckRlZihjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgIGNvbnRleHRba2V5XSA9IHJlc29sdmVkQXR0cnNba2V5XSA9XG4gICAgICAgIGtleSA9PT0gJ2NsYXNzTmFtZSdcbiAgICAgICAgICA/IGpvaW5TdHJpbmdzKHJlc29sdmVkQXR0cnNba2V5XSwgcmVzb2x2ZWRBdHRyRGVmW2tleV0pXG4gICAgICAgICAgOiByZXNvbHZlZEF0dHJEZWZba2V5XTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgfSk7XG5cbiAgcmV0dXJuIFtjb250ZXh0LCByZXNvbHZlZEF0dHJzXTtcbn1cblxuZnVuY3Rpb24gdXNlSW5qZWN0ZWRTdHlsZTxUPihcbiAgY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlLFxuICBpc1N0YXRpYzogYm9vbGVhbixcbiAgcmVzb2x2ZWRBdHRyczogVCxcbiAgd2FyblRvb01hbnlDbGFzc2VzPzogJENhbGw8dHlwZW9mIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3Nlcywgc3RyaW5nLCBzdHJpbmc+XG4pIHtcbiAgY29uc3Qgc3R5bGVTaGVldCA9IHVzZVN0eWxlU2hlZXQoKTtcbiAgY29uc3Qgc3R5bGlzID0gdXNlU3R5bGlzKCk7XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gaXNTdGF0aWNcbiAgICA/IGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgc3R5bGVTaGVldCwgc3R5bGlzKVxuICAgIDogY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMocmVzb2x2ZWRBdHRycywgc3R5bGVTaGVldCwgc3R5bGlzKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoY2xhc3NOYW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNTdGF0aWMgJiYgd2FyblRvb01hbnlDbGFzc2VzKSB7XG4gICAgd2FyblRvb01hbnlDbGFzc2VzKGNsYXNzTmFtZSk7XG4gIH1cblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5mdW5jdGlvbiB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFxuICBmb3J3YXJkZWRDb21wb25lbnQ6IElTdHlsZWRDb21wb25lbnQsXG4gIHByb3BzOiBPYmplY3QsXG4gIGZvcndhcmRlZFJlZjogUmVmPGFueT4sXG4gIGlzU3RhdGljOiBib29sZWFuXG4pIHtcbiAgY29uc3Qge1xuICAgIGF0dHJzOiBjb21wb25lbnRBdHRycyxcbiAgICBjb21wb25lbnRTdHlsZSxcbiAgICBkZWZhdWx0UHJvcHMsXG4gICAgZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgIHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgIHRhcmdldCxcbiAgfSA9IGZvcndhcmRlZENvbXBvbmVudDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHVzZURlYnVnVmFsdWUoc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8vIE5PVEU6IHRoZSBub24taG9va3MgdmVyc2lvbiBvbmx5IHN1YnNjcmliZXMgdG8gdGhpcyB3aGVuICFjb21wb25lbnRTdHlsZS5pc1N0YXRpYyxcbiAgLy8gYnV0IHRoYXQnZCBiZSBhZ2FpbnN0IHRoZSBydWxlcy1vZi1ob29rcy4gV2UgY291bGQgYmUgbmF1Z2h0eSBhbmQgZG8gaXQgYW55d2F5IGFzIGl0XG4gIC8vIHNob3VsZCBiZSBhbiBpbW11dGFibGUgdmFsdWUsIGJ1dCBiZWhhdmUgZm9yIG5vdy5cbiAgY29uc3QgdGhlbWUgPSBkZXRlcm1pbmVUaGVtZShwcm9wcywgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpLCBkZWZhdWx0UHJvcHMpO1xuXG4gIGNvbnN0IFtjb250ZXh0LCBhdHRyc10gPSB1c2VSZXNvbHZlZEF0dHJzKHRoZW1lIHx8IEVNUFRZX09CSkVDVCwgcHJvcHMsIGNvbXBvbmVudEF0dHJzKTtcblxuICBjb25zdCBnZW5lcmF0ZWRDbGFzc05hbWUgPSB1c2VJbmplY3RlZFN0eWxlKFxuICAgIGNvbXBvbmVudFN0eWxlLFxuICAgIGlzU3RhdGljLFxuICAgIGNvbnRleHQsXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZvcndhcmRlZENvbXBvbmVudC53YXJuVG9vTWFueUNsYXNzZXMgOiB1bmRlZmluZWRcbiAgKTtcblxuICBjb25zdCByZWZUb0ZvcndhcmQgPSBmb3J3YXJkZWRSZWY7XG5cbiAgY29uc3QgZWxlbWVudFRvQmVDcmVhdGVkOiBUYXJnZXQgPSBhdHRycy4kYXMgfHwgcHJvcHMuJGFzIHx8IGF0dHJzLmFzIHx8IHByb3BzLmFzIHx8IHRhcmdldDtcblxuICBjb25zdCBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gIGNvbnN0IGNvbXB1dGVkUHJvcHMgPSBhdHRycyAhPT0gcHJvcHMgPyB7IC4uLnByb3BzLCAuLi5hdHRycyB9IDogcHJvcHM7XG4gIGNvbnN0IHByb3BzRm9yRWxlbWVudCA9IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZEFzJykge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LmFzID0gY29tcHV0ZWRQcm9wc1trZXldO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcFxuICAgICAgICA/IHNob3VsZEZvcndhcmRQcm9wKGtleSwgdmFsaWRBdHRyLCBlbGVtZW50VG9CZUNyZWF0ZWQpXG4gICAgICAgIDogaXNUYXJnZXRUYWdcbiAgICAgICAgPyB2YWxpZEF0dHIoa2V5KVxuICAgICAgICA6IHRydWVcbiAgICApIHtcbiAgICAgIC8vIERvbid0IHBhc3MgdGhyb3VnaCBub24gSFRNTCB0YWdzIHRocm91Z2ggdG8gSFRNTCBlbGVtZW50c1xuICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3BzLnN0eWxlICYmIGF0dHJzLnN0eWxlICE9PSBwcm9wcy5zdHlsZSkge1xuICAgIHByb3BzRm9yRWxlbWVudC5zdHlsZSA9IHsgLi4ucHJvcHMuc3R5bGUsIC4uLmF0dHJzLnN0eWxlIH07XG4gIH1cblxuICBwcm9wc0ZvckVsZW1lbnQuY2xhc3NOYW1lID0gQXJyYXkucHJvdG90eXBlXG4gICAgLmNvbmNhdChcbiAgICAgIGZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkLFxuICAgICAgZ2VuZXJhdGVkQ2xhc3NOYW1lICE9PSBzdHlsZWRDb21wb25lbnRJZCA/IGdlbmVyYXRlZENsYXNzTmFtZSA6IG51bGwsXG4gICAgICBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBhdHRycy5jbGFzc05hbWVcbiAgICApXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5qb2luKCcgJyk7XG5cbiAgcHJvcHNGb3JFbGVtZW50LnJlZiA9IHJlZlRvRm9yd2FyZDtcblxuICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudChcbiAgdGFyZ2V0OiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPixcbiAgb3B0aW9uczoge1xuICAgIGF0dHJzPzogQXR0cnMsXG4gICAgY29tcG9uZW50SWQ6IHN0cmluZyxcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZyxcbiAgICBwYXJlbnRDb21wb25lbnRJZD86IHN0cmluZyxcbiAgICBzaG91bGRGb3J3YXJkUHJvcD86IFNob3VsZEZvcndhcmRQcm9wLFxuICB9LFxuICBydWxlczogUnVsZVNldFxuKSB7XG4gIGNvbnN0IGlzVGFyZ2V0U3R5bGVkQ29tcCA9IGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCk7XG4gIGNvbnN0IGlzQ29tcG9zaXRlQ29tcG9uZW50ID0gIWlzVGFnKHRhcmdldCk7XG5cbiAgY29uc3Qge1xuICAgIGF0dHJzID0gRU1QVFlfQVJSQVksXG4gICAgY29tcG9uZW50SWQgPSBnZW5lcmF0ZUlkKG9wdGlvbnMuZGlzcGxheU5hbWUsIG9wdGlvbnMucGFyZW50Q29tcG9uZW50SWQpLFxuICAgIGRpc3BsYXlOYW1lID0gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBzdHlsZWRDb21wb25lbnRJZCA9XG4gICAgb3B0aW9ucy5kaXNwbGF5TmFtZSAmJiBvcHRpb25zLmNvbXBvbmVudElkXG4gICAgICA/IGAke2VzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKX0tJHtvcHRpb25zLmNvbXBvbmVudElkfWBcbiAgICAgIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICBjb25zdCBmaW5hbEF0dHJzID1cbiAgICBpc1RhcmdldFN0eWxlZENvbXAgJiYgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzXG4gICAgICA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQoKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pXG4gICAgICA6IGF0dHJzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICBsZXQgc2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChpc1RhcmdldFN0eWxlZENvbXAgJiYgdGFyZ2V0LnNob3VsZEZvcndhcmRQcm9wKSB7XG4gICAgaWYgKG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3ApIHtcbiAgICAgIC8vIGNvbXBvc2UgbmVzdGVkIHNob3VsZEZvcndhcmRQcm9wIGNhbGxzXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wLCBmaWx0ZXJGbiwgZWxlbWVudFRvQmVDcmVhdGVkKSA9PlxuICAgICAgICAoKCgodGFyZ2V0OiBhbnkpOiBJU3R5bGVkQ29tcG9uZW50KS5zaG91bGRGb3J3YXJkUHJvcDogYW55KTogU2hvdWxkRm9yd2FyZFByb3ApKFxuICAgICAgICAgIHByb3AsXG4gICAgICAgICAgZmlsdGVyRm4sXG4gICAgICAgICAgZWxlbWVudFRvQmVDcmVhdGVkXG4gICAgICAgICkgJiZcbiAgICAgICAgKChvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wOiBhbnkpOiBTaG91bGRGb3J3YXJkUHJvcCkocHJvcCwgZmlsdGVyRm4sIGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3AgPSAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoXG4gICAgcnVsZXMsXG4gICAgc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgaXNUYXJnZXRTdHlsZWRDb21wID8gKCh0YXJnZXQ6IE9iamVjdCkuY29tcG9uZW50U3R5bGU6IENvbXBvbmVudFN0eWxlKSA6IHVuZGVmaW5lZFxuICApO1xuXG4gIC8vIHN0YXRpY2FsbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG4gIGNvbnN0IGlzU3RhdGljID0gY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgYXR0cnMubGVuZ3RoID09PSAwO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIGxldCBXcmFwcGVkU3R5bGVkQ29tcG9uZW50OiBJU3R5bGVkQ29tcG9uZW50O1xuXG4gIGNvbnN0IGZvcndhcmRSZWYgPSAocHJvcHMsIHJlZikgPT5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB1c2VTdHlsZWRDb21wb25lbnRJbXBsKFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIHByb3BzLCByZWYsIGlzU3RhdGljKTtcblxuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudCA9ICgoUmVhY3QuZm9yd2FyZFJlZihmb3J3YXJkUmVmKTogYW55KTogSVN0eWxlZENvbXBvbmVudCk7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuYXR0cnMgPSBmaW5hbEF0dHJzO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5zaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIC8vIHRoaXMgc3RhdGljIGlzIHVzZWQgdG8gcHJlc2VydmUgdGhlIGNhc2NhZGUgb2Ygc3RhdGljIGNsYXNzZXMgZm9yIGNvbXBvbmVudCBzZWxlY3RvclxuICAvLyBwdXJwb3NlczsgdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCB3aXRoIHVzYWdlIG9mIHRoZSBjc3MgcHJvcFxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcFxuICAgID8gQXJyYXkucHJvdG90eXBlLmNvbmNhdChcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgICAgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLnN0eWxlZENvbXBvbmVudElkXG4gICAgICApXG4gICAgOiBFTVBUWV9BUlJBWTtcblxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudGFyZ2V0ID0gaXNUYXJnZXRTdHlsZWRDb21wXG4gICAgPyAoKHRhcmdldDogYW55KTogSVN0eWxlZENvbXBvbmVudCkudGFyZ2V0XG4gICAgOiB0YXJnZXQ7XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWc6IFRhcmdldCkge1xuICAgIGNvbnN0IHsgY29tcG9uZW50SWQ6IHByZXZpb3VzQ29tcG9uZW50SWQsIC4uLm9wdGlvbnNUb0NvcHkgfSA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBuZXdDb21wb25lbnRJZCA9XG4gICAgICBwcmV2aW91c0NvbXBvbmVudElkICYmXG4gICAgICBgJHtwcmV2aW91c0NvbXBvbmVudElkfS0ke2lzVGFnKHRhZykgPyB0YWcgOiBlc2NhcGUoZ2V0Q29tcG9uZW50TmFtZSh0YWcpKX1gO1xuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIC4uLm9wdGlvbnNUb0NvcHksXG4gICAgICBhdHRyczogZmluYWxBdHRycyxcbiAgICAgIGNvbXBvbmVudElkOiBuZXdDb21wb25lbnRJZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YWcsIG5ld09wdGlvbnMsIHJ1bGVzKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzO1xuICAgIH0sXG5cbiAgICBzZXQob2JqKSB7XG4gICAgICB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHMgPSBpc1RhcmdldFN0eWxlZENvbXBcbiAgICAgICAgPyBtZXJnZSh7fSwgKCh0YXJnZXQ6IGFueSk6IElTdHlsZWRDb21wb25lbnQpLmRlZmF1bHRQcm9wcywgb2JqKVxuICAgICAgICA6IG9iajtcbiAgICB9LFxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrRHluYW1pY0NyZWF0aW9uKGRpc3BsYXlOYW1lLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgc3R5bGVkQ29tcG9uZW50SWRcbiAgICApO1xuICB9XG5cbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50b1N0cmluZyA9ICgpID0+IGAuJHtXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkfWA7XG5cbiAgaWYgKGlzQ29tcG9zaXRlQ29tcG9uZW50KSB7XG4gICAgaG9pc3Q8XG4gICAgICBJU3R5bGVkU3RhdGljcyxcbiAgICAgICRQcm9wZXJ0eVR5cGU8SVN0eWxlZENvbXBvbmVudCwgJ3RhcmdldCc+LFxuICAgICAgeyBba2V5OiAkS2V5czxJU3R5bGVkU3RhdGljcz5dOiB0cnVlIH1cbiAgICA+KFdyYXBwZWRTdHlsZWRDb21wb25lbnQsICgodGFyZ2V0OiBhbnkpOiAkUHJvcGVydHlUeXBlPElTdHlsZWRDb21wb25lbnQsICd0YXJnZXQnPiksIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogdHJ1ZSxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkOiB0cnVlLFxuICAgICAgdGFyZ2V0OiB0cnVlLFxuICAgICAgd2l0aENvbXBvbmVudDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgSVN0eWxlZENvbXBvbmVudCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRDb21wb25lbnROYW1lIGZyb20gJy4vZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgaXNUYWcgZnJvbSAnLi9pc1RhZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlRGlzcGxheU5hbWUoXG4gIHRhcmdldDogJFByb3BlcnR5VHlwZTxJU3R5bGVkQ29tcG9uZW50LCAndGFyZ2V0Jz5cbik6IHN0cmluZyB7XG4gIHJldHVybiBpc1RhZyh0YXJnZXQpID8gYHN0eWxlZC4ke3RhcmdldH1gIDogYFN0eWxlZCgke2dldENvbXBvbmVudE5hbWUodGFyZ2V0KX0pYDtcbn1cbiIsIi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGpvaW5pbmcgc3RyaW5ncyB0byBmb3JtIGNsYXNzTmFtZSBjaGFpbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gam9pblN0cmluZ3MoYTogP1N0cmluZywgYjogP1N0cmluZyk6ID9TdHJpbmcge1xuICByZXR1cm4gYSAmJiBiID8gYCR7YX0gJHtifWAgOiBhIHx8IGI7XG59XG4iLCIvLyBAZmxvd1xuLy8gVGhhbmtzIHRvIFJlYWN0RE9NRmFjdG9yaWVzIGZvciB0aGlzIGhhbmR5IGxpc3QhXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgJ2EnLFxuICAnYWJicicsXG4gICdhZGRyZXNzJyxcbiAgJ2FyZWEnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdhdWRpbycsXG4gICdiJyxcbiAgJ2Jhc2UnLFxuICAnYmRpJyxcbiAgJ2JkbycsXG4gICdiaWcnLFxuICAnYmxvY2txdW90ZScsXG4gICdib2R5JyxcbiAgJ2JyJyxcbiAgJ2J1dHRvbicsXG4gICdjYW52YXMnLFxuICAnY2FwdGlvbicsXG4gICdjaXRlJyxcbiAgJ2NvZGUnLFxuICAnY29sJyxcbiAgJ2NvbGdyb3VwJyxcbiAgJ2RhdGEnLFxuICAnZGF0YWxpc3QnLFxuICAnZGQnLFxuICAnZGVsJyxcbiAgJ2RldGFpbHMnLFxuICAnZGZuJyxcbiAgJ2RpYWxvZycsXG4gICdkaXYnLFxuICAnZGwnLFxuICAnZHQnLFxuICAnZW0nLFxuICAnZW1iZWQnLFxuICAnZmllbGRzZXQnLFxuICAnZmlnY2FwdGlvbicsXG4gICdmaWd1cmUnLFxuICAnZm9vdGVyJyxcbiAgJ2Zvcm0nLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdoZWFkZXInLFxuICAnaGdyb3VwJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaScsXG4gICdpZnJhbWUnLFxuICAnaW1nJyxcbiAgJ2lucHV0JyxcbiAgJ2lucycsXG4gICdrYmQnLFxuICAna2V5Z2VuJyxcbiAgJ2xhYmVsJyxcbiAgJ2xlZ2VuZCcsXG4gICdsaScsXG4gICdsaW5rJyxcbiAgJ21haW4nLFxuICAnbWFwJyxcbiAgJ21hcmsnLFxuICAnbWFycXVlZScsXG4gICdtZW51JyxcbiAgJ21lbnVpdGVtJyxcbiAgJ21ldGEnLFxuICAnbWV0ZXInLFxuICAnbmF2JyxcbiAgJ25vc2NyaXB0JyxcbiAgJ29iamVjdCcsXG4gICdvbCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAnb3V0cHV0JyxcbiAgJ3AnLFxuICAncGFyYW0nLFxuICAncGljdHVyZScsXG4gICdwcmUnLFxuICAncHJvZ3Jlc3MnLFxuICAncScsXG4gICdycCcsXG4gICdydCcsXG4gICdydWJ5JyxcbiAgJ3MnLFxuICAnc2FtcCcsXG4gICdzY3JpcHQnLFxuICAnc2VjdGlvbicsXG4gICdzZWxlY3QnLFxuICAnc21hbGwnLFxuICAnc291cmNlJyxcbiAgJ3NwYW4nLFxuICAnc3Ryb25nJyxcbiAgJ3N0eWxlJyxcbiAgJ3N1YicsXG4gICdzdW1tYXJ5JyxcbiAgJ3N1cCcsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0ZXh0YXJlYScsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aW1lJyxcbiAgJ3RpdGxlJyxcbiAgJ3RyJyxcbiAgJ3RyYWNrJyxcbiAgJ3UnLFxuICAndWwnLFxuICAndmFyJyxcbiAgJ3ZpZGVvJyxcbiAgJ3dicicsXG5cbiAgLy8gU1ZHXG4gICdjaXJjbGUnLFxuICAnY2xpcFBhdGgnLFxuICAnZGVmcycsXG4gICdlbGxpcHNlJyxcbiAgJ2ZvcmVpZ25PYmplY3QnLFxuICAnZycsXG4gICdpbWFnZScsXG4gICdsaW5lJyxcbiAgJ2xpbmVhckdyYWRpZW50JyxcbiAgJ21hcmtlcicsXG4gICdtYXNrJyxcbiAgJ3BhdGgnLFxuICAncGF0dGVybicsXG4gICdwb2x5Z29uJyxcbiAgJ3BvbHlsaW5lJyxcbiAgJ3JhZGlhbEdyYWRpZW50JyxcbiAgJ3JlY3QnLFxuICAnc3RvcCcsXG4gICdzdmcnLFxuICAndGV4dCcsXG4gICd0ZXh0UGF0aCcsXG4gICd0c3BhbicsXG5dO1xuIiwiLy8gQGZsb3dcbmltcG9ydCBjb25zdHJ1Y3RXaXRoT3B0aW9ucyBmcm9tICcuL2NvbnN0cnVjdFdpdGhPcHRpb25zJztcbmltcG9ydCBTdHlsZWRDb21wb25lbnQgZnJvbSAnLi4vbW9kZWxzL1N0eWxlZENvbXBvbmVudCc7XG5pbXBvcnQgZG9tRWxlbWVudHMgZnJvbSAnLi4vdXRpbHMvZG9tRWxlbWVudHMnO1xuXG5pbXBvcnQgdHlwZSB7IFRhcmdldCB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3Qgc3R5bGVkID0gKHRhZzogVGFyZ2V0KSA9PiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhTdHlsZWRDb21wb25lbnQsIHRhZyk7XG5cbi8vIFNob3J0aGFuZHMgZm9yIGFsbCB2YWxpZCBIVE1MIEVsZW1lbnRzXG5kb21FbGVtZW50cy5mb3JFYWNoKGRvbUVsZW1lbnQgPT4ge1xuICBzdHlsZWRbZG9tRWxlbWVudF0gPSBzdHlsZWQoZG9tRWxlbWVudCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBjc3MgZnJvbSAnLi9jc3MnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IHsgRU1QVFlfT0JKRUNUIH0gZnJvbSAnLi4vdXRpbHMvZW1wdGllcyc7XG5cbmltcG9ydCB0eXBlIHsgVGFyZ2V0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhcbiAgY29tcG9uZW50Q29uc3RydWN0b3I6IEZ1bmN0aW9uLFxuICB0YWc6IFRhcmdldCxcbiAgb3B0aW9uczogT2JqZWN0ID0gRU1QVFlfT0JKRUNUXG4pIHtcbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDEsIFN0cmluZyh0YWcpKTtcbiAgfVxuXG4gIC8qIFRoaXMgaXMgY2FsbGFibGUgZGlyZWN0bHkgYXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiAqL1xuICAvLyAkRmxvd0ZpeE1lOiBOb3QgdHlwZWQgdG8gYXZvaWQgZGVzdHJ1Y3R1cmluZyBhcmd1bWVudHNcbiAgY29uc3QgdGVtcGxhdGVGdW5jdGlvbiA9ICguLi5hcmdzKSA9PiBjb21wb25lbnRDb25zdHJ1Y3Rvcih0YWcsIG9wdGlvbnMsIGNzcyguLi5hcmdzKSk7XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBjb25maWcgPT5cbiAgICBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCB7IC4uLm9wdGlvbnMsIC4uLmNvbmZpZyB9KTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBhdHRycyA9PlxuICAgIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBhdHRyczogQXJyYXkucHJvdG90eXBlLmNvbmNhdChvcHRpb25zLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pLFxuICAgIH0pO1xuXG4gIHJldHVybiB0ZW1wbGF0ZUZ1bmN0aW9uO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCB0eXBlIHsgUnVsZVNldCwgU3RyaW5naWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuLi91dGlscy9mbGF0dGVuJztcbmltcG9ydCBpc1N0YXRpY1J1bGVzIGZyb20gJy4uL3V0aWxzL2lzU3RhdGljUnVsZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbG9iYWxTdHlsZSB7XG4gIGNvbXBvbmVudElkOiBzdHJpbmc7XG5cbiAgaXNTdGF0aWM6IGJvb2xlYW47XG5cbiAgcnVsZXM6IFJ1bGVTZXQ7XG5cbiAgY29uc3RydWN0b3IocnVsZXM6IFJ1bGVTZXQsIGNvbXBvbmVudElkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBpc1N0YXRpY1J1bGVzKHJ1bGVzKTtcblxuICAgIC8vIHByZS1yZWdpc3RlciB0aGUgZmlyc3QgaW5zdGFuY2UgdG8gZW5zdXJlIGdsb2JhbCBzdHlsZXNcbiAgICAvLyBsb2FkIGJlZm9yZSBjb21wb25lbnQgb25lc1xuICAgIFN0eWxlU2hlZXQucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkICsgMSk7XG4gIH1cblxuICBjcmVhdGVTdHlsZXMoXG4gICAgaW5zdGFuY2U6IG51bWJlcixcbiAgICBleGVjdXRpb25Db250ZXh0OiBPYmplY3QsXG4gICAgc3R5bGVTaGVldDogU3R5bGVTaGVldCxcbiAgICBzdHlsaXM6IFN0cmluZ2lmaWVyXG4gICkge1xuICAgIGNvbnN0IGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQsIHN0eWxpcyk7XG4gICAgY29uc3QgY3NzID0gc3R5bGlzKGZsYXRDU1Muam9pbignJyksICcnKTtcbiAgICBjb25zdCBpZCA9IHRoaXMuY29tcG9uZW50SWQgKyBpbnN0YW5jZTtcblxuICAgIC8vIE5PVEU6IFdlIHVzZSB0aGUgaWQgYXMgYSBuYW1lIGFzIHdlbGwsIHNpbmNlIHRoZXNlIHJ1bGVzIG5ldmVyIGNoYW5nZVxuICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZXMoaWQsIGlkLCBjc3MpO1xuICB9XG5cbiAgcmVtb3ZlU3R5bGVzKGluc3RhbmNlOiBudW1iZXIsIHN0eWxlU2hlZXQ6IFN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZVNoZWV0LmNsZWFyUnVsZXModGhpcy5jb21wb25lbnRJZCArIGluc3RhbmNlKTtcbiAgfVxuXG4gIHJlbmRlclN0eWxlcyhcbiAgICBpbnN0YW5jZTogbnVtYmVyLFxuICAgIGV4ZWN1dGlvbkNvbnRleHQ6IE9iamVjdCxcbiAgICBzdHlsZVNoZWV0OiBTdHlsZVNoZWV0LFxuICAgIHN0eWxpczogU3RyaW5naWZpZXJcbiAgKSB7XG4gICAgaWYgKGluc3RhbmNlID4gMikgU3R5bGVTaGVldC5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQgKyBpbnN0YW5jZSk7XG5cbiAgICAvLyBOT1RFOiBSZW1vdmUgb2xkIHN0eWxlcywgdGhlbiBpbmplY3QgdGhlIG5ldyBvbmVzXG4gICAgdGhpcy5yZW1vdmVTdHlsZXMoaW5zdGFuY2UsIHN0eWxlU2hlZXQpO1xuICAgIHRoaXMuY3JlYXRlU3R5bGVzKGluc3RhbmNlLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU1RBVElDX0VYRUNVVElPTl9DT05URVhUIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBHbG9iYWxTdHlsZSBmcm9tICcuLi9tb2RlbHMvR2xvYmFsU3R5bGUnO1xuaW1wb3J0IHsgdXNlU3R5bGVTaGVldCwgdXNlU3R5bGlzIH0gZnJvbSAnLi4vbW9kZWxzL1N0eWxlU2hlZXRNYW5hZ2VyJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJy4uL21vZGVscy9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCB0eXBlIHsgSW50ZXJwb2xhdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNoZWNrRHluYW1pY0NyZWF0aW9uIH0gZnJvbSAnLi4vdXRpbHMvY2hlY2tEeW5hbWljQ3JlYXRpb24nO1xuaW1wb3J0IGRldGVybWluZVRoZW1lIGZyb20gJy4uL3V0aWxzL2RldGVybWluZVRoZW1lJztcbmltcG9ydCBnZW5lcmF0ZUNvbXBvbmVudElkIGZyb20gJy4uL3V0aWxzL2dlbmVyYXRlQ29tcG9uZW50SWQnO1xuaW1wb3J0IGNzcyBmcm9tICcuL2Nzcyc7XG5cbmRlY2xhcmUgdmFyIF9fU0VSVkVSX186IGJvb2xlYW47XG5cbnR5cGUgR2xvYmFsU3R5bGVDb21wb25lbnRQcm9wc1R5cGUgPSBPYmplY3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdsb2JhbFN0eWxlKFxuICBzdHJpbmdzOiBBcnJheTxzdHJpbmc+LFxuICAuLi5pbnRlcnBvbGF0aW9uczogQXJyYXk8SW50ZXJwb2xhdGlvbj5cbikge1xuICBjb25zdCBydWxlcyA9IGNzcyhzdHJpbmdzLCAuLi5pbnRlcnBvbGF0aW9ucyk7XG4gIGNvbnN0IHN0eWxlZENvbXBvbmVudElkID0gYHNjLWdsb2JhbC0ke2dlbmVyYXRlQ29tcG9uZW50SWQoSlNPTi5zdHJpbmdpZnkocnVsZXMpKX1gO1xuICBjb25zdCBnbG9iYWxTdHlsZSA9IG5ldyBHbG9iYWxTdHlsZShydWxlcywgc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tEeW5hbWljQ3JlYXRpb24oc3R5bGVkQ29tcG9uZW50SWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2xvYmFsU3R5bGVDb21wb25lbnQocHJvcHM6IEdsb2JhbFN0eWxlQ29tcG9uZW50UHJvcHNUeXBlKSB7XG4gICAgY29uc3Qgc3R5bGVTaGVldCA9IHVzZVN0eWxlU2hlZXQoKTtcbiAgICBjb25zdCBzdHlsaXMgPSB1c2VTdHlsaXMoKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICBjb25zdCBpbnN0YW5jZVJlZiA9IHVzZVJlZihzdHlsZVNoZWV0LmFsbG9jYXRlR1NJbnN0YW5jZShzdHlsZWRDb21wb25lbnRJZCkpO1xuXG4gICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuQ2hpbGRyZW4uY291bnQocHJvcHMuY2hpbGRyZW4pKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgJHtzdHlsZWRDb21wb25lbnRJZH0gd2FzIGdpdmVuIGNoaWxkIEpTWC4gY3JlYXRlR2xvYmFsU3R5bGUgZG9lcyBub3QgcmVuZGVyIGNoaWxkcmVuLmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcnVsZXMuc29tZShydWxlID0+IHR5cGVvZiBydWxlID09PSAnc3RyaW5nJyAmJiBydWxlLmluZGV4T2YoJ0BpbXBvcnQnKSAhPT0gLTEpXG4gICAgKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgUGxlYXNlIGRvIG5vdCB1c2UgQGltcG9ydCBDU1Mgc3ludGF4IGluIGNyZWF0ZUdsb2JhbFN0eWxlIGF0IHRoaXMgdGltZSwgYXMgdGhlIENTU09NIEFQSXMgd2UgdXNlIGluIHByb2R1Y3Rpb24gZG8gbm90IGhhbmRsZSBpdCB3ZWxsLiBJbnN0ZWFkLCB3ZSByZWNvbW1lbmQgdXNpbmcgYSBsaWJyYXJ5IHN1Y2ggYXMgcmVhY3QtaGVsbWV0IHRvIGluamVjdCBhIHR5cGljYWwgPGxpbms+IG1ldGEgdGFnIHRvIHRoZSBzdHlsZXNoZWV0LCBvciBzaW1wbHkgZW1iZWRkaW5nIGl0IG1hbnVhbGx5IGluIHlvdXIgaW5kZXguaHRtbCA8aGVhZD4gc2VjdGlvbiBmb3IgYSBzaW1wbGVyIGFwcC5gXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChzdHlsZVNoZWV0LnNlcnZlcikge1xuICAgICAgcmVuZGVyU3R5bGVzKGluc3RhbmNlLCBwcm9wcywgc3R5bGVTaGVldCwgdGhlbWUsIHN0eWxpcyk7XG4gICAgfVxuXG4gICAgaWYgKCFfX1NFUlZFUl9fKSB7XG4gICAgICAvLyB0aGlzIGNvbmRpdGlvbmFsIGlzIGZpbmUgYmVjYXVzZSBpdCBpcyBjb21waWxlZCBhd2F5IGZvciB0aGUgcmVsZXZhbnQgYnVpbGRzIGR1cmluZyBtaW5pZmljYXRpb24sXG4gICAgICAvLyByZXN1bHRpbmcgaW4gYSBzaW5nbGUgdW5ndWFyZGVkIGhvb2sgY2FsbFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXN0eWxlU2hlZXQuc2VydmVyKSB7XG4gICAgICAgICAgcmVuZGVyU3R5bGVzKGluc3RhbmNlLCBwcm9wcywgc3R5bGVTaGVldCwgdGhlbWUsIHN0eWxpcyk7XG4gICAgICAgICAgcmV0dXJuICgpID0+IGdsb2JhbFN0eWxlLnJlbW92ZVN0eWxlcyhpbnN0YW5jZSwgc3R5bGVTaGVldCk7XG4gICAgICAgIH1cbiAgICAgIH0sIFtpbnN0YW5jZSwgcHJvcHMsIHN0eWxlU2hlZXQsIHRoZW1lLCBzdHlsaXNdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlclN0eWxlcyhpbnN0YW5jZSwgcHJvcHMsIHN0eWxlU2hlZXQsIHRoZW1lLCBzdHlsaXMpIHtcbiAgICBpZiAoZ2xvYmFsU3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhpbnN0YW5jZSwgU1RBVElDX0VYRUNVVElPTl9DT05URVhULCBzdHlsZVNoZWV0LCBzdHlsaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgdGhlbWU6IGRldGVybWluZVRoZW1lKHByb3BzLCB0aGVtZSwgR2xvYmFsU3R5bGVDb21wb25lbnQuZGVmYXVsdFByb3BzKSxcbiAgICAgIH07XG5cbiAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhpbnN0YW5jZSwgY29udGV4dCwgc3R5bGVTaGVldCwgc3R5bGlzKTtcbiAgICB9XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiBSZWFjdC5tZW1vKEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBjc3MgZnJvbSAnLi9jc3MnO1xuaW1wb3J0IGdlbmVyYXRlQ29tcG9uZW50SWQgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVDb21wb25lbnRJZCc7XG5pbXBvcnQgS2V5ZnJhbWVzIGZyb20gJy4uL21vZGVscy9LZXlmcmFtZXMnO1xuXG5pbXBvcnQgdHlwZSB7IEludGVycG9sYXRpb24sIFN0eWxlcyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2V5ZnJhbWVzKFxuICBzdHJpbmdzOiBTdHlsZXMsXG4gIC4uLmludGVycG9sYXRpb25zOiBBcnJheTxJbnRlcnBvbGF0aW9uPlxuKTogS2V5ZnJhbWVzIHtcbiAgLyogV2FybmluZyBpZiB5b3UndmUgdXNlZCBrZXlmcmFtZXMgb24gUmVhY3QgTmF0aXZlICovXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJ1xuICApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJ1bGVzID0gY3NzKHN0cmluZ3MsIC4uLmludGVycG9sYXRpb25zKS5qb2luKCcnKTtcbiAgY29uc3QgbmFtZSA9IGdlbmVyYXRlQ29tcG9uZW50SWQocnVsZXMpO1xuICByZXR1cm4gbmV3IEtleWZyYW1lcyhuYW1lLCBydWxlcyk7XG59XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJU19CUk9XU0VSLCBTQ19BVFRSLCBTQ19BVFRSX1ZFUlNJT04sIFNDX1ZFUlNJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHRocm93U3R5bGVkRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IGdldE5vbmNlIGZyb20gJy4uL3V0aWxzL25vbmNlJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL3NoZWV0JztcbmltcG9ydCBTdHlsZVNoZWV0TWFuYWdlciBmcm9tICcuL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZGVjbGFyZSB2YXIgX19TRVJWRVJfXzogYm9vbGVhbjtcblxuY29uc3QgQ0xPU0lOR19UQUdfUiA9IC9eXFxzKjxcXC9bYS16XS9pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2ZXJTdHlsZVNoZWV0IHtcbiAgaXNTdHJlYW1pbmc6IGJvb2xlYW47XG5cbiAgaW5zdGFuY2U6IFN0eWxlU2hlZXQ7XG5cbiAgc2VhbGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgU3R5bGVTaGVldCh7IGlzU2VydmVyOiB0cnVlIH0pO1xuICAgIHRoaXMuc2VhbGVkID0gZmFsc2U7XG4gIH1cblxuICBfZW1pdFNoZWV0Q1NTID0gKCk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgY3NzID0gdGhpcy5pbnN0YW5jZS50b1N0cmluZygpO1xuICAgIGlmICghY3NzKSByZXR1cm4gJyc7XG5cbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgY29uc3QgYXR0cnMgPSBbbm9uY2UgJiYgYG5vbmNlPVwiJHtub25jZX1cImAsIGAke1NDX0FUVFJ9PVwidHJ1ZVwiYCwgYCR7U0NfQVRUUl9WRVJTSU9OfT1cIiR7U0NfVkVSU0lPTn1cImBdO1xuICAgIGNvbnN0IGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBgPHN0eWxlICR7aHRtbEF0dHJ9PiR7Y3NzfTwvc3R5bGU+YDtcbiAgfTtcblxuICBjb2xsZWN0U3R5bGVzKGNoaWxkcmVuOiBhbnkpIHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiA8U3R5bGVTaGVldE1hbmFnZXIgc2hlZXQ9e3RoaXMuaW5zdGFuY2V9PntjaGlsZHJlbn08L1N0eWxlU2hlZXRNYW5hZ2VyPjtcbiAgfVxuXG4gIGdldFN0eWxlVGFncyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VtaXRTaGVldENTUygpO1xuICB9O1xuXG4gIGdldFN0eWxlRWxlbWVudCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd1N0eWxlZEVycm9yKDIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgW1NDX0FUVFJdOiAnJyxcbiAgICAgIFtTQ19BVFRSX1ZFUlNJT05dOiBTQ19WRVJTSU9OLFxuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiB0aGlzLmluc3RhbmNlLnRvU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICAocHJvcHM6IGFueSkubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyB2NCByZXR1cm5lZCBhbiBhcnJheSBmb3IgdGhpcyBmbiwgc28gd2UnbGwgZG8gdGhlIHNhbWUgZm9yIHY1IGZvciBiYWNrd2FyZCBjb21wYXRcbiAgICByZXR1cm4gWzxzdHlsZSB7Li4ucHJvcHN9IGtleT1cInNjLTAtMFwiIC8+XTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKGlucHV0OiBhbnkpIHtcbiAgICBpZiAoIV9fU0VSVkVSX18gfHwgSVNfQlJPV1NFUikge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHRocm93U3R5bGVkRXJyb3IoMik7XG4gICAgfVxuXG4gICAgaWYgKF9fU0VSVkVSX18pIHtcbiAgICAgIHRoaXMuc2VhbCgpO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgICAgIGNvbnN0IHsgUmVhZGFibGUsIFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbiAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtOiBSZWFkYWJsZSA9IGlucHV0O1xuICAgICAgY29uc3QgeyBpbnN0YW5jZTogc2hlZXQsIF9lbWl0U2hlZXRDU1MgfSA9IHRoaXM7XG5cbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gYXBwZW5kU3R5bGVDaHVua3MoY2h1bmssIC8qIGVuY29kaW5nICovIF8sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBjaHVuayBhbmQgcmV0cmlldmUgdGhlIHNoZWV0J3MgQ1NTIGFzIGFuIEhUTUwgY2h1bmssXG4gICAgICAgICAgLy8gdGhlbiByZXNldCBpdHMgcnVsZXMgc28gd2UgZ2V0IG9ubHkgbmV3IG9uZXMgZm9yIHRoZSBuZXh0IGNodW5rXG4gICAgICAgICAgY29uc3QgcmVuZGVyZWRIdG1sID0gY2h1bmsudG9TdHJpbmcoKTtcbiAgICAgICAgICBjb25zdCBodG1sID0gX2VtaXRTaGVldENTUygpO1xuXG4gICAgICAgICAgc2hlZXQuY2xlYXJUYWcoKTtcblxuICAgICAgICAgIC8vIHByZXBlbmQgc3R5bGUgaHRtbCB0byBjaHVuaywgdW5sZXNzIHRoZSBzdGFydCBvZiB0aGUgY2h1bmsgaXMgYVxuICAgICAgICAgIC8vIGNsb3NpbmcgdGFnIGluIHdoaWNoIGNhc2UgYXBwZW5kIHJpZ2h0IGFmdGVyIHRoYXRcbiAgICAgICAgICBpZiAoQ0xPU0lOR19UQUdfUi50ZXN0KHJlbmRlcmVkSHRtbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mQ2xvc2luZ1RhZyA9IHJlbmRlcmVkSHRtbC5pbmRleE9mKCc+JykgKyAxO1xuICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gcmVuZGVyZWRIdG1sLnNsaWNlKDAsIGVuZE9mQ2xvc2luZ1RhZyk7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IHJlbmRlcmVkSHRtbC5zbGljZShlbmRPZkNsb3NpbmdUYWcpO1xuXG4gICAgICAgICAgICB0aGlzLnB1c2goYmVmb3JlICsgaHRtbCArIGFmdGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXNoKGh0bWwgKyByZW5kZXJlZEh0bWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmVhZGFibGVTdHJlYW0ub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgLy8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHRyYW5zZm9ybSBzdHJlYW1cbiAgICAgICAgdHJhbnNmb3JtZXIuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS5waXBlKHRyYW5zZm9ybWVyKTtcbiAgICB9XG4gIH1cblxuICBzZWFsID0gKCkgPT4ge1xuICAgIHRoaXMuc2VhbGVkID0gdHJ1ZTtcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdHlwZSBBYnN0cmFjdENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi4vbW9kZWxzL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IGRldGVybWluZVRoZW1lIGZyb20gJy4uL3V0aWxzL2RldGVybWluZVRoZW1lJztcbmltcG9ydCBnZXRDb21wb25lbnROYW1lIGZyb20gJy4uL3V0aWxzL2dldENvbXBvbmVudE5hbWUnO1xuXG4vLyBOT1RFOiB0aGlzIHdvdWxkIGJlIHRoZSBjb3JyZWN0IHNpZ25hdHVyZTpcbi8vIGV4cG9ydCBkZWZhdWx0IDxDb25maWc6IHsgdGhlbWU/OiBhbnkgfSwgSW5zdGFuY2U+KFxuLy8gIENvbXBvbmVudDogQWJzdHJhY3RDb21wb25lbnQ8Q29uZmlnLCBJbnN0YW5jZT5cbi8vICk6IEFic3RyYWN0Q29tcG9uZW50PCREaWZmPENvbmZpZywgeyB0aGVtZT86IGFueSB9PiAmIHsgdGhlbWU/OiBhbnkgfSwgSW5zdGFuY2U+XG4vL1xuLy8gYnV0IHRoZSBvbGQgYnVpbGQgc3lzdGVtIHRvb2xpbmcgZG9lc24ndCBzdXBwb3J0IHRoZSBzeW50YXhcblxuZXhwb3J0IGRlZmF1bHQgKENvbXBvbmVudDogQWJzdHJhY3RDb21wb25lbnQ8KiwgKj4pID0+IHtcbiAgLy8gJEZsb3dGaXhNZSBUaGlzIHNob3VsZCBiZSBSZWFjdC5mb3J3YXJkUmVmPENvbmZpZywgSW5zdGFuY2U+XG4gIGNvbnN0IFdpdGhUaGVtZSA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAvLyAkRmxvd0ZpeE1lIGRlZmF1bHRQcm9wcyBpc24ndCBkZWNsYXJlZCBzbyBpdCBjYW4gYmUgaW5mZXJyYWJsZVxuICAgIGNvbnN0IHsgZGVmYXVsdFByb3BzIH0gPSBDb21wb25lbnQ7XG4gICAgY29uc3QgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhlbWVQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbd2l0aFRoZW1lXSBZb3UgYXJlIG5vdCB1c2luZyBhIFRoZW1lUHJvdmlkZXIgbm9yIHBhc3NpbmcgYSB0aGVtZSBwcm9wIG9yIGEgdGhlbWUgaW4gZGVmYXVsdFByb3BzIGluIGNvbXBvbmVudCBjbGFzcyBcIiR7Z2V0Q29tcG9uZW50TmFtZShcbiAgICAgICAgICBDb21wb25lbnRcbiAgICAgICAgKX1cImBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSB0aGVtZT17dGhlbWVQcm9wfSByZWY9e3JlZn0gLz47XG4gIH0pO1xuXG4gIGhvaXN0U3RhdGljcyhXaXRoVGhlbWUsIENvbXBvbmVudCk7XG5cbiAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gYFdpdGhUaGVtZSgke2dldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KX0pYDtcblxuICByZXR1cm4gV2l0aFRoZW1lO1xufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi4vbW9kZWxzL1RoZW1lUHJvdmlkZXInO1xuXG5jb25zdCB1c2VUaGVtZSA9ICgpID0+IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi9zaGVldCc7XG5pbXBvcnQgeyBtYXN0ZXJTaGVldCB9IGZyb20gJy4vbW9kZWxzL1N0eWxlU2hlZXRNYW5hZ2VyJztcblxuZXhwb3J0IGNvbnN0IF9fUFJJVkFURV9fID0ge1xuICBTdHlsZVNoZWV0LFxuICBtYXN0ZXJTaGVldCxcbn07XG4iLCIvLyBAZmxvd1xuLyogSW1wb3J0IHNpbmdsZXRvbnMgKi9cbmltcG9ydCBpc1N0eWxlZENvbXBvbmVudCBmcm9tICcuL3V0aWxzL2lzU3R5bGVkQ29tcG9uZW50JztcbmltcG9ydCBjc3MgZnJvbSAnLi9jb25zdHJ1Y3RvcnMvY3NzJztcbmltcG9ydCBjcmVhdGVHbG9iYWxTdHlsZSBmcm9tICcuL2NvbnN0cnVjdG9ycy9jcmVhdGVHbG9iYWxTdHlsZSc7XG5pbXBvcnQga2V5ZnJhbWVzIGZyb20gJy4vY29uc3RydWN0b3JzL2tleWZyYW1lcyc7XG5pbXBvcnQgU2VydmVyU3R5bGVTaGVldCBmcm9tICcuL21vZGVscy9TZXJ2ZXJTdHlsZVNoZWV0JztcbmltcG9ydCB7IFNDX1ZFUlNJT04gfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCBTdHlsZVNoZWV0TWFuYWdlciwge1xuICBTdHlsZVNoZWV0Q29udGV4dCxcbiAgU3R5bGVTaGVldENvbnN1bWVyLFxufSBmcm9tICcuL21vZGVscy9TdHlsZVNoZWV0TWFuYWdlcic7XG5cbi8qIEltcG9ydCBjb21wb25lbnRzICovXG5pbXBvcnQgVGhlbWVQcm92aWRlciwgeyBUaGVtZUNvbnRleHQsIFRoZW1lQ29uc3VtZXIgfSBmcm9tICcuL21vZGVscy9UaGVtZVByb3ZpZGVyJztcblxuLyogSW1wb3J0IEhpZ2hlciBPcmRlciBDb21wb25lbnRzICovXG5pbXBvcnQgd2l0aFRoZW1lIGZyb20gJy4vaG9jL3dpdGhUaGVtZSc7XG5cbi8qIEltcG9ydCBob29rcyAqL1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vaG9va3MvdXNlVGhlbWUnO1xuXG5kZWNsYXJlIHZhciBfX1NFUlZFUl9fOiBib29sZWFuO1xuXG4vKiBXYXJuaW5nIGlmIHlvdSd2ZSBpbXBvcnRlZCB0aGlzIGZpbGUgb24gUmVhY3QgTmF0aXZlICovXG5pZiAoXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSdcbikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oXG4gICAgXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5cIiArXG4gICAgICBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICtcbiAgICAgICdSZWFkIG1vcmUgYWJvdXQgdGhpcyBhdCBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjcmVhY3QtbmF0aXZlJ1xuICApO1xufVxuXG4vKiBXYXJuaW5nIGlmIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiBzdHlsZWQtY29tcG9uZW50cyAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPSB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gfHwgMDtcblxuICBpZiAod2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddID09PSAxKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgK1xuICAgICAgICAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgdG8gbm90IHJlbmRlciBwcm9wZXJseSwgZXJyb3JzIGR1cmluZyB0aGUgcmVoeWRyYXRpb24gcHJvY2VzcywgJyArXG4gICAgICAgICdhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuJyArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLidcbiAgICApO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8qIEV4cG9ydCBldmVyeXRoaW5nICovXG5leHBvcnQgKiBmcm9tICcuL3NlY3JldEludGVybmFscyc7XG5leHBvcnQge1xuICBjcmVhdGVHbG9iYWxTdHlsZSxcbiAgY3NzLFxuICBpc1N0eWxlZENvbXBvbmVudCxcbiAga2V5ZnJhbWVzLFxuICBTZXJ2ZXJTdHlsZVNoZWV0LFxuICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gIFN0eWxlU2hlZXRDb250ZXh0LFxuICBTdHlsZVNoZWV0TWFuYWdlcixcbiAgVGhlbWVDb25zdW1lcixcbiAgVGhlbWVDb250ZXh0LFxuICBUaGVtZVByb3ZpZGVyLFxuICB1c2VUaGVtZSxcbiAgU0NfVkVSU0lPTiBhcyB2ZXJzaW9uLFxuICB3aXRoVGhlbWUsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///vOnD\n')}}]);