(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[8],{"/FUP":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;\n\nvar _flattenNames = __webpack_require__("W3HW");\n\nvar _flattenNames2 = _interopRequireDefault(_flattenNames);\n\nvar _mergeClasses = __webpack_require__("lreK");\n\nvar _mergeClasses2 = _interopRequireDefault(_mergeClasses);\n\nvar _autoprefix = __webpack_require__("KfSR");\n\nvar _autoprefix2 = _interopRequireDefault(_autoprefix);\n\nvar _hover2 = __webpack_require__("VYtm");\n\nvar _hover3 = _interopRequireDefault(_hover2);\n\nvar _active = __webpack_require__("XQvf");\n\nvar _active2 = _interopRequireDefault(_active);\n\nvar _loop2 = __webpack_require__("B5Mt");\n\nvar _loop3 = _interopRequireDefault(_loop2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nexports.hover = _hover3["default"];\nexports.handleHover = _hover3["default"];\nexports.handleActive = _active2["default"];\nexports.loop = _loop3["default"];\n\nvar ReactCSS = exports.ReactCSS = function ReactCSS(classes) {\n  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    activations[_key - 1] = arguments[_key];\n  }\n\n  var activeNames = (0, _flattenNames2["default"])(activations);\n  var merged = (0, _mergeClasses2["default"])(classes, activeNames);\n  return (0, _autoprefix2["default"])(merged);\n};\n\nexports["default"] = ReactCSS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2luZGV4LmpzP2ZjNTUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFjdENTUyIsImxvb3AiLCJoYW5kbGVBY3RpdmUiLCJoYW5kbGVIb3ZlciIsImhvdmVyIiwidW5kZWZpbmVkIiwiX2ZsYXR0ZW5OYW1lcyIsInJlcXVpcmUiLCJfZmxhdHRlbk5hbWVzMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWVyZ2VDbGFzc2VzIiwiX21lcmdlQ2xhc3NlczIiLCJfYXV0b3ByZWZpeCIsIl9hdXRvcHJlZml4MiIsIl9ob3ZlcjIiLCJfaG92ZXIzIiwiX2FjdGl2ZSIsIl9hY3RpdmUyIiwiX2xvb3AyIiwiX2xvb3AzIiwib2JqIiwiX19lc01vZHVsZSIsImNsYXNzZXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYWN0aXZhdGlvbnMiLCJBcnJheSIsIl9rZXkiLCJhY3RpdmVOYW1lcyIsIm1lcmdlZCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFFBQVIsR0FBbUJGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFlBQVIsR0FBdUJKLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQkwsT0FBTyxDQUFDTSxLQUFSLEdBQWdCQyxTQUEvRjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUEzQjs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDSCxhQUFELENBQTNDOztBQUVBLElBQUlJLGFBQWEsR0FBR0gsbUJBQU8sQ0FBQyxNQUFELENBQTNCOztBQUVBLElBQUlJLGNBQWMsR0FBR0Ysc0JBQXNCLENBQUNDLGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUUsV0FBVyxHQUFHTCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSU0sWUFBWSxHQUFHSixzQkFBc0IsQ0FBQ0csV0FBRCxDQUF6Qzs7QUFFQSxJQUFJRSxPQUFPLEdBQUdQLG1CQUFPLENBQUMsTUFBRCxDQUFyQjs7QUFFQSxJQUFJUSxPQUFPLEdBQUdOLHNCQUFzQixDQUFDSyxPQUFELENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR1QsbUJBQU8sQ0FBQyxNQUFELENBQXJCOztBQUVBLElBQUlVLFFBQVEsR0FBR1Isc0JBQXNCLENBQUNPLE9BQUQsQ0FBckM7O0FBRUEsSUFBSUUsTUFBTSxHQUFHWCxtQkFBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsSUFBSVksTUFBTSxHQUFHVixzQkFBc0IsQ0FBQ1MsTUFBRCxDQUFuQzs7QUFFQSxTQUFTVCxzQkFBVCxDQUFnQ1csR0FBaEMsRUFBcUM7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7SUFBRSxXQUFTQTtFQUFYLENBQXJDO0FBQXdEOztBQUUvRnRCLE9BQU8sQ0FBQ00sS0FBUixHQUFnQlcsT0FBTyxXQUF2QjtBQUNBakIsT0FBTyxDQUFDSyxXQUFSLEdBQXNCWSxPQUFPLFdBQTdCO0FBQ0FqQixPQUFPLENBQUNJLFlBQVIsR0FBdUJlLFFBQVEsV0FBL0I7QUFDQW5CLE9BQU8sQ0FBQ0csSUFBUixHQUFla0IsTUFBTSxXQUFyQjs7QUFDQSxJQUFJbkIsUUFBUSxHQUFHRixPQUFPLENBQUNFLFFBQVIsR0FBbUIsU0FBU0EsUUFBVCxDQUFrQnNCLE9BQWxCLEVBQTJCO0VBQzNELEtBQUssSUFBSUMsSUFBSSxHQUFHQyxTQUFTLENBQUNDLE1BQXJCLEVBQTZCQyxXQUFXLEdBQUdDLEtBQUssQ0FBQ0osSUFBSSxHQUFHLENBQVAsR0FBV0EsSUFBSSxHQUFHLENBQWxCLEdBQXNCLENBQXZCLENBQWhELEVBQTJFSyxJQUFJLEdBQUcsQ0FBdkYsRUFBMEZBLElBQUksR0FBR0wsSUFBakcsRUFBdUdLLElBQUksRUFBM0csRUFBK0c7SUFDN0dGLFdBQVcsQ0FBQ0UsSUFBSSxHQUFHLENBQVIsQ0FBWCxHQUF3QkosU0FBUyxDQUFDSSxJQUFELENBQWpDO0VBQ0Q7O0VBRUQsSUFBSUMsV0FBVyxHQUFHLENBQUMsR0FBR3JCLGNBQWMsV0FBbEIsRUFBNEJrQixXQUE1QixDQUFsQjtFQUNBLElBQUlJLE1BQU0sR0FBRyxDQUFDLEdBQUduQixjQUFjLFdBQWxCLEVBQTRCVyxPQUE1QixFQUFxQ08sV0FBckMsQ0FBYjtFQUNBLE9BQU8sQ0FBQyxHQUFHaEIsWUFBWSxXQUFoQixFQUEwQmlCLE1BQTFCLENBQVA7QUFDRCxDQVJEOztBQVVBaEMsT0FBTyxXQUFQLEdBQWtCRSxRQUFsQiIsImZpbGUiOiIvRlVQLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SZWFjdENTUyA9IGV4cG9ydHMubG9vcCA9IGV4cG9ydHMuaGFuZGxlQWN0aXZlID0gZXhwb3J0cy5oYW5kbGVIb3ZlciA9IGV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZmxhdHRlbk5hbWVzID0gcmVxdWlyZSgnLi9mbGF0dGVuTmFtZXMnKTtcblxudmFyIF9mbGF0dGVuTmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxhdHRlbk5hbWVzKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSByZXF1aXJlKCcuL21lcmdlQ2xhc3NlcycpO1xuXG52YXIgX21lcmdlQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZUNsYXNzZXMpO1xuXG52YXIgX2F1dG9wcmVmaXggPSByZXF1aXJlKCcuL2F1dG9wcmVmaXgnKTtcblxudmFyIF9hdXRvcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9wcmVmaXgpO1xuXG52YXIgX2hvdmVyMiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9ob3ZlcicpO1xuXG52YXIgX2hvdmVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvdmVyMik7XG5cbnZhciBfYWN0aXZlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FjdGl2ZScpO1xuXG52YXIgX2FjdGl2ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmUpO1xuXG52YXIgX2xvb3AyID0gcmVxdWlyZSgnLi9sb29wJyk7XG5cbnZhciBfbG9vcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb29wMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuaG92ZXIgPSBfaG92ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmhhbmRsZUhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVBY3RpdmUgPSBfYWN0aXZlMi5kZWZhdWx0O1xuZXhwb3J0cy5sb29wID0gX2xvb3AzLmRlZmF1bHQ7XG52YXIgUmVhY3RDU1MgPSBleHBvcnRzLlJlYWN0Q1NTID0gZnVuY3Rpb24gUmVhY3RDU1MoY2xhc3Nlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWN0aXZhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYWN0aXZhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGl2ZU5hbWVzID0gKDAsIF9mbGF0dGVuTmFtZXMyLmRlZmF1bHQpKGFjdGl2YXRpb25zKTtcbiAgdmFyIG1lcmdlZCA9ICgwLCBfbWVyZ2VDbGFzc2VzMi5kZWZhdWx0KShjbGFzc2VzLCBhY3RpdmVOYW1lcyk7XG4gIHJldHVybiAoMCwgX2F1dG9wcmVmaXgyLmRlZmF1bHQpKG1lcmdlZCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdENTUzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:////FUP\n')},"55Ip":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export BrowserRouter */\n/* unused harmony export HashRouter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Link; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return NavLink; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("YS25");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("zLVn");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("9R94");\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createBrowserHistory */ "a"])(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createHashHistory */ "b"])(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\n\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createLocation */ "c"])(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n        navigate();\n      }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55Ip\n')},"9iN/":function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = "function" === typeof Symbol && Symbol["for"],\n    c = b ? Symbol["for"]("react.element") : 60103,\n    d = b ? Symbol["for"]("react.portal") : 60106,\n    e = b ? Symbol["for"]("react.fragment") : 60107,\n    f = b ? Symbol["for"]("react.strict_mode") : 60108,\n    g = b ? Symbol["for"]("react.profiler") : 60114,\n    h = b ? Symbol["for"]("react.provider") : 60109,\n    k = b ? Symbol["for"]("react.context") : 60110,\n    l = b ? Symbol["for"]("react.async_mode") : 60111,\n    m = b ? Symbol["for"]("react.concurrent_mode") : 60111,\n    n = b ? Symbol["for"]("react.forward_ref") : 60112,\n    p = b ? Symbol["for"]("react.suspense") : 60113,\n    q = b ? Symbol["for"]("react.suspense_list") : 60120,\n    r = b ? Symbol["for"]("react.memo") : 60115,\n    t = b ? Symbol["for"]("react.lazy") : 60116,\n    v = b ? Symbol["for"]("react.block") : 60121,\n    w = b ? Symbol["for"]("react.fundamental") : 60117,\n    x = b ? Symbol["for"]("react.responder") : 60118,\n    y = b ? Symbol["for"]("react.scope") : 60119;\n\nfunction z(a) {\n  if ("object" === typeof a && null !== a) {\n    var u = a.$$typeof;\n\n    switch (u) {\n      case c:\n        switch (a = a.type, a) {\n          case l:\n          case m:\n          case e:\n          case g:\n          case f:\n          case p:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case n:\n              case t:\n              case r:\n              case h:\n                return a;\n\n              default:\n                return u;\n            }\n\n        }\n\n      case d:\n        return u;\n    }\n  }\n}\n\nfunction A(a) {\n  return z(a) === m;\n}\n\nexports.AsyncMode = l;\nexports.ConcurrentMode = m;\nexports.ContextConsumer = k;\nexports.ContextProvider = h;\nexports.Element = c;\nexports.ForwardRef = n;\nexports.Fragment = e;\nexports.Lazy = t;\nexports.Memo = r;\nexports.Portal = d;\nexports.Profiler = g;\nexports.StrictMode = f;\nexports.Suspense = p;\n\nexports.isAsyncMode = function (a) {\n  return A(a) || z(a) === l;\n};\n\nexports.isConcurrentMode = A;\n\nexports.isContextConsumer = function (a) {\n  return z(a) === k;\n};\n\nexports.isContextProvider = function (a) {\n  return z(a) === h;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === c;\n};\n\nexports.isForwardRef = function (a) {\n  return z(a) === n;\n};\n\nexports.isFragment = function (a) {\n  return z(a) === e;\n};\n\nexports.isLazy = function (a) {\n  return z(a) === t;\n};\n\nexports.isMemo = function (a) {\n  return z(a) === r;\n};\n\nexports.isPortal = function (a) {\n  return z(a) === d;\n};\n\nexports.isProfiler = function (a) {\n  return z(a) === g;\n};\n\nexports.isStrictMode = function (a) {\n  return z(a) === f;\n};\n\nexports.isSuspense = function (a) {\n  return z(a) === p;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\n\nexports.typeOf = z;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanM/ZjYyMyJdLCJuYW1lcyI6WyJiIiwiU3ltYm9sIiwiYyIsImQiLCJlIiwiZiIsImciLCJoIiwiayIsImwiLCJtIiwibiIsInAiLCJxIiwiciIsInQiLCJ2IiwidyIsIngiLCJ5IiwieiIsImEiLCJ1IiwiJCR0eXBlb2YiLCJ0eXBlIiwiQSIsImV4cG9ydHMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDLGVBQWEsT0FBT0MsTUFBcEIsSUFBNEJBLE1BQU0sT0FBeEM7QUFBQSxJQUE2Q0MsQ0FBQyxHQUFDRixDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLGVBQVgsQ0FBRCxHQUE2QixLQUE3RTtBQUFBLElBQW1GRSxDQUFDLEdBQUNILENBQUMsR0FBQ0MsTUFBTSxPQUFOLENBQVcsY0FBWCxDQUFELEdBQTRCLEtBQWxIO0FBQUEsSUFBd0hHLENBQUMsR0FBQ0osQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxnQkFBWCxDQUFELEdBQThCLEtBQXpKO0FBQUEsSUFBK0pJLENBQUMsR0FBQ0wsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxtQkFBWCxDQUFELEdBQWlDLEtBQW5NO0FBQUEsSUFBeU1LLENBQUMsR0FBQ04sQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxnQkFBWCxDQUFELEdBQThCLEtBQTFPO0FBQUEsSUFBZ1BNLENBQUMsR0FBQ1AsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxnQkFBWCxDQUFELEdBQThCLEtBQWpSO0FBQUEsSUFBdVJPLENBQUMsR0FBQ1IsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxlQUFYLENBQUQsR0FBNkIsS0FBdlQ7QUFBQSxJQUE2VFEsQ0FBQyxHQUFDVCxDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLGtCQUFYLENBQUQsR0FBZ0MsS0FBaFc7QUFBQSxJQUFzV1MsQ0FBQyxHQUFDVixDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLHVCQUFYLENBQUQsR0FBcUMsS0FBOVk7QUFBQSxJQUFvWlUsQ0FBQyxHQUFDWCxDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLG1CQUFYLENBQUQsR0FBaUMsS0FBeGI7QUFBQSxJQUE4YlcsQ0FBQyxHQUFDWixDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLGdCQUFYLENBQUQsR0FBOEIsS0FBL2Q7QUFBQSxJQUFxZVksQ0FBQyxHQUFDYixDQUFDLEdBQ3JmQyxNQUFNLE9BQU4sQ0FBVyxxQkFBWCxDQURxZixHQUNuZCxLQURyQjtBQUFBLElBQzJCYSxDQUFDLEdBQUNkLENBQUMsR0FBQ0MsTUFBTSxPQUFOLENBQVcsWUFBWCxDQUFELEdBQTBCLEtBRHhEO0FBQUEsSUFDOERjLENBQUMsR0FBQ2YsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxZQUFYLENBQUQsR0FBMEIsS0FEM0Y7QUFBQSxJQUNpR2UsQ0FBQyxHQUFDaEIsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxhQUFYLENBQUQsR0FBMkIsS0FEL0g7QUFBQSxJQUNxSWdCLENBQUMsR0FBQ2pCLENBQUMsR0FBQ0MsTUFBTSxPQUFOLENBQVcsbUJBQVgsQ0FBRCxHQUFpQyxLQUR6SztBQUFBLElBQytLaUIsQ0FBQyxHQUFDbEIsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxpQkFBWCxDQUFELEdBQStCLEtBRGpOO0FBQUEsSUFDdU5rQixDQUFDLEdBQUNuQixDQUFDLEdBQUNDLE1BQU0sT0FBTixDQUFXLGFBQVgsQ0FBRCxHQUEyQixLQURyUDs7QUFFYixTQUFTbUIsQ0FBVCxDQUFXQyxDQUFYLEVBQWE7RUFBQyxJQUFHLGFBQVcsT0FBT0EsQ0FBbEIsSUFBcUIsU0FBT0EsQ0FBL0IsRUFBaUM7SUFBQyxJQUFJQyxDQUFDLEdBQUNELENBQUMsQ0FBQ0UsUUFBUjs7SUFBaUIsUUFBT0QsQ0FBUDtNQUFVLEtBQUtwQixDQUFMO1FBQU8sUUFBT21CLENBQUMsR0FBQ0EsQ0FBQyxDQUFDRyxJQUFKLEVBQVNILENBQWhCO1VBQW1CLEtBQUtaLENBQUw7VUFBTyxLQUFLQyxDQUFMO1VBQU8sS0FBS04sQ0FBTDtVQUFPLEtBQUtFLENBQUw7VUFBTyxLQUFLRCxDQUFMO1VBQU8sS0FBS08sQ0FBTDtZQUFPLE9BQU9TLENBQVA7O1VBQVM7WUFBUSxRQUFPQSxDQUFDLEdBQUNBLENBQUMsSUFBRUEsQ0FBQyxDQUFDRSxRQUFQLEVBQWdCRixDQUF2QjtjQUEwQixLQUFLYixDQUFMO2NBQU8sS0FBS0csQ0FBTDtjQUFPLEtBQUtJLENBQUw7Y0FBTyxLQUFLRCxDQUFMO2NBQU8sS0FBS1AsQ0FBTDtnQkFBTyxPQUFPYyxDQUFQOztjQUFTO2dCQUFRLE9BQU9DLENBQVA7WUFBOUU7O1FBQTlFOztNQUFzSyxLQUFLbkIsQ0FBTDtRQUFPLE9BQU9tQixDQUFQO0lBQTlMO0VBQXdNO0FBQUM7O0FBQUEsU0FBU0csQ0FBVCxDQUFXSixDQUFYLEVBQWE7RUFBQyxPQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPWCxDQUFkO0FBQWdCOztBQUFBZ0IsT0FBTyxDQUFDQyxTQUFSLEdBQWtCbEIsQ0FBbEI7QUFBb0JpQixPQUFPLENBQUNFLGNBQVIsR0FBdUJsQixDQUF2QjtBQUF5QmdCLE9BQU8sQ0FBQ0csZUFBUixHQUF3QnJCLENBQXhCO0FBQTBCa0IsT0FBTyxDQUFDSSxlQUFSLEdBQXdCdkIsQ0FBeEI7QUFBMEJtQixPQUFPLENBQUNLLE9BQVIsR0FBZ0I3QixDQUFoQjtBQUFrQndCLE9BQU8sQ0FBQ00sVUFBUixHQUFtQnJCLENBQW5CO0FBQXFCZSxPQUFPLENBQUNPLFFBQVIsR0FBaUI3QixDQUFqQjtBQUFtQnNCLE9BQU8sQ0FBQ1EsSUFBUixHQUFhbkIsQ0FBYjtBQUFlVyxPQUFPLENBQUNTLElBQVIsR0FBYXJCLENBQWI7QUFBZVksT0FBTyxDQUFDVSxNQUFSLEdBQWVqQyxDQUFmO0FBQ2pldUIsT0FBTyxDQUFDVyxRQUFSLEdBQWlCL0IsQ0FBakI7QUFBbUJvQixPQUFPLENBQUNZLFVBQVIsR0FBbUJqQyxDQUFuQjtBQUFxQnFCLE9BQU8sQ0FBQ2EsUUFBUixHQUFpQjNCLENBQWpCOztBQUFtQmMsT0FBTyxDQUFDYyxXQUFSLEdBQW9CLFVBQVNuQixDQUFULEVBQVc7RUFBQyxPQUFPSSxDQUFDLENBQUNKLENBQUQsQ0FBRCxJQUFNRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPWixDQUFwQjtBQUFzQixDQUF0RDs7QUFBdURpQixPQUFPLENBQUNlLGdCQUFSLEdBQXlCaEIsQ0FBekI7O0FBQTJCQyxPQUFPLENBQUNnQixpQkFBUixHQUEwQixVQUFTckIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT2IsQ0FBZDtBQUFnQixDQUF0RDs7QUFBdURrQixPQUFPLENBQUNpQixpQkFBUixHQUEwQixVQUFTdEIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT2QsQ0FBZDtBQUFnQixDQUF0RDs7QUFBdURtQixPQUFPLENBQUNrQixTQUFSLEdBQWtCLFVBQVN2QixDQUFULEVBQVc7RUFBQyxPQUFNLGFBQVcsT0FBT0EsQ0FBbEIsSUFBcUIsU0FBT0EsQ0FBNUIsSUFBK0JBLENBQUMsQ0FBQ0UsUUFBRixLQUFhckIsQ0FBbEQ7QUFBb0QsQ0FBbEY7O0FBQW1Gd0IsT0FBTyxDQUFDbUIsWUFBUixHQUFxQixVQUFTeEIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT1YsQ0FBZDtBQUFnQixDQUFqRDs7QUFBa0RlLE9BQU8sQ0FBQ29CLFVBQVIsR0FBbUIsVUFBU3pCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9qQixDQUFkO0FBQWdCLENBQS9DOztBQUFnRHNCLE9BQU8sQ0FBQ3FCLE1BQVIsR0FBZSxVQUFTMUIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT04sQ0FBZDtBQUFnQixDQUEzQzs7QUFDaGJXLE9BQU8sQ0FBQ3NCLE1BQVIsR0FBZSxVQUFTM0IsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT1AsQ0FBZDtBQUFnQixDQUEzQzs7QUFBNENZLE9BQU8sQ0FBQ3VCLFFBQVIsR0FBaUIsVUFBUzVCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9sQixDQUFkO0FBQWdCLENBQTdDOztBQUE4Q3VCLE9BQU8sQ0FBQ3dCLFVBQVIsR0FBbUIsVUFBUzdCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9mLENBQWQ7QUFBZ0IsQ0FBL0M7O0FBQWdEb0IsT0FBTyxDQUFDeUIsWUFBUixHQUFxQixVQUFTOUIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT2hCLENBQWQ7QUFBZ0IsQ0FBakQ7O0FBQWtEcUIsT0FBTyxDQUFDMEIsVUFBUixHQUFtQixVQUFTL0IsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT1QsQ0FBZDtBQUFnQixDQUEvQzs7QUFDNUxjLE9BQU8sQ0FBQzJCLGtCQUFSLEdBQTJCLFVBQVNoQyxDQUFULEVBQVc7RUFBQyxPQUFNLGFBQVcsT0FBT0EsQ0FBbEIsSUFBcUIsZUFBYSxPQUFPQSxDQUF6QyxJQUE0Q0EsQ0FBQyxLQUFHakIsQ0FBaEQsSUFBbURpQixDQUFDLEtBQUdYLENBQXZELElBQTBEVyxDQUFDLEtBQUdmLENBQTlELElBQWlFZSxDQUFDLEtBQUdoQixDQUFyRSxJQUF3RWdCLENBQUMsS0FBR1QsQ0FBNUUsSUFBK0VTLENBQUMsS0FBR1IsQ0FBbkYsSUFBc0YsYUFBVyxPQUFPUSxDQUFsQixJQUFxQixTQUFPQSxDQUE1QixLQUFnQ0EsQ0FBQyxDQUFDRSxRQUFGLEtBQWFSLENBQWIsSUFBZ0JNLENBQUMsQ0FBQ0UsUUFBRixLQUFhVCxDQUE3QixJQUFnQ08sQ0FBQyxDQUFDRSxRQUFGLEtBQWFoQixDQUE3QyxJQUFnRGMsQ0FBQyxDQUFDRSxRQUFGLEtBQWFmLENBQTdELElBQWdFYSxDQUFDLENBQUNFLFFBQUYsS0FBYVosQ0FBN0UsSUFBZ0ZVLENBQUMsQ0FBQ0UsUUFBRixLQUFhTixDQUE3RixJQUFnR0ksQ0FBQyxDQUFDRSxRQUFGLEtBQWFMLENBQTdHLElBQWdIRyxDQUFDLENBQUNFLFFBQUYsS0FBYUosQ0FBN0gsSUFBZ0lFLENBQUMsQ0FBQ0UsUUFBRixLQUFhUCxDQUE3SyxDQUE1RjtBQUE0USxDQUFuVDs7QUFBb1RVLE9BQU8sQ0FBQzRCLE1BQVIsR0FBZWxDLENBQWYiLCJmaWxlIjoiOWlOLy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9iN/\n')},B5Mt:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar loopable = function loopable(i, length) {\n  var props = {};\n\n  var setProp = function setProp(name) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    props[name] = value;\n  };\n\n  i === 0 && setProp('first-child');\n  i === length - 1 && setProp('last-child');\n  (i === 0 || i % 2 === 0) && setProp('even');\n  Math.abs(i % 2) === 1 && setProp('odd');\n  setProp('nth-child', i);\n  return props;\n};\n\nexports[\"default\"] = loopable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2xvb3AuanM/MDc5MyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvb3BhYmxlIiwiaSIsImxlbmd0aCIsInByb3BzIiwic2V0UHJvcCIsIm5hbWUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztFQUMzQ0MsS0FBSyxFQUFFO0FBRG9DLENBQTdDOztBQUdBLElBQUlDLFFBQVEsR0FBRyxTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQkMsTUFBckIsRUFBNkI7RUFDMUMsSUFBSUMsS0FBSyxHQUFHLEVBQVo7O0VBQ0EsSUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCO0lBQ25DLElBQUlOLEtBQUssR0FBR08sU0FBUyxDQUFDSixNQUFWLEdBQW1CLENBQW5CLElBQXdCSSxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCQyxTQUF6QyxHQUFxREQsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7SUFFQUgsS0FBSyxDQUFDRSxJQUFELENBQUwsR0FBY04sS0FBZDtFQUNELENBSkQ7O0VBTUFFLENBQUMsS0FBSyxDQUFOLElBQVdHLE9BQU8sQ0FBQyxhQUFELENBQWxCO0VBQ0FILENBQUMsS0FBS0MsTUFBTSxHQUFHLENBQWYsSUFBb0JFLE9BQU8sQ0FBQyxZQUFELENBQTNCO0VBQ0EsQ0FBQ0gsQ0FBQyxLQUFLLENBQU4sSUFBV0EsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUF0QixLQUE0QkcsT0FBTyxDQUFDLE1BQUQsQ0FBbkM7RUFDQUksSUFBSSxDQUFDQyxHQUFMLENBQVNSLENBQUMsR0FBRyxDQUFiLE1BQW9CLENBQXBCLElBQXlCRyxPQUFPLENBQUMsS0FBRCxDQUFoQztFQUNBQSxPQUFPLENBQUMsV0FBRCxFQUFjSCxDQUFkLENBQVA7RUFFQSxPQUFPRSxLQUFQO0FBQ0QsQ0FmRDs7QUFpQkFMLE9BQU8sV0FBUCxHQUFrQkUsUUFBbEIiLCJmaWxlIjoiQjVNdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsb29wYWJsZSA9IGZ1bmN0aW9uIGxvb3BhYmxlKGksIGxlbmd0aCkge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHNldFByb3AgPSBmdW5jdGlvbiBzZXRQcm9wKG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBwcm9wc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIGkgPT09IDAgJiYgc2V0UHJvcCgnZmlyc3QtY2hpbGQnKTtcbiAgaSA9PT0gbGVuZ3RoIC0gMSAmJiBzZXRQcm9wKCdsYXN0LWNoaWxkJyk7XG4gIChpID09PSAwIHx8IGkgJSAyID09PSAwKSAmJiBzZXRQcm9wKCdldmVuJyk7XG4gIE1hdGguYWJzKGkgJSAyKSA9PT0gMSAmJiBzZXRQcm9wKCdvZGQnKTtcbiAgc2V0UHJvcCgnbnRoLWNoaWxkJywgaSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbG9vcGFibGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///B5Mt\n")},FUNW:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof global !== \'undefined\' ? global : {};\n\nfunction getUniqueId() {\n  var key = \'__global_unique_id__\';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = \'__create-react-context-\' + getUniqueId() + \'__\';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === \'function\' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;\n/* harmony default export */ __webpack_exports__["a"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("IyRk")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///FUNW\n')},Gytx:function(module,exports){eval('//\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A\'s keys different from B.\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valueA !== valueB) {\n      return false;\n    }\n  }\n\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzPzFiMmIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwiY29tcGFyZSIsImNvbXBhcmVDb250ZXh0IiwicmV0IiwiY2FsbCIsImtleXNBIiwiT2JqZWN0Iiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwiYkhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiaW5kIiwiaWR4Iiwia2V5IiwidmFsdWVBIiwidmFsdWVCIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQ0MsY0FBM0MsRUFBMkQ7RUFDMUUsSUFBSUMsR0FBRyxHQUFHRixPQUFPLEdBQUdBLE9BQU8sQ0FBQ0csSUFBUixDQUFhRixjQUFiLEVBQTZCSCxJQUE3QixFQUFtQ0MsSUFBbkMsQ0FBSCxHQUE4QyxLQUFLLENBQXBFOztFQUVBLElBQUlHLEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0lBQ2xCLE9BQU8sQ0FBQyxDQUFDQSxHQUFUO0VBQ0Q7O0VBRUQsSUFBSUosSUFBSSxLQUFLQyxJQUFiLEVBQW1CO0lBQ2pCLE9BQU8sSUFBUDtFQUNEOztFQUVELElBQUksT0FBT0QsSUFBUCxLQUFnQixRQUFoQixJQUE0QixDQUFDQSxJQUE3QixJQUFxQyxPQUFPQyxJQUFQLEtBQWdCLFFBQXJELElBQWlFLENBQUNBLElBQXRFLEVBQTRFO0lBQzFFLE9BQU8sS0FBUDtFQUNEOztFQUVELElBQUlLLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlSLElBQVosQ0FBWjtFQUNBLElBQUlTLEtBQUssR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlQLElBQVosQ0FBWjs7RUFFQSxJQUFJSyxLQUFLLENBQUNJLE1BQU4sS0FBaUJELEtBQUssQ0FBQ0MsTUFBM0IsRUFBbUM7SUFDakMsT0FBTyxLQUFQO0VBQ0Q7O0VBRUQsSUFBSUMsZUFBZSxHQUFHSixNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsSUFBckMsQ0FBdEIsQ0F0QjBFLENBd0IxRTs7RUFDQSxLQUFLLElBQUljLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdULEtBQUssQ0FBQ0ksTUFBOUIsRUFBc0NLLEdBQUcsRUFBekMsRUFBNkM7SUFDM0MsSUFBSUMsR0FBRyxHQUFHVixLQUFLLENBQUNTLEdBQUQsQ0FBZjs7SUFFQSxJQUFJLENBQUNKLGVBQWUsQ0FBQ0ssR0FBRCxDQUFwQixFQUEyQjtNQUN6QixPQUFPLEtBQVA7SUFDRDs7SUFFRCxJQUFJQyxNQUFNLEdBQUdqQixJQUFJLENBQUNnQixHQUFELENBQWpCO0lBQ0EsSUFBSUUsTUFBTSxHQUFHakIsSUFBSSxDQUFDZSxHQUFELENBQWpCO0lBRUFaLEdBQUcsR0FBR0YsT0FBTyxHQUFHQSxPQUFPLENBQUNHLElBQVIsQ0FBYUYsY0FBYixFQUE2QmMsTUFBN0IsRUFBcUNDLE1BQXJDLEVBQTZDRixHQUE3QyxDQUFILEdBQXVELEtBQUssQ0FBekU7O0lBRUEsSUFBSVosR0FBRyxLQUFLLEtBQVIsSUFBa0JBLEdBQUcsS0FBSyxLQUFLLENBQWIsSUFBa0JhLE1BQU0sS0FBS0MsTUFBbkQsRUFBNEQ7TUFDMUQsT0FBTyxLQUFQO0lBQ0Q7RUFDRjs7RUFFRCxPQUFPLElBQVA7QUFDRCxDQTNDRCIsImZpbGUiOiJHeXR4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///Gytx\n')},IujW:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ ReactMarkdown; });\n\n// NAMESPACE OBJECT: ./node_modules/react-markdown/node_modules/micromark/lib/constructs.js\nvar constructs_namespaceObject = {};\n__webpack_require__.r(constructs_namespaceObject);\n__webpack_require__.d(constructs_namespaceObject, \"document\", function() { return constructs_document; });\n__webpack_require__.d(constructs_namespaceObject, \"contentInitial\", function() { return contentInitial; });\n__webpack_require__.d(constructs_namespaceObject, \"flowInitial\", function() { return flowInitial; });\n__webpack_require__.d(constructs_namespaceObject, \"flow\", function() { return constructs_flow; });\n__webpack_require__.d(constructs_namespaceObject, \"string\", function() { return constructs_string; });\n__webpack_require__.d(constructs_namespaceObject, \"text\", function() { return constructs_text; });\n__webpack_require__.d(constructs_namespaceObject, \"insideSpan\", function() { return insideSpan; });\n__webpack_require__.d(constructs_namespaceObject, \"attentionMarkers\", function() { return attentionMarkers; });\n__webpack_require__.d(constructs_namespaceObject, \"disable\", function() { return disable; });\n\n// NAMESPACE OBJECT: ./node_modules/react-markdown/node_modules/property-information/lib/util/types.js\nvar types_namespaceObject = {};\n__webpack_require__.r(types_namespaceObject);\n__webpack_require__.d(types_namespaceObject, \"boolean\", function() { return _boolean; });\n__webpack_require__.d(types_namespaceObject, \"booleanish\", function() { return booleanish; });\n__webpack_require__.d(types_namespaceObject, \"overloadedBoolean\", function() { return overloadedBoolean; });\n__webpack_require__.d(types_namespaceObject, \"number\", function() { return number; });\n__webpack_require__.d(types_namespaceObject, \"spaceSeparated\", function() { return spaceSeparated; });\n__webpack_require__.d(types_namespaceObject, \"commaSeparated\", function() { return commaSeparated; });\n__webpack_require__.d(types_namespaceObject, \"commaOrSpaceSeparated\", function() { return commaOrSpaceSeparated; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__(\"VTBJ\");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__(\"kM82\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__(\"KQm4\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"1OyB\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"vuIU\");\n\n// EXTERNAL MODULE: ./node_modules/is-buffer/index.js\nvar is_buffer = __webpack_require__(\"BEtg\");\nvar is_buffer_default = /*#__PURE__*/__webpack_require__.n(is_buffer);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(\"Ji7U\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 1 modules\nvar createSuper = __webpack_require__(\"LK+K\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js + 2 modules\nvar wrapNativeSuper = __webpack_require__(\"kHIg\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-stringify-position/index.js\n/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node\u2019s\n * positional information.\n *\n * @param {Node|NodeLike|Position|Point|null} [value]\n * @returns {string}\n */\nfunction stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return '';\n  } // Node.\n\n\n  if ('position' in value || 'type' in value) {\n    return unist_util_stringify_position_position(value.position);\n  } // Position.\n\n\n  if ('start' in value || 'end' in value) {\n    return unist_util_stringify_position_position(value);\n  } // Point.\n\n\n  if ('line' in value || 'column' in value) {\n    return unist_util_stringify_position_point(value);\n  } // ?\n\n\n  return '';\n}\n/**\n * @param {Point|undefined} point\n * @returns {string}\n */\n\nfunction unist_util_stringify_position_point(point) {\n  return unist_util_stringify_position_index(point && point.line) + ':' + unist_util_stringify_position_index(point && point.column);\n}\n/**\n * @param {Position|undefined} pos\n * @returns {string}\n */\n\n\nfunction unist_util_stringify_position_position(pos) {\n  return unist_util_stringify_position_point(pos && pos.start) + '-' + unist_util_stringify_position_point(pos && pos.end);\n}\n/**\n * @param {number|undefined} value\n * @returns {number}\n */\n\n\nfunction unist_util_stringify_position_index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile-message/index.js\n\n\n\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nvar vfile_message_VFileMessage = /*#__PURE__*/function (_Error) {\n  Object(inherits[\"a\" /* default */])(VFileMessage, _Error);\n\n  var _super = Object(createSuper[\"a\" /* default */])(VFileMessage);\n\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  function VFileMessage(reason, place, origin) {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, VFileMessage);\n\n    /** @type {[string|null, string|null]} */\n    var parts = [null, null];\n    /** @type {Position} */\n\n    var position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    _this = _super.call(this);\n\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n\n    if (typeof origin === 'string') {\n      var index = origin.indexOf(':');\n\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position;\n        }\n      } // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place;\n      } // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place;\n      }\n    } // Fields from `Error`\n\n\n    _this.name = stringifyPosition(place) || '1:1';\n    _this.message = typeof reason === 'object' ? reason.message : reason;\n    _this.stack = typeof reason === 'object' ? reason.stack : '';\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n\n    _this.reason = _this.message;\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    _this.fatal;\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n\n    _this.line = position.start.line;\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n\n    _this.column = position.start.column;\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n\n    _this.source = parts[0];\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n\n    _this.ruleId = parts[1];\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n\n    _this.position = position; // The following fields are \u201cwell known\u201d.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * You can use this to specify the source value that\u2019s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n\n    _this.actual;\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n\n    _this.expected;\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n\n    _this.file;\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n\n    _this.url;\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n\n    _this.note;\n    /* eslint-enable no-unused-expressions */\n\n    return _this;\n  }\n\n  return Object(createClass[\"a\" /* default */])(VFileMessage);\n}( /*#__PURE__*/Object(wrapNativeSuper[\"a\" /* default */])(Error));\nvfile_message_VFileMessage.prototype.file = '';\nvfile_message_VFileMessage.prototype.name = '';\nvfile_message_VFileMessage.prototype.reason = '';\nvfile_message_VFileMessage.prototype.message = '';\nvfile_message_VFileMessage.prototype.stack = '';\nvfile_message_VFileMessage.prototype.fatal = null;\nvfile_message_VFileMessage.prototype.column = null;\nvfile_message_VFileMessage.prototype.line = null;\nvfile_message_VFileMessage.prototype.source = null;\nvfile_message_VFileMessage.prototype.ruleId = null;\nvfile_message_VFileMessage.prototype.position = null;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js\n// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node\u2019s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar minpath_browser_path = {\n  basename: minpath_browser_basename,\n  dirname: minpath_browser_dirname,\n  extname: minpath_browser_extname,\n  join: join,\n  sep: '/'\n};\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\n\nfunction minpath_browser_basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n\n  assertPath(path);\n  var start = 0;\n  var end = -1;\n  var index = path.length;\n  /** @type {boolean|undefined} */\n\n  var seenNonSlash;\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47\n      /* `/` */\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end);\n  }\n\n  if (ext === path) {\n    return '';\n  }\n\n  var firstNonSlashEnd = -1;\n  var extIndex = ext.length - 1;\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n\n  return path.slice(start, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction minpath_browser_dirname(path) {\n  assertPath(path);\n\n  if (path.length === 0) {\n    return '.';\n  }\n\n  var end = -1;\n  var index = path.length;\n  /** @type {boolean|undefined} */\n\n  var unmatchedSlash; // Prefix `--` is important to not run on `0`.\n\n  while (--index) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n\n  return end < 0 ? path.charCodeAt(0) === 47\n  /* `/` */\n  ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47\n  /* `/` */\n  ? '//' : path.slice(0, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction minpath_browser_extname(path) {\n  assertPath(path);\n  var index = path.length;\n  var end = -1;\n  var startPart = 0;\n  var startDot = -1; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n\n  var preDotState = 0;\n  /** @type {boolean|undefined} */\n\n  var unmatchedSlash;\n\n  while (index--) {\n    var code = path.charCodeAt(index);\n\n    if (code === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n\n      continue;\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n\n    if (code === 46\n    /* `.` */\n    ) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n\n  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n}\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\n\n\nfunction join() {\n  var index = -1;\n  /** @type {string|undefined} */\n\n  var joined;\n\n  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n    segments[_key] = arguments[_key];\n  }\n\n  while (++index < segments.length) {\n    assertPath(segments[index]);\n\n    if (segments[index]) {\n      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined);\n}\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction normalize(path) {\n  assertPath(path);\n  var absolute = path.charCodeAt(0) === 47;\n  /* `/` */\n  // Normalize the path according to POSIX rules.\n\n  var value = normalizeString(path, !absolute);\n\n  if (value.length === 0 && !absolute) {\n    value = '.';\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47\n  /* / */\n  ) {\n    value += '/';\n  }\n\n  return absolute ? '/' + value : value;\n}\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\n\n\nfunction normalizeString(path, allowAboveRoot) {\n  var result = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var index = -1;\n  /** @type {number|undefined} */\n\n  var code;\n  /** @type {number} */\n\n  var lastSlashIndex;\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47\n    /* `/` */\n    ) {\n      break;\n    } else {\n      code = 47;\n      /* `/` */\n    }\n\n    if (code === 47\n    /* `/` */\n    ) {\n      if (lastSlash === index - 1 || dots === 1) {// Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46\n        /* `.` */\n        || result.charCodeAt(result.length - 2) !== 46\n        /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length > 0) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n\n        lastSegmentLength = index - lastSlash - 1;\n      }\n\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46\n    /* `.` */\n    && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return result;\n}\n/**\n * @param {string} path\n */\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n/* eslint-enable max-depth, complexity */\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js\n// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don\u2019t think one tiny line of code can be copyrighted. \ud83d\ude05\nvar proc = {\n  cwd: cwd\n};\n\nfunction cwd() {\n  return '/';\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js\n/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nfunction isUrl(fileURLOrPath) {\n  return fileURLOrPath !== null && typeof fileURLOrPath === 'object' && // @ts-expect-error: indexable.\n  fileURLOrPath.href && // @ts-expect-error: indexable.\n  fileURLOrPath.origin;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js\n/// <reference lib=\"dom\" />\n // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\n\nfunction urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    var error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    var _error = new TypeError('The URL must be of scheme file');\n\n    _error.code = 'ERR_INVALID_URL_SCHEME';\n    throw _error;\n  }\n\n  return getPathFromURLPosix(path);\n}\n/**\n * @param {URL} url\n */\n\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    var error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n\n  var pathname = url.pathname;\n  var index = -1;\n\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37\n    /* `%` */\n    && pathname.charCodeAt(index + 1) === 50\n    /* `2` */\n    ) {\n      var third = pathname.charCodeAt(index + 2);\n\n      if (third === 70\n      /* `F` */\n      || third === 102\n      /* `f` */\n      ) {\n        /** @type {NodeJS.ErrnoException} */\n        var _error2 = new TypeError('File URL path must not include encoded / characters');\n\n        _error2.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw _error2;\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname);\n}\n\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/index.js\n\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\n\n\n\n // Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nvar lib_VFile = /*#__PURE__*/function () {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it\u2019s treated as `{value: options}`.\n   * If `options` is a `URL`, it\u2019s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It\u2019s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  function VFile(value) {\n    Object(classCallCheck[\"a\" /* default */])(this, VFile);\n\n    /** @type {Options} */\n    var options;\n\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || is_buffer_default()(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {\n        value: value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value;\n    }\n    /**\n     * Place to store custom information (default: `{}`).\n     * It\u2019s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n\n\n    this.data = {};\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n\n    this.messages = [];\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n\n    this.history = [];\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n\n    this.cwd = proc.cwd();\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n\n    this.value; // The below are non-standard, they are \u201cwell-known\u201d.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n\n    this.stored;\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n\n    this.result;\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n\n    this.map;\n    /* eslint-enable no-unused-expressions */\n    // Set path related properties in the correct order.\n\n    var index = -1;\n\n    while (++index < order.length) {\n      var _prop = order[index]; // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n\n      if (_prop in options && options[_prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[_prop] = _prop === 'history' ? Object(toConsumableArray[\"default\"])(options[_prop]) : options[_prop];\n      }\n    }\n    /** @type {string} */\n\n\n    var prop; // Set non-path related properties.\n\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop];\n    }\n  }\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n\n\n  Object(createClass[\"a\" /* default */])(VFile, [{\n    key: \"path\",\n    get: function get() {\n      return this.history[this.history.length - 1];\n    }\n    /**\n     * Set the full path (example: `'~/index.min.js'`).\n     * Cannot be nullified.\n     * You can set a file URL (a `URL` object with a `file:` protocol) which will\n     * be turned into a path with `url.fileURLToPath`.\n     * @param {string|URL} path\n     */\n    ,\n    set: function set(path) {\n      if (isUrl(path)) {\n        path = urlToPath(path);\n      }\n\n      assertNonEmpty(path, 'path');\n\n      if (this.path !== path) {\n        this.history.push(path);\n      }\n    }\n    /**\n     * Get the parent path (example: `'~'`).\n     */\n\n  }, {\n    key: \"dirname\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.dirname(this.path) : undefined;\n    }\n    /**\n     * Set the parent path (example: `'~'`).\n     * Cannot be set if there\u2019s no `path` yet.\n     */\n    ,\n    set: function set(dirname) {\n      lib_assertPath(this.basename, 'dirname');\n      this.path = minpath_browser_path.join(dirname || '', this.basename);\n    }\n    /**\n     * Get the basename (including extname) (example: `'index.min.js'`).\n     */\n\n  }, {\n    key: \"basename\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.basename(this.path) : undefined;\n    }\n    /**\n     * Set basename (including extname) (`'index.min.js'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(basename) {\n      assertNonEmpty(basename, 'basename');\n      assertPart(basename, 'basename');\n      this.path = minpath_browser_path.join(this.dirname || '', basename);\n    }\n    /**\n     * Get the extname (including dot) (example: `'.js'`).\n     */\n\n  }, {\n    key: \"extname\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.extname(this.path) : undefined;\n    }\n    /**\n     * Set the extname (including dot) (example: `'.js'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be set if there\u2019s no `path` yet.\n     */\n    ,\n    set: function set(extname) {\n      assertPart(extname, 'extname');\n      lib_assertPath(this.dirname, 'extname');\n\n      if (extname) {\n        if (extname.charCodeAt(0) !== 46\n        /* `.` */\n        ) {\n          throw new Error('`extname` must start with `.`');\n        }\n\n        if (extname.includes('.', 1)) {\n          throw new Error('`extname` cannot contain multiple dots');\n        }\n      }\n\n      this.path = minpath_browser_path.join(this.dirname, this.stem + (extname || ''));\n    }\n    /**\n     * Get the stem (basename w/o extname) (example: `'index.min'`).\n     */\n\n  }, {\n    key: \"stem\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.basename(this.path, this.extname) : undefined;\n    }\n    /**\n     * Set the stem (basename w/o extname) (example: `'index.min'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(stem) {\n      assertNonEmpty(stem, 'stem');\n      assertPart(stem, 'stem');\n      this.path = minpath_browser_path.join(this.dirname || '', stem + (this.extname || ''));\n    }\n    /**\n     * Serialize the file.\n     *\n     * @param {BufferEncoding} [encoding='utf8']\n     *   When `value` is a `Buffer`, `encoding` is a character encoding to\n     *   understand it as (default: `'utf8'`).\n     * @returns {string}\n     *   Serialized file.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      return (this.value || '').toString(encoding);\n    }\n    /**\n     * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n     * associates it with the file by adding it to `vfile.messages` and setting\n     * `message.file` to the current filepath.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"message\",\n    value: function message(reason, place, origin) {\n      var message = new vfile_message_VFileMessage(reason, place, origin);\n\n      if (this.path) {\n        message.name = this.path + ':' + message.name;\n        message.file = this.path;\n      }\n\n      message.fatal = false;\n      this.messages.push(message);\n      return message;\n    }\n    /**\n     * Like `VFile#message()`, but associates an informational message where\n     * `fatal` is set to `null`.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = null;\n      return message;\n    }\n    /**\n     * Like `VFile#message()`, but associates a fatal message where `fatal` is\n     * set to `true`, and then immediately throws it.\n     *\n     * > \ud83d\udc49 **Note**: a fatal error means that a file is no longer processable.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {never}\n     *   Message.\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = true;\n      throw message;\n    }\n  }]);\n\n  return VFile;\n}();\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\n\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath_browser_path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + minpath_browser_path.sep + '`');\n  }\n}\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\n\n\nfunction lib_assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js\nvar toArray = __webpack_require__(\"T5bk\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/bail/index.js\n/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nfunction bail(error) {\n  if (error) {\n    throw error;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/extend/index.js\nvar extend = __webpack_require__(\"6dBs\");\nvar extend_default = /*#__PURE__*/__webpack_require__.n(extend);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/is-plain-obj/index.js\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/trough/index.js\n\n\n/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nfunction trough() {\n  /** @type {Array<Middleware>} */\n  var fns = [];\n  /** @type {Pipeline} */\n\n  var pipeline = {\n    run: run,\n    use: use\n  };\n  return pipeline;\n  /** @type {Run} */\n\n  function run() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    var middlewareIndex = -1;\n    /** @type {Callback} */\n\n    var callback = values.pop();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback);\n    }\n\n    next.apply(void 0, [null].concat(Object(toConsumableArray[\"default\"])(values)));\n    /**\n     * Run the next `fn`, or we\u2019re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n\n    function next(error) {\n      var fn = fns[++middlewareIndex];\n      var index = -1;\n\n      if (error) {\n        callback(error);\n        return;\n      } // Copy non-nullish input into values.\n\n\n      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        output[_key2 - 1] = arguments[_key2];\n      }\n\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index];\n        }\n      } // Save the newly created `output` for the next call.\n\n\n      values = output; // Next or done.\n\n      if (fn) {\n        wrap(fn, next).apply(void 0, output);\n      } else {\n        callback.apply(void 0, [null].concat(output));\n      }\n    }\n  }\n  /** @type {Use} */\n\n\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);\n    }\n\n    fns.push(middelware);\n    return pipeline;\n  }\n}\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\n\nfunction wrap(middleware, callback) {\n  /** @type {boolean} */\n  var called;\n  return wrapped;\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n\n  function wrapped() {\n    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      parameters[_key3] = arguments[_key3];\n    }\n\n    var fnExpectsCallback = middleware.length > parameters.length;\n    /** @type {any} */\n\n    var result;\n\n    if (fnExpectsCallback) {\n      parameters.push(done);\n    }\n\n    try {\n      result = middleware.apply(this, parameters);\n    } catch (error) {\n      var exception =\n      /** @type {Error} */\n      error; // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n\n      if (fnExpectsCallback && called) {\n        throw exception;\n      }\n\n      return done(exception);\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n\n\n  function done(error) {\n    if (!called) {\n      called = true;\n\n      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        output[_key4 - 1] = arguments[_key4];\n      }\n\n      callback.apply(void 0, [error].concat(output));\n    }\n  }\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n\n\n  function then(value) {\n    done(null, value);\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unified/lib/index.js\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\n\n\n\n\n // Expose a frozen processor.\n\nvar unified = base().freeze();\nvar own = {}.hasOwnProperty; // Function to create the first processor.\n\n/**\n * @returns {Processor}\n */\n\nfunction base() {\n  var transformers = trough();\n  /** @type {Processor['attachers']} */\n\n  var attachers = [];\n  /** @type {Record<string, unknown>} */\n\n  var namespace = {};\n  /** @type {boolean|undefined} */\n\n  var frozen;\n  var freezeIndex = -1; // Data management.\n  // @ts-expect-error: overloads are handled.\n\n  processor.data = data;\n  processor.Parser = undefined;\n  processor.Compiler = undefined; // Lock.\n\n  processor.freeze = freeze; // Plugins.\n\n  processor.attachers = attachers; // @ts-expect-error: overloads are handled.\n\n  processor.use = use; // API.\n\n  processor.parse = parse;\n  processor.stringify = stringify; // @ts-expect-error: overloads are handled.\n\n  processor.run = run;\n  processor.runSync = runSync; // @ts-expect-error: overloads are handled.\n\n  processor.process = process;\n  processor.processSync = processSync; // Expose.\n\n  return processor; // Create a new processor based on the processor in the current scope.\n\n  /** @type {Processor} */\n\n  function processor() {\n    var destination = base();\n    var index = -1;\n\n    while (++index < attachers.length) {\n      destination.use.apply(destination, Object(toConsumableArray[\"default\"])(attachers[index]));\n    }\n\n    destination.data(extend_default()(true, {}, namespace));\n    return destination;\n  }\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n\n\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      } // Get `key`.\n\n\n      return own.call(namespace, key) && namespace[key] || null;\n    } // Set space.\n\n\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    } // Get space.\n\n\n    return namespace;\n  }\n  /** @type {Processor['freeze']} */\n\n\n  function freeze() {\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      var _attachers$freezeInde = Object(toArray[\"a\" /* default */])(attachers[freezeIndex]),\n          attacher = _attachers$freezeInde[0],\n          options = _attachers$freezeInde.slice(1);\n\n      if (options[0] === false) {\n        continue;\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined;\n      }\n      /** @type {Transformer|void} */\n\n\n      var transformer = attacher.call.apply(attacher, [processor].concat(Object(toConsumableArray[\"default\"])(options)));\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Number.POSITIVE_INFINITY;\n    return processor;\n  }\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n\n\n  function use(value) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n\n    /** @type {Record<string, unknown>|undefined} */\n    var settings;\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {// Empty.\n    } else if (typeof value === 'function') {\n      addPlugin.apply(void 0, [value].concat(options));\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings);\n    }\n\n    return processor;\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          var _value = Object(toArray[\"a\" /* default */])(value),\n              plugin = _value[0],\n              _options = _value.slice(1);\n\n          addPlugin.apply(void 0, [plugin].concat(Object(toConsumableArray[\"default\"])(_options)));\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`');\n      }\n    }\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings);\n      }\n    }\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n\n\n    function addList(plugins) {\n      var index = -1;\n\n      if (plugins === null || plugins === undefined) {// Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          var thing = plugins[index];\n          add(thing);\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n\n\n    function addPlugin(plugin, value) {\n      var index = -1;\n      /** @type {Processor['attachers'][number]|undefined} */\n\n      var entry;\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index];\n          break;\n        }\n      }\n\n      if (entry) {\n        if (isPlainObject(entry[1]) && isPlainObject(value)) {\n          value = extend_default()(true, entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push(Array.prototype.slice.call(arguments));\n      }\n    }\n  }\n  /** @type {Processor['parse']} */\n\n\n  function parse(doc) {\n    processor.freeze();\n    var file = vfile(doc);\n    var Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n  /** @type {Processor['stringify']} */\n\n\n  function stringify(node, doc) {\n    processor.freeze();\n    var file = vfile(doc);\n    var Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n\n\n  function run(node, doc, callback) {\n    assertNode(node);\n    processor.freeze();\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc;\n      doc = undefined;\n    }\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can\u2019t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done);\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n\n      function done(error, tree, file) {\n        tree = tree || node;\n\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['runSync']} */\n\n\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    var result;\n    /** @type {boolean|undefined} */\n\n    var complete;\n    processor.run(node, file, done);\n    assertDone('runSync', 'run', complete); // @ts-expect-error: we either bailed on an error or have a tree.\n\n    return result;\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n\n    function done(error, tree) {\n      bail(error);\n      result = tree;\n      complete = true;\n    }\n  }\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n\n\n  function process(doc, callback) {\n    processor.freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n      processor.run(processor.parse(file), file, function (error, tree, file) {\n        if (error || !tree || !file) {\n          done(error);\n        } else {\n          /** @type {unknown} */\n          var result = processor.stringify(tree, file);\n\n          if (result === undefined || result === null) {// Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result;\n          } else {\n            file.result = result;\n          }\n\n          done(error, file);\n        }\n      });\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n\n      function done(error, file) {\n        if (error || !file) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['processSync']} */\n\n\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    var complete;\n    processor.freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    var file = vfile(doc);\n    processor.process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n}\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\n\n\nfunction newable(value, name) {\n  return typeof value === 'function' && // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  value.prototype && ( // A function with keys in its prototype is probably a constructor.\n  // Classes\u2019 prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  keys(value.prototype) || name in value.prototype);\n}\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\n\n\nfunction keys(value) {\n  /** @type {string} */\n  var key;\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\n\n\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`');\n  }\n}\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\n\n\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`');\n  }\n}\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\n\n\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot call `' + name + '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');\n  }\n}\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\n\n\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObject(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`'); // Fine.\n  }\n}\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\n\n\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\n\n\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new lib_VFile(value);\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\n\n\nfunction looksLikeAVFile(value) {\n  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);\n}\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\n\n\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || is_buffer_default()(value);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-string/index.js\n/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node\u2019s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nfunction mdast_util_to_string_toString(node, options) {\n  var _ref = options || {},\n      _ref$includeImageAlt = _ref.includeImageAlt,\n      includeImageAlt = _ref$includeImageAlt === void 0 ? true : _ref$includeImageAlt;\n\n  return one(node, includeImageAlt);\n}\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\nfunction one(node, includeImageAlt) {\n  return node && typeof node === 'object' && ( // @ts-ignore looks like a literal.\n  node.value || ( // @ts-ignore looks like an image.\n  includeImageAlt ? node.alt : '') || // @ts-ignore looks like a parent.\n  'children' in node && mdast_util_to_string_all(node.children, includeImageAlt) || Array.isArray(node) && mdast_util_to_string_all(node, includeImageAlt)) || '';\n}\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\n\nfunction mdast_util_to_string_all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = [];\n  var index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n\n  return result.join('');\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-combine-extensions/index.js\nvar micromark_util_combine_extensions = __webpack_require__(\"UJmy\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-factory-space/index.js\nvar micromark_factory_space = __webpack_require__(\"fAmA\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-util-character/index.js + 1 modules\nvar micromark_util_character = __webpack_require__(\"Jac1\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\n\n/** @type {InitialConstruct} */\n\nvar content_content = {\n  tokenize: initializeContent\n};\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n\n  var previous;\n  return contentStart;\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, contentStart, 'linePrefix');\n  }\n  /** @type {State} */\n\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n  /** @type {State} */\n\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-chunked/index.js\nvar micromark_util_chunked = __webpack_require__(\"BdGo\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\n\n\n\n/** @type {InitialConstruct} */\n\nvar document_document = {\n  tokenize: initializeDocument\n};\n/** @type {Construct} */\n\nvar containerConstruct = {\n  tokenize: tokenizeContainer\n};\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  var self = this;\n  /** @type {StackItem[]} */\n\n  var stack = [];\n  var continued = 0;\n  /** @type {TokenizeContext|undefined} */\n\n  var childFlow;\n  /** @type {Token|undefined} */\n\n  var childToken;\n  /** @type {number} */\n\n  var lineStartOffset;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      var item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    } // Done.\n\n\n    return checkNewContainers(code);\n  }\n  /** @type {State} */\n\n\n  function documentContinue(code) {\n    continued++; // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it\u2019s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n\n      if (childFlow) {\n        closeFlow();\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {Point|undefined} */\n\n      var point; // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n\n      exitContainers(continued); // Fix positions.\n\n      var index = indexBeforeExits;\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they\u2019re still also at the end).\n\n\n      Object(micromark_util_chunked[\"b\" /* splice */])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n\n    return start(code);\n  }\n  /** @type {State} */\n\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there\u2019s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can\u2019t have containers \u201cpierce\u201d into them, so we can immediately\n      // start.\n\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      } // If we do have flow, it could still be a blank line,\n      // but we\u2019d be interrupting it w/ a new container if there\u2019s a current\n      // construct.\n\n\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    } // Check if there is a new container.\n\n\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n  /** @type {State} */\n\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n  /** @type {State} */\n\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n  /** @type {State} */\n\n\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]); // Try another.\n\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n  /** @type {State} */\n\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.\n\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n\n    effects.consume(code);\n    return flowContinue;\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n\n  function writeToChild(token, eof) {\n    var stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream); // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can\u2019t \u201cunmake\u201d it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which \u201cunmakes\u201d the first line\n    // and turns the whole into one content block.\n    //\n    // We\u2019ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      var index = childFlow.events.length;\n\n      while (index--) {\n        if ( // The token starts before the line ending\u2026\n        childFlow.events[index][1].start.offset < lineStartOffset && ( // \u2026and either is not ended yet\u2026\n        !childFlow.events[index][1].end || // \u2026or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there\u2019s still something open, which means it\u2019s a lazy line\n          // part of something.\n          return;\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean|undefined} */\n\n      var seen;\n      /** @type {Point|undefined} */\n\n      var point; // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n\n          seen = true;\n        }\n      }\n\n      exitContainers(continued); // Fix positions.\n\n      index = indexBeforeExits;\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they\u2019re still also at the end).\n\n\n      Object(micromark_util_chunked[\"b\" /* splice */])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n\n  function exitContainers(size) {\n    var index = stack.length; // Exit open containers.\n\n    while (index-- > size) {\n      var entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n\n    stack.length = size;\n  }\n\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable[\"null\"].includes('codeIndented') ? undefined : 4);\n}\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/blank-line.js\nvar blank_line = __webpack_require__(\"Jf8z\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/content.js\nvar lib_content = __webpack_require__(\"Y+nY\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\n\n\n\n/** @type {InitialConstruct} */\n\nvar flow = {\n  tokenize: initializeFlow\n};\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  var self = this;\n  var initial = effects.attempt( // Try to parse a blank line.\n  blank_line[\"a\" /* blankLine */], atBlankEnding, // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(lib_content[\"a\" /* content */], afterConstruct)), 'linePrefix')));\n  return initial;\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n  /** @type {State} */\n\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js\n/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nvar resolver = {\n  resolveAll: createResolver()\n};\nvar text_string = initializeFactory('string');\nvar text_text = initializeFactory('text');\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    var self = this;\n    var constructs = this.parser.constructs[field];\n    var text = effects.attempt(constructs, start, notText);\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n    /** @type {State} */\n\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n    /** @type {State} */\n\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      } // Data.\n\n\n      effects.consume(code);\n      return data;\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n\n      var list = constructs[code];\n      var index = -1;\n\n      if (list) {\n        while (++index < list.length) {\n          var item = list[index];\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\n\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    var index = -1;\n    /** @type {number|undefined} */\n\n    var enter; // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don\u2019t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n\n        enter = undefined;\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can\u2019t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\n\nfunction resolveAllLineSuffixes(events, context) {\n  var eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      var data = events[eventIndex - 1][1];\n      var chunks = context.sliceStream(data);\n      var index = chunks.length;\n      var bufferIndex = -1;\n      var size = 0;\n      /** @type {boolean|undefined} */\n\n      var tabs = void 0;\n\n      while (index--) {\n        var chunk = chunks[index];\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        } // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {// Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      if (size) {\n        var token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n\n      eventIndex++;\n    }\n  }\n\n  return events;\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-resolve-all/index.js\nvar micromark_util_resolve_all = __webpack_require__(\"s+04\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js\n\n\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\n\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn\u2019t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\n\nfunction createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  var point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n\n  var columnStart = {};\n  /** @type {Construct[]} */\n\n  var resolveAllConstructs = [];\n  /** @type {Chunk[]} */\n\n  var chunks = [];\n  /** @type {Token[]} */\n\n  var stack = [];\n  /** @type {boolean|undefined} */\n\n  var consumed = true;\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  var effects = {\n    consume: consume,\n    enter: enter,\n    exit: exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  var context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser: parser,\n    sliceStream: sliceStream,\n    sliceSerialize: sliceSerialize,\n    now: now,\n    defineSkip: defineSkip,\n    write: write\n  };\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  var state = initialize.tokenize.call(context, effects);\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  var expectedCode;\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n\n  return context;\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = Object(micromark_util_chunked[\"a\" /* push */])(chunks, slice);\n    main(); // Exit if we\u2019re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n\n    addResult(initialize, 0); // Otherwise, resolve, and exit.\n\n    context.events = Object(micromark_util_resolve_all[\"a\" /* resolveAll */])(resolveAllConstructs, context.events, context);\n    return context.events;\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  /** @type {TokenizeContext['now']} */\n\n\n  function now() {\n    return Object.assign({}, point);\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n\n  function main() {\n    /** @type {number} */\n    var chunkIndex;\n\n    while (point._index < chunks.length) {\n      var chunk = chunks[point._index]; // If we\u2019re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n  /** @type {Effects['consume']} */\n\n\n  function consume(code) {\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    } // Not in a string chunk.\n\n\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++; // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    } // Expose the previous character.\n\n\n    context.previous = code; // Mark as consumed.\n\n    consumed = true;\n  }\n  /** @type {Effects['enter']} */\n\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    var token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n  /** @type {Effects['exit']} */\n\n\n  function exit(type) {\n    var token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n\n  function constructFactory(onreturn, fields) {\n    return hook;\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      var listOfConstructs;\n      /** @type {number} */\n\n      var constructIndex;\n      /** @type {Construct} */\n\n      var currentConstruct;\n      /** @type {Info} */\n\n      var info;\n      return Array.isArray(constructs) ?\n      /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n      ? handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          var def = code !== null && map[code];\n          var all = code !== null && map[\"null\"];\n          var list = [].concat(Object(toConsumableArray[\"default\"])(Array.isArray(def) ? def : def ? [def] : []), Object(toConsumableArray[\"default\"])(Array.isArray(all) ? all : all ? [all] : []));\n          return handleListOfConstructs(list)(code);\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n\n        if (list.length === 0) {\n          return bogusState;\n        }\n\n        return handleConstruct(list[constructIndex]);\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n\n      function handleConstruct(construct) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn\u2019t work because `inspect` in document does a check\n          // w/o a bogus, which doesn\u2019t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          if (construct.name && context.parser.constructs.disable[\"null\"].includes(construct.name)) {\n            return nok(code);\n          }\n\n          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a \u201clive binding\u201d, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n      /** @type {State} */\n\n\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      /** @type {State} */\n\n\n      function nok(code) {\n        consumed = true;\n        info.restore();\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n\n        return bogusState;\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n\n    if (construct.resolve) {\n      Object(micromark_util_chunked[\"b\" /* splice */])(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n\n  function store() {\n    var startPoint = now();\n    var startPrevious = context.previous;\n    var startCurrentConstruct = context.currentConstruct;\n    var startEventsIndex = context.events.length;\n    var startStack = Array.from(stack);\n    return {\n      restore: restore,\n      from: startEventsIndex\n    };\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it\u2019s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  var startIndex = token.start._index;\n  var startBufferIndex = token.start._bufferIndex;\n  var endIndex = token.end._index;\n  var endBufferIndex = token.end._bufferIndex;\n  /** @type {Chunk[]} */\n\n  var view;\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex);\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n\n  return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\n\nfunction serializeChunks(chunks, expandTabs) {\n  var index = -1;\n  /** @type {string[]} */\n\n  var result = [];\n  /** @type {boolean|undefined} */\n\n  var atTab;\n\n  while (++index < chunks.length) {\n    var chunk = chunks[index];\n    /** @type {string} */\n\n    var value = void 0;\n\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n\n    atTab = chunk === -2;\n    result.push(value);\n  }\n\n  return result.join('');\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(\"rePB\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/list.js\nvar lib_list = __webpack_require__(\"buE5\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/block-quote.js\nvar block_quote = __webpack_require__(\"/P17\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/definition.js\nvar lib_definition = __webpack_require__(\"I211\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-indented.js\nvar code_indented = __webpack_require__(\"C9pk\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/heading-atx.js\nvar heading_atx = __webpack_require__(\"p6qh\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/thematic-break.js\nvar thematic_break = __webpack_require__(\"6e0R\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/setext-underline.js\nvar setext_underline = __webpack_require__(\"sJhA\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/html-flow.js + 1 modules\nvar html_flow = __webpack_require__(\"Xolk\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-fenced.js\nvar code_fenced = __webpack_require__(\"BFk2\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/character-reference.js\nvar character_reference = __webpack_require__(\"F6qR\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/character-escape.js\nvar character_escape = __webpack_require__(\"B5kW\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/line-ending.js\nvar line_ending = __webpack_require__(\"Ccvd\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-image.js\nvar label_start_image = __webpack_require__(\"zwH7\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/attention.js + 1 modules\nvar attention = __webpack_require__(\"GNNO\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/autolink.js\nvar autolink = __webpack_require__(\"uVUd\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/html-text.js\nvar html_text = __webpack_require__(\"uBcU\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-link.js\nvar label_start_link = __webpack_require__(\"N7ly\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/hard-break-escape.js\nvar hard_break_escape = __webpack_require__(\"E9u0\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-end.js\nvar label_end = __webpack_require__(\"u4T5\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-text.js\nvar code_text = __webpack_require__(\"jQEU\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/constructs.js\n\n\nvar _document, _flowInitial, _flow, _string, _text;\n\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\n\n/** @type {Extension['document']} */\n\nvar constructs_document = (_document = {}, Object(defineProperty[\"a\" /* default */])(_document, 42, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 43, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 45, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 48, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 49, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 50, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 51, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 52, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 53, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 54, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 55, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 56, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 57, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 62, block_quote[\"a\" /* blockQuote */]), _document);\n/** @type {Extension['contentInitial']} */\n\nvar contentInitial = Object(defineProperty[\"a\" /* default */])({}, 91, lib_definition[\"a\" /* definition */]);\n/** @type {Extension['flowInitial']} */\n\nvar flowInitial = (_flowInitial = {}, Object(defineProperty[\"a\" /* default */])(_flowInitial, -2, code_indented[\"a\" /* codeIndented */]), Object(defineProperty[\"a\" /* default */])(_flowInitial, -1, code_indented[\"a\" /* codeIndented */]), Object(defineProperty[\"a\" /* default */])(_flowInitial, 32, code_indented[\"a\" /* codeIndented */]), _flowInitial);\n/** @type {Extension['flow']} */\n\nvar constructs_flow = (_flow = {}, Object(defineProperty[\"a\" /* default */])(_flow, 35, heading_atx[\"a\" /* headingAtx */]), Object(defineProperty[\"a\" /* default */])(_flow, 42, thematic_break[\"a\" /* thematicBreak */]), Object(defineProperty[\"a\" /* default */])(_flow, 45, [setext_underline[\"a\" /* setextUnderline */], thematic_break[\"a\" /* thematicBreak */]]), Object(defineProperty[\"a\" /* default */])(_flow, 60, html_flow[\"a\" /* htmlFlow */]), Object(defineProperty[\"a\" /* default */])(_flow, 61, setext_underline[\"a\" /* setextUnderline */]), Object(defineProperty[\"a\" /* default */])(_flow, 95, thematic_break[\"a\" /* thematicBreak */]), Object(defineProperty[\"a\" /* default */])(_flow, 96, code_fenced[\"a\" /* codeFenced */]), Object(defineProperty[\"a\" /* default */])(_flow, 126, code_fenced[\"a\" /* codeFenced */]), _flow);\n/** @type {Extension['string']} */\n\nvar constructs_string = (_string = {}, Object(defineProperty[\"a\" /* default */])(_string, 38, character_reference[\"a\" /* characterReference */]), Object(defineProperty[\"a\" /* default */])(_string, 92, character_escape[\"a\" /* characterEscape */]), _string);\n/** @type {Extension['text']} */\n\nvar constructs_text = (_text = {}, Object(defineProperty[\"a\" /* default */])(_text, -5, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, -4, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, -3, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, 33, label_start_image[\"a\" /* labelStartImage */]), Object(defineProperty[\"a\" /* default */])(_text, 38, character_reference[\"a\" /* characterReference */]), Object(defineProperty[\"a\" /* default */])(_text, 42, attention[\"a\" /* attention */]), Object(defineProperty[\"a\" /* default */])(_text, 60, [autolink[\"a\" /* autolink */], html_text[\"a\" /* htmlText */]]), Object(defineProperty[\"a\" /* default */])(_text, 91, label_start_link[\"a\" /* labelStartLink */]), Object(defineProperty[\"a\" /* default */])(_text, 92, [hard_break_escape[\"a\" /* hardBreakEscape */], character_escape[\"a\" /* characterEscape */]]), Object(defineProperty[\"a\" /* default */])(_text, 93, label_end[\"a\" /* labelEnd */]), Object(defineProperty[\"a\" /* default */])(_text, 95, attention[\"a\" /* attention */]), Object(defineProperty[\"a\" /* default */])(_text, 96, code_text[\"a\" /* codeText */]), _text);\n/** @type {Extension['insideSpan']} */\n\nvar insideSpan = {\n  \"null\": [attention[\"a\" /* attention */], resolver]\n};\n/** @type {Extension['attentionMarkers']} */\n\nvar attentionMarkers = {\n  \"null\": [42, 95]\n};\n/** @type {Extension['disable']} */\n\nvar disable = {\n  \"null\": []\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/parse.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\n\n\n\n\n\n\n\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nfunction parse_parse() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  var constructs = Object(micromark_util_combine_extensions[\"a\" /* combineExtensions */])( // @ts-expect-error Same as above.\n  [constructs_namespaceObject].concat(options.extensions || []));\n  /** @type {ParseContext} */\n\n  var parser = {\n    defined: [],\n    lazy: {},\n    constructs: constructs,\n    content: create(content_content),\n    document: create(document_document),\n    flow: create(flow),\n    string: create(text_string),\n    text: create(text_text)\n  };\n  return parser;\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js\n/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nvar search = /[\\0\\t\\n\\r]/g;\n/**\n * @returns {Preprocessor}\n */\n\nfunction preprocess() {\n  var column = 1;\n  var buffer = '';\n  /** @type {boolean|undefined} */\n\n  var start = true;\n  /** @type {boolean|undefined} */\n\n  var atCarriageReturn;\n  return preprocessor;\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    var chunks = [];\n    /** @type {RegExpMatchArray|null} */\n\n    var match;\n    /** @type {number} */\n\n    var next;\n    /** @type {number} */\n\n    var startPosition;\n    /** @type {number} */\n\n    var endPosition;\n    /** @type {Code} */\n\n    var code; // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n\n      start = undefined;\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n\n              while (column++ < next) {\n                chunks.push(-1);\n              }\n\n              break;\n            }\n\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n\n      startPosition = endPosition + 1;\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n\n    return chunks;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-subtokenize/index.js\nvar micromark_util_subtokenize = __webpack_require__(\"fcw5\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js\n/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @param {Event[]} events\n * @returns {Event[]}\n */\n\nfunction postprocess(events) {\n  while (!Object(micromark_util_subtokenize[\"a\" /* subtokenize */])(events)) {// Empty\n  }\n\n  return events;\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-decode-numeric-character-reference/index.js\nvar micromark_util_decode_numeric_character_reference = __webpack_require__(\"zVyO\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-util-decode-string/index.js\nvar micromark_util_decode_string = __webpack_require__(\"tqaX\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-util-normalize-identifier/index.js\nvar micromark_util_normalize_identifier = __webpack_require__(\"EWc2\");\n\n// EXTERNAL MODULE: ./node_modules/decode-named-character-reference/index.js + 1 modules\nvar decode_named_character_reference = __webpack_require__(\"/tra\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js\n\n\n/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\n\n\n\n\n\n\n\n\n\nvar lib_own = {}.hasOwnProperty;\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it\u2019s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nvar lib_fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n *   ((value: Value, options?: Options) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {Options} [options]\n * @returns {Root}\n */\nfunction fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n\n  return compiler(options)(postprocess(parse_parse(options).document().write(preprocess()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  var config = configure({\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }, options.mdastExtensions || []);\n  /** @type {CompileData} */\n\n  var data = {};\n  return compile;\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    var tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {CompileContext['stack']} */\n\n    var stack = [tree];\n    /** @type {CompileContext['tokenStack']} */\n\n    var tokenStack = [];\n    /** @type {Array<number>} */\n\n    var listStack = [];\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    var context = {\n      stack: stack,\n      tokenStack: tokenStack,\n      config: config,\n      enter: enter,\n      exit: exit,\n      buffer: buffer,\n      resume: resume,\n      setData: setData,\n      getData: getData\n    };\n    var index = -1;\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          var tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      var handler = config[events[index][0]];\n\n      if (lib_own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      var _tail = tokenStack[tokenStack.length - 1];\n\n      var _handler = _tail[1] || defaultOnError;\n\n      _handler.call(context, undefined, _tail[0]);\n    } // Figure out `root` position.\n\n\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n    index = -1;\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n\n    return tree;\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n\n  function prepareList(events, start, length) {\n    var index = start - 1;\n    var containerBalance = -1;\n    var listSpread = false;\n    /** @type {Token|undefined} */\n\n    var listItem;\n    /** @type {number|undefined} */\n\n    var lineIndex;\n    /** @type {number|undefined} */\n\n    var firstBlankLineIndex;\n    /** @type {boolean|undefined} */\n\n    var atMarker;\n\n    while (++index <= length) {\n      var event = events[index];\n\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {// Empty.\n      } else {\n        atMarker = undefined;\n      }\n\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          var tailIndex = index;\n          lineIndex = undefined;\n\n          while (tailIndex--) {\n            var tailEvent = events[tailIndex];\n\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {// Empty\n            } else {\n              break;\n            }\n          }\n\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            // @ts-expect-error Patched.\n            listItem._spread = true;\n          } // Fix position.\n\n\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        } // Create a new list item.\n\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }; // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    } // @ts-expect-error Patched.\n\n\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n\n  function setData(key, value) {\n    data[key] = value;\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n\n  function getData(key) {\n    return data[key];\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    };\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function opener(create, and) {\n    return open;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n\n  function enter(node, token, errorHandler) {\n    var parent = this.stack[this.stack.length - 1]; // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function closer(and) {\n    return close;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n\n  function exit(token, onExitError) {\n    var node = this.stack.pop();\n    var open = this.tokenStack.pop();\n\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it\u2019s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        var handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n\n    node.position.end = point(token.end);\n    return node;\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n\n  function resume() {\n    return mdast_util_to_string_toString(this.stack.pop());\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n  /** @type {Handle} */\n\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      var ancestor =\n      /** @type {List} */\n      this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfenceinfo() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfencemeta() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefenced() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodeindented() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    var label = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiontitlestring() {\n    var data = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiondestinationstring() {\n    var data = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitatxheadingsequence(token) {\n    var node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n\n    if (!node.depth) {\n      var depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadinglinesequence(token) {\n    var node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n  /** @type {Handle} */\n\n\n  function onenterdata(token) {\n    var parent =\n    /** @type {Parent} */\n    this.stack[this.stack.length - 1];\n    /** @type {Node} */\n\n    var tail = parent.children[parent.children.length - 1];\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text(); // @ts-expect-error: we\u2019ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      }; // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail);\n    }\n\n    this.stack.push(tail);\n  }\n  /** @type {Handle} */\n\n\n  function onexitdata(token) {\n    var tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitlineending(token) {\n    var context = this.stack[this.stack.length - 1]; // If we\u2019re at a hard break, include the line ending in there.\n\n    if (getData('atHardBreak')) {\n      var tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmlflow() {\n    var data = this.resume();\n    var node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmltext() {\n    var data = this.resume();\n    var node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodetext() {\n    var data = this.resume();\n    var node =\n    /** @type {InlineCode} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitlink() {\n    var context =\n    /** @type {Link & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitimage() {\n    var context =\n    /** @type {Image & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabeltext(token) {\n    var ancestor =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 2];\n    var string = this.sliceSerialize(token);\n    ancestor.label = Object(micromark_util_decode_string[\"a\" /* decodeString */])(string);\n    ancestor.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(string).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabel() {\n    var fragment =\n    /** @type {Fragment} */\n    this.stack[this.stack.length - 1];\n    var value = this.resume();\n    var node =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // Assume a reference.\n\n    setData('inReference', true);\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children;\n    } else {\n      node.alt = value;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcedestinationstring() {\n    var data = this.resume();\n    var node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcetitlestring() {\n    var data = this.resume();\n    var node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresource() {\n    setData('inReference');\n  }\n  /** @type {Handle} */\n\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n  /** @type {Handle} */\n\n\n  function onexitreferencestring(token) {\n    var label = this.resume();\n    var node =\n    /** @type {LinkReference|ImageReference} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencevalue(token) {\n    var data = this.sliceSerialize(token);\n    var type = getData('characterReferenceType');\n    /** @type {string} */\n\n    var value;\n\n    if (type) {\n      value = Object(micromark_util_decode_numeric_character_reference[\"a\" /* decodeNumericCharacterReference */])(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we\u2019ve tokenized is\n      // valid.\n      value = Object(decode_named_character_reference[\"a\" /* decodeNamedCharacterReference */])(data);\n    }\n\n    var tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    var node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    var node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n  /** @returns {Code} */\n\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n  /** @returns {InlineCode} */\n\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n  /** @returns {Definition} */\n\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n  /** @returns {Emphasis} */\n\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n  /** @returns {Heading} */\n\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n  /** @returns {Break} */\n\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n  /** @returns {HTML} */\n\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n  /** @returns {Image} */\n\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n  /** @returns {Link} */\n\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  /** @returns {Paragraph} */\n\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n  /** @returns {Strong} */\n\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n  /** @returns {Text} */\n\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /** @returns {ThematicBreak} */\n\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\n\nfunction configure(combined, extensions) {\n  var index = -1;\n\n  while (++index < extensions.length) {\n    var value = extensions[index];\n\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      lib_extension(combined, value);\n    }\n  }\n\n  return combined;\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\n\nfunction lib_extension(combined, extension) {\n  /** @type {string} */\n  var key;\n\n  for (key in extension) {\n    if (lib_own.call(extension, key)) {\n      var list = key === 'canContainEols' || key === 'transforms';\n      var maybe = lib_own.call(combined, key) ? combined[key] : undefined;\n      /* c8 ignore next */\n\n      var left = maybe || (combined[key] = list ? [] : {});\n      var right = extension[key];\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [].concat(Object(toConsumableArray[\"default\"])(left), Object(toConsumableArray[\"default\"])(right));\n        } else {\n          Object.assign(left, right);\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-parse/lib/index.js\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\n\nfunction remarkParse(options) {\n  var _this = this;\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  var parser = function parser(doc) {\n    // Assume options.\n    var settings =\n    /** @type {Options} */\n    _this.data('settings');\n\n    return lib_fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: _this.data('micromarkExtensions') || [],\n      mdastExtensions: _this.data('fromMarkdownExtensions') || []\n    }));\n  };\n\n  Object.assign(this, {\n    Parser: parser\n  });\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-parse/index.js\n\n/* harmony default export */ var remark_parse = (remarkParse);\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-builder/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\nvar u =\n/**\n* @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n*/\n\n/**\n * @param {string} type Type of node\n * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n * @param {ChildrenOrValue} [value] `children` or `value` of node\n * @returns {Node}\n */\nfunction u(type, props, value) {\n  /** @type {Node} */\n  var node = {\n    type: String(type)\n  };\n\n  if ((value === undefined || value === null) && (typeof props === 'string' || Array.isArray(props))) {\n    value = props;\n  } else {\n    Object.assign(node, props);\n  }\n\n  if (Array.isArray(value)) {\n    node.children = value;\n  } else if (value !== undefined && value !== null) {\n    node.value = String(value);\n  }\n\n  return node;\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-is/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\nvar unist_util_is_is =\n/**\n * Check if a node passes a test.\n * When a `parent` node is known the `index` of node should also be given.\n *\n * @type {(\n *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n * )}\n */\n\n/**\n * Check if a node passes a test.\n * When a `parent` node is known the `index` of node should also be given.\n *\n * @param {unknown} [node] Node to check\n * @param {Test} [test]\n * When nullish, checks if `node` is a `Node`.\n * When `string`, works like passing `function (node) {return node.type === test}`.\n * When `function` checks if function passed the node is true.\n * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n * When `array`, checks any one of the subtests pass.\n * @param {number|null|undefined} [index] Position of `node` in `parent`\n * @param {Parent|null|undefined} [parent] Parent of `node`\n * @param {unknown} [context] Context object to invoke `test` with\n * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n */\n// eslint-disable-next-line max-params\nfunction is(node, test, index, parent, context) {\n  var check = convert(test);\n\n  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {\n    throw new Error('Expected positive finite index');\n  }\n\n  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n\n  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n    throw new Error('Expected both parent and index');\n  } // @ts-expect-error Looks like a node.\n\n\n  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;\n};\nvar convert =\n/**\n * @type {(\n *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n *   ((test?: Test) => AssertAnything)\n * )}\n */\n\n/**\n * Generate an assertion from a check.\n * @param {Test} [test]\n * When nullish, checks if `node` is a `Node`.\n * When `string`, works like passing `function (node) {return node.type === test}`.\n * When `function` checks if function passed the node is true.\n * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n * When `array`, checks any one of the subtests pass.\n * @returns {AssertAnything}\n */\nfunction convert(test) {\n  if (test === undefined || test === null) {\n    return unist_util_is_ok;\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (typeof test === 'object') {\n    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n  }\n\n  if (typeof test === 'function') {\n    return castFactory(test);\n  }\n\n  throw new Error('Expected function, string, or object as test');\n};\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\n\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  var checks = [];\n  var index = -1;\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n\n  return castFactory(any);\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n\n  function any() {\n    var index = -1;\n\n    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      parameters[_key] = arguments[_key];\n    }\n\n    while (++index < checks.length) {\n      var _checks$index;\n\n      if ((_checks$index = checks[index]).call.apply(_checks$index, [this].concat(parameters))) return true;\n    }\n\n    return false;\n  }\n}\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\n\n\nfunction propsFactory(check) {\n  return castFactory(all);\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n\n  function all(node) {\n    /** @type {string} */\n    var key;\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false;\n    }\n\n    return true;\n  }\n}\n/**\n * Utility to convert a string into a function which checks a given node\u2019s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\n\n\nfunction typeFactory(check) {\n  return castFactory(type);\n  /**\n   * @param {Node} node\n   */\n\n  function type(node) {\n    return node && node.type === check;\n  }\n}\n/**\n * Utility to convert a string into a function which checks a given node\u2019s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\n\n\nfunction castFactory(check) {\n  return assertion;\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n\n  function assertion() {\n    for (var _len2 = arguments.length, parameters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      parameters[_key2] = arguments[_key2];\n    }\n\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call.apply(check, [this].concat(parameters)));\n  }\n} // Utility to return true.\n\n\nfunction unist_util_is_ok() {\n  return true;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit-parents/color.browser.js\n/**\n * @param {string} d\n * @returns {string}\n */\nfunction color(d) {\n  return d;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit-parents/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types').Action} Action\n * @typedef {import('./complex-types').Index} Index\n * @typedef {import('./complex-types').ActionTuple} ActionTuple\n * @typedef {import('./complex-types').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\n\n/**\n * Continue traversing as normal\n */\n\nvar CONTINUE = true;\n/**\n * Do not traverse this node\u2019s children\n */\n\nvar SKIP = 'skip';\n/**\n * Stop traversing immediately\n */\n\nvar EXIT = false;\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test node, optional\n * @param visitor Function to run for each node\n * @param reverse Visit the tree in reverse order, defaults to false\n */\n\nvar unist_util_visit_parents_visitParents =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {import('./complex-types').Visitor<Node>} visitor\n * @param {boolean} [reverse]\n */\nfunction visitParents(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor; // @ts-expect-error no visitor given, so `visitor` is test.\n\n    visitor = test;\n    test = null;\n  }\n\n  var is = convert(test);\n  var step = reverse ? -1 : 1;\n  factory(tree, null, [])();\n  /**\n   * @param {Node} node\n   * @param {number?} index\n   * @param {Array.<Parent>} parents\n   */\n\n  function factory(node, index, parents) {\n    /** @type {Object.<string, unknown>} */\n    // @ts-expect-error: hush\n    var value = typeof node === 'object' && node !== null ? node : {};\n    /** @type {string|undefined} */\n\n    var name;\n\n    if (typeof value.type === 'string') {\n      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;\n      Object.defineProperty(visit, 'name', {\n        value: 'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'\n      });\n    }\n\n    return visit;\n\n    function visit() {\n      /** @type {ActionTuple} */\n      var result = [];\n      /** @type {ActionTuple} */\n\n      var subresult;\n      /** @type {number} */\n\n      var offset;\n      /** @type {Array.<Parent>} */\n\n      var grandparents;\n\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents));\n\n        if (result[0] === EXIT) {\n          return result;\n        }\n      } // @ts-expect-error looks like a parent.\n\n\n      if (node.children && result[0] !== SKIP) {\n        // @ts-expect-error looks like a parent.\n        offset = (reverse ? node.children.length : -1) + step; // @ts-expect-error looks like a parent.\n\n        grandparents = parents.concat(node); // @ts-expect-error looks like a parent.\n\n        while (offset > -1 && offset < node.children.length) {\n          // @ts-expect-error looks like a parent.\n          subresult = factory(node.children[offset], offset, grandparents)();\n\n          if (subresult[0] === EXIT) {\n            return subresult;\n          }\n\n          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;\n        }\n      }\n\n      return result;\n    }\n  }\n};\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\n\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value];\n  }\n\n  return [value];\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test, optional\n * @param visitor Function to run for each node\n * @param reverse Fisit the tree in reverse, defaults to false\n */\n\nvar unist_util_visit_visit =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {import('./complex-types').Visitor} visitor\n * @param {boolean} [reverse]\n */\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  unist_util_visit_parents_visitParents(tree, test, overload, reverse);\n  /**\n   * @param {Node} node\n   * @param {Array.<Parent>} parents\n   */\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-position/index.js\n/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {Record<string, unknown> & {type: string, position?: PositionLike|undefined}} NodeLike\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n */\nvar pointStart = unist_util_position_point('start');\nvar pointEnd = unist_util_position_point('end');\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike|Node} [node]\n * @returns {Position}\n */\n\nfunction unist_util_position_position(node) {\n  return {\n    start: pointStart(node),\n    end: pointEnd(node)\n  };\n}\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\n\nfunction unist_util_position_point(type) {\n  return point;\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike|Node} [node]\n   * @returns {Point}\n   */\n\n  function point(node) {\n    var point = node && node.position && node.position[type] || {};\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    };\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-generated/index.js\n/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nfunction generated(node) {\n  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-definitions/index.js\n/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nvar mdast_util_definitions_own = {}.hasOwnProperty;\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\n\nfunction mdast_util_definitions_definitions(node) {\n  /** @type {Record<string, Definition>} */\n  var cache = Object.create(null);\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n\n  unist_util_visit_visit(node, 'definition', function (definition) {\n    var id = clean(definition.identifier);\n\n    if (id && !mdast_util_definitions_own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n\n  function definition(identifier) {\n    var id = clean(identifier);\n    return id && mdast_util_definitions_own.call(cache, id) ? cache[id] : null;\n  }\n}\n/**\n * @param {string} [value]\n * @returns {string}\n */\n\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/traverse.js\n\n\n\n/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nvar traverse_own = {}.hasOwnProperty;\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\n\nfunction unknown(h, node) {\n  var data = node.data || {};\n\n  if ('value' in node && !(traverse_own.call(data, 'hName') || traverse_own.call(data, 'hProperties') || traverse_own.call(data, 'hChildren'))) {\n    return h.augment(node, u('text', node.value));\n  }\n\n  return h(node, 'div', traverse_all(h, node));\n}\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\n\n\nfunction traverse_one(h, node, parent) {\n  var type = node && node.type;\n  /** @type {Handler} */\n\n  var fn; // Fail on non-nodes.\n\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n\n  if (traverse_own.call(h.handlers, type)) {\n    fn = h.handlers[type];\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode;\n  } else {\n    fn = h.unknownHandler;\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent);\n}\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\n\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, node), {}, {\n    children: traverse_all(h, node)\n  }) : node;\n}\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\n\n\nfunction traverse_all(h, parent) {\n  /** @type {Array<Content>} */\n  var values = [];\n\n  if ('children' in parent) {\n    var nodes = parent.children;\n    var index = -1;\n\n    while (++index < nodes.length) {\n      var result = traverse_one(h, nodes[index], parent);\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '');\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            var head = result.children[0];\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '');\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push.apply(values, Object(toConsumableArray[\"default\"])(result));\n        } else {\n          values.push(result);\n        }\n      }\n    }\n  }\n\n  return values;\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-sanitize-uri/index.js + 1 modules\nvar micromark_util_sanitize_uri = __webpack_require__(\"zAZl\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/wrap.js\n/**\n * @typedef {import('./index.js').Content} Content\n */\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\n\nfunction wrap_wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  var result = [];\n  var index = -1;\n\n  if (loose) {\n    result.push(u('text', '\\n'));\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'));\n    result.push(nodes[index]);\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'));\n  }\n\n  return result;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/footer.js\n/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\n\n\n\n/**\n * @param {H} h\n */\n\nfunction footer(h) {\n  var index = -1;\n  /** @type {Array<ElementContent>} */\n\n  var listItems = [];\n\n  while (++index < h.footnoteOrder.length) {\n    var def = h.footnoteById[h.footnoteOrder[index].toUpperCase()];\n\n    if (!def) {\n      continue;\n    }\n\n    var content = traverse_all(h, def);\n    var id = String(def.identifier);\n    var safeId = Object(micromark_util_sanitize_uri[\"a\" /* sanitizeUri */])(id.toLowerCase());\n    var referenceIndex = 0;\n    /** @type {Array<ElementContent>} */\n\n    var backReferences = [];\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      var backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href: '#' + h.clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{\n          type: 'text',\n          value: '\u21a9'\n        }]\n      };\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{\n            type: 'text',\n            value: String(referenceIndex)\n          }]\n        });\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n\n      backReferences.push(backReference);\n    }\n\n    var tail = content[content.length - 1];\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      var _tail$children;\n\n      var tailTail = tail.children[tail.children.length - 1];\n\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' ';\n      } else {\n        tail.children.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n\n      (_tail$children = tail.children).push.apply(_tail$children, backReferences);\n    } else {\n      content.push.apply(content, backReferences);\n    }\n    /** @type {Element} */\n\n\n    var listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {\n        id: h.clobberPrefix + 'fn-' + safeId\n      },\n      children: wrap_wrap(content, true)\n    };\n\n    if (def.position) {\n      listItem.position = def.position;\n    }\n\n    listItems.push(listItem);\n  }\n\n  if (listItems.length === 0) {\n    return null;\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {\n      dataFootnotes: true,\n      className: ['footnotes']\n    },\n    children: [{\n      type: 'element',\n      tagName: 'h2',\n      properties: {\n        id: 'footnote-label',\n        className: ['sr-only']\n      },\n      children: [u('text', h.footnoteLabel)]\n    }, {\n      type: 'text',\n      value: '\\n'\n    }, {\n      type: 'element',\n      tagName: 'ol',\n      properties: {},\n      children: wrap_wrap(listItems, true)\n    }, {\n      type: 'text',\n      value: '\\n'\n    }]\n  };\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js\n/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\n\nfunction blockquote(h, node) {\n  return h(node, 'blockquote', wrap_wrap(traverse_all(h, node), true));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/break.js\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\n\nfunction break_hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')];\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/code.js\n/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\n\nfunction code_code(h, node) {\n  var value = node.value ? node.value + '\\n' : ''; // To do: next major, use `node.lang` w/o regex, the splitting\u2019s been going\n  // on for years in remark now.\n\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/);\n  /** @type {Properties} */\n\n  var props = {};\n\n  if (lang) {\n    props.className = ['language-' + lang];\n  }\n\n  var code = h(node, 'code', props, [u('text', value)]);\n\n  if (node.meta) {\n    code.data = {\n      meta: node.meta\n    };\n  }\n\n  return h(node.position, 'pre', [code]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/delete.js\n/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\n\nfunction strikethrough(h, node) {\n  return h(node, 'del', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js\n/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\n\nfunction emphasis_emphasis(h, node) {\n  return h(node, 'em', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\n\nfunction footnoteReference(h, node) {\n  var id = String(node.identifier);\n  var safeId = Object(micromark_util_sanitize_uri[\"a\" /* sanitizeUri */])(id.toLowerCase());\n  var index = h.footnoteOrder.indexOf(id);\n  /** @type {number} */\n\n  var counter;\n\n  if (index === -1) {\n    h.footnoteOrder.push(id);\n    h.footnoteCounts[id] = 1;\n    counter = h.footnoteOrder.length;\n  } else {\n    h.footnoteCounts[id]++;\n    counter = index + 1;\n  }\n\n  var reuseCounter = h.footnoteCounts[id];\n  return h(node, 'sup', [h(node.position, 'a', {\n    href: '#' + h.clobberPrefix + 'fn-' + safeId,\n    id: h.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\n    dataFootnoteRef: true,\n    ariaDescribedBy: 'footnote-label'\n  }, [u('text', String(counter))])]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote.js\n/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n *\n * @todo\n *   `footnote` (or \u201cinline note\u201d) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\n\nfunction footnote(h, node) {\n  var footnoteById = h.footnoteById;\n  var no = 1;\n\n  while (no in footnoteById) {\n    no++;\n  }\n\n  var identifier = String(no);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier: identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier: identifier,\n    position: node.position\n  });\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/heading.js\n/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\n\nfunction heading_heading(h, node) {\n  return h(node, 'h' + node.depth, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/html.js\n/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\n\nfunction html_html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null;\n}\n// EXTERNAL MODULE: ./node_modules/mdurl/encode.js\nvar encode = __webpack_require__(\"xGQ6\");\nvar encode_default = /*#__PURE__*/__webpack_require__.n(encode);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/revert.js\n/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\n\nfunction revert(h, node) {\n  var subtype = node.referenceType;\n  var suffix = ']';\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n\n  var contents = traverse_all(h, node);\n  var head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n\n  var tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n\n  return contents;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js\n/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\n\nfunction imageReference(h, node) {\n  var def = h.definition(node.identifier);\n\n  if (!def) {\n    return revert(h, node);\n  }\n  /** @type {Properties} */\n\n\n  var props = {\n    src: encode_default()(def.url || ''),\n    alt: node.alt\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n\n  return h(node, 'img', props);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image.js\n/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\n\nfunction image_image(h, node) {\n  /** @type {Properties} */\n  var props = {\n    src: encode_default()(node.url),\n    alt: node.alt\n  };\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n\n  return h(node, 'img', props);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js\n/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\n\nfunction inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js\n/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\n\nfunction linkReference(h, node) {\n  var def = h.definition(node.identifier);\n\n  if (!def) {\n    return revert(h, node);\n  }\n  /** @type {Properties} */\n\n\n  var props = {\n    href: encode_default()(def.url || '')\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n\n  return h(node, 'a', props, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link.js\n/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\n\nfunction link_link(h, node) {\n  /** @type {Properties} */\n  var props = {\n    href: encode_default()(node.url)\n  };\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n\n  return h(node, 'a', props, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list-item.js\n\n\n/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\n\nfunction list_item_listItem(h, node, parent) {\n  var result = traverse_all(h, node);\n  var loose = parent ? listLoose(parent) : listItemLoose(node);\n  /** @type {Properties} */\n\n  var props = {};\n  /** @type {Array<Content>} */\n\n  var wrapped = [];\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    var paragraph;\n\n    if (result[0] && result[0].type === 'element' && result[0].tagName === 'p') {\n      paragraph = result[0];\n    } else {\n      paragraph = h(null, 'p', []);\n      result.unshift(paragraph);\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '));\n    }\n\n    paragraph.children.unshift(h(null, 'input', {\n      type: 'checkbox',\n      checked: node.checked,\n      disabled: true\n    })); // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n\n    props.className = ['task-list-item'];\n  }\n\n  var index = -1;\n\n  while (++index < result.length) {\n    var child = result[index]; // Add eols before nodes, except if this is a loose, first paragraph.\n\n    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {\n      wrapped.push(u('text', '\\n'));\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push.apply(wrapped, Object(toConsumableArray[\"default\"])(child.children));\n    } else {\n      wrapped.push(child);\n    }\n  }\n\n  var tail = result[result.length - 1]; // Add a final eol.\n\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'));\n  }\n\n  return h(node, 'li', props, wrapped);\n}\n/**\n * @param {List} node\n * @return {Boolean}\n */\n\nfunction listLoose(node) {\n  var loose = node.spread;\n  var children = node.children;\n  var index = -1;\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index]);\n  }\n\n  return Boolean(loose);\n}\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\n\n\nfunction listItemLoose(node) {\n  var spread = node.spread;\n  return spread === undefined || spread === null ? node.children.length > 1 : spread;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list.js\n/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\n\nfunction list_list(h, node) {\n  /** @type {Properties} */\n  var props = {};\n  var name = node.ordered ? 'ol' : 'ul';\n  var items = traverse_all(h, node);\n  var index = -1;\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start;\n  } // Like GitHub, add a class for custom styling.\n\n\n  while (++index < items.length) {\n    var item = items[index];\n\n    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {\n      props.className = ['contains-task-list'];\n      break;\n    }\n  }\n\n  return h(node, name, props, wrap_wrap(items, true));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js\n/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\n\nfunction paragraph_paragraph(h, node) {\n  return h(node, 'p', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/root.js\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\n\nfunction root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap_wrap(traverse_all(h, node))));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/strong.js\n/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\n\nfunction strong_strong(h, node) {\n  return h(node, 'strong', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table.js\n/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\n\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\n\nfunction table(h, node) {\n  var rows = node.children;\n  var index = -1;\n  var align = node.align || [];\n  /** @type {Array<Element>} */\n\n  var result = [];\n\n  while (++index < rows.length) {\n    var row = rows[index].children;\n    var name = index === 0 ? 'th' : 'td';\n    /** @type {Array<Content>} */\n\n    var out = [];\n    var cellIndex = -1;\n    var length = node.align ? align.length : row.length;\n\n    while (++cellIndex < length) {\n      var cell = row[cellIndex];\n      out.push(h(cell, name, {\n        align: align[cellIndex]\n      }, cell ? traverse_all(h, cell) : []));\n    }\n\n    result[index] = h(rows[index], 'tr', wrap_wrap(out, true));\n  }\n\n  return h(node, 'table', wrap_wrap([h(result[0].position, 'thead', wrap_wrap([result[0]], true))].concat(result[1] ? h({\n    start: pointStart(result[1]),\n    end: pointEnd(result[result.length - 1])\n  }, 'tbody', wrap_wrap(result.slice(1), true)) : []), true));\n}\n// EXTERNAL MODULE: ./node_modules/trim-lines/index.js\nvar trim_lines = __webpack_require__(\"fXlK\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/text.js\n/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\n\nfunction handlers_text_text(h, node) {\n  return h.augment(node, u('text', Object(trim_lines[\"a\" /* trimLines */])(String(node.value))));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js\n/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nfunction thematic_break_thematicBreak(h, node) {\n  return h(node, 'hr');\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar handlers = {\n  blockquote: blockquote,\n  \"break\": break_hardBreak,\n  code: code_code,\n  \"delete\": strikethrough,\n  emphasis: emphasis_emphasis,\n  footnoteReference: footnoteReference,\n  footnote: footnote,\n  heading: heading_heading,\n  html: html_html,\n  imageReference: imageReference,\n  image: image_image,\n  inlineCode: inlineCode,\n  linkReference: linkReference,\n  link: link_link,\n  listItem: list_item_listItem,\n  list: list_list,\n  paragraph: paragraph_paragraph,\n  root: root,\n  strong: strong_strong,\n  table: table,\n  text: handlers_text_text,\n  thematicBreak: thematic_break_thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}; // Return nothing for nodes that are ignored.\n\nfunction ignore() {\n  return null;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/index.js\n\n\n/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering\n * @property {string} footnoteLabel Label to use to introduce the footnote section\n * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array<string>} footnoteOrder Order in which footnotes occur\n * @property {Record<string, number>} footnoteCounts Counts the same footnote was used\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)<\/script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you\u2019re authoring in a different language.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you\u2019re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\n\n\n\n\n\n\n\nvar mdast_util_to_hast_lib_own = {}.hasOwnProperty;\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\n\nfunction lib_factory(tree, options) {\n  var settings = options || {};\n  var dangerous = settings.allowDangerousHtml || false;\n  /** @type {Record<string, FootnoteDefinition>} */\n\n  var footnoteById = {};\n  h.dangerous = dangerous;\n  h.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes';\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';\n  h.definition = mdast_util_definitions_definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array<string>} */\n\n  h.footnoteOrder = [];\n  /** @type {Record<string, number>} */\n\n  h.footnoteCounts = {};\n  h.augment = augment;\n  h.handlers = Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, handlers), settings.handlers);\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  unist_util_visit_visit(tree, 'footnoteDefinition', function (definition) {\n    var id = String(definition.identifier).toUpperCase(); // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n\n    if (!mdast_util_to_hast_lib_own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  }); // @ts-expect-error Hush, it\u2019s fine!\n\n  return h;\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      var data = left.data;\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n\n        right.tagName = data.hName;\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, right.properties), data.hProperties);\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n\n    if (left) {\n      var ctx = 'type' in left ? left : {\n        position: left\n      };\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n\n    return right;\n  }\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n\n\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    } // @ts-expect-error augmenting an element yields an element.\n\n\n    return augment(node, {\n      type: 'element',\n      tagName: tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\n\n\nfunction toHast(tree, options) {\n  var h = lib_factory(tree, options);\n  var node = traverse_one(h, tree, null);\n  var foot = footer(h);\n\n  if (foot) {\n    // @ts-expect-error If there\u2019s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-rehype/lib/index.js\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n // Note: the `<MdastRoot, HastRoot>` overload doesn\u2019t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It\u2019s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It\u2019s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\n\nvar remarkRehype =\n/** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\nfunction remarkRehype(destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);\n};\n\n/* harmony default export */ var lib = (remarkRehype);\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\n\nfunction bridge(destination, options) {\n  return function (node, file, next) {\n    destination.run(toHast(node, options), file, function (error) {\n      next(error);\n    });\n  };\n}\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\n\n\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return function (node) {\n    return toHast(node, options);\n  };\n}\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(\"17x9\");\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js\n\n\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\nvar schema_Schema = /*#__PURE__*/Object(createClass[\"a\" /* default */])(\n/**\n * @constructor\n * @param {Properties} property\n * @param {Normal} normal\n * @param {string} [space]\n */\nfunction Schema(property, normal, space) {\n  Object(classCallCheck[\"a\" /* default */])(this, Schema);\n\n  this.property = property;\n  this.normal = normal;\n\n  if (space) {\n    this.space = space;\n  }\n});\n/** @type {Properties} */\n\nschema_Schema.prototype.property = {};\n/** @type {Normal} */\n\nschema_Schema.prototype.normal = {};\n/** @type {string|null} */\n\nschema_Schema.prototype.space = null;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\n\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {};\n  /** @type {Normal} */\n\n  var normal = {};\n  var index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new schema_Schema(property, normal, space);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/normalize.js\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize_normalize(value) {\n  return value.toLowerCase();\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(\"JX7q\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/info.js\n\n\nvar info_Info = /*#__PURE__*/Object(createClass[\"a\" /* default */])(\n/**\n * @constructor\n * @param {string} property\n * @param {string} attribute\n */\nfunction Info(property, attribute) {\n  Object(classCallCheck[\"a\" /* default */])(this, Info);\n\n  /** @type {string} */\n  this.property = property;\n  /** @type {string} */\n\n  this.attribute = attribute;\n});\n/** @type {string|null} */\n\ninfo_Info.prototype.space = null;\ninfo_Info.prototype[\"boolean\"] = false;\ninfo_Info.prototype.booleanish = false;\ninfo_Info.prototype.overloadedBoolean = false;\ninfo_Info.prototype.number = false;\ninfo_Info.prototype.commaSeparated = false;\ninfo_Info.prototype.spaceSeparated = false;\ninfo_Info.prototype.commaOrSpaceSeparated = false;\ninfo_Info.prototype.mustUseProperty = false;\ninfo_Info.prototype.defined = false;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/types.js\nvar powers = 0;\n\nvar _boolean = increment();\n\n\nvar booleanish = increment();\nvar overloadedBoolean = increment();\nvar number = increment();\nvar spaceSeparated = increment();\nvar commaSeparated = increment();\nvar commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return Math.pow(2, ++powers);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js\n\n\n\n\n\n\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\n\nvar checks = Object.keys(types_namespaceObject);\nvar defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {\n  Object(inherits[\"a\" /* default */])(DefinedInfo, _Info);\n\n  var _super = Object(createSuper[\"a\" /* default */])(DefinedInfo);\n\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  function DefinedInfo(property, attribute, mask, space) {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, DefinedInfo);\n\n    var index = -1;\n    _this = _super.call(this, property, attribute);\n    mark(Object(assertThisInitialized[\"a\" /* default */])(_this), 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        var check = checks[index];\n        mark(Object(assertThisInitialized[\"a\" /* default */])(_this), checks[index], (mask & types_namespaceObject[check]) === types_namespaceObject[check]);\n      }\n    }\n\n    return _this;\n  }\n\n  return Object(createClass[\"a\" /* default */])(DefinedInfo);\n}(info_Info);\ndefined_info_DefinedInfo.prototype.defined = true;\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\n\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/create.js\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\n\nvar create_own = {}.hasOwnProperty;\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\n\nfunction create_create(definition) {\n  /** @type {Properties} */\n  var property = {};\n  /** @type {Normal} */\n\n  var normal = {};\n  /** @type {string} */\n\n  var prop;\n\n  for (prop in definition.properties) {\n    if (create_own.call(definition.properties, prop)) {\n      var value = definition.properties[prop];\n      var info = new defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);\n\n      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n      normal[normalize_normalize(prop)] = prop;\n      normal[normalize_normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new schema_Schema(property, normal, definition.space);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xlink.js\n\nvar xlink = create_create({\n  space: 'xlink',\n  transform: function transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase();\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xml.js\n\nvar xml = create_create({\n  space: 'xml',\n  transform: function transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase();\n  },\n  properties: {\n    xmlLang: null,\n    xmlBase: null,\n    xmlSpace: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\n\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase());\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js\n\n\nvar xmlns = create_create({\n  space: 'xmlns',\n  attributes: {\n    xmlnsxlink: 'xmlns:xlink'\n  },\n  transform: caseInsensitiveTransform,\n  properties: {\n    xmlns: null,\n    xmlnsXLink: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/aria.js\n\n\nvar aria = create_create({\n  transform: function transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/html.js\n\n\n\nvar lib_html_html = create_create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: _boolean,\n    allowPaymentRequest: _boolean,\n    allowUserMedia: _boolean,\n    alt: null,\n    as: null,\n    async: _boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: _boolean,\n    autoPlay: _boolean,\n    capture: _boolean,\n    charSet: null,\n    checked: _boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: _boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    \"default\": _boolean,\n    defer: _boolean,\n    dir: null,\n    dirName: null,\n    disabled: _boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: _boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: _boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: _boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: _boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: _boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: _boolean,\n    muted: _boolean,\n    name: null,\n    nonce: null,\n    noModule: _boolean,\n    noValidate: _boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: _boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: _boolean,\n    poster: null,\n    preload: null,\n    readOnly: _boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: _boolean,\n    reversed: _boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: _boolean,\n    seamless: _boolean,\n    selected: _boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: _boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null,\n    // Several. Use CSS `text-align` instead,\n    aLink: null,\n    // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated,\n    // `<object>`. List of URIs to archives\n    axis: null,\n    // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null,\n    // `<body>`. Use CSS `background-image` instead\n    bgColor: null,\n    // `<body>` and table elements. Use CSS `background-color` instead\n    border: number,\n    // `<table>`. Use CSS `border-width` instead,\n    borderColor: null,\n    // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number,\n    // `<body>`\n    cellPadding: null,\n    // `<table>`\n    cellSpacing: null,\n    // `<table>`\n    \"char\": null,\n    // Several table elements. When `align=char`, sets the character to align on\n    charOff: null,\n    // Several table elements. When `char`, offsets the alignment\n    classId: null,\n    // `<object>`\n    clear: null,\n    // `<br>`. Use CSS `clear` instead\n    code: null,\n    // `<object>`\n    codeBase: null,\n    // `<object>`\n    codeType: null,\n    // `<object>`\n    color: null,\n    // `<font>` and `<hr>`. Use CSS instead\n    compact: _boolean,\n    // Lists. Use CSS to reduce space between items instead\n    declare: _boolean,\n    // `<object>`\n    event: null,\n    // `<script>`\n    face: null,\n    // `<font>`. Use CSS instead\n    frame: null,\n    // `<table>`\n    frameBorder: null,\n    // `<iframe>`. Use CSS `border` instead\n    hSpace: number,\n    // `<img>` and `<object>`\n    leftMargin: number,\n    // `<body>`\n    link: null,\n    // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null,\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null,\n    // `<img>`. Use a `<picture>`\n    marginHeight: number,\n    // `<body>`\n    marginWidth: number,\n    // `<body>`\n    noResize: _boolean,\n    // `<frame>`\n    noHref: _boolean,\n    // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: _boolean,\n    // `<hr>`. Use background-color and height instead of borders\n    noWrap: _boolean,\n    // `<td>` and `<th>`\n    object: null,\n    // `<applet>`\n    profile: null,\n    // `<head>`\n    prompt: null,\n    // `<isindex>`\n    rev: null,\n    // `<link>`\n    rightMargin: number,\n    // `<body>`\n    rules: null,\n    // `<table>`\n    scheme: null,\n    // `<meta>`\n    scrolling: booleanish,\n    // `<frame>`. Use overflow in the child context\n    standby: null,\n    // `<object>`\n    summary: null,\n    // `<table>`\n    text: null,\n    // `<body>`. Use CSS `color` instead\n    topMargin: number,\n    // `<body>`\n    valueType: null,\n    // `<param>`\n    version: null,\n    // `<html>`. Use a doctype.\n    vAlign: null,\n    // Several. Use CSS `vertical-align` instead\n    vLink: null,\n    // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number,\n    // `<img>` and `<object>`\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: _boolean,\n    disableRemotePlayback: _boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/svg.js\n\n\n\nvar svg = create_create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: _boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    \"in\": null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null,\n    // SEMI_COLON_SEPARATED\n    keySplines: null,\n    // SEMI_COLON_SEPARATED\n    keyTimes: null,\n    // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/index.js\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\n\n\n\n\n\n\n\n\n\nvar property_information_html = merge([xml, xlink, xmlns, aria, lib_html_html], 'html');\nvar property_information_svg = merge([xml, xlink, xmlns, aria, svg], 'svg');\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/rehype-filter.js\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\n\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n\n  if (options.allowedElements || options.disallowedElements || options.allowElement) {\n    return function (tree) {\n      unist_util_visit_visit(tree, 'element', function (node, index, parent_) {\n        var parent =\n        /** @type {Element|Root} */\n        parent_;\n        /** @type {boolean|undefined} */\n\n        var remove;\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName);\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName);\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent);\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            var _parent$children;\n\n            (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(Object(toConsumableArray[\"default\"])(node.children)));\n          } else {\n            parent.children.splice(index, 1);\n          }\n\n          return index;\n        }\n\n        return undefined;\n      });\n    };\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/uri-transformer.js\nvar protocols = ['http', 'https', 'mailto', 'tel'];\n/**\n * @param {string} uri\n * @returns {string}\n */\n\nfunction uriTransformer(uri) {\n  var url = (uri || '').trim();\n  var first = url.charAt(0);\n\n  if (first === '#' || first === '/') {\n    return url;\n  }\n\n  var colon = url.indexOf(':');\n\n  if (colon === -1) {\n    return url;\n  }\n\n  var index = -1;\n\n  while (++index < protocols.length) {\n    var protocol = protocols[index];\n\n    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {\n      return url;\n    }\n  }\n\n  index = url.indexOf('?');\n\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n\n  index = url.indexOf('#');\n\n  if (index !== -1 && colon > index) {\n    return url;\n  } // eslint-disable-next-line no-script-url\n\n\n  return 'javascript:void(0)';\n}\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(\"TOwV\");\nvar react_is_default = /*#__PURE__*/__webpack_require__.n(react_is);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/hast-util-whitespace/index.js\n/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nfunction whitespace(thing) {\n  /** @type {string} */\n  var value = // @ts-ignore looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-ignore looks like a text.\n  thing.value || '' : thing; // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/find.js\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\n\nvar valid = /^data[-\\w.:]+$/i;\nvar dash = /-[a-z]/g;\nvar cap = /[A-Z]/g;\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\n\nfunction find(schema, value) {\n  var normal = normalize_normalize(value);\n  var prop = value;\n  var Type = info_Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      var rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      var _rest = value.slice(4);\n\n      if (!dash.test(_rest)) {\n        var dashes = _rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = defined_info_DefinedInfo;\n  }\n\n  return new Type(prop, value);\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js\nvar hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/space-separated-tokens/index.js\n/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nfunction space_separated_tokens_parse(value) {\n  var input = String(value || '').trim();\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : [];\n}\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\n\nfunction space_separated_tokens_stringify(values) {\n  return values.join(' ').trim();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/comma-separated-tokens/index.js\n/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nfunction comma_separated_tokens_parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = [];\n  var input = String(value || '');\n  var index = input.indexOf(',');\n  var start = 0;\n  /** @type {boolean} */\n\n  var end;\n  /** @type {string} */\n\n  var token;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    token = input.slice(start, index).trim();\n\n    if (token || !end) {\n      tokens.push(token);\n    }\n\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n\n  return tokens;\n}\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\n\nfunction comma_separated_tokens_stringify(values, options) {\n  var settings = options || {}; // Ensure the last empty entry is seen.\n\n  if (values[values.length - 1] === '') {\n    values = values.concat('');\n  }\n\n  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}\n// EXTERNAL MODULE: ./node_modules/style-to-object/index.js\nvar style_to_object = __webpack_require__(\"CC3I\");\nvar style_to_object_default = /*#__PURE__*/__webpack_require__.n(style_to_object);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/ast-to-react.js\n/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\n\n\n\n\n\n\nvar ast_to_react_own = {}.hasOwnProperty; // The table-related elements that must not contain whitespace text according\n// to React.\n\nvar tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\n\nfunction childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  var children = [];\n  var childIndex = -1;\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n\n  var child;\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex];\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node));\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (node.type !== 'element' || !tableElements.has(node.tagName) || !whitespace(child)) {\n        children.push(child.value);\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value);\n    }\n  }\n\n  return children;\n}\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\n\nfunction toReact(context, node, index, parent) {\n  var options = context.options;\n  var parentSchema = context.schema;\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n\n  var name = node.tagName;\n  /** @type {Record<string, unknown>} */\n\n  var properties = {};\n  var schema = parentSchema;\n  /** @type {string} */\n\n  var property;\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = property_information_svg;\n    context.schema = schema;\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (ast_to_react_own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context);\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++;\n  }\n\n  var children = childrenToReact(context, node);\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--;\n  } // Restore parent schema.\n\n\n  context.schema = parentSchema; // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n\n  var position = node.position || {\n    start: {\n      line: null,\n      column: null,\n      offset: null\n    },\n    end: {\n      line: null,\n      column: null,\n      offset: null\n    }\n  };\n  var component = options.components && ast_to_react_own.call(options.components, name) ? options.components[name] : name;\n  var basic = typeof component === 'string' || component === react_default.a.Fragment;\n\n  if (!react_is_default.a.isValidElementType(component)) {\n    throw new TypeError(\"Component for name `\".concat(name, \"` not defined or is not renderable\"));\n  }\n\n  properties.key = [name, position.start.line, position.start.column, index].join('-');\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target = typeof options.linkTarget === 'function' ? options.linkTarget(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null) : options.linkTarget;\n  }\n\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null);\n  }\n\n  if (!basic && name === 'code' && parent.type === 'element' && parent.tagName !== 'pre') {\n    properties.inline = true;\n  }\n\n  if (!basic && (name === 'h1' || name === 'h2' || name === 'h3' || name === 'h4' || name === 'h5' || name === 'h6')) {\n    properties.level = Number.parseInt(name.charAt(1), 10);\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(String(properties.src || ''), String(properties.alt || ''), typeof properties.title === 'string' ? properties.title : null);\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    var input = getInputElement(node);\n    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.ordered = parent.tagName === 'ol';\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol';\n    properties.depth = context.listDepth;\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}; // @ts-expect-error assume `style` is an object\n\n      properties.style.textAlign = properties.align;\n      delete properties.align;\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th';\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead');\n  } // If `sourcePos` is given, pass source information (line/column info from markdown source).\n\n\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position);\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position;\n  } // If `includeElementIndex` is given, pass node index info to components.\n\n\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.siblingCount = getElementsBeforeCount(parent);\n  }\n\n  if (!basic) {\n    properties.node = node;\n  } // Ensure no React warnings are emitted for void elements w/ children.\n\n\n  return children.length > 0 ? react_default.a.createElement(component, properties, children) : react_default.a.createElement(component, properties);\n}\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\n\n\nfunction getInputElement(node) {\n  var index = -1;\n\n  while (++index < node.children.length) {\n    var child = node.children[index];\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\n\n\nfunction getElementsBeforeCount(parent, node) {\n  var index = -1;\n  var count = 0;\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break;\n    if (parent.children[index].type === 'element') count++;\n  }\n\n  return count;\n}\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\n\n\nfunction addProperty(props, prop, value, ctx) {\n  var info = find(ctx.schema, prop);\n  var result = value; // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n\n  if (result === null || result === undefined || result !== result) {\n    return;\n  } // Accept `array`.\n  // Most props are space-separated.\n\n\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? comma_separated_tokens_stringify(result) : space_separated_tokens_stringify(result);\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result);\n  }\n\n  if (info.space && info.property) {\n    props[ast_to_react_own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;\n  } else if (info.attribute) {\n    props[info.attribute] = result;\n  }\n}\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\n\n\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  var result = {};\n\n  try {\n    style_to_object_default()(value, iterator);\n  } catch (_unused) {// Silent.\n  }\n\n  return result;\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n\n  function iterator(name, v) {\n    var k = name.slice(0, 4) === '-ms-' ? \"ms-\".concat(name.slice(4)) : name;\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v;\n  }\n}\n/**\n * @param {unknown} _\n * @param {string} $1\n */\n\n\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase();\n}\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\n\n\nfunction flattenPosition(pos) {\n  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(function (d) {\n    return String(d);\n  }).join('');\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/react-markdown.js\n\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\n\n\n\n\n\n\n\n\n\nvar react_markdown_own = {}.hasOwnProperty;\nvar changelog = 'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';\n/** @type {Record<string, Deprecation>} */\n\nvar deprecated = {\n  plugins: {\n    to: 'plugins',\n    id: 'change-plugins-to-remarkplugins'\n  },\n  renderers: {\n    to: 'components',\n    id: 'change-renderers-to-components'\n  },\n  astPlugins: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  allowDangerousHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  escapeHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  source: {\n    to: 'children',\n    id: 'change-source-to-children'\n  },\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n};\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\n\nfunction ReactMarkdown(options) {\n  for (var key in deprecated) {\n    if (react_markdown_own.call(deprecated, key) && react_markdown_own.call(options, key)) {\n      var deprecation = deprecated[key];\n      console.warn(\"[react-markdown] Warning: please \".concat(deprecation.to ? \"use `\".concat(deprecation.to, \"` instead of\") : 'remove', \" `\").concat(key, \"` (see <\").concat(changelog, \"#\").concat(deprecation.id, \"> for more info)\"));\n      delete deprecated[key];\n    }\n  }\n\n  var processor = unified().use(remark_parse).use(options.remarkPlugins || []).use(lib, Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, options.remarkRehypeOptions), {}, {\n    allowDangerousHtml: true\n  })).use(options.rehypePlugins || []).use(rehypeFilter, options);\n  var file = new lib_VFile();\n\n  if (typeof options.children === 'string') {\n    file.value = options.children;\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\"[react-markdown] Warning: please pass a string as `children` (not: `\".concat(options.children, \"`)\"));\n  }\n\n  var hastNode = processor.runSync(processor.parse(file), file);\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node');\n  }\n  /** @type {ReactElement} */\n\n\n  var result = react_default.a.createElement(react_default.a.Fragment, {}, childrenToReact({\n    options: options,\n    schema: property_information_html,\n    listDepth: 0\n  }, hastNode));\n\n  if (options.className) {\n    result = react_default.a.createElement('div', {\n      className: options.className\n    }, result);\n  }\n\n  return result;\n}\nReactMarkdown.defaultProps = {\n  transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n  // Core options:\n  children: prop_types_default.a.string,\n  // Layout options:\n  className: prop_types_default.a.string,\n  // Filter options:\n  allowElement: prop_types_default.a.func,\n  allowedElements: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  disallowedElements: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  unwrapDisallowed: prop_types_default.a.bool,\n  // Plugin options:\n  remarkPlugins: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf( // prettier-ignore\n  // type-coverage:ignore-next-line\n  prop_types_default.a.any)]))])),\n  rehypePlugins: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf( // prettier-ignore\n  // type-coverage:ignore-next-line\n  prop_types_default.a.any)]))])),\n  // Transform options:\n  sourcePos: prop_types_default.a.bool,\n  rawSourcePos: prop_types_default.a.bool,\n  skipHtml: prop_types_default.a.bool,\n  includeElementIndex: prop_types_default.a.bool,\n  transformLinkUri: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),\n  linkTarget: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string]),\n  transformImageUri: prop_types_default.a.func,\n  components: prop_types_default.a.object\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///IujW\n")},KfSR:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.autoprefix = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar transforms = {\n  borderRadius: function borderRadius(value) {\n    return {\n      msBorderRadius: value,\n      MozBorderRadius: value,\n      OBorderRadius: value,\n      WebkitBorderRadius: value,\n      borderRadius: value\n    };\n  },\n  boxShadow: function boxShadow(value) {\n    return {\n      msBoxShadow: value,\n      MozBoxShadow: value,\n      OBoxShadow: value,\n      WebkitBoxShadow: value,\n      boxShadow: value\n    };\n  },\n  userSelect: function userSelect(value) {\n    return {\n      WebkitTouchCallout: value,\n      KhtmlUserSelect: value,\n      MozUserSelect: value,\n      msUserSelect: value,\n      WebkitUserSelect: value,\n      userSelect: value\n    };\n  },\n  flex: function flex(value) {\n    return {\n      WebkitBoxFlex: value,\n      MozBoxFlex: value,\n      WebkitFlex: value,\n      msFlex: value,\n      flex: value\n    };\n  },\n  flexBasis: function flexBasis(value) {\n    return {\n      WebkitFlexBasis: value,\n      flexBasis: value\n    };\n  },\n  justifyContent: function justifyContent(value) {\n    return {\n      WebkitJustifyContent: value,\n      justifyContent: value\n    };\n  },\n  transition: function transition(value) {\n    return {\n      msTransition: value,\n      MozTransition: value,\n      OTransition: value,\n      WebkitTransition: value,\n      transition: value\n    };\n  },\n  transform: function transform(value) {\n    return {\n      msTransform: value,\n      MozTransform: value,\n      OTransform: value,\n      WebkitTransform: value,\n      transform: value\n    };\n  },\n  absolute: function absolute(value) {\n    var direction = value && value.split(\' \');\n    return {\n      position: \'absolute\',\n      top: direction && direction[0],\n      right: direction && direction[1],\n      bottom: direction && direction[2],\n      left: direction && direction[3]\n    };\n  },\n  extend: function extend(name, otherElementStyles) {\n    var otherStyle = otherElementStyles[name];\n\n    if (otherStyle) {\n      return otherStyle;\n    }\n\n    return {\n      \'extend\': name\n    };\n  }\n};\n\nvar autoprefix = exports.autoprefix = function autoprefix(elements) {\n  var prefixed = {};\n  (0, _forOwn3["default"])(elements, function (styles, element) {\n    var expanded = {};\n    (0, _forOwn3["default"])(styles, function (value, key) {\n      var transform = transforms[key];\n\n      if (transform) {\n        expanded = _extends({}, expanded, transform(value));\n      } else {\n        expanded[key] = value;\n      }\n    });\n    prefixed[element] = expanded;\n  });\n  return prefixed;\n};\n\nexports["default"] = autoprefix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///KfSR\n')},Ty5D:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MemoryRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Prompt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Redirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return Route; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return StaticRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return Switch; });\n/* unused harmony export __HistoryContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return context; });\n/* unused harmony export generatePath */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return matchPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return useHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return useLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return useParams; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return useRouteMatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return withRouter; });\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("YS25");\n/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("FUNW");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("9R94");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("wx14");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("vRGJ");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("mSXw");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("zLVn");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("2mql");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\n // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext = /*#__PURE__*/createNamedContext("Router-History"); // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar context = /*#__PURE__*/createNamedContext$1("Router");\n/**\n * The public API for putting history on context.\n */\n\nvar Router = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\n\nvar MemoryRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createMemoryHistory */ "d"])(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nvar Lifecycle = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default.a.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n/**\n * The public API for navigating programmatically with a component.\n */\n\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(prevProps.to);\n\n        if (!Object(history__WEBPACK_IMPORTED_MODULE_2__[/* locationsAreEqual */ "f"])(prevLocation, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? undefined : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? undefined : children(props) : children : component ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? undefined : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createPath */ "e"])(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n     false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false);\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: stripBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.forEach(_this.props.children, function (child) {\n        if (match == null && react__WEBPACK_IMPORTED_MODULE_1___default.a.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? react__WEBPACK_IMPORTED_MODULE_1___default.a.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * A public higher-order component to access the imperative API\n */\n\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(props, ["wrappedComponentRef"]);\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default()(C, Component);\n}\n\nvar useContext = react__WEBPACK_IMPORTED_MODULE_1___default.a.useContext;\n\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\n\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(context).location;\n}\n\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\n\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, key, global; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Ty5D\n')},"V/vL":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRoutes", function() { return matchRoutes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderRoutes", function() { return renderRoutes; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("wx14");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction matchRoutes(routes, pathname,\n/*not public API*/\nbranch) {\n  if (branch === void 0) {\n    branch = [];\n  }\n\n  routes.some(function (route) {\n    var match = route.path ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"].computeRootMatch(pathname); // use default "root" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, branch);\n      }\n    }\n\n    return match;\n  });\n  return branch;\n}\n\nfunction renderRoutes(routes, extraProps, switchProps) {\n  if (extraProps === void 0) {\n    extraProps = {};\n  }\n\n  if (switchProps === void 0) {\n    switchProps = {};\n  }\n\n  return routes ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Switch */ "g"], switchProps, routes.map(function (route, i) {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Route */ "d"], {\n      key: route.key || i,\n      path: route.path,\n      exact: route.exact,\n      strict: route.strict,\n      render: function render(props) {\n        return route.render ? route.render(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, {}, extraProps, {\n          route: route\n        })) : react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(route.component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, extraProps, {\n          route: route\n        }));\n      }\n    });\n  })) : null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9tYXRjaFJvdXRlcy5qcz8yOWM3Iiwid2VicGFjazovLy8uLi9tb2R1bGVzL3JlbmRlclJvdXRlcy5qcz9hYTEwIl0sIm5hbWVzIjpbIm1hdGNoUm91dGVzIiwicm91dGVzIiwicGF0aG5hbWUiLCJicmFuY2giLCJzb21lIiwibWF0Y2giLCJyb3V0ZSIsInBhdGgiLCJtYXRjaFBhdGgiLCJsZW5ndGgiLCJSb3V0ZXIiLCJjb21wdXRlUm9vdE1hdGNoIiwicHVzaCIsInJlbmRlclJvdXRlcyIsImV4dHJhUHJvcHMiLCJzd2l0Y2hQcm9wcyIsIlJlYWN0IiwiU3dpdGNoIiwibWFwIiwiaSIsIlJvdXRlIiwia2V5IiwiZXhhY3QiLCJzdHJpY3QiLCJyZW5kZXIiLCJwcm9wcyIsImNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQSxTQUFTQSxXQUFULENBQXFCQyxNQUFyQixFQUE2QkMsUUFBN0I7O0FBQTBEQyxNQUExRCxFQUF1RTtNQUFiQSxNQUFhO0lBQWJBLE1BQWEsR0FBSixFQUFUQTs7O0VBQ3hERixNQUFNLENBQUNHLElBQVBILENBQVksaUJBQVM7UUFDYkksS0FBSyxHQUFHQyxLQUFLLENBQUNDLElBQU5ELEdBQ1ZFLHNFQUFTLENBQUNOLFFBQUQsRUFBV0ksS0FBWCxDQURDQSxHQUVWSCxNQUFNLENBQUNNLE1BQVBOLEdBQ0VBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTSxNQUFQTixHQUFnQixDQUFqQixDQUFOQSxDQUEwQkUsS0FENUJGO0lBQUFBLEVBRUVPLDJEQUFNLENBQUNDLGdCQUFQRCxDQUF3QlIsUUFBeEJRLEVBTGE7O1FBT2ZMLE9BQU87TUFDVEYsTUFBTSxDQUFDUyxJQUFQVCxDQUFZO1FBQUVHLEtBQUssRUFBTEEsS0FBRjtRQUFTRCxLQUFLLEVBQUxBO01BQVQsQ0FBWkY7O1VBRUlHLEtBQUssQ0FBQ0wsUUFBUTtRQUNoQkQsV0FBVyxDQUFDTSxLQUFLLENBQUNMLE1BQVAsRUFBZUMsUUFBZixFQUF5QkMsTUFBekIsQ0FBWEg7Ozs7V0FJR0s7RUFmVDtTQWtCT0Y7OztBQ2xCVCxTQUFTVSxZQUFULENBQXNCWixNQUF0QixFQUE4QmEsVUFBOUIsRUFBK0NDLFdBQS9DLEVBQWlFO01BQW5DRCxVQUFtQztJQUFuQ0EsVUFBbUMsR0FBdEIsRUFBYkE7OztNQUFpQkMsV0FBa0I7SUFBbEJBLFdBQWtCLEdBQUosRUFBZEE7OztTQUN0Q2QsTUFBTSxHQUNYZSwyREFBQ0MsMkRBQUQsRUFBWUYsV0FBWixFQUNHZCxNQUFNLENBQUNpQixHQUFQakIsQ0FBVyxVQUFDSyxLQUFELEVBQVFhLENBQVI7V0FDVkgsMkRBQUNJLDBEQUFEO01BQ0VDLEdBQUcsRUFBRWYsS0FBSyxDQUFDZSxHQUFOZixJQUFhYSxDQURwQjtNQUVFWixJQUFJLEVBQUVELEtBQUssQ0FBQ0MsSUFGZDtNQUdFZSxLQUFLLEVBQUVoQixLQUFLLENBQUNnQixLQUhmO01BSUVDLE1BQU0sRUFBRWpCLEtBQUssQ0FBQ2lCLE1BSmhCO01BS0VDLE1BQU0sRUFBRSx1QkFBSztlQUNYbEIsS0FBSyxDQUFDa0IsTUFBTmxCLEdBQ0VBLEtBQUssQ0FBQ2tCLE1BQU5sQixnR0FBa0JtQixLQUFsQixNQUE0QlgsVUFBNUI7VUFBd0NSLEtBQUssRUFBRUE7UUFBL0MsR0FERkEsR0FHRVUsMkRBQUNWLEtBQUQsQ0FBT29CLFNBQVAsaUdBQXFCRCxLQUFyQixFQUFnQ1gsVUFBaEM7VUFBNENSLEtBQUssRUFBRUE7UUFBbkQ7O0lBVE47RUFERCxFQURILENBRFcsR0FrQlQiLCJmaWxlIjoiVi92TC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hdGNoUGF0aCwgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIHBhdGhuYW1lLCAvKm5vdCBwdWJsaWMgQVBJKi8gYnJhbmNoID0gW10pIHtcbiAgcm91dGVzLnNvbWUocm91dGUgPT4ge1xuICAgIGNvbnN0IG1hdGNoID0gcm91dGUucGF0aFxuICAgICAgPyBtYXRjaFBhdGgocGF0aG5hbWUsIHJvdXRlKVxuICAgICAgOiBicmFuY2gubGVuZ3RoXG4gICAgICAgID8gYnJhbmNoW2JyYW5jaC5sZW5ndGggLSAxXS5tYXRjaCAvLyB1c2UgcGFyZW50IG1hdGNoXG4gICAgICAgIDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpOyAvLyB1c2UgZGVmYXVsdCBcInJvb3RcIiBtYXRjaFxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBicmFuY2gucHVzaCh7IHJvdXRlLCBtYXRjaCB9KTtcblxuICAgICAgaWYgKHJvdXRlLnJvdXRlcykge1xuICAgICAgICBtYXRjaFJvdXRlcyhyb3V0ZS5yb3V0ZXMsIHBhdGhuYW1lLCBicmFuY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG5cbiAgcmV0dXJuIGJyYW5jaDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hSb3V0ZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTd2l0Y2gsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiByZW5kZXJSb3V0ZXMocm91dGVzLCBleHRyYVByb3BzID0ge30sIHN3aXRjaFByb3BzID0ge30pIHtcbiAgcmV0dXJuIHJvdXRlcyA/IChcbiAgICA8U3dpdGNoIHsuLi5zd2l0Y2hQcm9wc30+XG4gICAgICB7cm91dGVzLm1hcCgocm91dGUsIGkpID0+IChcbiAgICAgICAgPFJvdXRlXG4gICAgICAgICAga2V5PXtyb3V0ZS5rZXkgfHwgaX1cbiAgICAgICAgICBwYXRoPXtyb3V0ZS5wYXRofVxuICAgICAgICAgIGV4YWN0PXtyb3V0ZS5leGFjdH1cbiAgICAgICAgICBzdHJpY3Q9e3JvdXRlLnN0cmljdH1cbiAgICAgICAgICByZW5kZXI9e3Byb3BzID0+XG4gICAgICAgICAgICByb3V0ZS5yZW5kZXIgPyAoXG4gICAgICAgICAgICAgIHJvdXRlLnJlbmRlcih7IC4uLnByb3BzLCAuLi5leHRyYVByb3BzLCByb3V0ZTogcm91dGUgfSlcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxyb3V0ZS5jb21wb25lbnQgey4uLnByb3BzfSB7Li4uZXh0cmFQcm9wc30gcm91dGU9e3JvdXRlfSAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvU3dpdGNoPlxuICApIDogbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyUm91dGVzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///V/vL\n')},VYtm:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.hover = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar hover = exports.hover = function hover(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Hover, _React$Component);\n\n    function Hover() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Hover);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        hover: false\n      }, _this.handleMouseOver = function () {\n        return _this.setState({\n          hover: true\n        });\n      }, _this.handleMouseOut = function () {\n        return _this.setState({\n          hover: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseOver: _this.handleMouseOver,\n          onMouseOut: _this.handleMouseOut\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Hover;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = hover;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///VYtm\n')},W3HW:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.flattenNames = undefined;\n\nvar _isString2 = __webpack_require__("4qC0");\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _isPlainObject2 = __webpack_require__("YO3V");\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _map2 = __webpack_require__("3WF5");\n\nvar _map3 = _interopRequireDefault(_map2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar flattenNames = exports.flattenNames = function flattenNames() {\n  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var names = [];\n  (0, _map3["default"])(things, function (thing) {\n    if (Array.isArray(thing)) {\n      flattenNames(thing).map(function (name) {\n        return names.push(name);\n      });\n    } else if ((0, _isPlainObject3["default"])(thing)) {\n      (0, _forOwn3["default"])(thing, function (value, key) {\n        value === true && names.push(key);\n        names.push(key + \'-\' + value);\n      });\n    } else if ((0, _isString3["default"])(thing)) {\n      names.push(thing);\n    }\n  });\n  return names;\n};\n\nexports["default"] = flattenNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2ZsYXR0ZW5OYW1lcy5qcz81YjcxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmxhdHRlbk5hbWVzIiwidW5kZWZpbmVkIiwiX2lzU3RyaW5nMiIsInJlcXVpcmUiLCJfaXNTdHJpbmczIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9mb3JPd24yIiwiX2Zvck93bjMiLCJfaXNQbGFpbk9iamVjdDIiLCJfaXNQbGFpbk9iamVjdDMiLCJfbWFwMiIsIl9tYXAzIiwib2JqIiwiX19lc01vZHVsZSIsInRoaW5ncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwidGhpbmciLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJuYW1lIiwicHVzaCIsImtleSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXhCOztBQUVBLElBQUlDLFVBQVUsR0FBR0Msc0JBQXNCLENBQUNILFVBQUQsQ0FBdkM7O0FBRUEsSUFBSUksUUFBUSxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBRUEsSUFBSUksUUFBUSxHQUFHRixzQkFBc0IsQ0FBQ0MsUUFBRCxDQUFyQzs7QUFFQSxJQUFJRSxlQUFlLEdBQUdMLG1CQUFPLENBQUMsTUFBRCxDQUE3Qjs7QUFFQSxJQUFJTSxlQUFlLEdBQUdKLHNCQUFzQixDQUFDRyxlQUFELENBQTVDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyxNQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0lBQUUsV0FBU0E7RUFBWCxDQUFyQztBQUF3RDs7QUFFL0YsSUFBSVosWUFBWSxHQUFHRixPQUFPLENBQUNFLFlBQVIsR0FBdUIsU0FBU0EsWUFBVCxHQUF3QjtFQUNoRSxJQUFJYyxNQUFNLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmQsU0FBekMsR0FBcURjLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQWpGO0VBRUEsSUFBSUUsS0FBSyxHQUFHLEVBQVo7RUFFQSxDQUFDLEdBQUdOLEtBQUssV0FBVCxFQUFtQkcsTUFBbkIsRUFBMkIsVUFBVUksS0FBVixFQUFpQjtJQUMxQyxJQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBZCxDQUFKLEVBQTBCO01BQ3hCbEIsWUFBWSxDQUFDa0IsS0FBRCxDQUFaLENBQW9CRyxHQUFwQixDQUF3QixVQUFVQyxJQUFWLEVBQWdCO1FBQ3RDLE9BQU9MLEtBQUssQ0FBQ00sSUFBTixDQUFXRCxJQUFYLENBQVA7TUFDRCxDQUZEO0lBR0QsQ0FKRCxNQUlPLElBQUksQ0FBQyxHQUFHYixlQUFlLFdBQW5CLEVBQTZCUyxLQUE3QixDQUFKLEVBQXlDO01BQzlDLENBQUMsR0FBR1gsUUFBUSxXQUFaLEVBQXNCVyxLQUF0QixFQUE2QixVQUFVbkIsS0FBVixFQUFpQnlCLEdBQWpCLEVBQXNCO1FBQ2pEekIsS0FBSyxLQUFLLElBQVYsSUFBa0JrQixLQUFLLENBQUNNLElBQU4sQ0FBV0MsR0FBWCxDQUFsQjtRQUNBUCxLQUFLLENBQUNNLElBQU4sQ0FBV0MsR0FBRyxHQUFHLEdBQU4sR0FBWXpCLEtBQXZCO01BQ0QsQ0FIRDtJQUlELENBTE0sTUFLQSxJQUFJLENBQUMsR0FBR0ssVUFBVSxXQUFkLEVBQXdCYyxLQUF4QixDQUFKLEVBQW9DO01BQ3pDRCxLQUFLLENBQUNNLElBQU4sQ0FBV0wsS0FBWDtJQUNEO0VBQ0YsQ0FiRDtFQWVBLE9BQU9ELEtBQVA7QUFDRCxDQXJCRDs7QUF1QkFuQixPQUFPLFdBQVAsR0FBa0JFLFlBQWxCIiwiZmlsZSI6IlczSFcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZsYXR0ZW5OYW1lcyA9IHVuZGVmaW5lZDtcblxudmFyIF9pc1N0cmluZzIgPSByZXF1aXJlKCdsb2Rhc2gvaXNTdHJpbmcnKTtcblxudmFyIF9pc1N0cmluZzMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1N0cmluZzIpO1xuXG52YXIgX2Zvck93bjIgPSByZXF1aXJlKCdsb2Rhc2gvZm9yT3duJyk7XG5cbnZhciBfZm9yT3duMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvck93bjIpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QyID0gcmVxdWlyZSgnbG9kYXNoL2lzUGxhaW5PYmplY3QnKTtcblxudmFyIF9pc1BsYWluT2JqZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUGxhaW5PYmplY3QyKTtcblxudmFyIF9tYXAyID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXAyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZsYXR0ZW5OYW1lcyA9IGV4cG9ydHMuZmxhdHRlbk5hbWVzID0gZnVuY3Rpb24gZmxhdHRlbk5hbWVzKCkge1xuICB2YXIgdGhpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICB2YXIgbmFtZXMgPSBbXTtcblxuICAoMCwgX21hcDMuZGVmYXVsdCkodGhpbmdzLCBmdW5jdGlvbiAodGhpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZsYXR0ZW5OYW1lcyh0aGluZykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzUGxhaW5PYmplY3QzLmRlZmF1bHQpKHRoaW5nKSkge1xuICAgICAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKHRoaW5nLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YWx1ZSA9PT0gdHJ1ZSAmJiBuYW1lcy5wdXNoKGtleSk7XG4gICAgICAgIG5hbWVzLnB1c2goa2V5ICsgJy0nICsgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzU3RyaW5nMy5kZWZhdWx0KSh0aGluZykpIHtcbiAgICAgIG5hbWVzLnB1c2godGhpbmcpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZmxhdHRlbk5hbWVzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///W3HW\n')},X0wg:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorType", function() { return AnchorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bottom", function() { return Bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomResizable", function() { return BottomResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenterType", function() { return CenterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Centered", function() { return Centered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenteredVertically", function() { return CenteredVertically; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Custom", function() { return Custom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layer", function() { return Layer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Left", function() { return Left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftResizable", function() { return LeftResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positioned", function() { return Positioned; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeHandlePlacement", function() { return ResizeHandlePlacement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeType", function() { return ResizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Right", function() { return Right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightResizable", function() { return RightResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Top", function() { return Top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopResizable", function() { return TopResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPort", function() { return ViewPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anchoredProps", function() { return anchoredProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizableProps", function() { return resizableProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCurrentSpace", function() { return useCurrentSpace; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("h9Sk");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === \'undefined\') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName(\'head\')[0];\n  var style = document.createElement(\'style\');\n  style.type = \'text/css\';\n\n  if (insertAt === \'top\') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = ".spaces-centered-vertically {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n}\\r\\n\\r\\n.spaces-centered {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n\\ttext-align: center;\\r\\n}\\r\\n\\r\\n.spaces-clearfix:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tdisplay: table;\\r\\n\\tclear: both;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9999;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:before {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tz-index: 2;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9998;\\r\\n\\tpointer-events: all;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left:before {\\r\\n\\tcursor: w-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right:before {\\r\\n\\tcursor: e-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top:before {\\r\\n\\tcursor: n-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom:before {\\r\\n\\tcursor: s-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-space {\\r\\n\\toverflow: hidden;\\r\\n\\ttouch-action: none;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-resizing .spaces-space {\\r\\n\\ttransition: none !important;\\r\\n}\\r\\n\\r\\n.spaces-space .spaces-space-inner {\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-space.scrollable .spaces-space-inner {\\r\\n\\toverflow: auto;\\r\\n\\ttouch-action: auto;\\r\\n}\\r\\n";\nstyleInject(css_248z);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Type;\n\n(function (Type) {\n  Type["ViewPort"] = "viewport";\n  Type["Fixed"] = "fixed";\n  Type["Fill"] = "fill";\n  Type["Positioned"] = "positioned";\n  Type["Anchored"] = "anchored";\n  Type["Custom"] = "custom";\n})(Type || (Type = {}));\n\nvar AnchorType;\n\n(function (AnchorType) {\n  AnchorType["Left"] = "anchor-left";\n  AnchorType["Right"] = "anchor-right";\n  AnchorType["Top"] = "anchor-top";\n  AnchorType["Bottom"] = "anchor-bottom";\n})(AnchorType || (AnchorType = {}));\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";\n  Orientation[Orientation["Vertical"] = 1] = "Vertical";\n})(Orientation || (Orientation = {}));\n\nvar ResizeType;\n\n(function (ResizeType) {\n  ResizeType["Left"] = "resize-left";\n  ResizeType["Right"] = "resize-right";\n  ResizeType["Top"] = "resize-top";\n  ResizeType["Bottom"] = "resize-bottom";\n  ResizeType["TopLeft"] = "resize-topleft";\n  ResizeType["TopRight"] = "resize-topright";\n  ResizeType["BottomLeft"] = "resize-bottomleft";\n  ResizeType["BottomRight"] = "resize-bottomright";\n})(ResizeType || (ResizeType = {}));\n\nvar ResizeHandlePlacement;\n\n(function (ResizeHandlePlacement) {\n  ResizeHandlePlacement["OverlayInside"] = "overlay-inside";\n  ResizeHandlePlacement["Inside"] = "inside";\n  ResizeHandlePlacement["OverlayBoundary"] = "overlay-boundary";\n})(ResizeHandlePlacement || (ResizeHandlePlacement = {}));\n\nvar CenterType;\n\n(function (CenterType) {\n  CenterType["None"] = "none";\n  CenterType["Vertical"] = "vertical";\n  CenterType["HorizontalVertical"] = "horizontalVertical";\n})(CenterType || (CenterType = {}));\n\nvar MoveEvent;\n\n(function (MoveEvent) {\n  MoveEvent["Mouse"] = "mousemove";\n  MoveEvent["Touch"] = "touchmove";\n})(MoveEvent || (MoveEvent = {}));\n\nvar EndEvent;\n\n(function (EndEvent) {\n  EndEvent["Mouse"] = "mouseup";\n  EndEvent["Touch"] = "touchend";\n})(EndEvent || (EndEvent = {}));\n\nfunction shortuuid() {\n  var firstPart = Math.random() * 46656 | 0;\n  var secondPart = Math.random() * 46656 | 0;\n  return ("000" + firstPart.toString(36)).slice(-3) + ("000" + secondPart.toString(36)).slice(-3);\n}\n\nfunction getSizeString(size) {\n  return typeof size === "string" ? size : size + "px";\n}\n\nfunction css(size, dontAddCalc) {\n  if (size.size === 0 && size.adjusted.length === 0 && size.resized === 0) {\n    return "0px";\n  }\n\n  var parts = [];\n\n  if (size.size !== undefined) {\n    parts.push(getSizeString(size.size));\n  }\n\n  size.adjusted.forEach(function (l) {\n    return parts.push(getSizeString(l));\n  });\n\n  if (size.resized !== 0) {\n    parts.push(getSizeString(size.resized));\n  }\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  if (parts.length === 1) {\n    return parts[0];\n  }\n\n  if (dontAddCalc) {\n    return parts.join(" + ");\n  }\n\n  return "calc(" + parts.join(" + ") + ")";\n}\n\nfunction coalesce() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.find(function (x) {\n    return x !== null && x !== undefined;\n  });\n}\n\nfunction adjustmentsEqual(item1, item2) {\n  if (item1.length !== item2.length) {\n    return false;\n  }\n\n  for (var i = 0, len = item1.length; i < len; i++) {\n    if (item1[i] !== item2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction throttle(callback, limit) {\n  var wait = false; // Initially, we\'re not waiting\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // We return a throttled function\n\n\n    if (!wait) {\n      // If we\'re not waiting\n      callback.apply(void 0, args); // Execute users function\n\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nfunction styleDefinition(space) {\n  var cssElements = [];\n  var style = {\n    position: space.position,\n    left: css(space.left),\n    top: css(space.top),\n    right: css(space.right),\n    bottom: css(space.bottom),\n    width: css(space.width),\n    height: css(space.height),\n    zIndex: space.zIndex\n  };\n  var cssString = [];\n\n  if (style.position) {\n    cssString.push("position: " + style.position + ";");\n  }\n\n  if (style.left) {\n    cssString.push("left: " + style.left + ";");\n  }\n\n  if (style.top) {\n    cssString.push("top: " + style.top + ";");\n  }\n\n  if (style.right) {\n    cssString.push("right: " + style.right + ";");\n  }\n\n  if (style.bottom) {\n    cssString.push("bottom: " + style.bottom + ";");\n  }\n\n  if (style.width) {\n    cssString.push("width: " + style.width + ";");\n  }\n\n  if (style.height) {\n    cssString.push("height: " + style.height + ";");\n  }\n\n  if (style.zIndex) {\n    cssString.push("z-index: " + style.zIndex + ";");\n  }\n\n  if (space.allowOverflow) {\n    cssString.push("overflow: visible;");\n  }\n\n  if (cssString.length > 0) {\n    cssElements.push("#" + space.id + " { " + cssString.join(" ") + " }");\n  }\n\n  if (space.scrollable) {\n    cssElements.push("#" + space.id + " > .spaces-space-inner { overflow: auto; touch-action: auto; }");\n  }\n\n  var handleOffset = 0;\n  var touchHandleSize = space.touchHandleSize / 2 - space.handleSize / 2;\n\n  switch (space.handlePlacement) {\n    case ResizeHandlePlacement.Inside:\n    case ResizeHandlePlacement.OverlayInside:\n      handleOffset = space.handleSize;\n\n      if (space.type === Type.Positioned) {\n        handleOffset = 0;\n      }\n\n      break;\n\n    case ResizeHandlePlacement.OverlayBoundary:\n      handleOffset = space.handleSize / 2;\n      break;\n  }\n\n  if (space.type === Type.Positioned) {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { left: calc(" + css(space.left, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { top: calc(" + css(space.top, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n\n      if (space.width.size) {\n        cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + space.handleSize + "px + " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mr { right: calc(" + css(space.right, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      if (space.height.size) {\n        cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + space.handleSize + "px + " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mb { bottom: calc(" + css(space.bottom, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  } else {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { right: calc(" + css(space.right, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-ml:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { bottom: calc(" + css(space.bottom, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  }\n\n  return cssElements.join(" ");\n}\n\nfunction updateStyleDefinition(space) {\n  var definition = styleDefinition(space);\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    if (existing.innerHTML !== definition) {\n      existing.innerHTML = definition;\n    }\n  } else {\n    var newStyle = document.createElement("style");\n    newStyle.id = "style_" + space.id;\n    newStyle.innerHTML = definition;\n    document.head.appendChild(newStyle);\n  }\n}\n\nfunction removeStyleDefinition(space) {\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    document.head.removeChild(existing);\n  }\n}\n\nvar RESIZE_THROTTLE = 0;\n\nfunction isHorizontal(resizeType) {\n  return resizeType === ResizeType.Left || resizeType === ResizeType.Right;\n}\n\nfunction createAdjuster(resizeType, space, originalX, originalY) {\n  var dimensionToAdjust = function () {\n    if (resizeType === ResizeType.Left) {\n      return space.left;\n    } else if (resizeType === ResizeType.Right) {\n      return space.right;\n    } else if (resizeType === ResizeType.Bottom) {\n      return space.bottom;\n    } else if (resizeType === ResizeType.Top) {\n      return space.top;\n    } else {\n      throw new Error("unknown resize type");\n    }\n  }();\n\n  var negater = resizeType === ResizeType.Right || resizeType === ResizeType.Bottom ? function (val) {\n    return -val;\n  } : function (val) {\n    return val;\n  };\n  var candidateOppositeDimensionToAdjust = isHorizontal(resizeType) ? space.width : space.height;\n  var offset1 = dimensionToAdjust.resized;\n  var offset2 = candidateOppositeDimensionToAdjust.resized;\n  var rect = space.element.getBoundingClientRect();\n  var size = isHorizontal(resizeType) ? rect.width : rect.height;\n  var minimumAdjust = coalesce(space.minimumSize, 20) - size + 0;\n  var maximumAdjust = space.maximumSize ? space.maximumSize - size + 0 : undefined;\n  return function (currentX, currentY) {\n    var adjustment = (isHorizontal(resizeType) ? originalX : originalY) - (isHorizontal(resizeType) ? currentX : currentY);\n    var dimensionResized = negater(adjustment);\n\n    if (space.type !== Type.Positioned) {\n      dimensionResized = Math.max(negater(adjustment), minimumAdjust);\n\n      if (dimensionResized < minimumAdjust) {\n        dimensionResized = minimumAdjust;\n      }\n\n      if (typeof maximumAdjust === "number") {\n        if (dimensionResized > maximumAdjust) {\n          dimensionResized = maximumAdjust;\n        }\n      }\n    }\n\n    if (dimensionToAdjust.size !== undefined) {\n      dimensionToAdjust.resized = negater(-adjustment) + offset1;\n\n      if (candidateOppositeDimensionToAdjust.size) {\n        candidateOppositeDimensionToAdjust.resized = negater(adjustment) + offset2;\n      }\n    } else {\n      candidateOppositeDimensionToAdjust.resized = dimensionResized + offset2;\n    }\n  };\n}\n\nfunction createResize(store) {\n  return {\n    startResize: function startResize(e, resizeType, space, endEvent, moveEvent, getCoords, onResizeEnd) {\n      if (space.onResizeStart) {\n        var result = space.onResizeStart(resizeType);\n\n        if (typeof result === "boolean" && !result) {\n          return;\n        }\n      }\n\n      var originalCoords = getCoords(e);\n      var adjuster = createAdjuster(resizeType, space, originalCoords.x, originalCoords.y);\n      space.resizing = true;\n      space.updateParent();\n      var lastX = 0;\n      var lastY = 0;\n      var moved = false;\n\n      var resize = function resize(currentX, currentY) {\n        adjuster(currentX, currentY);\n        store.updateStyles(space);\n      };\n\n      var withPreventDefault = function withPreventDefault(e) {\n        moved = true;\n        var newCoords = getCoords(e);\n        lastX = newCoords.x;\n        lastY = newCoords.y;\n        e.preventDefault();\n        throttle(function (x, y) {\n          return window.requestAnimationFrame(function () {\n            return resize(x, y);\n          });\n        }, RESIZE_THROTTLE)(lastX, lastY);\n      };\n\n      var removeListener = function removeListener() {\n        if (moved) {\n          resize(lastX, lastY);\n        }\n\n        window.removeEventListener(moveEvent, withPreventDefault);\n        window.removeEventListener(endEvent, removeListener);\n        space.resizing = false;\n        space.updateParent();\n        var resizeEnd = onResizeEnd || space.onResizeEnd;\n\n        if (resizeEnd) {\n          var currentRect = space.element.getBoundingClientRect();\n          resizeEnd(Math.floor(isHorizontal(resizeType) ? currentRect.width : currentRect.height), currentRect, resizeType);\n        }\n      };\n\n      window.addEventListener(moveEvent, withPreventDefault);\n      window.addEventListener(endEvent, removeListener);\n    }\n  };\n}\n\nfunction createDrag(store) {\n  function onMove(space, originalX, originalY, x, y) {\n    var adjustmentX = -(originalX - x);\n    var adjustmentY = -(originalY - y);\n    space.left.adjusted = [adjustmentX];\n    space.top.adjusted = [adjustmentY];\n\n    if (space.right.size) {\n      space.right.adjusted = [-adjustmentX];\n    }\n\n    if (space.bottom.size) {\n      space.bottom.adjusted = [-adjustmentY];\n    }\n\n    store.updateStyles(space);\n  }\n\n  return {\n    startDrag: function startDrag(e, space, endEvent, moveEvent, getCoords, onDragEnd) {\n      if (space.element) {\n        var coords = getCoords(e);\n        var adjustedLeft = space.left.adjusted.length === 0 ? 0 : space.left.adjusted[0];\n        var adjustedTop = space.top.adjusted.length === 0 ? 0 : space.top.adjusted[0];\n        var originalMouseX_1 = coords.x - adjustedLeft;\n        var originalMouseY_1 = coords.y - adjustedTop;\n        var lastX_1 = 0;\n        var lastY_1 = 0;\n        var moved_1 = false;\n\n        var mouseMove_1 = function mouseMove_1(x, y) {\n          return onMove(space, originalMouseX_1, originalMouseY_1, x, y);\n        };\n\n        var throttledMouseMove_1 = throttle(mouseMove_1, 5);\n\n        var withPreventDefault_1 = function withPreventDefault_1(e) {\n          moved_1 = true;\n          var newCoords = getCoords(e);\n          lastX_1 = newCoords.x;\n          lastY_1 = newCoords.y;\n          e.preventDefault();\n          throttledMouseMove_1(lastX_1, lastY_1);\n        };\n\n        var removeListener_1 = function removeListener_1() {\n          var _a;\n\n          if (moved_1) {\n            mouseMove_1(lastX_1, lastY_1);\n          }\n\n          window.removeEventListener(moveEvent, withPreventDefault_1);\n          window.removeEventListener(endEvent, removeListener_1);\n\n          if (onDragEnd) {\n            var parentInfo = space.parentId && ((_a = store.getSpace(space.parentId)) === null || _a === void 0 ? void 0 : _a.element.getBoundingClientRect()) || {\n              left: 0,\n              top: 0,\n              right: 0,\n              bottom: 0,\n              width: 0,\n              height: 0\n            };\n\n            var info = function (_a) {\n              var left = _a.left,\n                  top = _a.top,\n                  right = _a.right,\n                  bottom = _a.bottom,\n                  width = _a.width,\n                  height = _a.height;\n              return {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n                width: width,\n                height: height\n              };\n            }(space.element.getBoundingClientRect());\n\n            onDragEnd(_assign(_assign({}, info), {\n              left: info.left - parentInfo.left,\n              top: info.top - parentInfo.top\n            }), moved_1);\n          }\n        };\n\n        window.addEventListener(moveEvent, withPreventDefault_1);\n        window.addEventListener(endEvent, removeListener_1);\n      }\n    }\n  };\n}\n\nvar spaceDefaults = {\n  id: "",\n  zIndex: 0,\n  scrollable: false,\n  resizing: false,\n  allowOverflow: false,\n  centerContent: "none",\n  dimension: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  },\n  handleSize: 5,\n  touchHandleSize: 5,\n  handlePlacement: ResizeHandlePlacement.OverlayInside,\n  adjustLeft: function adjustLeft() {\n    return false;\n  },\n  adjustRight: function adjustRight() {\n    return false;\n  },\n  adjustTop: function adjustTop() {\n    return false;\n  },\n  adjustBottom: function adjustBottom() {\n    return false;\n  },\n  adjustEdge: function adjustEdge() {\n    return false;\n  },\n  anchoredChildren: function anchoredChildren() {\n    return [];\n  }\n};\nvar anchorTypes = [AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom];\n\nfunction getPosition(type) {\n  if (type === Type.ViewPort) {\n    return "fixed";\n  }\n\n  if (type === Type.Fixed) {\n    return "relative";\n  }\n\n  return "absolute";\n}\n\nfunction getOrientation(anchor) {\n  return anchor === AnchorType.Bottom || anchor === AnchorType.Top ? Orientation.Vertical : Orientation.Horizontal;\n}\n\nfunction anchorUpdates(space) {\n  return [{\n    anchor: AnchorType.Left,\n    update: space.adjustLeft\n  }, {\n    anchor: AnchorType.Top,\n    update: space.adjustTop\n  }, {\n    anchor: AnchorType.Right,\n    update: space.adjustRight\n  }, {\n    anchor: AnchorType.Bottom,\n    update: space.adjustBottom\n  }];\n}\n\nfunction sizeInfoDefault(size) {\n  return {\n    size: size,\n    adjusted: [],\n    resized: 0\n  };\n}\n\nfunction createStore() {\n  var spaces = [];\n\n  var setSpaces = function setSpaces(newSpaces) {\n    spaces = newSpaces;\n  };\n\n  var getSpace = function getSpace(id) {\n    return getSpaces().find(function (s) {\n      return s.id === id;\n    });\n  };\n\n  var getSpaces = function getSpaces() {\n    return spaces;\n  };\n\n  var recalcSpaces = function recalcSpaces(parent) {\n    var onlyUnique = function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    };\n\n    var addDefaultOrders = function addDefaultOrders(spaces) {\n      var result = [];\n      anchorTypes.forEach(function (t) {\n        var anchoredSpaces = spaces.filter(function (s) {\n          return s.anchor !== undefined && s.anchor === t;\n        });\n        var zIndices = anchoredSpaces.map(function (s) {\n          return s.zIndex;\n        }).filter(onlyUnique);\n        zIndices.forEach(function (i) {\n          var anchoredSpacesInLayer = anchoredSpaces.filter(function (s) {\n            return s.zIndex === i;\n          });\n          var orderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order !== undefined;\n          });\n          var unorderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order === undefined;\n          });\n          var maxOrder = orderedSpaces.length > 0 ? orderedSpaces.map(function (a) {\n            return a.order;\n          }).reduce(function (a, b) {\n            return Math.max(a, b);\n          }) : 0;\n          result = __spreadArray(__spreadArray([], result, true), __spreadArray(__spreadArray([], orderedSpaces, true), unorderedSpaces.map(function (c, idx) {\n            return _assign(_assign({}, c), {\n              order: maxOrder + idx + 1\n            });\n          }), true), true);\n        });\n      });\n      return __spreadArray(__spreadArray([], result, true), spaces.filter(function (s) {\n        return s.anchor === undefined;\n      }), true);\n    };\n\n    var orderedSpaces = addDefaultOrders(parent.children);\n\n    var _loop_1 = function _loop_1() {\n      var space = orderedSpaces[i];\n      var changed = false;\n\n      if (space.type === Type.Fill) {\n        anchorUpdates(space).forEach(function (info) {\n          var adjusted = [];\n          var anchoredSpaces = parent.anchoredChildren(orderedSpaces, info.anchor, space.zIndex);\n          anchoredSpaces.forEach(function (as) {\n            if (as.orientation === Orientation.Vertical) {\n              if (as.height.size) {\n                adjusted.push(as.height.size);\n              }\n\n              if (as.height.resized) {\n                adjusted.push(as.height.resized);\n              }\n            } else {\n              if (as.width.size) {\n                adjusted.push(as.width.size);\n              }\n\n              if (as.width.resized) {\n                adjusted.push(as.width.resized);\n              }\n            }\n          });\n\n          if (info.update(adjusted)) {\n            changed = true;\n          }\n        });\n      } else if (space.type === Type.Anchored) {\n        var adjusted_1 = [];\n        var anchoredSpaces = parent.anchoredChildren(orderedSpaces, space.anchor, space.zIndex).filter(function (s) {\n          return s.id !== space.id && s.order <= space.order;\n        });\n        anchoredSpaces.forEach(function (as) {\n          if (as.orientation === Orientation.Vertical) {\n            if (as.height.size) {\n              adjusted_1.push(as.height.size);\n            }\n\n            if (as.height.resized) {\n              adjusted_1.push(as.height.resized);\n            }\n          } else {\n            if (as.width.size) {\n              adjusted_1.push(as.width.size);\n            }\n\n            if (as.width.resized) {\n              adjusted_1.push(as.width.resized);\n            }\n          }\n        });\n\n        if (space.adjustEdge(adjusted_1)) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        updateStyleDefinition(space);\n      }\n    };\n\n    for (var i = 0, len = orderedSpaces.length; i < len; i++) {\n      _loop_1();\n    }\n  };\n\n  var store = {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    addSpace: function addSpace(space) {\n      getSpaces().push(space);\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children.push(space);\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    removeSpace: function removeSpace(space) {\n      setSpaces(getSpaces().filter(function (s) {\n        return s.id !== space.id;\n      }));\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children = parentSpace.children.filter(function (s) {\n            return s.id !== space.id;\n          });\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      removeStyleDefinition(space);\n    },\n    updateStyles: function updateStyles(space) {\n      if (space.parentId) {\n        var parent_1 = getSpace(space.parentId);\n\n        if (parent_1) {\n          recalcSpaces(parent_1);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    updateSpace: function updateSpace(space, props) {\n      var type = props.type,\n          anchor = props.anchor,\n          order = props.order,\n          zIndex = props.zIndex,\n          scrollable = props.scrollable,\n          position = props.position,\n          centerContent = props.centerContent,\n          minimumSize = props.minimumSize,\n          maximumSize = props.maximumSize,\n          handleSize = props.handleSize,\n          touchHandleSize = props.touchHandleSize,\n          handlePlacement = props.handlePlacement,\n          allowOverflow = props.allowOverflow;\n      var canResizeLeft = position && position.leftResizable || false;\n      var canResizeRight = position && position.rightResizable || false;\n      var canResizeTop = position && position.topResizable || false;\n      var canResizeBottom = position && position.bottomResizable || false;\n      var changed = false;\n\n      if (space.type !== type) {\n        space.type = type;\n        space.position = getPosition(type);\n        changed = true;\n      }\n\n      if (space.anchor !== anchor) {\n        space.anchor = anchor;\n        space.orientation = getOrientation(anchor);\n        changed = true;\n\n        if (type === Type.Anchored) {\n          if (anchor === AnchorType.Left) {\n            space.adjustEdge = space.adjustLeft;\n          } else if (anchor === AnchorType.Top) {\n            space.adjustEdge = space.adjustTop;\n          } else if (anchor === AnchorType.Right) {\n            space.adjustEdge = space.adjustRight;\n          } else if (anchor === AnchorType.Bottom) {\n            space.adjustEdge = space.adjustBottom;\n          }\n        }\n      }\n\n      if (space.left.size !== (position && position.left)) {\n        space.left.size = position && position.left;\n        space.left.resized = 0;\n        space.left.adjusted = [];\n        changed = true;\n      }\n\n      if (space.right.size !== (position && position.right)) {\n        space.right.size = position && position.right;\n        space.right.resized = 0;\n        space.right.adjusted = [];\n        changed = true;\n      }\n\n      if (space.top.size !== (position && position.top)) {\n        space.top.size = position && position.top;\n        space.top.resized = 0;\n        space.top.adjusted = [];\n        changed = true;\n      }\n\n      if (space.bottom.size !== (position && position.bottom)) {\n        space.bottom.size = position && position.bottom;\n        space.bottom.resized = 0;\n        space.bottom.adjusted = [];\n        changed = true;\n      }\n\n      if (space.width.size !== (position && position.width)) {\n        space.width.size = position && position.width;\n        space.width.resized = 0;\n        space.width.adjusted = [];\n        changed = true;\n      }\n\n      if (space.height.size !== (position && position.height)) {\n        space.height.size = position && position.height;\n        space.height.resized = 0;\n        space.height.adjusted = [];\n        changed = true;\n      }\n\n      if (coalesce(space.order, 0) !== coalesce(order, 0)) {\n        space.order = coalesce(order, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.zIndex, 0) !== coalesce(zIndex, 0)) {\n        space.zIndex = coalesce(zIndex, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.scrollable, false) !== coalesce(scrollable, false)) {\n        space.scrollable = coalesce(scrollable, false);\n        changed = true;\n      }\n\n      if (space.minimumSize !== minimumSize) {\n        space.minimumSize = minimumSize;\n        changed = true;\n      }\n\n      if (space.maximumSize !== maximumSize) {\n        space.maximumSize = maximumSize;\n        changed = true;\n      }\n\n      if (coalesce(space.centerContent, CenterType.None) !== coalesce(centerContent, CenterType.None)) {\n        space.centerContent = coalesce(centerContent, CenterType.None);\n        changed = true;\n      }\n\n      if (space.handleSize !== handleSize) {\n        space.handleSize = handleSize || spaceDefaults.handleSize;\n        changed = true;\n      }\n\n      if (space.touchHandleSize !== touchHandleSize) {\n        space.touchHandleSize = touchHandleSize || spaceDefaults.touchHandleSize;\n        changed = true;\n      }\n\n      if (space.handlePlacement !== handlePlacement) {\n        space.handlePlacement = handlePlacement || spaceDefaults.handlePlacement;\n        changed = true;\n      }\n\n      if (space.canResizeBottom !== canResizeBottom) {\n        space.canResizeBottom = canResizeBottom;\n        changed = true;\n      }\n\n      if (space.canResizeTop !== canResizeTop) {\n        space.canResizeTop = canResizeTop;\n        changed = true;\n      }\n\n      if (space.canResizeLeft !== canResizeLeft) {\n        space.canResizeLeft = canResizeLeft;\n        changed = true;\n      }\n\n      if (space.canResizeRight !== canResizeRight) {\n        space.canResizeRight = canResizeRight;\n        changed = true;\n      }\n\n      if (space.allowOverflow !== allowOverflow) {\n        space.allowOverflow = allowOverflow || spaceDefaults.allowOverflow;\n        changed = true;\n      }\n\n      if (changed) {\n        if (space.parentId) {\n          var parentSpace = getSpace(space.parentId);\n\n          if (parentSpace) {\n            recalcSpaces(parentSpace);\n          }\n        }\n\n        updateStyleDefinition(space);\n      }\n    },\n    createSpace: function createSpace() {\n      return {};\n    },\n    startMouseResize: function startMouseResize() {\n      return null;\n    },\n    startTouchResize: function startTouchResize() {\n      return null;\n    },\n    startMouseDrag: function startMouseDrag() {\n      return null;\n    },\n    startTouchDrag: function startTouchDrag() {\n      return null;\n    }\n  };\n  var resize = createResize(store);\n  var drag = createDrag(store);\n\n  store.createSpace = function (parentId, props, update) {\n    var position = props.position,\n        anchor = props.anchor,\n        type = props.type,\n        commonProps = __rest(props, ["position", "anchor", "type"]);\n\n    var canResizeLeft = position && position.rightResizable || false;\n    var canResizeRight = position && position.leftResizable || false;\n    var canResizeTop = position && position.bottomResizable || false;\n    var canResizeBottom = position && position.topResizable || false;\n\n    var newSpace = _assign(_assign(_assign({}, spaceDefaults), commonProps), {\n      store: store,\n      update: update,\n      updateParent: function updateParent() {\n        if (parentId) {\n          var parentSpace = store.getSpace(parentId);\n\n          if (parentSpace) {\n            parentSpace.update();\n          }\n        }\n      },\n      parentId: parentId,\n      children: [],\n      anchor: anchor,\n      type: type,\n      orientation: getOrientation(anchor),\n      position: getPosition(type),\n      left: sizeInfoDefault(position && position.left),\n      right: sizeInfoDefault(position && position.right),\n      top: sizeInfoDefault(position && position.top),\n      bottom: sizeInfoDefault(position && position.bottom),\n      width: sizeInfoDefault(position && position.width),\n      height: sizeInfoDefault(position && position.height),\n      canResizeLeft: canResizeLeft,\n      canResizeRight: canResizeRight,\n      canResizeTop: canResizeTop,\n      canResizeBottom: canResizeBottom\n    });\n\n    newSpace.anchoredChildren = function (children, anchor, zIndex) {\n      return children.filter(function (s) {\n        return s.type === Type.Anchored && s.anchor === anchor && s.zIndex === zIndex;\n      });\n    };\n\n    newSpace.adjustLeft = function (adjusted) {\n      if (adjustmentsEqual(newSpace.left.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.left.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustRight = function (adjusted) {\n      if (adjustmentsEqual(newSpace.right.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.right.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustTop = function (adjusted) {\n      if (adjustmentsEqual(newSpace.top.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.top.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustBottom = function (adjusted) {\n      if (adjustmentsEqual(newSpace.bottom.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.bottom.adjusted = adjusted;\n      return true;\n    };\n\n    if (type === Type.Anchored) {\n      if (anchor === AnchorType.Left) {\n        newSpace.adjustEdge = newSpace.adjustLeft;\n      } else if (anchor === AnchorType.Top) {\n        newSpace.adjustEdge = newSpace.adjustTop;\n      } else if (anchor === AnchorType.Right) {\n        newSpace.adjustEdge = newSpace.adjustRight;\n      } else if (anchor === AnchorType.Bottom) {\n        newSpace.adjustEdge = newSpace.adjustBottom;\n      }\n    }\n\n    return newSpace;\n  };\n\n  store.startMouseResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startTouchResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startMouseDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onDragEnd);\n  };\n\n  store.startTouchDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onDragEnd);\n  };\n\n  return store;\n} // WORKAROUND for React18 strict mode\n// https://blog.ag-grid.com/avoiding-react-18-double-mount/\n\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  var destroyFunc = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();\n  var effectCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n  var renderAfterCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n\n  var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);\n\n  _a[0];\n  var setVal = _a[1];\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    } // this forces one render after the effect is run\n\n\n    setVal(function (val) {\n      return val + 1;\n    });\n    return function () {\n      // if the comp didn\'t render since the useEffect was called,\n      // we know it\'s the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n\nvar ParentContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar DOMRectContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar LayerContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar OptionsContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"]({});\nvar currentStore = createStore();\nvar commonProps = {\n  id: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  className: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["object"], prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]]),\n  as: prop_types__WEBPACK_IMPORTED_MODULE_2__["any"],\n  centerContent: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([CenterType.None, CenterType.Vertical, CenterType.HorizontalVertical]),\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  scrollable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  trackSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  allowOverflow: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onDoubleClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n};\n\nfunction useForceUpdate() {\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](0),\n      setTick = _a[1];\n\n  var update = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useSpace(props) {\n  var store = currentStore;\n  var update = useForceUpdate();\n  var parent = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var debug = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](OptionsContext).debug;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useState"](props.id || "s" + shortuuid())[0];\n  var elementRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n  var resizeSensor = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](),\n      domRect = _a[0],\n      setDomRect = _a[1];\n\n  var space = store.getSpace(spaceId);\n\n  if (debug) {\n    console.table(store.getSpaces());\n  }\n\n  var parsedProps = _assign(_assign({}, props), {\n    id: spaceId,\n    zIndex: coalesce(props.zIndex, layer)\n  });\n\n  if (!space) {\n    space = store.createSpace(parent, parsedProps, update);\n    store.addSpace(space);\n  } else {\n    store.updateSpace(space, parsedProps);\n  }\n\n  var resizeHandles = useSpaceResizeHandles(store, space);\n  useEffectOnce(function () {\n    var rect = elementRef.current.getBoundingClientRect();\n    space.dimension = _assign(_assign({}, rect), {\n      left: Math.floor(rect.left),\n      top: Math.floor(rect.top),\n      right: Math.floor(rect.right),\n      bottom: Math.floor(rect.bottom),\n      width: Math.floor(rect.width),\n      height: Math.floor(rect.height),\n      x: Math.floor(rect.x),\n      y: Math.floor(rect.y)\n    });\n    setDomRect(space.dimension);\n\n    if (props.trackSize) {\n      resizeSensor.current = new css_element_queries__WEBPACK_IMPORTED_MODULE_1__["ResizeSensor"](elementRef.current, function (size) {\n        space.dimension = _assign(_assign({}, rect), {\n          width: Math.floor(size.width),\n          height: Math.floor(size.height)\n        });\n        setDomRect(space.dimension);\n      });\n    }\n\n    return function () {\n      resizeSensor.current && resizeSensor.current.detach();\n      store.removeSpace(space);\n    };\n  });\n  return {\n    space: space,\n    resizeHandles: resizeHandles,\n    domRect: domRect,\n    elementRef: elementRef\n  };\n}\n\nfunction useSpaceResizeHandles(store, space) {\n  var mouseHandles = [];\n\n  if (space.canResizeLeft) {\n    mouseHandles.push({\n      id: space.id + "-ml",\n      key: "left",\n      className: "spaces-resize-handle resize-left",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Left, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Left, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeRight) {\n    mouseHandles.push({\n      id: space.id + "-mr",\n      key: "right",\n      className: "spaces-resize-handle resize-right",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Right, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Right, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeTop) {\n    mouseHandles.push({\n      id: space.id + "-mt",\n      key: "top",\n      className: "spaces-resize-handle resize-top",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Top, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Top, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeBottom) {\n    mouseHandles.push({\n      id: space.id + "-mb",\n      key: "bottom",\n      className: "spaces-resize-handle resize-bottom",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Bottom, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Bottom, space, event);\n      }\n    });\n  }\n\n  return {\n    mouseHandles: mouseHandles\n  };\n}\n\nfunction useCurrentSpace() {\n  var store = currentStore;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var space = spaceId ? store.getSpace(spaceId) : undefined;\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var onMouseDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startMouseDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onTouchDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startTouchDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onForceUpdate = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    return space ? store.updateStyles(space) : null;\n  }, [spaceId]);\n  var defaults = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n\n  var size = _assign(_assign({}, defaults), domRect);\n\n  return {\n    size: size,\n    layer: layer || 0,\n    startMouseDrag: onMouseDrag,\n    startTouchDrag: onTouchDrag,\n    forceUpdate: onForceUpdate\n  };\n}\n\nvar Centered = function Centered(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered"\n  }, props.children);\n};\n\nvar CenteredVertically = function CenteredVertically(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered-vertically"\n  }, props.children);\n};\n\nfunction applyCentering(children, centerType) {\n  switch (centerType) {\n    case CenterType.Vertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](CenteredVertically, null, children);\n\n    case CenterType.HorizontalVertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Centered, null, children);\n  }\n\n  return children;\n}\n\nvar Space =\n/** @class */\nfunction (_super) {\n  __extends(Space, _super);\n\n  function Space() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Space.prototype.render = function () {\n    return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SpaceInner, _assign({}, this.props, {\n      wrapperInstance: this\n    }));\n  };\n\n  return Space;\n}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\nvar SpaceInner = function SpaceInner(props) {\n  if (!props.id && !props.wrapperInstance["_react_spaces_uniqueid"]) {\n    props.wrapperInstance["_react_spaces_uniqueid"] = "s" + shortuuid();\n  }\n\n  var style = props.style,\n      className = props.className,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      onMouseDown = props.onMouseDown,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseMove = props.onMouseMove,\n      onTouchStart = props.onTouchStart,\n      onTouchMove = props.onTouchMove,\n      onTouchEnd = props.onTouchEnd,\n      children = props.children,\n      handleRender = props.handleRender;\n  var events = {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseMove: onMouseMove,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n\n  var _a = useSpace(_assign(_assign({}, props), {\n    id: props.id || props.wrapperInstance["_react_spaces_uniqueid"]\n  })),\n      space = _a.space,\n      domRect = _a.domRect,\n      elementRef = _a.elementRef,\n      resizeHandles = _a.resizeHandles;\n\n  useEffectOnce(function () {\n    space.element = elementRef.current;\n  });\n  var userClasses = className ? className.split(" ").map(function (c) {\n    return c.trim();\n  }) : [];\n\n  var outerClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], ["spaces-space", space.children.find(function (s) {\n    return s.resizing;\n  }) ? "spaces-resizing" : undefined], false), [space.type === Type.Fixed ? "spaces-fixedsize-layout" : undefined], false), [space.type === Type.ViewPort ? "spaces-fullpage-layout" : undefined], false), userClasses.map(function (c) {\n    return c + "-container";\n  }), true).filter(function (c) {\n    return c;\n  });\n\n  var innerClasses = __spreadArray(__spreadArray([], ["spaces-space-inner"], false), userClasses, true);\n\n  var innerStyle = style;\n\n  if (space.handlePlacement === ResizeHandlePlacement.Inside) {\n    innerStyle = _assign(_assign({}, style), {\n      left: space.anchor === AnchorType.Right ? space.handleSize : undefined,\n      right: space.anchor === AnchorType.Left ? space.handleSize : undefined,\n      top: space.anchor === AnchorType.Bottom ? space.handleSize : undefined,\n      bottom: space.anchor === AnchorType.Top ? space.handleSize : undefined\n    });\n  }\n\n  var centeredContent = applyCentering(children, props.centerContent);\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, resizeHandles.mouseHandles.map(function (handleProps) {\n    return (handleRender === null || handleRender === void 0 ? void 0 : handleRender(handleProps)) || react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", _assign({}, handleProps));\n  }), react__WEBPACK_IMPORTED_MODULE_0__["createElement"](props.as || "div", _assign({\n    id: space.id,\n    ref: elementRef,\n    className: outerClasses.join(" ")\n  }, events), react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: innerClasses.join(" "),\n    style: innerStyle\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ParentContext.Provider, {\n    value: space.id\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: undefined\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DOMRectContext.Provider, {\n    value: domRect\n  }, centeredContent))))));\n};\n\nvar resizableProps = _assign(_assign({}, commonProps), {\n  size: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired,\n  order: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  touchHandleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handlePlacement: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([ResizeHandlePlacement.Inside, ResizeHandlePlacement.OverlayBoundary, ResizeHandlePlacement.OverlayInside]),\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  minimumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  maximumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  onResizeStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onResizeEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n});\n\nvar anchoredProps = _assign(_assign({}, resizableProps), {\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"]\n});\n\nvar LeftResizable = function LeftResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nLeftResizable.propTypes = resizableProps;\n\nvar Left = function Left(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nLeft.propTypes = anchoredProps;\n\nvar TopResizable = function TopResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nTopResizable.propTypes = resizableProps;\n\nvar Top = function Top(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nTop.propTypes = anchoredProps;\n\nvar RightResizable = function RightResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nRightResizable.propTypes = resizableProps;\n\nvar Right = function Right(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nRight.propTypes = anchoredProps;\n\nvar BottomResizable = function BottomResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nBottomResizable.propTypes = resizableProps;\n\nvar Bottom = function Bottom(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nBottom.propTypes = anchoredProps;\n\nvar customProps = _assign(_assign({}, anchoredProps), {\n  type: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([Type.Positioned, Type.Fill, Type.Anchored]),\n  anchor: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom]),\n  anchorSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizeTypes: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n\nvar Custom = function Custom(_a) {\n  var children = _a.children,\n      type = _a.type,\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      anchorSize = _a.anchorSize,\n      anchor = _a.anchor,\n      resizable = _a.resizable,\n      resizeTypes = _a.resizeTypes,\n      props = __rest(_a, ["children", "type", "left", "top", "right", "bottom", "width", "height", "anchorSize", "anchor", "resizable", "resizeTypes"]);\n\n  var position;\n  type = type || Type.Fill;\n\n  if (type === Type.Positioned) {\n    position = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      leftResizable: resizeTypes && resizeTypes.includes(ResizeType.Left),\n      topResizable: resizeTypes && resizeTypes.includes(ResizeType.Top),\n      rightResizable: resizeTypes && resizeTypes.includes(ResizeType.Right),\n      bottomResizable: resizeTypes && resizeTypes.includes(ResizeType.Bottom)\n    };\n  } else {\n    if (anchor === AnchorType.Left) {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        rightResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Right) {\n      position = {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        leftResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Top) {\n      position = {\n        left: 0,\n        top: 0,\n        right: 0,\n        height: anchorSize,\n        bottomResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Bottom) {\n      position = {\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: anchorSize,\n        topResizable: resizable\n      };\n      type = Type.Anchored;\n    } else {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n      type = Type.Fill;\n    }\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: type,\n    anchor: anchor,\n    position: position\n  }), children);\n};\n\nCustom.propTypes = customProps;\n\nvar Fill = function Fill(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Fill,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    }\n  }), props.children);\n};\n\nFill.propTypes = commonProps;\n\nvar Fixed = function Fixed(_a) {\n  var width = _a.width,\n      height = _a.height,\n      children = _a.children,\n      commonProps = __rest(_a, ["width", "height", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Fixed,\n    position: {\n      width: width,\n      height: height\n    }\n  }), children);\n};\n\nFixed.propTypes = _assign(_assign({}, commonProps), {\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired\n});\n\nvar Layer = function Layer(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: props.zIndex\n  }, props.children);\n};\n\nLayer.propTypes = {\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"].isRequired\n};\n\nvar Positioned = function Positioned(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      resizable = _a.resizable,\n      props = __rest(_a, ["left", "top", "right", "bottom", "width", "height", "resizable"]);\n\n  var resizeTypes = resizable || [];\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Positioned,\n    position: {\n      left: left,\n      leftResizable: resizeTypes.includes(ResizeType.Left),\n      top: top,\n      topResizable: resizeTypes.includes(ResizeType.Top),\n      right: right,\n      rightResizable: resizeTypes.includes(ResizeType.Right),\n      bottom: bottom,\n      bottomResizable: resizeTypes.includes(ResizeType.Bottom),\n      width: width,\n      height: height\n    }\n  }), props.children);\n};\n\nPositioned.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n/**\r\n * @deprecated use useCurrentSpace() hook instead\r\n */\n\nvar Info = function Info(props) {\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n\n  if (domRect) {\n    return props.children(domRect);\n  }\n\n  return props.children({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  });\n};\n\nvar ViewPort = function ViewPort(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      children = _a.children,\n      commonProps = __rest(_a, ["left", "top", "right", "bottom", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.ViewPort,\n    position: {\n      left: left || 0,\n      top: top || 0,\n      right: right || 0,\n      bottom: bottom || 0\n    }\n  }), children);\n};\n\nViewPort.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]])\n});\n\nvar Options = function Options(_a) {\n  var children = _a.children,\n      opts = __rest(_a, ["children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](OptionsContext.Provider, {\n    value: opts\n  }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///X0wg\n')},XQvf:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.active = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar active = exports.active = function active(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Active, _React$Component);\n\n    function Active() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Active);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        active: false\n      }, _this.handleMouseDown = function () {\n        return _this.setState({\n          active: true\n        });\n      }, _this.handleMouseUp = function () {\n        return _this.setState({\n          active: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseDown: _this.handleMouseDown,\n          onMouseUp: _this.handleMouseUp\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Active;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = active;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///XQvf\n')},ZpRC:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"Bran\");\n\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? Object(compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(target, options) : []);\n  }\n\n  if (!isTargetAttached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(Object(compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(target, computeOptions), computeOptions.behavior);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (scrollIntoView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsLWludG8tdmlldy1pZi1uZWVkZWQvZXMvaW5kZXguanM/NjY5NCJdLCJuYW1lcyI6WyJpc09wdGlvbnNPYmplY3QiLCJvcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImRlZmF1bHRCZWhhdmlvciIsImFjdGlvbnMiLCJiZWhhdmlvciIsImNhblNtb290aFNjcm9sbCIsImRvY3VtZW50IiwiYm9keSIsInN0eWxlIiwiZm9yRWFjaCIsIl9yZWYiLCJlbCIsInRvcCIsImxlZnQiLCJzY3JvbGwiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZ2V0T3B0aW9ucyIsImJsb2NrIiwiaW5saW5lIiwic2Nyb2xsSW50b1ZpZXciLCJ0YXJnZXQiLCJpc1RhcmdldEF0dGFjaGVkIiwiaXNDb25uZWN0ZWQiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGFpbnMiLCJjb21wdXRlIiwiY29tcHV0ZU9wdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBRUEsU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7RUFDaEMsT0FBT0EsT0FBTyxLQUFLQyxNQUFNLENBQUNELE9BQUQsQ0FBbEIsSUFBK0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixPQUFaLEVBQXFCRyxNQUFyQixLQUFnQyxDQUF0RTtBQUNEOztBQUVELFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxRQUFsQyxFQUE0QztFQUMxQyxJQUFJQSxRQUFRLEtBQUssS0FBSyxDQUF0QixFQUF5QjtJQUN2QkEsUUFBUSxHQUFHLE1BQVg7RUFDRDs7RUFFRCxJQUFJQyxlQUFlLElBQUksb0JBQW9CQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBdEMsQ0FBbkI7RUFDQUwsT0FBTyxDQUFDTSxPQUFSLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7SUFDOUIsSUFBSUMsRUFBRSxHQUFHRCxJQUFJLENBQUNDLEVBQWQ7SUFBQSxJQUNJQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0UsR0FEZjtJQUFBLElBRUlDLElBQUksR0FBR0gsSUFBSSxDQUFDRyxJQUZoQjs7SUFJQSxJQUFJRixFQUFFLENBQUNHLE1BQUgsSUFBYVQsZUFBakIsRUFBa0M7TUFDaENNLEVBQUUsQ0FBQ0csTUFBSCxDQUFVO1FBQ1JGLEdBQUcsRUFBRUEsR0FERztRQUVSQyxJQUFJLEVBQUVBLElBRkU7UUFHUlQsUUFBUSxFQUFFQTtNQUhGLENBQVY7SUFLRCxDQU5ELE1BTU87TUFDTE8sRUFBRSxDQUFDSSxTQUFILEdBQWVILEdBQWY7TUFDQUQsRUFBRSxDQUFDSyxVQUFILEdBQWdCSCxJQUFoQjtJQUNEO0VBQ0YsQ0FmRDtBQWdCRDs7QUFFRCxTQUFTSSxVQUFULENBQW9CbkIsT0FBcEIsRUFBNkI7RUFDM0IsSUFBSUEsT0FBTyxLQUFLLEtBQWhCLEVBQXVCO0lBQ3JCLE9BQU87TUFDTG9CLEtBQUssRUFBRSxLQURGO01BRUxDLE1BQU0sRUFBRTtJQUZILENBQVA7RUFJRDs7RUFFRCxJQUFJdEIsZUFBZSxDQUFDQyxPQUFELENBQW5CLEVBQThCO0lBQzVCLE9BQU9BLE9BQVA7RUFDRDs7RUFFRCxPQUFPO0lBQ0xvQixLQUFLLEVBQUUsT0FERjtJQUVMQyxNQUFNLEVBQUU7RUFGSCxDQUFQO0FBSUQ7O0FBRUQsU0FBU0MsY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0N2QixPQUFoQyxFQUF5QztFQUN2QyxJQUFJd0IsZ0JBQWdCLEdBQUdELE1BQU0sQ0FBQ0UsV0FBUCxJQUFzQkYsTUFBTSxDQUFDRyxhQUFQLENBQXFCQyxlQUFyQixDQUFxQ0MsUUFBckMsQ0FBOENMLE1BQTlDLENBQTdDOztFQUVBLElBQUl4QixlQUFlLENBQUNDLE9BQUQsQ0FBZixJQUE0QixPQUFPQSxPQUFPLENBQUNNLFFBQWYsS0FBNEIsVUFBNUQsRUFBd0U7SUFDdEUsT0FBT04sT0FBTyxDQUFDTSxRQUFSLENBQWlCa0IsZ0JBQWdCLEdBQUdLLGdGQUFPLENBQUNOLE1BQUQsRUFBU3ZCLE9BQVQsQ0FBVixHQUE4QixFQUEvRCxDQUFQO0VBQ0Q7O0VBRUQsSUFBSSxDQUFDd0IsZ0JBQUwsRUFBdUI7SUFDckI7RUFDRDs7RUFFRCxJQUFJTSxjQUFjLEdBQUdYLFVBQVUsQ0FBQ25CLE9BQUQsQ0FBL0I7RUFDQSxPQUFPSSxlQUFlLENBQUN5QixnRkFBTyxDQUFDTixNQUFELEVBQVNPLGNBQVQsQ0FBUixFQUFrQ0EsY0FBYyxDQUFDeEIsUUFBakQsQ0FBdEI7QUFDRDs7QUFFY2dCLHVFQUFmIiwiZmlsZSI6IlpwUkMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29tcHV0ZSBmcm9tICdjb21wdXRlLXNjcm9sbC1pbnRvLXZpZXcnO1xuXG5mdW5jdGlvbiBpc09wdGlvbnNPYmplY3Qob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyA9PT0gT2JqZWN0KG9wdGlvbnMpICYmIE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCAhPT0gMDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEJlaGF2aW9yKGFjdGlvbnMsIGJlaGF2aW9yKSB7XG4gIGlmIChiZWhhdmlvciA9PT0gdm9pZCAwKSB7XG4gICAgYmVoYXZpb3IgPSAnYXV0byc7XG4gIH1cblxuICB2YXIgY2FuU21vb3RoU2Nyb2xsID0gKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSk7XG4gIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBlbCA9IF9yZWYuZWwsXG4gICAgICAgIHRvcCA9IF9yZWYudG9wLFxuICAgICAgICBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgaWYgKGVsLnNjcm9sbCAmJiBjYW5TbW9vdGhTY3JvbGwpIHtcbiAgICAgIGVsLnNjcm9sbCh7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBiZWhhdmlvcjogYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrOiAnZW5kJyxcbiAgICAgIGlubGluZTogJ25lYXJlc3QnXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc09wdGlvbnNPYmplY3Qob3B0aW9ucykpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmxvY2s6ICdzdGFydCcsXG4gICAgaW5saW5lOiAnbmVhcmVzdCdcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcodGFyZ2V0LCBvcHRpb25zKSB7XG4gIHZhciBpc1RhcmdldEF0dGFjaGVkID0gdGFyZ2V0LmlzQ29ubmVjdGVkIHx8IHRhcmdldC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0YXJnZXQpO1xuXG4gIGlmIChpc09wdGlvbnNPYmplY3Qob3B0aW9ucykgJiYgdHlwZW9mIG9wdGlvbnMuYmVoYXZpb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5iZWhhdmlvcihpc1RhcmdldEF0dGFjaGVkID8gY29tcHV0ZSh0YXJnZXQsIG9wdGlvbnMpIDogW10pO1xuICB9XG5cbiAgaWYgKCFpc1RhcmdldEF0dGFjaGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNvbXB1dGVPcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgcmV0dXJuIGRlZmF1bHRCZWhhdmlvcihjb21wdXRlKHRhcmdldCwgY29tcHV0ZU9wdGlvbnMpLCBjb21wdXRlT3B0aW9ucy5iZWhhdmlvcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNjcm9sbEludG9WaWV3OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///ZpRC\n")},bdgK:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype[\"delete\"] = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations[\"delete\"](target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"IyRk\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bdgK\n")},lCFh:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node's url.parse\n\n\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n  var hasTrailingSlash;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }\n  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n  var result = fromParts.join('/');\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n  return result;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (resolvePathname);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcz85NDIxIl0sIm5hbWVzIjpbImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImxpc3QiLCJpbmRleCIsImkiLCJrIiwibiIsImxlbmd0aCIsInBvcCIsInJlc29sdmVQYXRobmFtZSIsInRvIiwiZnJvbSIsInVuZGVmaW5lZCIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwiam9pbiIsInN1YnN0ciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEI7RUFDNUIsT0FBT0EsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQTlCO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7RUFDOUIsS0FBSyxJQUFJQyxDQUFDLEdBQUdELEtBQVIsRUFBZUUsQ0FBQyxHQUFHRCxDQUFDLEdBQUcsQ0FBdkIsRUFBMEJFLENBQUMsR0FBR0osSUFBSSxDQUFDSyxNQUF4QyxFQUFnREYsQ0FBQyxHQUFHQyxDQUFwRCxFQUF1REYsQ0FBQyxJQUFJLENBQUwsRUFBUUMsQ0FBQyxJQUFJLENBQXBFLEVBQXVFO0lBQ3JFSCxJQUFJLENBQUNFLENBQUQsQ0FBSixHQUFVRixJQUFJLENBQUNHLENBQUQsQ0FBZDtFQUNEOztFQUVESCxJQUFJLENBQUNNLEdBQUw7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxJQUE3QixFQUFtQztFQUNqQyxJQUFJQSxJQUFJLEtBQUtDLFNBQWIsRUFBd0JELElBQUksR0FBRyxFQUFQO0VBRXhCLElBQUlFLE9BQU8sR0FBSUgsRUFBRSxJQUFJQSxFQUFFLENBQUNJLEtBQUgsQ0FBUyxHQUFULENBQVAsSUFBeUIsRUFBdkM7RUFDQSxJQUFJQyxTQUFTLEdBQUlKLElBQUksSUFBSUEsSUFBSSxDQUFDRyxLQUFMLENBQVcsR0FBWCxDQUFULElBQTZCLEVBQTdDO0VBRUEsSUFBSUUsT0FBTyxHQUFHTixFQUFFLElBQUlaLFVBQVUsQ0FBQ1ksRUFBRCxDQUE5QjtFQUNBLElBQUlPLFNBQVMsR0FBR04sSUFBSSxJQUFJYixVQUFVLENBQUNhLElBQUQsQ0FBbEM7RUFDQSxJQUFJTyxVQUFVLEdBQUdGLE9BQU8sSUFBSUMsU0FBNUI7O0VBRUEsSUFBSVAsRUFBRSxJQUFJWixVQUFVLENBQUNZLEVBQUQsQ0FBcEIsRUFBMEI7SUFDeEI7SUFDQUssU0FBUyxHQUFHRixPQUFaO0VBQ0QsQ0FIRCxNQUdPLElBQUlBLE9BQU8sQ0FBQ04sTUFBWixFQUFvQjtJQUN6QjtJQUNBUSxTQUFTLENBQUNQLEdBQVY7SUFDQU8sU0FBUyxHQUFHQSxTQUFTLENBQUNJLE1BQVYsQ0FBaUJOLE9BQWpCLENBQVo7RUFDRDs7RUFFRCxJQUFJLENBQUNFLFNBQVMsQ0FBQ1IsTUFBZixFQUF1QixPQUFPLEdBQVA7RUFFdkIsSUFBSWEsZ0JBQUo7O0VBQ0EsSUFBSUwsU0FBUyxDQUFDUixNQUFkLEVBQXNCO0lBQ3BCLElBQUljLElBQUksR0FBR04sU0FBUyxDQUFDQSxTQUFTLENBQUNSLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBcEI7SUFDQWEsZ0JBQWdCLEdBQUdDLElBQUksS0FBSyxHQUFULElBQWdCQSxJQUFJLEtBQUssSUFBekIsSUFBaUNBLElBQUksS0FBSyxFQUE3RDtFQUNELENBSEQsTUFHTztJQUNMRCxnQkFBZ0IsR0FBRyxLQUFuQjtFQUNEOztFQUVELElBQUlFLEVBQUUsR0FBRyxDQUFUOztFQUNBLEtBQUssSUFBSWxCLENBQUMsR0FBR1csU0FBUyxDQUFDUixNQUF2QixFQUErQkgsQ0FBQyxJQUFJLENBQXBDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTRDO0lBQzFDLElBQUltQixJQUFJLEdBQUdSLFNBQVMsQ0FBQ1gsQ0FBRCxDQUFwQjs7SUFFQSxJQUFJbUIsSUFBSSxLQUFLLEdBQWIsRUFBa0I7TUFDaEJ0QixTQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO0lBQ0QsQ0FGRCxNQUVPLElBQUltQixJQUFJLEtBQUssSUFBYixFQUFtQjtNQUN4QnRCLFNBQVMsQ0FBQ2MsU0FBRCxFQUFZWCxDQUFaLENBQVQ7TUFDQWtCLEVBQUU7SUFDSCxDQUhNLE1BR0EsSUFBSUEsRUFBSixFQUFRO01BQ2JyQixTQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO01BQ0FrQixFQUFFO0lBQ0g7RUFDRjs7RUFFRCxJQUFJLENBQUNKLFVBQUwsRUFBaUIsT0FBT0ksRUFBRSxFQUFULEVBQWFBLEVBQWI7SUFBaUJQLFNBQVMsQ0FBQ1MsT0FBVixDQUFrQixJQUFsQjtFQUFqQjtFQUVqQixJQUNFTixVQUFVLElBQ1ZILFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUIsRUFEakIsS0FFQyxDQUFDQSxTQUFTLENBQUMsQ0FBRCxDQUFWLElBQWlCLENBQUNqQixVQUFVLENBQUNpQixTQUFTLENBQUMsQ0FBRCxDQUFWLENBRjdCLENBREYsRUFLRUEsU0FBUyxDQUFDUyxPQUFWLENBQWtCLEVBQWxCO0VBRUYsSUFBSUMsTUFBTSxHQUFHVixTQUFTLENBQUNXLElBQVYsQ0FBZSxHQUFmLENBQWI7RUFFQSxJQUFJTixnQkFBZ0IsSUFBSUssTUFBTSxDQUFDRSxNQUFQLENBQWMsQ0FBQyxDQUFmLE1BQXNCLEdBQTlDLEVBQW1ERixNQUFNLElBQUksR0FBVjtFQUVuRCxPQUFPQSxNQUFQO0FBQ0Q7O0FBRWNoQix3RUFBZiIsImZpbGUiOiJsQ0ZoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///lCFh\n")},lreK:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.mergeClasses = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _cloneDeep2 = __webpack_require__("BkRI");\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar mergeClasses = exports.mergeClasses = function mergeClasses(classes) {\n  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var styles = classes["default"] && (0, _cloneDeep3["default"])(classes["default"]) || {};\n  activeNames.map(function (name) {\n    var toMerge = classes[name];\n\n    if (toMerge) {\n      (0, _forOwn3["default"])(toMerge, function (value, key) {\n        if (!styles[key]) {\n          styles[key] = {};\n        }\n\n        styles[key] = _extends({}, styles[key], toMerge[key]);\n      });\n    }\n\n    return name;\n  });\n  return styles;\n};\n\nexports["default"] = mergeClasses;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL21lcmdlQ2xhc3Nlcy5qcz85NmI3Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWVyZ2VDbGFzc2VzIiwidW5kZWZpbmVkIiwiX2Zvck93bjIiLCJyZXF1aXJlIiwiX2Zvck93bjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Nsb25lRGVlcDIiLCJfY2xvbmVEZWVwMyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjbGFzc2VzIiwiYWN0aXZlTmFtZXMiLCJzdHlsZXMiLCJtYXAiLCJuYW1lIiwidG9NZXJnZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXRCOztBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNILFFBQUQsQ0FBckM7O0FBRUEsSUFBSUksV0FBVyxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSUksV0FBVyxHQUFHRixzQkFBc0IsQ0FBQ0MsV0FBRCxDQUF4Qzs7QUFFQSxJQUFJRSxRQUFRLEdBQUdaLE1BQU0sQ0FBQ2EsTUFBUCxJQUFpQixVQUFVQyxNQUFWLEVBQWtCO0VBQUUsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0lBQUUsSUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBdEI7O0lBQTJCLEtBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7TUFBRSxJQUFJbEIsTUFBTSxDQUFDb0IsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDSixNQUFyQyxFQUE2Q0MsR0FBN0MsQ0FBSixFQUF1RDtRQUFFTCxNQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEI7TUFBNEI7SUFBRTtFQUFFOztFQUFDLE9BQU9MLE1BQVA7QUFBZ0IsQ0FBaFE7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NjLEdBQWhDLEVBQXFDO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0lBQUUsV0FBU0E7RUFBWCxDQUFyQztBQUF3RDs7QUFFL0YsSUFBSW5CLFlBQVksR0FBR0YsT0FBTyxDQUFDRSxZQUFSLEdBQXVCLFNBQVNBLFlBQVQsQ0FBc0JxQixPQUF0QixFQUErQjtFQUN2RSxJQUFJQyxXQUFXLEdBQUdWLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQlgsU0FBekMsR0FBcURXLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQXRGO0VBRUEsSUFBSVcsTUFBTSxHQUFHRixPQUFPLFdBQVAsSUFBbUIsQ0FBQyxHQUFHZCxXQUFXLFdBQWYsRUFBeUJjLE9BQU8sV0FBaEMsQ0FBbkIsSUFBZ0UsRUFBN0U7RUFDQUMsV0FBVyxDQUFDRSxHQUFaLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7SUFDOUIsSUFBSUMsT0FBTyxHQUFHTCxPQUFPLENBQUNJLElBQUQsQ0FBckI7O0lBQ0EsSUFBSUMsT0FBSixFQUFhO01BQ1gsQ0FBQyxHQUFHdEIsUUFBUSxXQUFaLEVBQXNCc0IsT0FBdEIsRUFBK0IsVUFBVTNCLEtBQVYsRUFBaUJnQixHQUFqQixFQUFzQjtRQUNuRCxJQUFJLENBQUNRLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCO1VBQ2hCUSxNQUFNLENBQUNSLEdBQUQsQ0FBTixHQUFjLEVBQWQ7UUFDRDs7UUFFRFEsTUFBTSxDQUFDUixHQUFELENBQU4sR0FBY1AsUUFBUSxDQUFDLEVBQUQsRUFBS2UsTUFBTSxDQUFDUixHQUFELENBQVgsRUFBa0JXLE9BQU8sQ0FBQ1gsR0FBRCxDQUF6QixDQUF0QjtNQUNELENBTkQ7SUFPRDs7SUFFRCxPQUFPVSxJQUFQO0VBQ0QsQ0FiRDtFQWNBLE9BQU9GLE1BQVA7QUFDRCxDQW5CRDs7QUFxQkF6QixPQUFPLFdBQVAsR0FBa0JFLFlBQWxCIiwiZmlsZSI6ImxyZUsuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lcmdlQ2xhc3NlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9jbG9uZURlZXAyID0gcmVxdWlyZSgnbG9kYXNoL2Nsb25lRGVlcCcpO1xuXG52YXIgX2Nsb25lRGVlcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZURlZXAyKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1lcmdlQ2xhc3NlcyA9IGV4cG9ydHMubWVyZ2VDbGFzc2VzID0gZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGNsYXNzZXMpIHtcbiAgdmFyIGFjdGl2ZU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICB2YXIgc3R5bGVzID0gY2xhc3Nlcy5kZWZhdWx0ICYmICgwLCBfY2xvbmVEZWVwMy5kZWZhdWx0KShjbGFzc2VzLmRlZmF1bHQpIHx8IHt9O1xuICBhY3RpdmVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdG9NZXJnZSA9IGNsYXNzZXNbbmFtZV07XG4gICAgaWYgKHRvTWVyZ2UpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0b01lcmdlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIXN0eWxlc1trZXldKSB7XG4gICAgICAgICAgc3R5bGVzW2tleV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlc1trZXldID0gX2V4dGVuZHMoe30sIHN0eWxlc1trZXldLCB0b01lcmdlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///lreK\n')},mSXw:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("9iN/");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcz85OTI1Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztFQUN6Q0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxtQkFBTyxDQUFDLE1BQUQsQ0FBeEI7QUFDRCxDQUZELE1BRU8iLCJmaWxlIjoibVNYdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///mSXw\n')}}]);