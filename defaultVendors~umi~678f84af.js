(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[7],{"+nKL":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-resize-observer/es/index.js + 4 modules\nvar es = __webpack_require__("t23M");\n\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/Filler.js\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\n\n/**\n * Fill component to provided the scroll content real height.\n */\n\nvar Filler = /*#__PURE__*/react["forwardRef"](function (_ref, ref) {\n  var height = _ref.height,\n      offset = _ref.offset,\n      children = _ref.children,\n      prefixCls = _ref.prefixCls,\n      onInnerResize = _ref.onInnerResize;\n  var outerStyle = {};\n  var innerStyle = {\n    display: \'flex\',\n    flexDirection: \'column\'\n  };\n\n  if (offset !== undefined) {\n    outerStyle = {\n      height: height,\n      position: \'relative\',\n      overflow: \'hidden\'\n    };\n    innerStyle = _objectSpread(_objectSpread({}, innerStyle), {}, {\n      transform: "translateY(".concat(offset, "px)"),\n      position: \'absolute\',\n      left: 0,\n      right: 0,\n      top: 0\n    });\n  }\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    style: outerStyle\n  }, /*#__PURE__*/react["createElement"](es["a" /* default */], {\n    onResize: function onResize(_ref2) {\n      var offsetHeight = _ref2.offsetHeight;\n\n      if (offsetHeight && onInnerResize) {\n        onInnerResize();\n      }\n    }\n  }, /*#__PURE__*/react["createElement"]("div", {\n    style: innerStyle,\n    className: classnames_default()(_defineProperty({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),\n    ref: ref\n  }, children)));\n});\nFiller.displayName = \'Filler\';\n/* harmony default export */ var es_Filler = (Filler);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/ScrollBar.js\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction ScrollBar_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, "prototype", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === "object" || typeof call === "function")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError("Derived constructors may only return object or undefined");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n\n\n\nvar MIN_SIZE = 20;\n\nfunction getPageY(e) {\n  return \'touches\' in e ? e.touches[0].pageY : e.pageY;\n}\n\nvar ScrollBar_ScrollBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScrollBar, _React$Component);\n\n  var _super = _createSuper(ScrollBar);\n\n  function ScrollBar() {\n    var _this;\n\n    _classCallCheck(this, ScrollBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.moveRaf = null;\n    _this.scrollbarRef = /*#__PURE__*/react["createRef"]();\n    _this.thumbRef = /*#__PURE__*/react["createRef"]();\n    _this.visibleTimeout = null;\n    _this.state = {\n      dragging: false,\n      pageY: null,\n      startTop: null,\n      visible: false\n    };\n\n    _this.delayHidden = function () {\n      clearTimeout(_this.visibleTimeout);\n\n      _this.setState({\n        visible: true\n      });\n\n      _this.visibleTimeout = setTimeout(function () {\n        _this.setState({\n          visible: false\n        });\n      }, 2000);\n    };\n\n    _this.onScrollbarTouchStart = function (e) {\n      e.preventDefault();\n    };\n\n    _this.onContainerMouseDown = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    _this.patchEvents = function () {\n      window.addEventListener(\'mousemove\', _this.onMouseMove);\n      window.addEventListener(\'mouseup\', _this.onMouseUp);\n\n      _this.thumbRef.current.addEventListener(\'touchmove\', _this.onMouseMove);\n\n      _this.thumbRef.current.addEventListener(\'touchend\', _this.onMouseUp);\n    };\n\n    _this.removeEvents = function () {\n      var _this$scrollbarRef$cu;\n\n      window.removeEventListener(\'mousemove\', _this.onMouseMove);\n      window.removeEventListener(\'mouseup\', _this.onMouseUp);\n      (_this$scrollbarRef$cu = _this.scrollbarRef.current) === null || _this$scrollbarRef$cu === void 0 ? void 0 : _this$scrollbarRef$cu.removeEventListener(\'touchstart\', _this.onScrollbarTouchStart);\n\n      if (_this.thumbRef.current) {\n        _this.thumbRef.current.removeEventListener(\'touchstart\', _this.onMouseDown);\n\n        _this.thumbRef.current.removeEventListener(\'touchmove\', _this.onMouseMove);\n\n        _this.thumbRef.current.removeEventListener(\'touchend\', _this.onMouseUp);\n      }\n\n      raf["a" /* default */].cancel(_this.moveRaf);\n    };\n\n    _this.onMouseDown = function (e) {\n      var onStartMove = _this.props.onStartMove;\n\n      _this.setState({\n        dragging: true,\n        pageY: getPageY(e),\n        startTop: _this.getTop()\n      });\n\n      onStartMove();\n\n      _this.patchEvents();\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    _this.onMouseMove = function (e) {\n      var _this$state = _this.state,\n          dragging = _this$state.dragging,\n          pageY = _this$state.pageY,\n          startTop = _this$state.startTop;\n      var onScroll = _this.props.onScroll;\n      raf["a" /* default */].cancel(_this.moveRaf);\n\n      if (dragging) {\n        var offsetY = getPageY(e) - pageY;\n        var newTop = startTop + offsetY;\n\n        var enableScrollRange = _this.getEnableScrollRange();\n\n        var enableHeightRange = _this.getEnableHeightRange();\n\n        var ptg = enableHeightRange ? newTop / enableHeightRange : 0;\n        var newScrollTop = Math.ceil(ptg * enableScrollRange);\n        _this.moveRaf = Object(raf["a" /* default */])(function () {\n          onScroll(newScrollTop);\n        });\n      }\n    };\n\n    _this.onMouseUp = function () {\n      var onStopMove = _this.props.onStopMove;\n\n      _this.setState({\n        dragging: false\n      });\n\n      onStopMove();\n\n      _this.removeEvents();\n    };\n\n    _this.getSpinHeight = function () {\n      var _this$props = _this.props,\n          height = _this$props.height,\n          count = _this$props.count;\n      var baseHeight = height / count * 10;\n      baseHeight = Math.max(baseHeight, MIN_SIZE);\n      baseHeight = Math.min(baseHeight, height / 2);\n      return Math.floor(baseHeight);\n    };\n\n    _this.getEnableScrollRange = function () {\n      var _this$props2 = _this.props,\n          scrollHeight = _this$props2.scrollHeight,\n          height = _this$props2.height;\n      return scrollHeight - height || 0;\n    };\n\n    _this.getEnableHeightRange = function () {\n      var height = _this.props.height;\n\n      var spinHeight = _this.getSpinHeight();\n\n      return height - spinHeight || 0;\n    };\n\n    _this.getTop = function () {\n      var scrollTop = _this.props.scrollTop;\n\n      var enableScrollRange = _this.getEnableScrollRange();\n\n      var enableHeightRange = _this.getEnableHeightRange();\n\n      if (scrollTop === 0 || enableScrollRange === 0) {\n        return 0;\n      }\n\n      var ptg = scrollTop / enableScrollRange;\n      return ptg * enableHeightRange;\n    };\n\n    _this.showScroll = function () {\n      var _this$props3 = _this.props,\n          height = _this$props3.height,\n          scrollHeight = _this$props3.scrollHeight;\n      return scrollHeight > height;\n    };\n\n    return _this;\n  }\n\n  _createClass(ScrollBar, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.scrollbarRef.current.addEventListener(\'touchstart\', this.onScrollbarTouchStart);\n      this.thumbRef.current.addEventListener(\'touchstart\', this.onMouseDown);\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.scrollTop !== this.props.scrollTop) {\n        this.delayHidden();\n      }\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.removeEvents();\n      clearTimeout(this.visibleTimeout);\n    }\n  }, {\n    key: "render",\n    value: // ====================== Render =======================\n    function render() {\n      var _this$state2 = this.state,\n          dragging = _this$state2.dragging,\n          visible = _this$state2.visible;\n      var prefixCls = this.props.prefixCls;\n      var spinHeight = this.getSpinHeight();\n      var top = this.getTop();\n      var canScroll = this.showScroll();\n      var mergedVisible = canScroll && visible;\n      return /*#__PURE__*/react["createElement"]("div", {\n        ref: this.scrollbarRef,\n        className: classnames_default()("".concat(prefixCls, "-scrollbar"), ScrollBar_defineProperty({}, "".concat(prefixCls, "-scrollbar-show"), canScroll)),\n        style: {\n          width: 8,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          position: \'absolute\',\n          display: mergedVisible ? null : \'none\'\n        },\n        onMouseDown: this.onContainerMouseDown,\n        onMouseMove: this.delayHidden\n      }, /*#__PURE__*/react["createElement"]("div", {\n        ref: this.thumbRef,\n        className: classnames_default()("".concat(prefixCls, "-scrollbar-thumb"), ScrollBar_defineProperty({}, "".concat(prefixCls, "-scrollbar-thumb-moving"), dragging)),\n        style: {\n          width: \'100%\',\n          height: spinHeight,\n          top: top,\n          left: 0,\n          position: \'absolute\',\n          background: \'rgba(0, 0, 0, 0.5)\',\n          borderRadius: 99,\n          cursor: \'pointer\',\n          userSelect: \'none\'\n        },\n        onMouseDown: this.onMouseDown\n      }));\n    }\n  }]);\n\n  return ScrollBar;\n}(react["Component"]);\n\n\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/Item.js\n\nfunction Item(_ref) {\n  var children = _ref.children,\n      setRef = _ref.setRef;\n  var refFunc = react["useCallback"](function (node) {\n    setRef(node);\n  }, []);\n  return /*#__PURE__*/react["cloneElement"](children, {\n    ref: refFunc\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useChildren.js\n\n\nfunction useChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {\n  var getKey = _ref.getKey;\n  return list.slice(startIndex, endIndex + 1).map(function (item, index) {\n    var eleIndex = startIndex + index;\n    var node = renderFunc(item, eleIndex, {// style: status === \'MEASURE_START\' ? { visibility: \'hidden\' } : {},\n    });\n    var key = getKey(item);\n    return /*#__PURE__*/react["createElement"](Item, {\n      key: key,\n      setRef: function setRef(ele) {\n        return setNodeRef(item, ele);\n      }\n    }, node);\n  });\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/findDOMNode.js\nvar findDOMNode = __webpack_require__("m+aA");\n\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/utils/CacheMap.js\nfunction CacheMap_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction CacheMap_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction CacheMap_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) CacheMap_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) CacheMap_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n} // Firefox has low performance of map.\n\n\nvar CacheMap = /*#__PURE__*/function () {\n  function CacheMap() {\n    CacheMap_classCallCheck(this, CacheMap);\n\n    this.maps = void 0;\n    this.maps = Object.create(null);\n  }\n\n  CacheMap_createClass(CacheMap, [{\n    key: "set",\n    value: function set(key, value) {\n      this.maps[key] = value;\n    }\n  }, {\n    key: "get",\n    value: function get(key) {\n      return this.maps[key];\n    }\n  }]);\n\n  return CacheMap;\n}();\n\n/* harmony default export */ var utils_CacheMap = (CacheMap);\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useHeights.js\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n\n\n\n\n\nfunction useHeights(getKey, onItemAdd, onItemRemove) {\n  var _React$useState = react["useState"](0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      updatedMark = _React$useState2[0],\n      setUpdatedMark = _React$useState2[1];\n\n  var instanceRef = Object(react["useRef"])(new Map());\n  var heightsRef = Object(react["useRef"])(new utils_CacheMap());\n  var collectRafRef = Object(react["useRef"])();\n\n  function cancelRaf() {\n    raf["a" /* default */].cancel(collectRafRef.current);\n  }\n\n  function collectHeight() {\n    cancelRaf();\n    collectRafRef.current = Object(raf["a" /* default */])(function () {\n      instanceRef.current.forEach(function (element, key) {\n        if (element && element.offsetParent) {\n          var htmlElement = Object(findDOMNode["a" /* default */])(element);\n          var offsetHeight = htmlElement.offsetHeight;\n\n          if (heightsRef.current.get(key) !== offsetHeight) {\n            heightsRef.current.set(key, htmlElement.offsetHeight);\n          }\n        }\n      }); // Always trigger update mark to tell parent that should re-calculate heights when resized\n\n      setUpdatedMark(function (c) {\n        return c + 1;\n      });\n    });\n  }\n\n  function setInstanceRef(item, instance) {\n    var key = getKey(item);\n    var origin = instanceRef.current.get(key);\n\n    if (instance) {\n      instanceRef.current.set(key, instance);\n      collectHeight();\n    } else {\n      instanceRef.current["delete"](key);\n    } // Instance changed\n\n\n    if (!origin !== !instance) {\n      if (instance) {\n        onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);\n      } else {\n        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);\n      }\n    }\n  }\n\n  Object(react["useEffect"])(function () {\n    return cancelRaf;\n  }, []);\n  return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useScrollTo.js\nfunction useScrollTo_typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return useScrollTo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, useScrollTo_typeof(obj);\n}\n/* eslint-disable no-param-reassign */\n\n\n\n\nfunction useScrollTo(containerRef, data, heights, itemHeight, getKey, collectHeight, syncScrollTop, triggerFlash) {\n  var scrollRef = react["useRef"]();\n  return function (arg) {\n    // When not argument provided, we think dev may want to show the scrollbar\n    if (arg === null || arg === undefined) {\n      triggerFlash();\n      return;\n    } // Normal scroll logic\n\n\n    raf["a" /* default */].cancel(scrollRef.current);\n\n    if (typeof arg === \'number\') {\n      syncScrollTop(arg);\n    } else if (arg && useScrollTo_typeof(arg) === \'object\') {\n      var index;\n      var align = arg.align;\n\n      if (\'index\' in arg) {\n        index = arg.index;\n      } else {\n        index = data.findIndex(function (item) {\n          return getKey(item) === arg.key;\n        });\n      }\n\n      var _arg$offset = arg.offset,\n          offset = _arg$offset === void 0 ? 0 : _arg$offset; // We will retry 3 times in case dynamic height shaking\n\n      var syncScroll = function syncScroll(times, targetAlign) {\n        if (times < 0 || !containerRef.current) return;\n        var height = containerRef.current.clientHeight;\n        var needCollectHeight = false;\n        var newTargetAlign = targetAlign; // Go to next frame if height not exist\n\n        if (height) {\n          var mergedAlign = targetAlign || align; // Get top & bottom\n\n          var stackTop = 0;\n          var itemTop = 0;\n          var itemBottom = 0;\n          var maxLen = Math.min(data.length, index);\n\n          for (var i = 0; i <= maxLen; i += 1) {\n            var key = getKey(data[i]);\n            itemTop = stackTop;\n            var cacheHeight = heights.get(key);\n            itemBottom = itemTop + (cacheHeight === undefined ? itemHeight : cacheHeight);\n            stackTop = itemBottom;\n\n            if (i === index && cacheHeight === undefined) {\n              needCollectHeight = true;\n            }\n          } // Scroll to\n\n\n          var targetTop = null;\n\n          switch (mergedAlign) {\n            case \'top\':\n              targetTop = itemTop - offset;\n              break;\n\n            case \'bottom\':\n              targetTop = itemBottom - height + offset;\n              break;\n\n            default:\n              {\n                var scrollTop = containerRef.current.scrollTop;\n                var scrollBottom = scrollTop + height;\n\n                if (itemTop < scrollTop) {\n                  newTargetAlign = \'top\';\n                } else if (itemBottom > scrollBottom) {\n                  newTargetAlign = \'bottom\';\n                }\n              }\n          }\n\n          if (targetTop !== null && targetTop !== containerRef.current.scrollTop) {\n            syncScrollTop(targetTop);\n          }\n        } // We will retry since element may not sync height as it described\n\n\n        scrollRef.current = Object(raf["a" /* default */])(function () {\n          if (needCollectHeight) {\n            collectHeight();\n          }\n\n          syncScroll(times - 1, newTargetAlign);\n        });\n      };\n\n      syncScroll(3);\n    }\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/utils/algorithmUtil.js\n/**\n * Get index with specific start index one by one. e.g.\n * min: 3, max: 9, start: 6\n *\n * Return index is:\n * [0]: 6\n * [1]: 7\n * [2]: 5\n * [3]: 8\n * [4]: 4\n * [5]: 9\n * [6]: 3\n */\nfunction getIndexByStartLoc(min, max, start, index) {\n  var beforeCount = start - min;\n  var afterCount = max - start;\n  var balanceCount = Math.min(beforeCount, afterCount) * 2; // Balance\n\n  if (index <= balanceCount) {\n    var stepIndex = Math.floor(index / 2);\n\n    if (index % 2) {\n      return start + stepIndex + 1;\n    }\n\n    return start - stepIndex;\n  } // One is out of range\n\n\n  if (beforeCount > afterCount) {\n    return start - (index - afterCount);\n  }\n\n  return start + (index - beforeCount);\n}\n/**\n * We assume that 2 list has only 1 item diff and others keeping the order.\n * So we can use dichotomy algorithm to find changed one.\n */\n\nfunction findListDiffIndex(originList, targetList, getKey) {\n  var originLen = originList.length;\n  var targetLen = targetList.length;\n  var shortList;\n  var longList;\n\n  if (originLen === 0 && targetLen === 0) {\n    return null;\n  }\n\n  if (originLen < targetLen) {\n    shortList = originList;\n    longList = targetList;\n  } else {\n    shortList = targetList;\n    longList = originList;\n  }\n\n  var notExistKey = {\n    __EMPTY_ITEM__: true\n  };\n\n  function getItemKey(item) {\n    if (item !== undefined) {\n      return getKey(item);\n    }\n\n    return notExistKey;\n  } // Loop to find diff one\n\n\n  var diffIndex = null;\n  var multiple = Math.abs(originLen - targetLen) !== 1;\n\n  for (var i = 0; i < longList.length; i += 1) {\n    var shortKey = getItemKey(shortList[i]);\n    var longKey = getItemKey(longList[i]);\n\n    if (shortKey !== longKey) {\n      diffIndex = i;\n      multiple = multiple || shortKey !== getItemKey(longList[i + 1]);\n      break;\n    }\n  }\n\n  return diffIndex === null ? null : {\n    index: diffIndex,\n    multiple: multiple\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useDiffItem.js\nfunction useDiffItem_slicedToArray(arr, i) {\n  return useDiffItem_arrayWithHoles(arr) || useDiffItem_iterableToArrayLimit(arr, i) || useDiffItem_unsupportedIterableToArray(arr, i) || useDiffItem_nonIterableRest();\n}\n\nfunction useDiffItem_nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nfunction useDiffItem_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return useDiffItem_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return useDiffItem_arrayLikeToArray(o, minLen);\n}\n\nfunction useDiffItem_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction useDiffItem_iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction useDiffItem_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n\n\nfunction useDiffItem(data, getKey, onDiff) {\n  var _React$useState = react["useState"](data),\n      _React$useState2 = useDiffItem_slicedToArray(_React$useState, 2),\n      prevData = _React$useState2[0],\n      setPrevData = _React$useState2[1];\n\n  var _React$useState3 = react["useState"](null),\n      _React$useState4 = useDiffItem_slicedToArray(_React$useState3, 2),\n      diffItem = _React$useState4[0],\n      setDiffItem = _React$useState4[1];\n\n  react["useEffect"](function () {\n    var diff = findListDiffIndex(prevData || [], data || [], getKey);\n\n    if ((diff === null || diff === void 0 ? void 0 : diff.index) !== undefined) {\n      onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);\n      setDiffItem(data[diff.index]);\n    }\n\n    setPrevData(data);\n  }, [data]);\n  return [diffItem];\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/utils/isFirefox.js\nfunction isFirefox_typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return isFirefox_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, isFirefox_typeof(obj);\n}\n\nvar isFF = (typeof navigator === "undefined" ? "undefined" : isFirefox_typeof(navigator)) === \'object\' && /Firefox/i.test(navigator.userAgent);\n/* harmony default export */ var isFirefox = (isFF);\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useOriginScroll.js\n\n/* harmony default export */ var useOriginScroll = (function (isScrollAtTop, isScrollAtBottom) {\n  // Do lock for a wheel when scrolling\n  var lockRef = Object(react["useRef"])(false);\n  var lockTimeoutRef = Object(react["useRef"])(null);\n\n  function lockScroll() {\n    clearTimeout(lockTimeoutRef.current);\n    lockRef.current = true;\n    lockTimeoutRef.current = setTimeout(function () {\n      lockRef.current = false;\n    }, 50);\n  } // Pass to ref since global add is in closure\n\n\n  var scrollPingRef = Object(react["useRef"])({\n    top: isScrollAtTop,\n    bottom: isScrollAtBottom\n  });\n  scrollPingRef.current.top = isScrollAtTop;\n  scrollPingRef.current.bottom = isScrollAtBottom;\n  return function (deltaY) {\n    var smoothOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var originScroll = // Pass origin wheel when on the top\n    deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom\n    deltaY > 0 && scrollPingRef.current.bottom;\n\n    if (smoothOffset && originScroll) {\n      // No need lock anymore when it\'s smooth offset from touchMove interval\n      clearTimeout(lockTimeoutRef.current);\n      lockRef.current = false;\n    } else if (!originScroll || lockRef.current) {\n      lockScroll();\n    }\n\n    return !lockRef.current && originScroll;\n  };\n});\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useFrameWheel.js\n\n\n\n\nfunction useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {\n  var offsetRef = Object(react["useRef"])(0);\n  var nextFrameRef = Object(react["useRef"])(null); // Firefox patch\n\n  var wheelValueRef = Object(react["useRef"])(null);\n  var isMouseScrollRef = Object(react["useRef"])(false); // Scroll status sync\n\n  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);\n\n  function onWheel(event) {\n    if (!inVirtual) return;\n    raf["a" /* default */].cancel(nextFrameRef.current);\n    var deltaY = event.deltaY;\n    offsetRef.current += deltaY;\n    wheelValueRef.current = deltaY; // Do nothing when scroll at the edge, Skip check when is in scroll\n\n    if (originScroll(deltaY)) return; // Proxy of scroll events\n\n    if (!isFirefox) {\n      event.preventDefault();\n    }\n\n    nextFrameRef.current = Object(raf["a" /* default */])(function () {\n      // Patch a multiple for Firefox to fix wheel number too small\n      // ref: https://github.com/ant-design/ant-design/issues/26372#issuecomment-679460266\n      var patchMultiple = isMouseScrollRef.current ? 10 : 1;\n      onWheelDelta(offsetRef.current * patchMultiple);\n      offsetRef.current = 0;\n    });\n  } // A patch for firefox\n\n\n  function onFireFoxScroll(event) {\n    if (!inVirtual) return;\n    isMouseScrollRef.current = event.detail === wheelValueRef.current;\n  }\n\n  return [onWheel, onFireFoxScroll];\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useLayoutEffect.js\nvar useLayoutEffect = __webpack_require__("TNol");\n\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js\n\n\nvar SMOOTH_PTG = 14 / 15;\nfunction useMobileTouchMove(inVirtual, listRef, callback) {\n  var touchedRef = Object(react["useRef"])(false);\n  var touchYRef = Object(react["useRef"])(0);\n  var elementRef = Object(react["useRef"])(null); // Smooth scroll\n\n  var intervalRef = Object(react["useRef"])(null);\n  /* eslint-disable prefer-const */\n\n  var cleanUpEvents;\n\n  var onTouchMove = function onTouchMove(e) {\n    if (touchedRef.current) {\n      var currentY = Math.ceil(e.touches[0].pageY);\n      var offsetY = touchYRef.current - currentY;\n      touchYRef.current = currentY;\n\n      if (callback(offsetY)) {\n        e.preventDefault();\n      } // Smooth interval\n\n\n      clearInterval(intervalRef.current);\n      intervalRef.current = setInterval(function () {\n        offsetY *= SMOOTH_PTG;\n\n        if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {\n          clearInterval(intervalRef.current);\n        }\n      }, 16);\n    }\n  };\n\n  var onTouchEnd = function onTouchEnd() {\n    touchedRef.current = false;\n    cleanUpEvents();\n  };\n\n  var onTouchStart = function onTouchStart(e) {\n    cleanUpEvents();\n\n    if (e.touches.length === 1 && !touchedRef.current) {\n      touchedRef.current = true;\n      touchYRef.current = Math.ceil(e.touches[0].pageY);\n      elementRef.current = e.target;\n      elementRef.current.addEventListener(\'touchmove\', onTouchMove);\n      elementRef.current.addEventListener(\'touchend\', onTouchEnd);\n    }\n  };\n\n  cleanUpEvents = function cleanUpEvents() {\n    if (elementRef.current) {\n      elementRef.current.removeEventListener(\'touchmove\', onTouchMove);\n      elementRef.current.removeEventListener(\'touchend\', onTouchEnd);\n    }\n  };\n\n  Object(useLayoutEffect["a" /* default */])(function () {\n    if (inVirtual) {\n      listRef.current.addEventListener(\'touchstart\', onTouchStart);\n    }\n\n    return function () {\n      var _listRef$current;\n\n      (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.removeEventListener(\'touchstart\', onTouchStart);\n      cleanUpEvents();\n      clearInterval(intervalRef.current);\n    };\n  }, [inVirtual]);\n}\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/List.js\nvar _excluded = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "component", "onScroll", "onVisibleChange"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction List_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction List_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? List_ownKeys(Object(source), !0).forEach(function (key) {\n      List_defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : List_ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction List_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction List_slicedToArray(arr, i) {\n  return List_arrayWithHoles(arr) || List_iterableToArrayLimit(arr, i) || List_unsupportedIterableToArray(arr, i) || List_nonIterableRest();\n}\n\nfunction List_nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nfunction List_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return List_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return List_arrayLikeToArray(o, minLen);\n}\n\nfunction List_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction List_iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction List_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar EMPTY_DATA = [];\nvar ScrollStyle = {\n  overflowY: \'auto\',\n  overflowAnchor: \'none\'\n};\nfunction RawList(props, ref) {\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-virtual-list\' : _props$prefixCls,\n      className = props.className,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      _props$fullHeight = props.fullHeight,\n      fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight,\n      style = props.style,\n      data = props.data,\n      children = props.children,\n      itemKey = props.itemKey,\n      virtual = props.virtual,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? \'div\' : _props$component,\n      onScroll = props.onScroll,\n      onVisibleChange = props.onVisibleChange,\n      restProps = _objectWithoutProperties(props, _excluded); // ================================= MISC =================================\n\n\n  var useVirtual = !!(virtual !== false && height && itemHeight);\n  var inVirtual = useVirtual && data && itemHeight * data.length > height;\n\n  var _useState = Object(react["useState"])(0),\n      _useState2 = List_slicedToArray(_useState, 2),\n      scrollTop = _useState2[0],\n      setScrollTop = _useState2[1];\n\n  var _useState3 = Object(react["useState"])(false),\n      _useState4 = List_slicedToArray(_useState3, 2),\n      scrollMoving = _useState4[0],\n      setScrollMoving = _useState4[1];\n\n  var mergedClassName = classnames_default()(prefixCls, className);\n  var mergedData = data || EMPTY_DATA;\n  var componentRef = Object(react["useRef"])();\n  var fillerInnerRef = Object(react["useRef"])();\n  var scrollBarRef = Object(react["useRef"])(); // Hack on scrollbar to enable flash call\n  // =============================== Item Key ===============================\n\n  var getKey = react["useCallback"](function (item) {\n    if (typeof itemKey === \'function\') {\n      return itemKey(item);\n    }\n\n    return item === null || item === void 0 ? void 0 : item[itemKey];\n  }, [itemKey]);\n  var sharedConfig = {\n    getKey: getKey\n  }; // ================================ Scroll ================================\n\n  function syncScrollTop(newTop) {\n    setScrollTop(function (origin) {\n      var value;\n\n      if (typeof newTop === \'function\') {\n        value = newTop(origin);\n      } else {\n        value = newTop;\n      }\n\n      var alignedTop = keepInRange(value);\n      componentRef.current.scrollTop = alignedTop;\n      return alignedTop;\n    });\n  } // ================================ Legacy ================================\n  // Put ref here since the range is generate by follow\n\n\n  var rangeRef = Object(react["useRef"])({\n    start: 0,\n    end: mergedData.length\n  });\n  var diffItemRef = Object(react["useRef"])();\n\n  var _useDiffItem = useDiffItem(mergedData, getKey),\n      _useDiffItem2 = List_slicedToArray(_useDiffItem, 1),\n      diffItem = _useDiffItem2[0];\n\n  diffItemRef.current = diffItem; // ================================ Height ================================\n\n  var _useHeights = useHeights(getKey, null, null),\n      _useHeights2 = List_slicedToArray(_useHeights, 4),\n      setInstanceRef = _useHeights2[0],\n      collectHeight = _useHeights2[1],\n      heights = _useHeights2[2],\n      heightUpdatedMark = _useHeights2[3]; // ========================== Visible Calculation =========================\n\n\n  var _React$useMemo = react["useMemo"](function () {\n    if (!useVirtual) {\n      return {\n        scrollHeight: undefined,\n        start: 0,\n        end: mergedData.length - 1,\n        offset: undefined\n      };\n    } // Always use virtual scroll bar in avoid shaking\n    // Always use virtual scroll bar in avoid shaking\n\n\n    if (!inVirtual) {\n      var _fillerInnerRef$curre;\n\n      return {\n        scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,\n        start: 0,\n        end: mergedData.length - 1,\n        offset: undefined\n      };\n    }\n\n    var itemTop = 0;\n    var startIndex;\n    var startOffset;\n    var endIndex;\n    var dataLen = mergedData.length;\n\n    for (var i = 0; i < dataLen; i += 1) {\n      var item = mergedData[i];\n      var key = getKey(item);\n      var cacheHeight = heights.get(key);\n      var currentItemBottom = itemTop + (cacheHeight === undefined ? itemHeight : cacheHeight); // Check item top in the range\n      // Check item top in the range\n\n      if (currentItemBottom >= scrollTop && startIndex === undefined) {\n        startIndex = i;\n        startOffset = itemTop;\n      } // Check item bottom in the range. We will render additional one item for motion usage\n      // Check item bottom in the range. We will render additional one item for motion usage\n\n\n      if (currentItemBottom > scrollTop + height && endIndex === undefined) {\n        endIndex = i;\n      }\n\n      itemTop = currentItemBottom;\n    } // Fallback to normal if not match. This code should never reach\n\n    /* istanbul ignore next */\n    // Fallback to normal if not match. This code should never reach\n\n    /* istanbul ignore next */\n\n\n    if (startIndex === undefined) {\n      startIndex = 0;\n      startOffset = 0;\n    }\n\n    if (endIndex === undefined) {\n      endIndex = mergedData.length - 1;\n    } // Give cache to improve scroll experience\n    // Give cache to improve scroll experience\n\n\n    endIndex = Math.min(endIndex + 1, mergedData.length);\n    return {\n      scrollHeight: itemTop,\n      start: startIndex,\n      end: endIndex,\n      offset: startOffset\n    };\n  }, [inVirtual, useVirtual, scrollTop, mergedData, heightUpdatedMark, height]),\n      scrollHeight = _React$useMemo.scrollHeight,\n      start = _React$useMemo.start,\n      end = _React$useMemo.end,\n      offset = _React$useMemo.offset;\n\n  rangeRef.current.start = start;\n  rangeRef.current.end = end; // =============================== In Range ===============================\n\n  var maxScrollHeight = scrollHeight - height;\n  var maxScrollHeightRef = Object(react["useRef"])(maxScrollHeight);\n  maxScrollHeightRef.current = maxScrollHeight;\n\n  function keepInRange(newScrollTop) {\n    var newTop = newScrollTop;\n\n    if (!Number.isNaN(maxScrollHeightRef.current)) {\n      newTop = Math.min(newTop, maxScrollHeightRef.current);\n    }\n\n    newTop = Math.max(newTop, 0);\n    return newTop;\n  }\n\n  var isScrollAtTop = scrollTop <= 0;\n  var isScrollAtBottom = scrollTop >= maxScrollHeight;\n  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom); // ================================ Scroll ================================\n\n  function onScrollBar(newScrollTop) {\n    var newTop = newScrollTop;\n    syncScrollTop(newTop);\n  } // When data size reduce. It may trigger native scroll event back to fit scroll position\n\n\n  function onFallbackScroll(e) {\n    var newScrollTop = e.currentTarget.scrollTop;\n\n    if (newScrollTop !== scrollTop) {\n      syncScrollTop(newScrollTop);\n    } // Trigger origin onScroll\n\n\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll(e);\n  } // Since this added in global,should use ref to keep update\n\n\n  var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function (offsetY) {\n    syncScrollTop(function (top) {\n      var newTop = top + offsetY;\n      return newTop;\n    });\n  }),\n      _useFrameWheel2 = List_slicedToArray(_useFrameWheel, 2),\n      onRawWheel = _useFrameWheel2[0],\n      onFireFoxScroll = _useFrameWheel2[1]; // Mobile touch move\n\n\n  useMobileTouchMove(useVirtual, componentRef, function (deltaY, smoothOffset) {\n    if (originScroll(deltaY, smoothOffset)) {\n      return false;\n    }\n\n    onRawWheel({\n      preventDefault: function preventDefault() {},\n      deltaY: deltaY\n    });\n    return true;\n  });\n  Object(useLayoutEffect["a" /* default */])(function () {\n    // Firefox only\n    function onMozMousePixelScroll(e) {\n      if (useVirtual) {\n        e.preventDefault();\n      }\n    }\n\n    componentRef.current.addEventListener(\'wheel\', onRawWheel);\n    componentRef.current.addEventListener(\'DOMMouseScroll\', onFireFoxScroll);\n    componentRef.current.addEventListener(\'MozMousePixelScroll\', onMozMousePixelScroll);\n    return function () {\n      if (componentRef.current) {\n        componentRef.current.removeEventListener(\'wheel\', onRawWheel);\n        componentRef.current.removeEventListener(\'DOMMouseScroll\', onFireFoxScroll);\n        componentRef.current.removeEventListener(\'MozMousePixelScroll\', onMozMousePixelScroll);\n      }\n    };\n  }, [useVirtual]); // ================================= Ref ==================================\n\n  var scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey, collectHeight, syncScrollTop, function () {\n    var _scrollBarRef$current;\n\n    (_scrollBarRef$current = scrollBarRef.current) === null || _scrollBarRef$current === void 0 ? void 0 : _scrollBarRef$current.delayHidden();\n  });\n  react["useImperativeHandle"](ref, function () {\n    return {\n      scrollTo: scrollTo\n    };\n  }); // ================================ Effect ================================\n\n  /** We need told outside that some list not rendered */\n\n  Object(useLayoutEffect["a" /* default */])(function () {\n    if (onVisibleChange) {\n      var renderList = mergedData.slice(start, end + 1);\n      onVisibleChange(renderList, mergedData);\n    }\n  }, [start, end, mergedData]); // ================================ Render ================================\n\n  var listChildren = useChildren(mergedData, start, end, setInstanceRef, children, sharedConfig);\n  var componentStyle = null;\n\n  if (height) {\n    componentStyle = List_objectSpread(List_defineProperty({}, fullHeight ? \'height\' : \'maxHeight\', height), ScrollStyle);\n\n    if (useVirtual) {\n      componentStyle.overflowY = \'hidden\';\n\n      if (scrollMoving) {\n        componentStyle.pointerEvents = \'none\';\n      }\n    }\n  }\n\n  return /*#__PURE__*/react["createElement"]("div", _extends({\n    style: List_objectSpread(List_objectSpread({}, style), {}, {\n      position: \'relative\'\n    }),\n    className: mergedClassName\n  }, restProps), /*#__PURE__*/react["createElement"](Component, {\n    className: "".concat(prefixCls, "-holder"),\n    style: componentStyle,\n    ref: componentRef,\n    onScroll: onFallbackScroll\n  }, /*#__PURE__*/react["createElement"](es_Filler, {\n    prefixCls: prefixCls,\n    height: scrollHeight,\n    offset: offset,\n    onInnerResize: collectHeight,\n    ref: fillerInnerRef\n  }, listChildren)), useVirtual && /*#__PURE__*/react["createElement"](ScrollBar_ScrollBar, {\n    ref: scrollBarRef,\n    prefixCls: prefixCls,\n    scrollTop: scrollTop,\n    height: height,\n    scrollHeight: scrollHeight,\n    count: mergedData.length,\n    onScroll: onScrollBar,\n    onStartMove: function onStartMove() {\n      setScrollMoving(true);\n    },\n    onStopMove: function onStopMove() {\n      setScrollMoving(false);\n    }\n  }));\n}\nvar List = /*#__PURE__*/react["forwardRef"](RawList);\nList.displayName = \'List\';\n/* harmony default export */ var es_List = (List);\n// CONCATENATED MODULE: ./node_modules/rc-virtual-list/es/index.js\n\n/* harmony default export */ var rc_virtual_list_es = __webpack_exports__["a"] = (es_List);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///+nKL\n')},"/FUP":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;\n\nvar _flattenNames = __webpack_require__("W3HW");\n\nvar _flattenNames2 = _interopRequireDefault(_flattenNames);\n\nvar _mergeClasses = __webpack_require__("lreK");\n\nvar _mergeClasses2 = _interopRequireDefault(_mergeClasses);\n\nvar _autoprefix = __webpack_require__("KfSR");\n\nvar _autoprefix2 = _interopRequireDefault(_autoprefix);\n\nvar _hover2 = __webpack_require__("VYtm");\n\nvar _hover3 = _interopRequireDefault(_hover2);\n\nvar _active = __webpack_require__("XQvf");\n\nvar _active2 = _interopRequireDefault(_active);\n\nvar _loop2 = __webpack_require__("B5Mt");\n\nvar _loop3 = _interopRequireDefault(_loop2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nexports.hover = _hover3["default"];\nexports.handleHover = _hover3["default"];\nexports.handleActive = _active2["default"];\nexports.loop = _loop3["default"];\n\nvar ReactCSS = exports.ReactCSS = function ReactCSS(classes) {\n  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    activations[_key - 1] = arguments[_key];\n  }\n\n  var activeNames = (0, _flattenNames2["default"])(activations);\n  var merged = (0, _mergeClasses2["default"])(classes, activeNames);\n  return (0, _autoprefix2["default"])(merged);\n};\n\nexports["default"] = ReactCSS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2luZGV4LmpzP2ZjNTUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFjdENTUyIsImxvb3AiLCJoYW5kbGVBY3RpdmUiLCJoYW5kbGVIb3ZlciIsImhvdmVyIiwidW5kZWZpbmVkIiwiX2ZsYXR0ZW5OYW1lcyIsInJlcXVpcmUiLCJfZmxhdHRlbk5hbWVzMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWVyZ2VDbGFzc2VzIiwiX21lcmdlQ2xhc3NlczIiLCJfYXV0b3ByZWZpeCIsIl9hdXRvcHJlZml4MiIsIl9ob3ZlcjIiLCJfaG92ZXIzIiwiX2FjdGl2ZSIsIl9hY3RpdmUyIiwiX2xvb3AyIiwiX2xvb3AzIiwib2JqIiwiX19lc01vZHVsZSIsImNsYXNzZXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYWN0aXZhdGlvbnMiLCJBcnJheSIsIl9rZXkiLCJhY3RpdmVOYW1lcyIsIm1lcmdlZCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFFBQVIsR0FBbUJGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFlBQVIsR0FBdUJKLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQkwsT0FBTyxDQUFDTSxLQUFSLEdBQWdCQyxTQUEvRjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUEzQjs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDSCxhQUFELENBQTNDOztBQUVBLElBQUlJLGFBQWEsR0FBR0gsbUJBQU8sQ0FBQyxNQUFELENBQTNCOztBQUVBLElBQUlJLGNBQWMsR0FBR0Ysc0JBQXNCLENBQUNDLGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUUsV0FBVyxHQUFHTCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSU0sWUFBWSxHQUFHSixzQkFBc0IsQ0FBQ0csV0FBRCxDQUF6Qzs7QUFFQSxJQUFJRSxPQUFPLEdBQUdQLG1CQUFPLENBQUMsTUFBRCxDQUFyQjs7QUFFQSxJQUFJUSxPQUFPLEdBQUdOLHNCQUFzQixDQUFDSyxPQUFELENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR1QsbUJBQU8sQ0FBQyxNQUFELENBQXJCOztBQUVBLElBQUlVLFFBQVEsR0FBR1Isc0JBQXNCLENBQUNPLE9BQUQsQ0FBckM7O0FBRUEsSUFBSUUsTUFBTSxHQUFHWCxtQkFBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsSUFBSVksTUFBTSxHQUFHVixzQkFBc0IsQ0FBQ1MsTUFBRCxDQUFuQzs7QUFFQSxTQUFTVCxzQkFBVCxDQUFnQ1csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRSxlQUFTQTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRnRCLE9BQU8sQ0FBQ00sS0FBUixHQUFnQlcsT0FBTyxXQUF2QjtBQUNBakIsT0FBTyxDQUFDSyxXQUFSLEdBQXNCWSxPQUFPLFdBQTdCO0FBQ0FqQixPQUFPLENBQUNJLFlBQVIsR0FBdUJlLFFBQVEsV0FBL0I7QUFDQW5CLE9BQU8sQ0FBQ0csSUFBUixHQUFla0IsTUFBTSxXQUFyQjs7QUFDQSxJQUFJbkIsUUFBUSxHQUFHRixPQUFPLENBQUNFLFFBQVIsR0FBbUIsU0FBU0EsUUFBVCxDQUFrQnNCLE9BQWxCLEVBQTJCO0FBQzNELE9BQUssSUFBSUMsSUFBSSxHQUFHQyxTQUFTLENBQUNDLE1BQXJCLEVBQTZCQyxXQUFXLEdBQUdDLEtBQUssQ0FBQ0osSUFBSSxHQUFHLENBQVAsR0FBV0EsSUFBSSxHQUFHLENBQWxCLEdBQXNCLENBQXZCLENBQWhELEVBQTJFSyxJQUFJLEdBQUcsQ0FBdkYsRUFBMEZBLElBQUksR0FBR0wsSUFBakcsRUFBdUdLLElBQUksRUFBM0csRUFBK0c7QUFDN0dGLGVBQVcsQ0FBQ0UsSUFBSSxHQUFHLENBQVIsQ0FBWCxHQUF3QkosU0FBUyxDQUFDSSxJQUFELENBQWpDO0FBQ0Q7O0FBRUQsTUFBSUMsV0FBVyxHQUFHLENBQUMsR0FBR3JCLGNBQWMsV0FBbEIsRUFBNEJrQixXQUE1QixDQUFsQjtBQUNBLE1BQUlJLE1BQU0sR0FBRyxDQUFDLEdBQUduQixjQUFjLFdBQWxCLEVBQTRCVyxPQUE1QixFQUFxQ08sV0FBckMsQ0FBYjtBQUNBLFNBQU8sQ0FBQyxHQUFHaEIsWUFBWSxXQUFoQixFQUEwQmlCLE1BQTFCLENBQVA7QUFDRCxDQVJEOztBQVVBaEMsT0FBTyxXQUFQLEdBQWtCRSxRQUFsQiIsImZpbGUiOiIvRlVQLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SZWFjdENTUyA9IGV4cG9ydHMubG9vcCA9IGV4cG9ydHMuaGFuZGxlQWN0aXZlID0gZXhwb3J0cy5oYW5kbGVIb3ZlciA9IGV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZmxhdHRlbk5hbWVzID0gcmVxdWlyZSgnLi9mbGF0dGVuTmFtZXMnKTtcblxudmFyIF9mbGF0dGVuTmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxhdHRlbk5hbWVzKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSByZXF1aXJlKCcuL21lcmdlQ2xhc3NlcycpO1xuXG52YXIgX21lcmdlQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZUNsYXNzZXMpO1xuXG52YXIgX2F1dG9wcmVmaXggPSByZXF1aXJlKCcuL2F1dG9wcmVmaXgnKTtcblxudmFyIF9hdXRvcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9wcmVmaXgpO1xuXG52YXIgX2hvdmVyMiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9ob3ZlcicpO1xuXG52YXIgX2hvdmVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvdmVyMik7XG5cbnZhciBfYWN0aXZlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FjdGl2ZScpO1xuXG52YXIgX2FjdGl2ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmUpO1xuXG52YXIgX2xvb3AyID0gcmVxdWlyZSgnLi9sb29wJyk7XG5cbnZhciBfbG9vcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb29wMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuaG92ZXIgPSBfaG92ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmhhbmRsZUhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVBY3RpdmUgPSBfYWN0aXZlMi5kZWZhdWx0O1xuZXhwb3J0cy5sb29wID0gX2xvb3AzLmRlZmF1bHQ7XG52YXIgUmVhY3RDU1MgPSBleHBvcnRzLlJlYWN0Q1NTID0gZnVuY3Rpb24gUmVhY3RDU1MoY2xhc3Nlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWN0aXZhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYWN0aXZhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGl2ZU5hbWVzID0gKDAsIF9mbGF0dGVuTmFtZXMyLmRlZmF1bHQpKGFjdGl2YXRpb25zKTtcbiAgdmFyIG1lcmdlZCA9ICgwLCBfbWVyZ2VDbGFzc2VzMi5kZWZhdWx0KShjbGFzc2VzLCBhY3RpdmVOYW1lcyk7XG4gIHJldHVybiAoMCwgX2F1dG9wcmVmaXgyLmRlZmF1bHQpKG1lcmdlZCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdENTUzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:////FUP\n')},"15kH":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* reexport */ sketch_Sketch; });\n\n// UNUSED EXPORTS: AlphaPicker, BlockPicker, CirclePicker, default, ChromePicker, CompactPicker, GithubPicker, HuePicker, MaterialPicker, PhotoshopPicker, SliderPicker, SwatchesPicker, TwitterPicker, GooglePicker, CustomPicker\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__(\"kM82\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/reactcss/lib/index.js\nvar lib = __webpack_require__(\"/FUP\");\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/alpha.js\nvar calculateChange = function calculateChange(e, hsl, direction, initialA, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var a = void 0;\n\n    if (top < 0) {\n      a = 0;\n    } else if (top > containerHeight) {\n      a = 1;\n    } else {\n      a = Math.round(top * 100 / containerHeight) / 100;\n    }\n\n    if (hsl.a !== a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: a,\n        source: 'rgb'\n      };\n    }\n  } else {\n    var _a = void 0;\n\n    if (left < 0) {\n      _a = 0;\n    } else if (left > containerWidth) {\n      _a = 1;\n    } else {\n      _a = Math.round(left * 100 / containerWidth) / 100;\n    }\n\n    if (initialA !== _a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: _a,\n        source: 'rgb'\n      };\n    }\n  }\n\n  return null;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/checkboard.js\nvar checkboardCache = {};\nvar checkboard_render = function render(c1, c2, size, serverCanvas) {\n  if (typeof document === 'undefined' && !serverCanvas) {\n    return null;\n  }\n\n  var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');\n  canvas.width = size * 2;\n  canvas.height = size * 2;\n  var ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return null;\n  } // If no context can be found, return early.\n\n\n  ctx.fillStyle = c1;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = c2;\n  ctx.fillRect(0, 0, size, size);\n  ctx.translate(size, size);\n  ctx.fillRect(0, 0, size, size);\n  return canvas.toDataURL();\n};\nvar get = function get(c1, c2, size, serverCanvas) {\n  var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');\n\n  if (checkboardCache[key]) {\n    return checkboardCache[key];\n  }\n\n  var checkboard = checkboard_render(c1, c2, size, serverCanvas);\n  checkboardCache[key] = checkboard;\n  return checkboard;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Checkboard.js\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\nvar Checkboard_Checkboard = function Checkboard(_ref) {\n  var white = _ref.white,\n      grey = _ref.grey,\n      size = _ref.size,\n      renderers = _ref.renderers,\n      borderRadius = _ref.borderRadius,\n      boxShadow = _ref.boxShadow,\n      children = _ref.children;\n  var styles = lib_default()({\n    'default': {\n      grid: {\n        borderRadius: borderRadius,\n        boxShadow: boxShadow,\n        absolute: '0px 0px 0px 0px',\n        background: 'url(' + get(white, grey, size, renderers.canvas) + ') center left'\n      }\n    }\n  });\n  return Object(react[\"isValidElement\"])(children) ? react_default.a.cloneElement(children, _extends({}, children.props, {\n    style: _extends({}, children.props.style, styles.grid)\n  })) : react_default.a.createElement('div', {\n    style: styles.grid\n  });\n};\nCheckboard_Checkboard.defaultProps = {\n  size: 8,\n  white: 'transparent',\n  grey: 'rgba(0,0,0,.08)',\n  renderers: {}\n};\n/* harmony default export */ var common_Checkboard = (Checkboard_Checkboard);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Alpha.js\nvar Alpha_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\nvar Alpha_Alpha = function (_ref) {\n  _inherits(Alpha, _ref);\n\n  function Alpha() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Alpha);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleChange);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Alpha, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var rgb = this.props.rgb;\n      var styles = lib_default()({\n        'default': {\n          alpha: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          checkboard: {\n            absolute: '0px 0px 0px 0px',\n            overflow: 'hidden',\n            borderRadius: this.props.radius\n          },\n          gradient: {\n            absolute: '0px 0px 0px 0px',\n            background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          container: {\n            position: 'relative',\n            height: '100%',\n            margin: '0 3px'\n          },\n          pointer: {\n            position: 'absolute',\n            left: rgb.a * 100 + '%'\n          },\n          slider: {\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            marginTop: '1px',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          gradient: {\n            background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'\n          },\n          pointer: {\n            left: 0,\n            top: rgb.a * 100 + '%'\n          }\n        },\n        'overwrite': Alpha_extends({}, this.props.style)\n      }, {\n        vertical: this.props.direction === 'vertical',\n        overwrite: true\n      });\n      return react_default.a.createElement('div', {\n        style: styles.alpha\n      }, react_default.a.createElement('div', {\n        style: styles.checkboard\n      }, react_default.a.createElement(common_Checkboard, {\n        renderers: this.props.renderers\n      })), react_default.a.createElement('div', {\n        style: styles.gradient\n      }), react_default.a.createElement('div', {\n        style: styles.container,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.slider\n      }))));\n    }\n  }]);\n\n  return Alpha;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Alpha = (Alpha_Alpha);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/EditableInput.js\nvar EditableInput_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction EditableInput_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction EditableInput_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction EditableInput_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\nvar DEFAULT_ARROW_OFFSET = 1;\nvar UP_KEY_CODE = 38;\nvar DOWN_KEY_CODE = 40;\nvar VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];\n\nvar isValidKeyCode = function isValidKeyCode(keyCode) {\n  return VALID_KEY_CODES.indexOf(keyCode) > -1;\n};\n\nvar getNumberValue = function getNumberValue(value) {\n  return Number(String(value).replace(/%/g, ''));\n};\n\nvar idCounter = 1;\nvar EditableInput_EditableInput = function (_ref) {\n  EditableInput_inherits(EditableInput, _ref);\n\n  function EditableInput(props) {\n    EditableInput_classCallCheck(this, EditableInput);\n\n    var _this = EditableInput_possibleConstructorReturn(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));\n\n    _this.handleBlur = function () {\n      if (_this.state.blurValue) {\n        _this.setState({\n          value: _this.state.blurValue,\n          blurValue: null\n        });\n      }\n    };\n\n    _this.handleChange = function (e) {\n      _this.setUpdatedValue(e.target.value, e);\n    };\n\n    _this.handleKeyDown = function (e) {\n      // In case `e.target.value` is a percentage remove the `%` character\n      // and update accordingly with a percentage\n      // https://github.com/casesandberg/react-color/issues/383\n      var value = getNumberValue(e.target.value);\n\n      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {\n        var offset = _this.getArrowOffset();\n\n        var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;\n\n        _this.setUpdatedValue(updatedValue, e);\n      }\n    };\n\n    _this.handleDrag = function (e) {\n      if (_this.props.dragLabel) {\n        var newValue = Math.round(_this.props.value + e.movementX);\n\n        if (newValue >= 0 && newValue <= _this.props.dragMax) {\n          _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);\n        }\n      }\n    };\n\n    _this.handleMouseDown = function (e) {\n      if (_this.props.dragLabel) {\n        e.preventDefault();\n\n        _this.handleDrag(e);\n\n        window.addEventListener('mousemove', _this.handleDrag);\n        window.addEventListener('mouseup', _this.handleMouseUp);\n      }\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleDrag);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.state = {\n      value: String(props.value).toUpperCase(),\n      blurValue: String(props.value).toUpperCase()\n    };\n    _this.inputId = 'rc-editable-input-' + idCounter++;\n    return _this;\n  }\n\n  EditableInput_createClass(EditableInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {\n        if (this.input === document.activeElement) {\n          this.setState({\n            blurValue: String(this.props.value).toUpperCase()\n          });\n        } else {\n          this.setState({\n            value: String(this.props.value).toUpperCase(),\n            blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()\n          });\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getValueObjectWithLabel',\n    value: function getValueObjectWithLabel(value) {\n      return _defineProperty({}, this.props.label, value);\n    }\n  }, {\n    key: 'getArrowOffset',\n    value: function getArrowOffset() {\n      return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;\n    }\n  }, {\n    key: 'setUpdatedValue',\n    value: function setUpdatedValue(value, e) {\n      var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;\n      this.props.onChange && this.props.onChange(onChangeValue, e);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = lib_default()({\n        'default': {\n          wrap: {\n            position: 'relative'\n          }\n        },\n        'user-override': {\n          wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},\n          input: this.props.style && this.props.style.input ? this.props.style.input : {},\n          label: this.props.style && this.props.style.label ? this.props.style.label : {}\n        },\n        'dragLabel-true': {\n          label: {\n            cursor: 'ew-resize'\n          }\n        }\n      }, {\n        'user-override': true\n      }, this.props);\n      return react_default.a.createElement('div', {\n        style: styles.wrap\n      }, react_default.a.createElement('input', {\n        id: this.inputId,\n        style: styles.input,\n        ref: function ref(input) {\n          return _this2.input = input;\n        },\n        value: this.state.value,\n        onKeyDown: this.handleKeyDown,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur,\n        placeholder: this.props.placeholder,\n        spellCheck: 'false'\n      }), this.props.label && !this.props.hideLabel ? react_default.a.createElement('label', {\n        htmlFor: this.inputId,\n        style: styles.label,\n        onMouseDown: this.handleMouseDown\n      }, this.props.label) : null);\n    }\n  }]);\n\n  return EditableInput;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_EditableInput = (EditableInput_EditableInput);\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/hue.js\nvar hue_calculateChange = function calculateChange(e, direction, hsl, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var h = void 0;\n\n    if (top < 0) {\n      h = 359;\n    } else if (top > containerHeight) {\n      h = 0;\n    } else {\n      var percent = -(top * 100 / containerHeight) + 100;\n      h = 360 * percent / 100;\n    }\n\n    if (hsl.h !== h) {\n      return {\n        h: h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  } else {\n    var _h = void 0;\n\n    if (left < 0) {\n      _h = 0;\n    } else if (left > containerWidth) {\n      _h = 359;\n    } else {\n      var _percent = left * 100 / containerWidth;\n\n      _h = 360 * _percent / 100;\n    }\n\n    if (hsl.h !== _h) {\n      return {\n        h: _h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  }\n\n  return null;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Hue.js\nvar Hue_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Hue_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Hue_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Hue_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\nvar Hue_Hue = function (_ref) {\n  Hue_inherits(Hue, _ref);\n\n  function Hue() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    Hue_classCallCheck(this, Hue);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = Hue_possibleConstructorReturn(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = hue_calculateChange(e, _this.props.direction, _this.props.hsl, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _temp), Hue_possibleConstructorReturn(_this, _ret);\n  }\n\n  Hue_createClass(Hue, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      window.removeEventListener('mousemove', this.handleChange);\n      window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props$direction = this.props.direction,\n          direction = _props$direction === undefined ? 'horizontal' : _props$direction;\n      var styles = lib_default()({\n        'default': {\n          hue: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius,\n            boxShadow: this.props.shadow\n          },\n          container: {\n            padding: '0 2px',\n            position: 'relative',\n            height: '100%',\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            left: this.props.hsl.h * 100 / 360 + '%'\n          },\n          slider: {\n            marginTop: '1px',\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          pointer: {\n            left: '0px',\n            top: -(this.props.hsl.h * 100 / 360) + 100 + '%'\n          }\n        }\n      }, {\n        vertical: direction === 'vertical'\n      });\n      return react_default.a.createElement('div', {\n        style: styles.hue\n      }, react_default.a.createElement('div', {\n        className: 'hue-' + direction,\n        style: styles.container,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('style', null, '\\n            .hue-horizontal {\\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n\\n            .hue-vertical {\\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n          '), react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.slider\n      }))));\n    }\n  }]);\n\n  return Hue;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Hue = (Hue_Hue);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(\"17x9\");\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/lodash-es/merge.js + 29 modules\nvar merge = __webpack_require__(\"oaNE\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Raised.js\n\n\n\n\nvar Raised_Raised = function Raised(_ref) {\n  var zDepth = _ref.zDepth,\n      radius = _ref.radius,\n      background = _ref.background,\n      children = _ref.children,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      wrap: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      content: {\n        position: 'relative'\n      },\n      bg: {\n        absolute: '0px 0px 0px 0px',\n        boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',\n        borderRadius: radius,\n        background: background\n      }\n    },\n    'zDepth-0': {\n      bg: {\n        boxShadow: 'none'\n      }\n    },\n    'zDepth-1': {\n      bg: {\n        boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'\n      }\n    },\n    'zDepth-2': {\n      bg: {\n        boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'\n      }\n    },\n    'zDepth-3': {\n      bg: {\n        boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'\n      }\n    },\n    'zDepth-4': {\n      bg: {\n        boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'\n      }\n    },\n    'zDepth-5': {\n      bg: {\n        boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'\n      }\n    },\n    'square': {\n      bg: {\n        borderRadius: '0'\n      }\n    },\n    'circle': {\n      bg: {\n        borderRadius: '50%'\n      }\n    }\n  }, passedStyles), {\n    'zDepth-1': zDepth === 1\n  });\n  return react_default.a.createElement('div', {\n    style: styles.wrap\n  }, react_default.a.createElement('div', {\n    style: styles.bg\n  }), react_default.a.createElement('div', {\n    style: styles.content\n  }, children));\n};\nRaised_Raised.propTypes = {\n  background: prop_types_default.a.string,\n  zDepth: prop_types_default.a.oneOf([0, 1, 2, 3, 4, 5]),\n  radius: prop_types_default.a.number,\n  styles: prop_types_default.a.object\n};\nRaised_Raised.defaultProps = {\n  background: '#fff',\n  zDepth: 1,\n  radius: 2,\n  styles: {}\n};\n/* harmony default export */ var common_Raised = (Raised_Raised);\n// EXTERNAL MODULE: ./node_modules/lodash-es/throttle.js\nvar throttle = __webpack_require__(\"UXvI\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/saturation.js\nvar saturation_calculateChange = function calculateChange(e, hsl, container) {\n  var _container$getBoundin = container.getBoundingClientRect(),\n      containerWidth = _container$getBoundin.width,\n      containerHeight = _container$getBoundin.height;\n\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (left < 0) {\n    left = 0;\n  } else if (left > containerWidth) {\n    left = containerWidth;\n  }\n\n  if (top < 0) {\n    top = 0;\n  } else if (top > containerHeight) {\n    top = containerHeight;\n  }\n\n  var saturation = left / containerWidth;\n  var bright = 1 - top / containerHeight;\n  return {\n    h: hsl.h,\n    s: saturation,\n    v: bright,\n    a: hsl.a,\n    source: 'hsv'\n  };\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Saturation.js\nvar Saturation_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Saturation_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Saturation_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Saturation_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\nvar Saturation_Saturation = function (_ref) {\n  Saturation_inherits(Saturation, _ref);\n\n  function Saturation(props) {\n    Saturation_classCallCheck(this, Saturation);\n\n    var _this = Saturation_possibleConstructorReturn(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));\n\n    _this.handleChange = function (e) {\n      typeof _this.props.onChange === 'function' && _this.throttle(_this.props.onChange, saturation_calculateChange(e, _this.props.hsl, _this.container), e);\n    };\n\n    _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n\n      var renderWindow = _this.getContainerRenderWindow();\n\n      renderWindow.addEventListener('mousemove', _this.handleChange);\n      renderWindow.addEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.throttle = Object(throttle[\"a\" /* default */])(function (fn, data, e) {\n      fn(data, e);\n    }, 50);\n    return _this;\n  }\n\n  Saturation_createClass(Saturation, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.throttle.cancel();\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getContainerRenderWindow',\n    value: function getContainerRenderWindow() {\n      var container = this.container;\n      var renderWindow = window;\n\n      while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {\n        renderWindow = renderWindow.parent;\n      }\n\n      return renderWindow;\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      var renderWindow = this.getContainerRenderWindow();\n      renderWindow.removeEventListener('mousemove', this.handleChange);\n      renderWindow.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _ref2 = this.props.style || {},\n          color = _ref2.color,\n          white = _ref2.white,\n          black = _ref2.black,\n          pointer = _ref2.pointer,\n          circle = _ref2.circle;\n\n      var styles = lib_default()({\n        'default': {\n          color: {\n            absolute: '0px 0px 0px 0px',\n            background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',\n            borderRadius: this.props.radius\n          },\n          white: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          black: {\n            absolute: '0px 0px 0px 0px',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            top: -(this.props.hsv.v * 100) + 100 + '%',\n            left: this.props.hsv.s * 100 + '%',\n            cursor: 'default'\n          },\n          circle: {\n            width: '4px',\n            height: '4px',\n            boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\\n            0 0 1px 2px rgba(0,0,0,.4)',\n            borderRadius: '50%',\n            cursor: 'hand',\n            transform: 'translate(-2px, -2px)'\n          }\n        },\n        'custom': {\n          color: color,\n          white: white,\n          black: black,\n          pointer: pointer,\n          circle: circle\n        }\n      }, {\n        'custom': !!this.props.style\n      });\n      return react_default.a.createElement('div', {\n        style: styles.color,\n        ref: function ref(container) {\n          return _this2.container = container;\n        },\n        onMouseDown: this.handleMouseDown,\n        onTouchMove: this.handleChange,\n        onTouchStart: this.handleChange\n      }, react_default.a.createElement('style', null, '\\n          .saturation-white {\\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\\n          }\\n          .saturation-black {\\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\\n          }\\n        '), react_default.a.createElement('div', {\n        style: styles.white,\n        className: 'saturation-white'\n      }, react_default.a.createElement('div', {\n        style: styles.black,\n        className: 'saturation-black'\n      }), react_default.a.createElement('div', {\n        style: styles.pointer\n      }, this.props.pointer ? react_default.a.createElement(this.props.pointer, this.props) : react_default.a.createElement('div', {\n        style: styles.circle\n      }))));\n    }\n  }]);\n\n  return Saturation;\n}(react[\"PureComponent\"] || react[\"Component\"]);\n/* harmony default export */ var common_Saturation = (Saturation_Saturation);\n// EXTERNAL MODULE: ./node_modules/lodash-es/debounce.js + 4 modules\nvar debounce = __webpack_require__(\"hbEN\");\n\n// EXTERNAL MODULE: ./node_modules/lodash-es/forEach.js + 2 modules\nvar forEach = __webpack_require__(\"OZf9\");\n\n// EXTERNAL MODULE: ./node_modules/tinycolor2/tinycolor.js\nvar tinycolor = __webpack_require__(\"Zss7\");\nvar tinycolor_default = /*#__PURE__*/__webpack_require__.n(tinycolor);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/color.js\n\n\nvar color_simpleCheckForValidColor = function simpleCheckForValidColor(data) {\n  var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];\n  var checked = 0;\n  var passed = 0;\n  Object(forEach[\"a\" /* default */])(keysToCheck, function (letter) {\n    if (data[letter]) {\n      checked += 1;\n\n      if (!isNaN(data[letter])) {\n        passed += 1;\n      }\n\n      if (letter === 's' || letter === 'l') {\n        var percentPatt = /^\\d+%$/;\n\n        if (percentPatt.test(data[letter])) {\n          passed += 1;\n        }\n      }\n    }\n  });\n  return checked === passed ? data : false;\n};\nvar color_toState = function toState(data, oldHue) {\n  var color = data.hex ? tinycolor_default()(data.hex) : tinycolor_default()(data);\n  var hsl = color.toHsl();\n  var hsv = color.toHsv();\n  var rgb = color.toRgb();\n  var hex = color.toHex();\n\n  if (hsl.s === 0) {\n    hsl.h = oldHue || 0;\n    hsv.h = oldHue || 0;\n  }\n\n  var transparent = hex === '000000' && rgb.a === 0;\n  return {\n    hsl: hsl,\n    hex: transparent ? 'transparent' : '#' + hex,\n    rgb: rgb,\n    hsv: hsv,\n    oldHue: data.h || oldHue || hsl.h,\n    source: data.source\n  };\n};\nvar color_isValidHex = function isValidHex(hex) {\n  if (hex === 'transparent') {\n    return true;\n  } // disable hex4 and hex8\n\n\n  var lh = String(hex).charAt(0) === '#' ? 1 : 0;\n  return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor_default()(hex).isValid();\n};\nvar getContrastingColor = function getContrastingColor(data) {\n  if (!data) {\n    return '#fff';\n  }\n\n  var col = color_toState(data);\n\n  if (col.hex === 'transparent') {\n    return 'rgba(0,0,0,0.4)';\n  }\n\n  var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;\n  return yiq >= 128 ? '#000' : '#fff';\n};\nvar red = {\n  hsl: {\n    a: 1,\n    h: 0,\n    l: 0.5,\n    s: 1\n  },\n  hex: '#ff0000',\n  rgb: {\n    r: 255,\n    g: 0,\n    b: 0,\n    a: 1\n  },\n  hsv: {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  }\n};\nvar color_isvalidColorString = function isvalidColorString(string, type) {\n  var stringWithoutDegree = string.replace('\xb0', '');\n  return tinycolor_default()(type + ' (' + stringWithoutDegree + ')')._ok;\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/ColorWrap.js\nvar ColorWrap_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar ColorWrap_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction ColorWrap_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction ColorWrap_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction ColorWrap_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\nvar ColorWrap_ColorWrap = function ColorWrap(Picker) {\n  var ColorPicker = function (_ref) {\n    ColorWrap_inherits(ColorPicker, _ref);\n\n    function ColorPicker(props) {\n      ColorWrap_classCallCheck(this, ColorPicker);\n\n      var _this = ColorWrap_possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));\n\n      _this.handleChange = function (data, event) {\n        var isValidColor = color_simpleCheckForValidColor(data);\n\n        if (isValidColor) {\n          var colors = color_toState(data, data.h || _this.state.oldHue);\n\n          _this.setState(colors);\n\n          _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);\n          _this.props.onChange && _this.props.onChange(colors, event);\n        }\n      };\n\n      _this.handleSwatchHover = function (data, event) {\n        var isValidColor = color_simpleCheckForValidColor(data);\n\n        if (isValidColor) {\n          var colors = color_toState(data, data.h || _this.state.oldHue);\n          _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);\n        }\n      };\n\n      _this.state = ColorWrap_extends({}, color_toState(props.color, 0));\n      _this.debounce = Object(debounce[\"a\" /* default */])(function (fn, data, event) {\n        fn(data, event);\n      }, 100);\n      return _this;\n    }\n\n    ColorWrap_createClass(ColorPicker, [{\n      key: 'render',\n      value: function render() {\n        var optionalEvents = {};\n\n        if (this.props.onSwatchHover) {\n          optionalEvents.onSwatchHover = this.handleSwatchHover;\n        }\n\n        return react_default.a.createElement(Picker, ColorWrap_extends({}, this.props, this.state, {\n          onChange: this.handleChange\n        }, optionalEvents));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, state) {\n        return ColorWrap_extends({}, color_toState(nextProps.color, state.oldHue));\n      }\n    }]);\n\n    return ColorPicker;\n  }(react[\"PureComponent\"] || react[\"Component\"]);\n\n  ColorPicker.propTypes = ColorWrap_extends({}, Picker.propTypes);\n  ColorPicker.defaultProps = ColorWrap_extends({}, Picker.defaultProps, {\n    color: {\n      h: 250,\n      s: 0.50,\n      l: 0.20,\n      a: 1\n    }\n  });\n  return ColorPicker;\n};\n/* harmony default export */ var common_ColorWrap = (ColorWrap_ColorWrap);\n// CONCATENATED MODULE: ./node_modules/react-color/es/helpers/interaction.js\nvar interaction_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar interaction_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction interaction_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction interaction_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction interaction_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-invalid-this */\n\n\n\nvar interaction_handleFocus = function handleFocus(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';\n  return function (_React$Component) {\n    interaction_inherits(Focus, _React$Component);\n\n    function Focus() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      interaction_classCallCheck(this, Focus);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = interaction_possibleConstructorReturn(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        focus: false\n      }, _this.handleFocus = function () {\n        return _this.setState({\n          focus: true\n        });\n      }, _this.handleBlur = function () {\n        return _this.setState({\n          focus: false\n        });\n      }, _temp), interaction_possibleConstructorReturn(_this, _ret);\n    }\n\n    interaction_createClass(Focus, [{\n      key: 'render',\n      value: function render() {\n        return react_default.a.createElement(Span, {\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur\n        }, react_default.a.createElement(Component, interaction_extends({}, this.props, this.state)));\n      }\n    }]);\n\n    return Focus;\n  }(react_default.a.Component);\n};\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/Swatch.js\nvar Swatch_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar ENTER = 13;\nvar Swatch_Swatch = function Swatch(_ref) {\n  var color = _ref.color,\n      style = _ref.style,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onHover = _ref.onHover,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? color : _ref$title,\n      children = _ref.children,\n      focus = _ref.focus,\n      _ref$focusStyle = _ref.focusStyle,\n      focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;\n  var transparent = color === 'transparent';\n  var styles = lib_default()({\n    \"default\": {\n      swatch: Swatch_extends({\n        background: color,\n        height: '100%',\n        width: '100%',\n        cursor: 'pointer',\n        position: 'relative',\n        outline: 'none'\n      }, style, focus ? focusStyle : {})\n    }\n  });\n\n  var handleClick = function handleClick(e) {\n    return onClick(color, e);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    return e.keyCode === ENTER && onClick(color, e);\n  };\n\n  var handleHover = function handleHover(e) {\n    return onHover(color, e);\n  };\n\n  var optionalEvents = {};\n\n  if (onHover) {\n    optionalEvents.onMouseOver = handleHover;\n  }\n\n  return react_default.a.createElement('div', Swatch_extends({\n    style: styles.swatch,\n    onClick: handleClick,\n    title: title,\n    tabIndex: 0,\n    onKeyDown: handleKeyDown\n  }, optionalEvents), children, transparent && react_default.a.createElement(common_Checkboard, {\n    borderRadius: styles.swatch.borderRadius,\n    boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'\n  }));\n};\n/* harmony default export */ var common_Swatch = (interaction_handleFocus(Swatch_Swatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/common/index.js\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/alpha/AlphaPointer.js\n\n\nvar AlphaPointer_AlphaPointer = function AlphaPointer(_ref) {\n  var direction = _ref.direction;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, {\n    vertical: direction === 'vertical'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var alpha_AlphaPointer = (AlphaPointer_AlphaPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/alpha/Alpha.js\nvar alpha_Alpha_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar Alpha_AlphaPicker = function AlphaPicker(_ref) {\n  var rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      direction = _ref.direction,\n      style = _ref.style,\n      renderers = _ref.renderers,\n      pointer = _ref.pointer,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      alpha: {\n        radius: '2px',\n        style: style\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'alpha-picker ' + className\n  }, react_default.a.createElement(common_Alpha, alpha_Alpha_extends({}, styles.alpha, {\n    rgb: rgb,\n    hsl: hsl,\n    pointer: pointer,\n    renderers: renderers,\n    onChange: onChange,\n    direction: direction\n  })));\n};\nAlpha_AlphaPicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: alpha_AlphaPointer\n};\n/* harmony default export */ var alpha_Alpha = (common_ColorWrap(Alpha_AlphaPicker));\n// EXTERNAL MODULE: ./node_modules/lodash-es/map.js + 48 modules\nvar map = __webpack_require__(\"zmn3\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/block/BlockSwatches.js\n\n\n\n\nvar BlockSwatches_BlockSwatches = function BlockSwatches(_ref) {\n  var colors = _ref.colors,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        marginRight: '-10px'\n      },\n      swatch: {\n        width: '22px',\n        height: '22px',\n        \"float\": 'left',\n        marginRight: '10px',\n        marginBottom: '10px',\n        borderRadius: '4px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatches\n  }, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(common_Swatch, {\n      key: c,\n      color: c,\n      style: styles.swatch,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: '0 0 4px ' + c\n      }\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  }));\n};\n/* harmony default export */ var block_BlockSwatches = (BlockSwatches_BlockSwatches);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/block/Block.js\n\n\n\n\n\n\n\nvar Block_Block = function Block(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var transparent = hex === 'transparent';\n\n  var handleChange = function handleChange(hexCode, e) {\n    color_isValidHex(hexCode) && onChange({\n      hex: hexCode,\n      source: 'hex'\n    }, e);\n  };\n\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        boxShadow: '0 1px rgba(0,0,0,.1)',\n        borderRadius: '6px',\n        position: 'relative'\n      },\n      head: {\n        height: '110px',\n        background: hex,\n        borderRadius: '6px 6px 0 0',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative'\n      },\n      body: {\n        padding: '10px'\n      },\n      label: {\n        fontSize: '18px',\n        color: getContrastingColor(hex),\n        position: 'relative'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 10px 10px 10px',\n        borderColor: 'transparent transparent ' + hex + ' transparent',\n        position: 'absolute',\n        top: '-10px',\n        left: '50%',\n        marginLeft: '-10px'\n      },\n      input: {\n        width: '100%',\n        fontSize: '12px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '22px',\n        boxShadow: 'inset 0 0 0 1px #ddd',\n        borderRadius: '4px',\n        padding: '0 7px',\n        boxSizing: 'border-box'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'block-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangle\n  }), react_default.a.createElement('div', {\n    style: styles.head\n  }, transparent && react_default.a.createElement(common_Checkboard, {\n    borderRadius: '6px 6px 0 0'\n  }), react_default.a.createElement('div', {\n    style: styles.label\n  }, hex)), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement(block_BlockSwatches, {\n    colors: colors,\n    onClick: handleChange,\n    onSwatchHover: onSwatchHover\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input\n    },\n    value: hex,\n    onChange: handleChange\n  })));\n};\nBlock_Block.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  triangle: prop_types_default.a.oneOf(['top', 'hide']),\n  styles: prop_types_default.a.object\n};\nBlock_Block.defaultProps = {\n  width: 170,\n  colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#dce775', '#ff8a65', '#ba68c8'],\n  triangle: 'top',\n  styles: {}\n};\n/* harmony default export */ var block_Block = (common_ColorWrap(Block_Block));\n// EXTERNAL MODULE: ./node_modules/material-colors/dist/colors.es2015.js\nvar colors_es2015 = __webpack_require__(\"wME1\");\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/circle/CircleSwatch.js\n\n\n\nvar CircleSwatch_CircleSwatch = function CircleSwatch(_ref) {\n  var color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      hover = _ref.hover,\n      active = _ref.active,\n      circleSize = _ref.circleSize,\n      circleSpacing = _ref.circleSpacing;\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        width: circleSize,\n        height: circleSize,\n        marginRight: circleSpacing,\n        marginBottom: circleSpacing,\n        transform: 'scale(1)',\n        transition: '100ms transform ease'\n      },\n      Swatch: {\n        borderRadius: '50%',\n        background: 'transparent',\n        boxShadow: 'inset 0 0 0 ' + (circleSize / 2 + 1) + 'px ' + color,\n        transition: '100ms box-shadow ease'\n      }\n    },\n    'hover': {\n      swatch: {\n        transform: 'scale(1.2)'\n      }\n    },\n    'active': {\n      Swatch: {\n        boxShadow: 'inset 0 0 0 3px ' + color\n      }\n    }\n  }, {\n    hover: hover,\n    active: active\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(common_Swatch, {\n    style: styles.Swatch,\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: styles.Swatch.boxShadow + ', 0 0 5px ' + color\n    }\n  }));\n};\nCircleSwatch_CircleSwatch.defaultProps = {\n  circleSize: 28,\n  circleSpacing: 14\n};\n/* harmony default export */ var circle_CircleSwatch = (Object(lib[\"handleHover\"])(CircleSwatch_CircleSwatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/circle/Circle.js\n\n\n\n\n\n\n\n\nvar Circle_Circle = function Circle(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      circleSize = _ref.circleSize,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      circleSpacing = _ref.circleSpacing,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginRight: -circleSpacing,\n        marginBottom: -circleSpacing\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(hexCode, e) {\n    return onChange({\n      hex: hexCode,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'circle-picker ' + className\n  }, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(circle_CircleSwatch, {\n      key: c,\n      color: c,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover,\n      active: hex === c.toLowerCase(),\n      circleSize: circleSize,\n      circleSpacing: circleSpacing\n    });\n  }));\n};\nCircle_Circle.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  circleSize: prop_types_default.a.number,\n  circleSpacing: prop_types_default.a.number,\n  styles: prop_types_default.a.object\n};\nCircle_Circle.defaultProps = {\n  width: 252,\n  circleSize: 28,\n  circleSpacing: 14,\n  colors: [colors_es2015[\"p\" /* red */]['500'], colors_es2015[\"n\" /* pink */]['500'], colors_es2015[\"o\" /* purple */]['500'], colors_es2015[\"g\" /* deepPurple */]['500'], colors_es2015[\"i\" /* indigo */]['500'], colors_es2015[\"b\" /* blue */]['500'], colors_es2015[\"j\" /* lightBlue */]['500'], colors_es2015[\"e\" /* cyan */]['500'], colors_es2015[\"q\" /* teal */]['500'], colors_es2015[\"h\" /* green */]['500'], colors_es2015[\"k\" /* lightGreen */]['500'], colors_es2015[\"l\" /* lime */]['500'], colors_es2015[\"r\" /* yellow */]['500'], colors_es2015[\"a\" /* amber */]['500'], colors_es2015[\"m\" /* orange */]['500'], colors_es2015[\"f\" /* deepOrange */]['500'], colors_es2015[\"d\" /* brown */]['500'], colors_es2015[\"c\" /* blueGrey */]['500']],\n  styles: {}\n};\n/* harmony default export */ var circle_Circle = (common_ColorWrap(Circle_Circle));\n// EXTERNAL MODULE: ./node_modules/lodash-es/isUndefined.js\nvar isUndefined = __webpack_require__(\"3Hq1\");\n\n// EXTERNAL MODULE: ./node_modules/@icons/material/UnfoldMoreHorizontalIcon.js\nvar UnfoldMoreHorizontalIcon = __webpack_require__(\"9F0J\");\nvar UnfoldMoreHorizontalIcon_default = /*#__PURE__*/__webpack_require__.n(UnfoldMoreHorizontalIcon);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromeFields.js\nvar ChromeFields_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction ChromeFields_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction ChromeFields_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction ChromeFields_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/no-did-mount-set-state, no-param-reassign */\n\n\n\n\n\n\n\n\nvar ChromeFields_ChromeFields = function (_React$Component) {\n  ChromeFields_inherits(ChromeFields, _React$Component);\n\n  function ChromeFields(props) {\n    ChromeFields_classCallCheck(this, ChromeFields);\n\n    var _this = ChromeFields_possibleConstructorReturn(this, (ChromeFields.__proto__ || Object.getPrototypeOf(ChromeFields)).call(this));\n\n    _this.toggleViews = function () {\n      if (_this.state.view === 'hex') {\n        _this.setState({\n          view: 'rgb'\n        });\n      } else if (_this.state.view === 'rgb') {\n        _this.setState({\n          view: 'hsl'\n        });\n      } else if (_this.state.view === 'hsl') {\n        if (_this.props.hsl.a === 1) {\n          _this.setState({\n            view: 'hex'\n          });\n        } else {\n          _this.setState({\n            view: 'rgb'\n          });\n        }\n      }\n    };\n\n    _this.handleChange = function (data, e) {\n      if (data.hex) {\n        color_isValidHex(data.hex) && _this.props.onChange({\n          hex: data.hex,\n          source: 'hex'\n        }, e);\n      } else if (data.r || data.g || data.b) {\n        _this.props.onChange({\n          r: data.r || _this.props.rgb.r,\n          g: data.g || _this.props.rgb.g,\n          b: data.b || _this.props.rgb.b,\n          source: 'rgb'\n        }, e);\n      } else if (data.a) {\n        if (data.a < 0) {\n          data.a = 0;\n        } else if (data.a > 1) {\n          data.a = 1;\n        }\n\n        _this.props.onChange({\n          h: _this.props.hsl.h,\n          s: _this.props.hsl.s,\n          l: _this.props.hsl.l,\n          a: Math.round(data.a * 100) / 100,\n          source: 'rgb'\n        }, e);\n      } else if (data.h || data.s || data.l) {\n        // Remove any occurances of '%'.\n        if (typeof data.s === 'string' && data.s.includes('%')) {\n          data.s = data.s.replace('%', '');\n        }\n\n        if (typeof data.l === 'string' && data.l.includes('%')) {\n          data.l = data.l.replace('%', '');\n        } // We store HSL as a unit interval so we need to override the 1 input to 0.01\n\n\n        if (data.s == 1) {\n          data.s = 0.01;\n        } else if (data.l == 1) {\n          data.l = 0.01;\n        }\n\n        _this.props.onChange({\n          h: data.h || _this.props.hsl.h,\n          s: Number(!Object(isUndefined[\"a\" /* default */])(data.s) ? data.s : _this.props.hsl.s),\n          l: Number(!Object(isUndefined[\"a\" /* default */])(data.l) ? data.l : _this.props.hsl.l),\n          source: 'hsl'\n        }, e);\n      }\n    };\n\n    _this.showHighlight = function (e) {\n      e.currentTarget.style.background = '#eee';\n    };\n\n    _this.hideHighlight = function (e) {\n      e.currentTarget.style.background = 'transparent';\n    };\n\n    if (props.hsl.a !== 1 && props.view === \"hex\") {\n      _this.state = {\n        view: \"rgb\"\n      };\n    } else {\n      _this.state = {\n        view: props.view\n      };\n    }\n\n    return _this;\n  }\n\n  ChromeFields_createClass(ChromeFields, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = lib_default()({\n        'default': {\n          wrap: {\n            paddingTop: '16px',\n            display: 'flex'\n          },\n          fields: {\n            flex: '1',\n            display: 'flex',\n            marginLeft: '-6px'\n          },\n          field: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          alpha: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          toggle: {\n            width: '32px',\n            textAlign: 'right',\n            position: 'relative'\n          },\n          icon: {\n            marginRight: '-4px',\n            marginTop: '12px',\n            cursor: 'pointer',\n            position: 'relative'\n          },\n          iconHighlight: {\n            position: 'absolute',\n            width: '24px',\n            height: '28px',\n            background: '#eee',\n            borderRadius: '4px',\n            top: '10px',\n            left: '12px',\n            display: 'none'\n          },\n          input: {\n            fontSize: '11px',\n            color: '#333',\n            width: '100%',\n            borderRadius: '2px',\n            border: 'none',\n            boxShadow: 'inset 0 0 0 1px #dadada',\n            height: '21px',\n            textAlign: 'center'\n          },\n          label: {\n            textTransform: 'uppercase',\n            fontSize: '11px',\n            lineHeight: '11px',\n            color: '#969696',\n            textAlign: 'center',\n            display: 'block',\n            marginTop: '12px'\n          },\n          svg: {\n            fill: '#333',\n            width: '24px',\n            height: '24px',\n            border: '1px transparent solid',\n            borderRadius: '5px'\n          }\n        },\n        'disableAlpha': {\n          alpha: {\n            display: 'none'\n          }\n        }\n      }, this.props, this.state);\n      var fields = void 0;\n\n      if (this.state.view === 'hex') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'hex',\n          value: this.props.hex,\n          onChange: this.handleChange\n        })));\n      } else if (this.state.view === 'rgb') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'r',\n          value: this.props.rgb.r,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'g',\n          value: this.props.rgb.g,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'b',\n          value: this.props.rgb.b,\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.alpha\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'a',\n          value: this.props.rgb.a,\n          arrowOffset: 0.01,\n          onChange: this.handleChange\n        })));\n      } else if (this.state.view === 'hsl') {\n        fields = react_default.a.createElement('div', {\n          style: styles.fields,\n          className: 'flexbox-fix'\n        }, react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'h',\n          value: Math.round(this.props.hsl.h),\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 's',\n          value: Math.round(this.props.hsl.s * 100) + '%',\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.field\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'l',\n          value: Math.round(this.props.hsl.l * 100) + '%',\n          onChange: this.handleChange\n        })), react_default.a.createElement('div', {\n          style: styles.alpha\n        }, react_default.a.createElement(common_EditableInput, {\n          style: {\n            input: styles.input,\n            label: styles.label\n          },\n          label: 'a',\n          value: this.props.hsl.a,\n          arrowOffset: 0.01,\n          onChange: this.handleChange\n        })));\n      }\n\n      return react_default.a.createElement('div', {\n        style: styles.wrap,\n        className: 'flexbox-fix'\n      }, fields, react_default.a.createElement('div', {\n        style: styles.toggle\n      }, react_default.a.createElement('div', {\n        style: styles.icon,\n        onClick: this.toggleViews,\n        ref: function ref(icon) {\n          return _this2.icon = icon;\n        }\n      }, react_default.a.createElement(UnfoldMoreHorizontalIcon_default.a, {\n        style: styles.svg,\n        onMouseOver: this.showHighlight,\n        onMouseEnter: this.showHighlight,\n        onMouseOut: this.hideHighlight\n      }))));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if (nextProps.hsl.a !== 1 && state.view === 'hex') {\n        return {\n          view: 'rgb'\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ChromeFields;\n}(react_default.a.Component);\nChromeFields_ChromeFields.defaultProps = {\n  view: \"hex\"\n};\n/* harmony default export */ var chrome_ChromeFields = (ChromeFields_ChromeFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromePointer.js\n\n\nvar ChromePointer_ChromePointer = function ChromePointer() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        transform: 'translate(-6px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var chrome_ChromePointer = (ChromePointer_ChromePointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/ChromePointerCircle.js\n\n\nvar ChromePointerCircle_ChromePointerCircle = function ChromePointerCircle() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var chrome_ChromePointerCircle = (ChromePointerCircle_ChromePointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/chrome/Chrome.js\n\n\n\n\n\n\n\n\nvar Chrome_Chrome = function Chrome(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      disableAlpha = _ref.disableAlpha,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className,\n      defaultView = _ref.defaultView;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        borderRadius: '2px',\n        boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',\n        boxSizing: 'initial',\n        fontFamily: 'Menlo'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '55%',\n        position: 'relative',\n        borderRadius: '2px 2px 0 0',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '2px 2px 0 0'\n      },\n      body: {\n        padding: '16px 16px 12px'\n      },\n      controls: {\n        display: 'flex'\n      },\n      color: {\n        width: '32px'\n      },\n      swatch: {\n        marginTop: '6px',\n        width: '16px',\n        height: '16px',\n        borderRadius: '8px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      active: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '8px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + rgb.a + ')',\n        zIndex: '2'\n      },\n      toggles: {\n        flex: '1'\n      },\n      hue: {\n        height: '10px',\n        position: 'relative',\n        marginBottom: '8px'\n      },\n      Hue: {\n        radius: '2px'\n      },\n      alpha: {\n        height: '10px',\n        position: 'relative'\n      },\n      Alpha: {\n        radius: '2px'\n      }\n    },\n    'disableAlpha': {\n      color: {\n        width: '22px'\n      },\n      alpha: {\n        display: 'none'\n      },\n      hue: {\n        marginBottom: '0px'\n      },\n      swatch: {\n        width: '10px',\n        height: '10px',\n        marginTop: '0px'\n      }\n    }\n  }, passedStyles), {\n    disableAlpha: disableAlpha\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'chrome-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    style: styles.Saturation,\n    hsl: hsl,\n    hsv: hsv,\n    pointer: chrome_ChromePointerCircle,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.color\n  }, react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement('div', {\n    style: styles.active\n  }), react_default.a.createElement(common_Checkboard, {\n    renderers: renderers\n  }))), react_default.a.createElement('div', {\n    style: styles.toggles\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    pointer: chrome_ChromePointer,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_Alpha, {\n    style: styles.Alpha,\n    rgb: rgb,\n    hsl: hsl,\n    pointer: chrome_ChromePointer,\n    renderers: renderers,\n    onChange: onChange\n  })))), react_default.a.createElement(chrome_ChromeFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    view: defaultView,\n    onChange: onChange,\n    disableAlpha: disableAlpha\n  })));\n};\nChrome_Chrome.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  disableAlpha: prop_types_default.a.bool,\n  styles: prop_types_default.a.object,\n  defaultView: prop_types_default.a.oneOf([\"hex\", \"rgb\", \"hsl\"])\n};\nChrome_Chrome.defaultProps = {\n  width: 225,\n  disableAlpha: false,\n  styles: {}\n};\n/* harmony default export */ var chrome_Chrome = (common_ColorWrap(Chrome_Chrome));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/CompactColor.js\n\n\n\n\nvar CompactColor_CompactColor = function CompactColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      color: {\n        background: color,\n        width: '15px',\n        height: '15px',\n        \"float\": 'left',\n        marginRight: '5px',\n        marginBottom: '5px',\n        position: 'relative',\n        cursor: 'pointer'\n      },\n      dot: {\n        absolute: '5px 5px 5px 5px',\n        background: getContrastingColor(color),\n        borderRadius: '50%',\n        opacity: '0'\n      }\n    },\n    'active': {\n      dot: {\n        opacity: '1'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      dot: {\n        background: '#000'\n      }\n    },\n    'transparent': {\n      dot: {\n        background: '#000'\n      }\n    }\n  }, {\n    active: active,\n    'color-#FFFFFF': color === '#FFFFFF',\n    'transparent': color === 'transparent'\n  });\n  return react_default.a.createElement(common_Swatch, {\n    style: styles.color,\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: '0 0 4px ' + color\n    }\n  }, react_default.a.createElement('div', {\n    style: styles.dot\n  }));\n};\n/* harmony default export */ var compact_CompactColor = (CompactColor_CompactColor);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/CompactFields.js\n\n\n\nvar CompactFields_CompactFields = function CompactFields(_ref) {\n  var hex = _ref.hex,\n      rgb = _ref.rgb,\n      onChange = _ref.onChange;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingBottom: '6px',\n        paddingRight: '5px',\n        position: 'relative'\n      },\n      active: {\n        position: 'absolute',\n        top: '6px',\n        left: '5px',\n        height: '9px',\n        width: '9px',\n        background: hex\n      },\n      HEXwrap: {\n        flex: '6',\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '80%',\n        padding: '0px',\n        paddingLeft: '20%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      HEXlabel: {\n        display: 'none'\n      },\n      RGBwrap: {\n        flex: '3',\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '70%',\n        padding: '0px',\n        paddingLeft: '30%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '3px',\n        left: '0px',\n        lineHeight: '16px',\n        textTransform: 'uppercase',\n        fontSize: '12px',\n        color: '#999'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else {\n      onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.active\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  }));\n};\n/* harmony default export */ var compact_CompactFields = (CompactFields_CompactFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/compact/Compact.js\n\n\n\n\n\n\n\n\n\nvar Compact_Compact = function Compact(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      Compact: {\n        background: '#f6f6f6',\n        radius: '4px'\n      },\n      compact: {\n        paddingTop: '5px',\n        paddingLeft: '5px',\n        boxSizing: 'initial',\n        width: '240px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else {\n      onChange(data, e);\n    }\n  };\n\n  return react_default.a.createElement(common_Raised, {\n    style: styles.Compact,\n    styles: passedStyles\n  }, react_default.a.createElement('div', {\n    style: styles.compact,\n    className: 'compact-picker ' + className\n  }, react_default.a.createElement('div', null, Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(compact_CompactColor, {\n      key: c,\n      color: c,\n      active: c.toLowerCase() === hex,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })), react_default.a.createElement(compact_CompactFields, {\n    hex: hex,\n    rgb: rgb,\n    onChange: handleChange\n  })));\n};\nCompact_Compact.propTypes = {\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  styles: prop_types_default.a.object\n};\nCompact_Compact.defaultProps = {\n  colors: ['#4D4D4D', '#999999', '#FFFFFF', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'],\n  styles: {}\n};\n/* harmony default export */ var compact_Compact = (common_ColorWrap(Compact_Compact));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/github/GithubSwatch.js\n\n\n\nvar GithubSwatch_GithubSwatch = function GithubSwatch(_ref) {\n  var hover = _ref.hover,\n      color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var hoverSwatch = {\n    position: 'relative',\n    zIndex: '2',\n    outline: '2px solid #fff',\n    boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)'\n  };\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        width: '25px',\n        height: '25px',\n        fontSize: '0'\n      }\n    },\n    'hover': {\n      swatch: hoverSwatch\n    }\n  }, {\n    hover: hover\n  });\n  return react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(common_Swatch, {\n    color: color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: hoverSwatch\n  }));\n};\n/* harmony default export */ var github_GithubSwatch = (Object(lib[\"handleHover\"])(GithubSwatch_GithubSwatch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/github/Github.js\n\n\n\n\n\n\n\nvar Github_Github = function Github(_ref) {\n  var width = _ref.width,\n      colors = _ref.colors,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '1px solid rgba(0,0,0,0.2)',\n        boxShadow: '0 3px 12px rgba(0,0,0,0.15)',\n        borderRadius: '4px',\n        position: 'relative',\n        padding: '5px',\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      triangle: {\n        position: 'absolute',\n        border: '7px solid transparent',\n        borderBottomColor: '#fff'\n      },\n      triangleShadow: {\n        position: 'absolute',\n        border: '8px solid transparent',\n        borderBottomColor: 'rgba(0,0,0,0.15)'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-14px',\n        left: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        left: '9px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-14px',\n        right: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        right: '9px'\n      }\n    },\n    'bottom-left-triangle': {\n      triangle: {\n        top: '35px',\n        left: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        left: '9px',\n        transform: 'rotate(180deg)'\n      }\n    },\n    'bottom-right-triangle': {\n      triangle: {\n        top: '35px',\n        right: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        right: '9px',\n        transform: 'rotate(180deg)'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right',\n    'bottom-left-triangle': triangle === 'bottom-left',\n    'bottom-right-triangle': triangle === 'bottom-right'\n  });\n\n  var handleChange = function handleChange(hex, e) {\n    return onChange({\n      hex: hex,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'github-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangleShadow\n  }), react_default.a.createElement('div', {\n    style: styles.triangle\n  }), Object(map[\"a\" /* default */])(colors, function (c) {\n    return react_default.a.createElement(github_GithubSwatch, {\n      color: c,\n      key: c,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }));\n};\nGithub_Github.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  triangle: prop_types_default.a.oneOf(['hide', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),\n  styles: prop_types_default.a.object\n};\nGithub_Github.defaultProps = {\n  width: 200,\n  colors: ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'],\n  triangle: 'top-left',\n  styles: {}\n};\n/* harmony default export */ var github_Github = (common_ColorWrap(Github_Github));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/hue/HuePointer.js\n\n\nvar HuePointer_SliderPointer = function SliderPointer(_ref) {\n  var direction = _ref.direction;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, {\n    vertical: direction === 'vertical'\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var HuePointer = (HuePointer_SliderPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/hue/Hue.js\nvar Hue_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\nvar Hue_HuePicker = function HuePicker(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      hsl = _ref.hsl,\n      direction = _ref.direction,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles)); // Overwrite to provide pure hue color\n\n  var handleChange = function handleChange(data) {\n    return onChange({\n      a: 1,\n      h: data.h,\n      l: 0.5,\n      s: 1\n    });\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'hue-picker ' + className\n  }, react_default.a.createElement(common_Hue, Hue_extends({}, styles.hue, {\n    hsl: hsl,\n    pointer: pointer,\n    onChange: handleChange,\n    direction: direction\n  })));\n};\nHue_HuePicker.propTypes = {\n  styles: prop_types_default.a.object\n};\nHue_HuePicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: HuePointer,\n  styles: {}\n};\n/* harmony default export */ var hue_Hue = (common_ColorWrap(Hue_HuePicker));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/material/Material.js\n\n\n\n\n\nvar Material_Material = function Material(_ref) {\n  var onChange = _ref.onChange,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      material: {\n        width: '98px',\n        height: '98px',\n        padding: '16px',\n        fontFamily: 'Roboto'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '2px solid ' + hex,\n        outline: 'none',\n        height: '30px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      Hex: {\n        style: {}\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '1px solid #eee',\n        outline: 'none',\n        height: '30px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      split: {\n        display: 'flex',\n        marginRight: '-10px',\n        paddingTop: '11px'\n      },\n      third: {\n        flex: '1',\n        paddingRight: '10px'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement(common_Raised, {\n    styles: passedStyles\n  }, react_default.a.createElement('div', {\n    style: styles.material,\n    className: 'material-picker ' + className\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.split,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.third\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  })))));\n};\n/* harmony default export */ var material_Material = (common_ColorWrap(Material_Material));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopFields.js\n\n\n\n\nvar PhotoshopFields_PhotoshopPicker = function PhotoshopPicker(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsv = _ref.hsv,\n      hex = _ref.hex;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        paddingTop: '5px',\n        paddingBottom: '9px',\n        width: '80px',\n        position: 'relative'\n      },\n      divider: {\n        height: '5px'\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        marginLeft: '40%',\n        width: '40%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '5px',\n        fontSize: '13px',\n        paddingLeft: '3px',\n        marginRight: '10px'\n      },\n      RGBlabel: {\n        left: '0px',\n        top: '0px',\n        width: '34px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px',\n        position: 'absolute'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        marginLeft: '20%',\n        width: '80%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '6px',\n        fontSize: '13px',\n        paddingLeft: '3px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        width: '14px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px'\n      },\n      fieldSymbols: {\n        position: 'absolute',\n        top: '5px',\n        right: '-7px',\n        fontSize: '13px'\n      },\n      symbol: {\n        height: '20px',\n        lineHeight: '22px',\n        paddingBottom: '7px'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data['#']) {\n      color_isValidHex(data['#']) && onChange({\n        hex: data['#'],\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else if (data.h || data.s || data.v) {\n      onChange({\n        h: data.h || hsv.h,\n        s: data.s || hsv.s,\n        v: data.v || hsv.v,\n        source: 'hsv'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'h',\n    value: Math.round(hsv.h),\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 's',\n    value: Math.round(hsv.s * 100),\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'v',\n    value: Math.round(hsv.v * 100),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.divider\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.RGBwrap,\n      input: styles.RGBinput,\n      label: styles.RGBlabel\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.divider\n  }), react_default.a.createElement(common_EditableInput, {\n    style: {\n      wrap: styles.HEXwrap,\n      input: styles.HEXinput,\n      label: styles.HEXlabel\n    },\n    label: '#',\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.fieldSymbols\n  }, react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '\\xB0'), react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '%'), react_default.a.createElement('div', {\n    style: styles.symbol\n  }, '%')));\n};\n/* harmony default export */ var PhotoshopFields = (PhotoshopFields_PhotoshopPicker);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPointerCircle.js\n\n\nvar PhotoshopPointerCircle_PhotoshopPointerCircle = function PhotoshopPointerCircle(_ref) {\n  var hsl = _ref.hsl;\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    },\n    'black-outline': {\n      picker: {\n        boxShadow: 'inset 0 0 0 1px #000'\n      }\n    }\n  }, {\n    'black-outline': hsl.l > 0.5\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var photoshop_PhotoshopPointerCircle = (PhotoshopPointerCircle_PhotoshopPointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPointer.js\n\n\nvar PhotoshopPointer_PhotoshopPointerCircle = function PhotoshopPointerCircle() {\n  var styles = lib_default()({\n    'default': {\n      triangle: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '4px 0 4px 6px',\n        borderColor: 'transparent transparent transparent #fff',\n        position: 'absolute',\n        top: '1px',\n        left: '1px'\n      },\n      triangleBorder: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '5px 0 5px 8px',\n        borderColor: 'transparent transparent transparent #555'\n      },\n      left: {\n        Extend: 'triangleBorder',\n        transform: 'translate(-13px, -4px)'\n      },\n      leftInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      },\n      right: {\n        Extend: 'triangleBorder',\n        transform: 'translate(20px, -14px) rotate(180deg)'\n      },\n      rightInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.pointer\n  }, react_default.a.createElement('div', {\n    style: styles.left\n  }, react_default.a.createElement('div', {\n    style: styles.leftInside\n  })), react_default.a.createElement('div', {\n    style: styles.right\n  }, react_default.a.createElement('div', {\n    style: styles.rightInside\n  })));\n};\n/* harmony default export */ var PhotoshopPointer = (PhotoshopPointer_PhotoshopPointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopButton.js\n\n\nvar PhotoshopButton_PhotoshopButton = function PhotoshopButton(_ref) {\n  var onClick = _ref.onClick,\n      label = _ref.label,\n      children = _ref.children,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      button: {\n        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',\n        border: '1px solid #878787',\n        borderRadius: '2px',\n        height: '20px',\n        boxShadow: '0 1px 0 0 #EAEAEA',\n        fontSize: '14px',\n        color: '#000',\n        lineHeight: '20px',\n        textAlign: 'center',\n        marginBottom: '10px',\n        cursor: 'pointer'\n      }\n    },\n    'active': {\n      button: {\n        boxShadow: '0 0 0 1px #878787'\n      }\n    }\n  }, {\n    active: active\n  });\n  return react_default.a.createElement('div', {\n    style: styles.button,\n    onClick: onClick\n  }, label || children);\n};\n/* harmony default export */ var photoshop_PhotoshopButton = (PhotoshopButton_PhotoshopButton);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/PhotoshopPreviews.js\n\n\nvar PhotoshopPreviews_PhotoshopPreviews = function PhotoshopPreviews(_ref) {\n  var rgb = _ref.rgb,\n      currentColor = _ref.currentColor;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        border: '1px solid #B3B3B3',\n        borderBottom: '1px solid #F0F0F0',\n        marginBottom: '2px',\n        marginTop: '1px'\n      },\n      \"new\": {\n        height: '34px',\n        background: 'rgb(' + rgb.r + ',' + rgb.g + ', ' + rgb.b + ')',\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000'\n      },\n      current: {\n        height: '34px',\n        background: currentColor,\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000'\n      },\n      label: {\n        fontSize: '14px',\n        color: '#000',\n        textAlign: 'center'\n      }\n    }\n  });\n  return react_default.a.createElement('div', null, react_default.a.createElement('div', {\n    style: styles.label\n  }, 'new'), react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement('div', {\n    style: styles[\"new\"]\n  }), react_default.a.createElement('div', {\n    style: styles.current\n  })), react_default.a.createElement('div', {\n    style: styles.label\n  }, 'current'));\n};\n/* harmony default export */ var photoshop_PhotoshopPreviews = (PhotoshopPreviews_PhotoshopPreviews);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/photoshop/Photoshop.js\nvar Photoshop_createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction Photoshop_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction Photoshop_possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction Photoshop_inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\n\n\n\n\n\n\nvar Photoshop_Photoshop = function (_React$Component) {\n  Photoshop_inherits(Photoshop, _React$Component);\n\n  function Photoshop(props) {\n    Photoshop_classCallCheck(this, Photoshop);\n\n    var _this = Photoshop_possibleConstructorReturn(this, (Photoshop.__proto__ || Object.getPrototypeOf(Photoshop)).call(this));\n\n    _this.state = {\n      currentColor: props.hex\n    };\n    return _this;\n  }\n\n  Photoshop_createClass(Photoshop, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$styles = _props.styles,\n          passedStyles = _props$styles === undefined ? {} : _props$styles,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className;\n      var styles = lib_default()(Object(merge[\"a\" /* default */])({\n        'default': {\n          picker: {\n            background: '#DCDCDC',\n            borderRadius: '4px',\n            boxShadow: '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',\n            boxSizing: 'initial',\n            width: '513px'\n          },\n          head: {\n            backgroundImage: 'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',\n            borderBottom: '1px solid #B1B1B1',\n            boxShadow: 'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',\n            height: '23px',\n            lineHeight: '24px',\n            borderRadius: '4px 4px 0 0',\n            fontSize: '13px',\n            color: '#4D4D4D',\n            textAlign: 'center'\n          },\n          body: {\n            padding: '15px 15px 0',\n            display: 'flex'\n          },\n          saturation: {\n            width: '256px',\n            height: '256px',\n            position: 'relative',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0',\n            overflow: 'hidden'\n          },\n          hue: {\n            position: 'relative',\n            height: '256px',\n            width: '19px',\n            marginLeft: '10px',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0'\n          },\n          controls: {\n            width: '180px',\n            marginLeft: '10px'\n          },\n          top: {\n            display: 'flex'\n          },\n          previews: {\n            width: '60px'\n          },\n          actions: {\n            flex: '1',\n            marginLeft: '20px'\n          }\n        }\n      }, passedStyles));\n      return react_default.a.createElement('div', {\n        style: styles.picker,\n        className: 'photoshop-picker ' + className\n      }, react_default.a.createElement('div', {\n        style: styles.head\n      }, this.props.header), react_default.a.createElement('div', {\n        style: styles.body,\n        className: 'flexbox-fix'\n      }, react_default.a.createElement('div', {\n        style: styles.saturation\n      }, react_default.a.createElement(common_Saturation, {\n        hsl: this.props.hsl,\n        hsv: this.props.hsv,\n        pointer: photoshop_PhotoshopPointerCircle,\n        onChange: this.props.onChange\n      })), react_default.a.createElement('div', {\n        style: styles.hue\n      }, react_default.a.createElement(common_Hue, {\n        direction: 'vertical',\n        hsl: this.props.hsl,\n        pointer: PhotoshopPointer,\n        onChange: this.props.onChange\n      })), react_default.a.createElement('div', {\n        style: styles.controls\n      }, react_default.a.createElement('div', {\n        style: styles.top,\n        className: 'flexbox-fix'\n      }, react_default.a.createElement('div', {\n        style: styles.previews\n      }, react_default.a.createElement(photoshop_PhotoshopPreviews, {\n        rgb: this.props.rgb,\n        currentColor: this.state.currentColor\n      })), react_default.a.createElement('div', {\n        style: styles.actions\n      }, react_default.a.createElement(photoshop_PhotoshopButton, {\n        label: 'OK',\n        onClick: this.props.onAccept,\n        active: true\n      }), react_default.a.createElement(photoshop_PhotoshopButton, {\n        label: 'Cancel',\n        onClick: this.props.onCancel\n      }), react_default.a.createElement(PhotoshopFields, {\n        onChange: this.props.onChange,\n        rgb: this.props.rgb,\n        hsv: this.props.hsv,\n        hex: this.props.hex\n      }))))));\n    }\n  }]);\n\n  return Photoshop;\n}(react_default.a.Component);\nPhotoshop_Photoshop.propTypes = {\n  header: prop_types_default.a.string,\n  styles: prop_types_default.a.object\n};\nPhotoshop_Photoshop.defaultProps = {\n  header: 'Color Picker',\n  styles: {}\n};\n/* harmony default export */ var photoshop_Photoshop = (common_ColorWrap(Photoshop_Photoshop));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/SketchFields.js\n/* eslint-disable no-param-reassign */\n\n\n\n\nvar SketchFields_SketchFields = function SketchFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      disableAlpha = _ref.disableAlpha;\n  var styles = lib_default()({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingTop: '4px'\n      },\n      single: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      alpha: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      \"double\": {\n        flex: '2'\n      },\n      input: {\n        width: '80%',\n        padding: '4px 10% 3px',\n        border: 'none',\n        boxShadow: 'inset 0 0 0 1px #ccc',\n        fontSize: '11px'\n      },\n      label: {\n        display: 'block',\n        textAlign: 'center',\n        fontSize: '11px',\n        color: '#222',\n        paddingTop: '3px',\n        paddingBottom: '4px',\n        textTransform: 'capitalize'\n      }\n    },\n    'disableAlpha': {\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, {\n    disableAlpha: disableAlpha\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        a: rgb.a,\n        source: 'rgb'\n      }, e);\n    } else if (data.a) {\n      if (data.a < 0) {\n        data.a = 0;\n      } else if (data.a > 100) {\n        data.a = 100;\n      }\n\n      data.a /= 100;\n      onChange({\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: data.a,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.fields,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles[\"double\"]\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'hex',\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'r',\n    value: rgb.r,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'g',\n    value: rgb.g,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'b',\n    value: rgb.b,\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '255'\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'a',\n    value: Math.round(rgb.a * 100),\n    onChange: handleChange,\n    dragLabel: 'true',\n    dragMax: '100'\n  })));\n};\n/* harmony default export */ var sketch_SketchFields = (SketchFields_SketchFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/SketchPresetColors.js\nvar SketchPresetColors_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\nvar SketchPresetColors_SketchPresetColors = function SketchPresetColors(_ref) {\n  var colors = _ref.colors,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover;\n  var styles = lib_default()({\n    'default': {\n      colors: {\n        margin: '0 -10px',\n        padding: '10px 0 0 10px',\n        borderTop: '1px solid #eee',\n        display: 'flex',\n        flexWrap: 'wrap',\n        position: 'relative'\n      },\n      swatchWrap: {\n        width: '16px',\n        height: '16px',\n        margin: '0 10px 10px 0'\n      },\n      swatch: {\n        borderRadius: '3px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'\n      }\n    },\n    'no-presets': {\n      colors: {\n        display: 'none'\n      }\n    }\n  }, {\n    'no-presets': !colors || !colors.length\n  });\n\n  var handleClick = function handleClick(hex, e) {\n    onClick({\n      hex: hex,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.colors,\n    className: 'flexbox-fix'\n  }, colors.map(function (colorObjOrString) {\n    var c = typeof colorObjOrString === 'string' ? {\n      color: colorObjOrString\n    } : colorObjOrString;\n    var key = '' + c.color + (c.title || '');\n    return react_default.a.createElement('div', {\n      key: key,\n      style: styles.swatchWrap\n    }, react_default.a.createElement(common_Swatch, SketchPresetColors_extends({}, c, {\n      style: styles.swatch,\n      onClick: handleClick,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color\n      }\n    })));\n  }));\n};\nSketchPresetColors_SketchPresetColors.propTypes = {\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.shape({\n    color: prop_types_default.a.string,\n    title: prop_types_default.a.string\n  })])).isRequired\n};\n/* harmony default export */ var sketch_SketchPresetColors = (SketchPresetColors_SketchPresetColors);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/sketch/Sketch.js\nvar Sketch_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\nvar Sketch_Sketch = function Sketch(_ref) {\n  var width = _ref.width,\n      rgb = _ref.rgb,\n      hex = _ref.hex,\n      hsv = _ref.hsv,\n      hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      disableAlpha = _ref.disableAlpha,\n      presetColors = _ref.presetColors,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': Sketch_extends({\n      picker: {\n        width: width,\n        padding: '10px 10px 0',\n        boxSizing: 'initial',\n        background: '#fff',\n        borderRadius: '4px',\n        boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '75%',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '3px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      controls: {\n        display: 'flex'\n      },\n      sliders: {\n        padding: '4px 0',\n        flex: '1'\n      },\n      color: {\n        width: '24px',\n        height: '24px',\n        position: 'relative',\n        marginTop: '4px',\n        marginLeft: '4px',\n        borderRadius: '3px'\n      },\n      activeColor: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '2px',\n        background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      hue: {\n        position: 'relative',\n        height: '10px',\n        overflow: 'hidden'\n      },\n      Hue: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      alpha: {\n        position: 'relative',\n        height: '10px',\n        marginTop: '4px',\n        overflow: 'hidden'\n      },\n      Alpha: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      }\n    }, passedStyles),\n    'disableAlpha': {\n      color: {\n        height: '10px'\n      },\n      hue: {\n        height: '10px'\n      },\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), {\n    disableAlpha: disableAlpha\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'sketch-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    style: styles.Saturation,\n    hsl: hsl,\n    hsv: hsv,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.sliders\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.alpha\n  }, react_default.a.createElement(common_Alpha, {\n    style: styles.Alpha,\n    rgb: rgb,\n    hsl: hsl,\n    renderers: renderers,\n    onChange: onChange\n  }))), react_default.a.createElement('div', {\n    style: styles.color\n  }, react_default.a.createElement(common_Checkboard, null), react_default.a.createElement('div', {\n    style: styles.activeColor\n  }))), react_default.a.createElement(sketch_SketchFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    onChange: onChange,\n    disableAlpha: disableAlpha\n  }), react_default.a.createElement(sketch_SketchPresetColors, {\n    colors: presetColors,\n    onClick: onChange,\n    onSwatchHover: onSwatchHover\n  }));\n};\nSketch_Sketch.propTypes = {\n  disableAlpha: prop_types_default.a.bool,\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  styles: prop_types_default.a.object\n};\nSketch_Sketch.defaultProps = {\n  disableAlpha: false,\n  width: 200,\n  styles: {},\n  presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']\n};\n/* harmony default export */ var sketch_Sketch = (common_ColorWrap(Sketch_Sketch));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderSwatch.js\n\n\nvar SliderSwatch_SliderSwatch = function SliderSwatch(_ref) {\n  var hsl = _ref.hsl,\n      offset = _ref.offset,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      active = _ref.active,\n      first = _ref.first,\n      last = _ref.last;\n  var styles = lib_default()({\n    'default': {\n      swatch: {\n        height: '12px',\n        background: 'hsl(' + hsl.h + ', 50%, ' + offset * 100 + '%)',\n        cursor: 'pointer'\n      }\n    },\n    'first': {\n      swatch: {\n        borderRadius: '2px 0 0 2px'\n      }\n    },\n    'last': {\n      swatch: {\n        borderRadius: '0 2px 2px 0'\n      }\n    },\n    'active': {\n      swatch: {\n        transform: 'scaleY(1.8)',\n        borderRadius: '3.6px/2px'\n      }\n    }\n  }, {\n    active: active,\n    first: first,\n    last: last\n  });\n\n  var handleClick = function handleClick(e) {\n    return onClick({\n      h: hsl.h,\n      s: 0.5,\n      l: offset,\n      source: 'hsl'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.swatch,\n    onClick: handleClick\n  });\n};\n/* harmony default export */ var slider_SliderSwatch = (SliderSwatch_SliderSwatch);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderSwatches.js\n\n\n\nvar SliderSwatches_SliderSwatches = function SliderSwatches(_ref) {\n  var onClick = _ref.onClick,\n      hsl = _ref.hsl;\n  var styles = lib_default()({\n    'default': {\n      swatches: {\n        marginTop: '20px'\n      },\n      swatch: {\n        boxSizing: 'border-box',\n        width: '20%',\n        paddingRight: '1px',\n        \"float\": 'left'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }); // Acceptible difference in floating point equality\n\n  var epsilon = 0.1;\n  return react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.80',\n    active: Math.abs(hsl.l - 0.80) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick,\n    first: true\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.65',\n    active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.50',\n    active: Math.abs(hsl.l - 0.50) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.35',\n    active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick\n  })), react_default.a.createElement('div', {\n    style: styles.swatch\n  }, react_default.a.createElement(slider_SliderSwatch, {\n    hsl: hsl,\n    offset: '.20',\n    active: Math.abs(hsl.l - 0.20) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n    onClick: onClick,\n    last: true\n  })), react_default.a.createElement('div', {\n    style: styles.clear\n  }));\n};\n/* harmony default export */ var slider_SliderSwatches = (SliderSwatches_SliderSwatches);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/SliderPointer.js\n\n\nvar SliderPointer_SliderPointer = function SliderPointer() {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '14px',\n        height: '14px',\n        borderRadius: '6px',\n        transform: 'translate(-7px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\n/* harmony default export */ var slider_SliderPointer = (SliderPointer_SliderPointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/slider/Slider.js\n\n\n\n\n\n\n\nvar Slider_Slider = function Slider(_ref) {\n  var hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      hue: {\n        height: '12px',\n        position: 'relative'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n  return react_default.a.createElement('div', {\n    style: styles.wrap || {},\n    className: 'slider-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    pointer: pointer,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.swatches\n  }, react_default.a.createElement(slider_SliderSwatches, {\n    hsl: hsl,\n    onClick: onChange\n  })));\n};\nSlider_Slider.propTypes = {\n  styles: prop_types_default.a.object\n};\nSlider_Slider.defaultProps = {\n  pointer: slider_SliderPointer,\n  styles: {}\n};\n/* harmony default export */ var slider_Slider = (common_ColorWrap(Slider_Slider));\n// EXTERNAL MODULE: ./node_modules/@icons/material/CheckIcon.js\nvar CheckIcon = __webpack_require__(\"ql/k\");\nvar CheckIcon_default = /*#__PURE__*/__webpack_require__.n(CheckIcon);\n\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/SwatchesColor.js\n\n\n\n\n\nvar SwatchesColor_SwatchesColor = function SwatchesColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      first = _ref.first,\n      last = _ref.last,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      color: {\n        width: '40px',\n        height: '24px',\n        cursor: 'pointer',\n        background: color,\n        marginBottom: '1px'\n      },\n      check: {\n        color: getContrastingColor(color),\n        marginLeft: '8px',\n        display: 'none'\n      }\n    },\n    'first': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '2px 2px 0 0'\n      }\n    },\n    'last': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '0 0 2px 2px'\n      }\n    },\n    'active': {\n      check: {\n        display: 'block'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      check: {\n        color: '#333'\n      }\n    },\n    'transparent': {\n      check: {\n        color: '#333'\n      }\n    }\n  }, {\n    first: first,\n    last: last,\n    active: active,\n    'color-#FFFFFF': color === '#FFFFFF',\n    'transparent': color === 'transparent'\n  });\n  return react_default.a.createElement(common_Swatch, {\n    color: color,\n    style: styles.color,\n    onClick: onClick,\n    onHover: onSwatchHover,\n    focusStyle: {\n      boxShadow: '0 0 4px ' + color\n    }\n  }, react_default.a.createElement('div', {\n    style: styles.check\n  }, react_default.a.createElement(CheckIcon_default.a, null)));\n};\n/* harmony default export */ var swatches_SwatchesColor = (SwatchesColor_SwatchesColor);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/SwatchesGroup.js\n\n\n\n\nvar SwatchesGroup_SwatchesGroup = function SwatchesGroup(_ref) {\n  var onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      group = _ref.group,\n      active = _ref.active;\n  var styles = lib_default()({\n    'default': {\n      group: {\n        paddingBottom: '10px',\n        width: '40px',\n        \"float\": 'left',\n        marginRight: '10px'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.group\n  }, Object(map[\"a\" /* default */])(group, function (color, i) {\n    return react_default.a.createElement(swatches_SwatchesColor, {\n      key: color,\n      color: color,\n      active: color.toLowerCase() === active,\n      first: i === 0,\n      last: i === group.length - 1,\n      onClick: onClick,\n      onSwatchHover: onSwatchHover\n    });\n  }));\n};\n/* harmony default export */ var swatches_SwatchesGroup = (SwatchesGroup_SwatchesGroup);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/swatches/Swatches.js\n\n\n\n\n\n\n\n\nvar Swatches_Swatches = function Swatches(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        height: height\n      },\n      overflow: {\n        height: height,\n        overflowY: 'scroll'\n      },\n      body: {\n        padding: '16px 0 6px 16px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    return onChange({\n      hex: data,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'swatches-picker ' + className\n  }, react_default.a.createElement(common_Raised, null, react_default.a.createElement('div', {\n    style: styles.overflow\n  }, react_default.a.createElement('div', {\n    style: styles.body\n  }, Object(map[\"a\" /* default */])(colors, function (group) {\n    return react_default.a.createElement(swatches_SwatchesGroup, {\n      key: group.toString(),\n      group: group,\n      active: hex,\n      onClick: handleChange,\n      onSwatchHover: onSwatchHover\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })))));\n};\nSwatches_Swatches.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  height: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.arrayOf(prop_types_default.a.string)),\n  styles: prop_types_default.a.object\n  /* eslint-disable max-len */\n\n};\nSwatches_Swatches.defaultProps = {\n  width: 320,\n  height: 240,\n  colors: [[colors_es2015[\"p\" /* red */]['900'], colors_es2015[\"p\" /* red */]['700'], colors_es2015[\"p\" /* red */]['500'], colors_es2015[\"p\" /* red */]['300'], colors_es2015[\"p\" /* red */]['100']], [colors_es2015[\"n\" /* pink */]['900'], colors_es2015[\"n\" /* pink */]['700'], colors_es2015[\"n\" /* pink */]['500'], colors_es2015[\"n\" /* pink */]['300'], colors_es2015[\"n\" /* pink */]['100']], [colors_es2015[\"o\" /* purple */]['900'], colors_es2015[\"o\" /* purple */]['700'], colors_es2015[\"o\" /* purple */]['500'], colors_es2015[\"o\" /* purple */]['300'], colors_es2015[\"o\" /* purple */]['100']], [colors_es2015[\"g\" /* deepPurple */]['900'], colors_es2015[\"g\" /* deepPurple */]['700'], colors_es2015[\"g\" /* deepPurple */]['500'], colors_es2015[\"g\" /* deepPurple */]['300'], colors_es2015[\"g\" /* deepPurple */]['100']], [colors_es2015[\"i\" /* indigo */]['900'], colors_es2015[\"i\" /* indigo */]['700'], colors_es2015[\"i\" /* indigo */]['500'], colors_es2015[\"i\" /* indigo */]['300'], colors_es2015[\"i\" /* indigo */]['100']], [colors_es2015[\"b\" /* blue */]['900'], colors_es2015[\"b\" /* blue */]['700'], colors_es2015[\"b\" /* blue */]['500'], colors_es2015[\"b\" /* blue */]['300'], colors_es2015[\"b\" /* blue */]['100']], [colors_es2015[\"j\" /* lightBlue */]['900'], colors_es2015[\"j\" /* lightBlue */]['700'], colors_es2015[\"j\" /* lightBlue */]['500'], colors_es2015[\"j\" /* lightBlue */]['300'], colors_es2015[\"j\" /* lightBlue */]['100']], [colors_es2015[\"e\" /* cyan */]['900'], colors_es2015[\"e\" /* cyan */]['700'], colors_es2015[\"e\" /* cyan */]['500'], colors_es2015[\"e\" /* cyan */]['300'], colors_es2015[\"e\" /* cyan */]['100']], [colors_es2015[\"q\" /* teal */]['900'], colors_es2015[\"q\" /* teal */]['700'], colors_es2015[\"q\" /* teal */]['500'], colors_es2015[\"q\" /* teal */]['300'], colors_es2015[\"q\" /* teal */]['100']], ['#194D33', colors_es2015[\"h\" /* green */]['700'], colors_es2015[\"h\" /* green */]['500'], colors_es2015[\"h\" /* green */]['300'], colors_es2015[\"h\" /* green */]['100']], [colors_es2015[\"k\" /* lightGreen */]['900'], colors_es2015[\"k\" /* lightGreen */]['700'], colors_es2015[\"k\" /* lightGreen */]['500'], colors_es2015[\"k\" /* lightGreen */]['300'], colors_es2015[\"k\" /* lightGreen */]['100']], [colors_es2015[\"l\" /* lime */]['900'], colors_es2015[\"l\" /* lime */]['700'], colors_es2015[\"l\" /* lime */]['500'], colors_es2015[\"l\" /* lime */]['300'], colors_es2015[\"l\" /* lime */]['100']], [colors_es2015[\"r\" /* yellow */]['900'], colors_es2015[\"r\" /* yellow */]['700'], colors_es2015[\"r\" /* yellow */]['500'], colors_es2015[\"r\" /* yellow */]['300'], colors_es2015[\"r\" /* yellow */]['100']], [colors_es2015[\"a\" /* amber */]['900'], colors_es2015[\"a\" /* amber */]['700'], colors_es2015[\"a\" /* amber */]['500'], colors_es2015[\"a\" /* amber */]['300'], colors_es2015[\"a\" /* amber */]['100']], [colors_es2015[\"m\" /* orange */]['900'], colors_es2015[\"m\" /* orange */]['700'], colors_es2015[\"m\" /* orange */]['500'], colors_es2015[\"m\" /* orange */]['300'], colors_es2015[\"m\" /* orange */]['100']], [colors_es2015[\"f\" /* deepOrange */]['900'], colors_es2015[\"f\" /* deepOrange */]['700'], colors_es2015[\"f\" /* deepOrange */]['500'], colors_es2015[\"f\" /* deepOrange */]['300'], colors_es2015[\"f\" /* deepOrange */]['100']], [colors_es2015[\"d\" /* brown */]['900'], colors_es2015[\"d\" /* brown */]['700'], colors_es2015[\"d\" /* brown */]['500'], colors_es2015[\"d\" /* brown */]['300'], colors_es2015[\"d\" /* brown */]['100']], [colors_es2015[\"c\" /* blueGrey */]['900'], colors_es2015[\"c\" /* blueGrey */]['700'], colors_es2015[\"c\" /* blueGrey */]['500'], colors_es2015[\"c\" /* blueGrey */]['300'], colors_es2015[\"c\" /* blueGrey */]['100']], ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF']],\n  styles: {}\n};\n/* harmony default export */ var swatches_Swatches = (common_ColorWrap(Swatches_Swatches));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/twitter/Twitter.js\n\n\n\n\n\n\n\nvar Twitter_Twitter = function Twitter(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '0 solid rgba(0,0,0,0.25)',\n        boxShadow: '0 1px 4px rgba(0,0,0,0.25)',\n        borderRadius: '4px',\n        position: 'relative'\n      },\n      body: {\n        padding: '15px 9px 9px 15px'\n      },\n      label: {\n        fontSize: '18px',\n        color: '#fff'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent #fff transparent',\n        position: 'absolute'\n      },\n      triangleShadow: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent rgba(0,0,0,.1) transparent',\n        position: 'absolute'\n      },\n      hash: {\n        background: '#F0F0F0',\n        height: '30px',\n        width: '30px',\n        borderRadius: '4px 0 0 4px',\n        \"float\": 'left',\n        color: '#98A1A4',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      input: {\n        width: '100px',\n        fontSize: '14px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '28px',\n        boxShadow: 'inset 0 0 0 1px #F0F0F0',\n        boxSizing: 'content-box',\n        borderRadius: '0 4px 4px 0',\n        \"float\": 'left',\n        paddingLeft: '8px'\n      },\n      swatch: {\n        width: '30px',\n        height: '30px',\n        \"float\": 'left',\n        borderRadius: '4px',\n        margin: '0 6px 6px 0'\n      },\n      clear: {\n        clear: 'both'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-10px',\n        left: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        left: '12px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-10px',\n        right: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        right: '12px'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right'\n  });\n\n  var handleChange = function handleChange(hexcode, e) {\n    color_isValidHex(hexcode) && onChange({\n      hex: hexcode,\n      source: 'hex'\n    }, e);\n  };\n\n  return react_default.a.createElement('div', {\n    style: styles.card,\n    className: 'twitter-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.triangleShadow\n  }), react_default.a.createElement('div', {\n    style: styles.triangle\n  }), react_default.a.createElement('div', {\n    style: styles.body\n  }, Object(map[\"a\" /* default */])(colors, function (c, i) {\n    return react_default.a.createElement(common_Swatch, {\n      key: i,\n      color: c,\n      hex: c,\n      style: styles.swatch,\n      onClick: handleChange,\n      onHover: onSwatchHover,\n      focusStyle: {\n        boxShadow: '0 0 4px ' + c\n      }\n    });\n  }), react_default.a.createElement('div', {\n    style: styles.hash\n  }, '#'), react_default.a.createElement(common_EditableInput, {\n    label: null,\n    style: {\n      input: styles.input\n    },\n    value: hex.replace('#', ''),\n    onChange: handleChange\n  }), react_default.a.createElement('div', {\n    style: styles.clear\n  })));\n};\nTwitter_Twitter.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  triangle: prop_types_default.a.oneOf(['hide', 'top-left', 'top-right']),\n  colors: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  styles: prop_types_default.a.object\n};\nTwitter_Twitter.defaultProps = {\n  width: 276,\n  colors: ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'],\n  triangle: 'top-left',\n  styles: {}\n};\n/* harmony default export */ var twitter_Twitter = (common_ColorWrap(Twitter_Twitter));\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GooglePointerCircle.js\n\n\n\nvar GooglePointerCircle_GooglePointerCircle = function GooglePointerCircle(props) {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        border: '2px #fff solid',\n        transform: 'translate(-12px, -13px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', ' + Math.round(props.hsl.s * 100) + '%, ' + Math.round(props.hsl.l * 100) + '%)'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\nGooglePointerCircle_GooglePointerCircle.propTypes = {\n  hsl: prop_types_default.a.shape({\n    h: prop_types_default.a.number,\n    s: prop_types_default.a.number,\n    l: prop_types_default.a.number,\n    a: prop_types_default.a.number\n  })\n};\nGooglePointerCircle_GooglePointerCircle.defaultProps = {\n  hsl: {\n    a: 1,\n    h: 249.94,\n    l: 0.2,\n    s: 0.50\n  }\n};\n/* harmony default export */ var google_GooglePointerCircle = (GooglePointerCircle_GooglePointerCircle);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GooglePointer.js\n\n\n\nvar GooglePointer_GooglePointer = function GooglePointer(props) {\n  var styles = lib_default()({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        transform: 'translate(-10px, -7px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', 100%, 50%)',\n        border: '2px white solid'\n      }\n    }\n  });\n  return react_default.a.createElement('div', {\n    style: styles.picker\n  });\n};\nGooglePointer_GooglePointer.propTypes = {\n  hsl: prop_types_default.a.shape({\n    h: prop_types_default.a.number,\n    s: prop_types_default.a.number,\n    l: prop_types_default.a.number,\n    a: prop_types_default.a.number\n  })\n};\nGooglePointer_GooglePointer.defaultProps = {\n  hsl: {\n    a: 1,\n    h: 249.94,\n    l: 0.2,\n    s: 0.50\n  }\n};\n/* harmony default export */ var google_GooglePointer = (GooglePointer_GooglePointer);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/GoogleFields.js\n\n\n\n\nvar GoogleFields_GoogleFields = function GoogleFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      hsv = _ref.hsv;\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color_isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.rgb) {\n      var values = data.rgb.split(',');\n      color_isvalidColorString(data.rgb, 'rgb') && onChange({\n        r: values[0],\n        g: values[1],\n        b: values[2],\n        a: 1,\n        source: 'rgb'\n      }, e);\n    } else if (data.hsv) {\n      var _values = data.hsv.split(',');\n\n      if (color_isvalidColorString(data.hsv, 'hsv')) {\n        _values[2] = _values[2].replace('%', '');\n        _values[1] = _values[1].replace('%', '');\n        _values[0] = _values[0].replace('\xb0', '');\n\n        if (_values[1] == 1) {\n          _values[1] = 0.01;\n        } else if (_values[2] == 1) {\n          _values[2] = 0.01;\n        }\n\n        onChange({\n          h: Number(_values[0]),\n          s: Number(_values[1]),\n          v: Number(_values[2]),\n          source: 'hsv'\n        }, e);\n      }\n    } else if (data.hsl) {\n      var _values2 = data.hsl.split(',');\n\n      if (color_isvalidColorString(data.hsl, 'hsl')) {\n        _values2[2] = _values2[2].replace('%', '');\n        _values2[1] = _values2[1].replace('%', '');\n        _values2[0] = _values2[0].replace('\xb0', '');\n\n        if (hsvValue[1] == 1) {\n          hsvValue[1] = 0.01;\n        } else if (hsvValue[2] == 1) {\n          hsvValue[2] = 0.01;\n        }\n\n        onChange({\n          h: Number(_values2[0]),\n          s: Number(_values2[1]),\n          v: Number(_values2[2]),\n          source: 'hsl'\n        }, e);\n      }\n    }\n  };\n\n  var styles = lib_default()({\n    'default': {\n      wrap: {\n        display: 'flex',\n        height: '100px',\n        marginTop: '4px'\n      },\n      fields: {\n        width: '100%'\n      },\n      column: {\n        paddingTop: '10px',\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      \"double\": {\n        padding: '0px 4.4px',\n        boxSizing: 'border-box'\n      },\n      input: {\n        width: '100%',\n        height: '38px',\n        boxSizing: 'border-box',\n        padding: '4px 10% 3px',\n        textAlign: 'center',\n        border: '1px solid #dadce0',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      input2: {\n        height: '38px',\n        width: '100%',\n        border: '1px solid #dadce0',\n        boxSizing: 'border-box',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        paddingLeft: '10px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label: {\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '35px',\n        top: '-6px',\n        left: '0',\n        right: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label2: {\n        left: '10px',\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '32px',\n        top: '-6px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      single: {\n        flexGrow: '1',\n        margin: '0px 4.4px'\n      }\n    }\n  });\n  var rgbValue = rgb.r + ', ' + rgb.g + ', ' + rgb.b;\n  var hslValue = Math.round(hsl.h) + '\\xB0, ' + Math.round(hsl.s * 100) + '%, ' + Math.round(hsl.l * 100) + '%';\n  var hsvValue = Math.round(hsv.h) + '\\xB0, ' + Math.round(hsv.s * 100) + '%, ' + Math.round(hsv.v * 100) + '%';\n  return react_default.a.createElement('div', {\n    style: styles.wrap,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.fields\n  }, react_default.a.createElement('div', {\n    style: styles[\"double\"]\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input,\n      label: styles.label\n    },\n    label: 'hex',\n    value: hex,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.column\n  }, react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'rgb',\n    value: rgbValue,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'hsv',\n    value: hsvValue,\n    onChange: handleChange\n  })), react_default.a.createElement('div', {\n    style: styles.single\n  }, react_default.a.createElement(common_EditableInput, {\n    style: {\n      input: styles.input2,\n      label: styles.label2\n    },\n    label: 'hsl',\n    value: hslValue,\n    onChange: handleChange\n  })))));\n};\n/* harmony default export */ var google_GoogleFields = (GoogleFields_GoogleFields);\n// CONCATENATED MODULE: ./node_modules/react-color/es/components/google/Google.js\n\n\n\n\n\n\n\n\nvar Google_Google = function Google(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      header = _ref.header,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n  var styles = lib_default()(Object(merge[\"a\" /* default */])({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        border: '1px solid #dfe1e5',\n        boxSizing: 'initial',\n        display: 'flex',\n        flexWrap: 'wrap',\n        borderRadius: '8px 8px 0px 0px'\n      },\n      head: {\n        height: '57px',\n        width: '100%',\n        paddingTop: '16px',\n        paddingBottom: '16px',\n        paddingLeft: '16px',\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        fontFamily: 'Roboto-Regular,HelveticaNeue,Arial,sans-serif'\n      },\n      saturation: {\n        width: '70%',\n        padding: '0px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      swatch: {\n        width: '30%',\n        height: '228px',\n        padding: '0px',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 1)',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      body: {\n        margin: 'auto',\n        width: '95%'\n      },\n      controls: {\n        display: 'flex',\n        boxSizing: 'border-box',\n        height: '52px',\n        paddingTop: '22px'\n      },\n      color: {\n        width: '32px'\n      },\n      hue: {\n        height: '8px',\n        position: 'relative',\n        margin: '0px 16px 0px 16px',\n        width: '100%'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n  return react_default.a.createElement('div', {\n    style: styles.picker,\n    className: 'google-picker ' + className\n  }, react_default.a.createElement('div', {\n    style: styles.head\n  }, header), react_default.a.createElement('div', {\n    style: styles.swatch\n  }), react_default.a.createElement('div', {\n    style: styles.saturation\n  }, react_default.a.createElement(common_Saturation, {\n    hsl: hsl,\n    hsv: hsv,\n    pointer: google_GooglePointerCircle,\n    onChange: onChange\n  })), react_default.a.createElement('div', {\n    style: styles.body\n  }, react_default.a.createElement('div', {\n    style: styles.controls,\n    className: 'flexbox-fix'\n  }, react_default.a.createElement('div', {\n    style: styles.hue\n  }, react_default.a.createElement(common_Hue, {\n    style: styles.Hue,\n    hsl: hsl,\n    radius: '4px',\n    pointer: google_GooglePointer,\n    onChange: onChange\n  }))), react_default.a.createElement(google_GoogleFields, {\n    rgb: rgb,\n    hsl: hsl,\n    hex: hex,\n    hsv: hsv,\n    onChange: onChange\n  })));\n};\nGoogle_Google.propTypes = {\n  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),\n  styles: prop_types_default.a.object,\n  header: prop_types_default.a.string\n};\nGoogle_Google.defaultProps = {\n  width: 652,\n  styles: {},\n  header: 'Color picker'\n};\n/* harmony default export */ var google_Google = (common_ColorWrap(Google_Google));\n// CONCATENATED MODULE: ./node_modules/react-color/es/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15kH\n")},"55Ip":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export BrowserRouter */\n/* unused harmony export HashRouter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Link; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return NavLink; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("YS25");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("zLVn");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("9R94");\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createBrowserHistory */ "a"])(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createHashHistory */ "b"])(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\n\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createLocation */ "c"])(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55Ip\n')},"6JX1":function(module,exports,__webpack_require__){eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(\"kM82\")) : undefined;\n})(this, function (exports, React) {\n  'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function get() {\n              return e[k];\n            }\n          });\n        }\n      });\n    }\n\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n\n    _setPrototypeOf(subClass, superClass);\n  }\n\n  var changedArray = function changedArray(a, b) {\n    if (a === void 0) {\n      a = [];\n    }\n\n    if (b === void 0) {\n      b = [];\n    }\n\n    return a.length !== b.length || a.some(function (item, index) {\n      return !Object.is(item, b[index]);\n    });\n  };\n\n  var initialState = {\n    error: null\n  };\n\n  var ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n    _inheritsLoose(ErrorBoundary, _React$Component);\n\n    function ErrorBoundary() {\n      var _this;\n\n      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n        _args[_key] = arguments[_key];\n      }\n\n      _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n      _this.state = initialState;\n\n      _this.resetErrorBoundary = function () {\n        var _this$props;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n        _this.reset();\n      };\n\n      return _this;\n    }\n\n    ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n      return {\n        error: error\n      };\n    };\n\n    var _proto = ErrorBoundary.prototype;\n\n    _proto.reset = function reset() {\n      this.setState(initialState);\n    };\n\n    _proto.componentDidCatch = function componentDidCatch(error, info) {\n      var _this$props$onError, _this$props2;\n\n      (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      var error = this.state.error;\n      var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n      // happens to *also* be in the resetKeys array, we'd end up resetting\n      // the error boundary immediately. This would likely trigger a second\n      // error to be thrown.\n      // So we make sure that we don't check the resetKeys on the first call\n      // of cDU after the error is set\n\n      if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n        var _this$props$onResetKe, _this$props3;\n\n        (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n        this.reset();\n      }\n    };\n\n    _proto.render = function render() {\n      var error = this.state.error;\n      var _this$props4 = this.props,\n          fallbackRender = _this$props4.fallbackRender,\n          FallbackComponent = _this$props4.FallbackComponent,\n          fallback = _this$props4.fallback;\n\n      if (error !== null) {\n        var _props = {\n          error: error,\n          resetErrorBoundary: this.resetErrorBoundary\n        };\n\n        if ( /*#__PURE__*/React__namespace.isValidElement(fallback)) {\n          return fallback;\n        } else if (typeof fallbackRender === 'function') {\n          return fallbackRender(_props);\n        } else if (FallbackComponent) {\n          return /*#__PURE__*/React__namespace.createElement(FallbackComponent, _props);\n        } else {\n          throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n        }\n      }\n\n      return this.props.children;\n    };\n\n    return ErrorBoundary;\n  }(React__namespace.Component);\n\n  function withErrorBoundary(Component, errorBoundaryProps) {\n    var Wrapped = function Wrapped(props) {\n      return /*#__PURE__*/React__namespace.createElement(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/React__namespace.createElement(Component, props));\n    }; // Format for display in DevTools\n\n\n    var name = Component.displayName || Component.name || 'Unknown';\n    Wrapped.displayName = \"withErrorBoundary(\" + name + \")\";\n    return Wrapped;\n  }\n\n  function useErrorHandler(givenError) {\n    var _React$useState = React__namespace.useState(null),\n        error = _React$useState[0],\n        setError = _React$useState[1];\n\n    if (givenError != null) throw givenError;\n    if (error != null) throw error;\n    return setError;\n  }\n  /*\n  eslint\n    @typescript-eslint/sort-type-union-intersection-members: \"off\",\n    @typescript-eslint/no-throw-literal: \"off\",\n    @typescript-eslint/prefer-nullish-coalescing: \"off\"\n  */\n\n\n  exports.ErrorBoundary = ErrorBoundary;\n  exports.useErrorHandler = useErrorHandler;\n  exports.withErrorBoundary = withErrorBoundary;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6JX1\n")},"9iN/":function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = "function" === typeof Symbol && Symbol["for"],\n    c = b ? Symbol["for"]("react.element") : 60103,\n    d = b ? Symbol["for"]("react.portal") : 60106,\n    e = b ? Symbol["for"]("react.fragment") : 60107,\n    f = b ? Symbol["for"]("react.strict_mode") : 60108,\n    g = b ? Symbol["for"]("react.profiler") : 60114,\n    h = b ? Symbol["for"]("react.provider") : 60109,\n    k = b ? Symbol["for"]("react.context") : 60110,\n    l = b ? Symbol["for"]("react.async_mode") : 60111,\n    m = b ? Symbol["for"]("react.concurrent_mode") : 60111,\n    n = b ? Symbol["for"]("react.forward_ref") : 60112,\n    p = b ? Symbol["for"]("react.suspense") : 60113,\n    q = b ? Symbol["for"]("react.suspense_list") : 60120,\n    r = b ? Symbol["for"]("react.memo") : 60115,\n    t = b ? Symbol["for"]("react.lazy") : 60116,\n    v = b ? Symbol["for"]("react.block") : 60121,\n    w = b ? Symbol["for"]("react.fundamental") : 60117,\n    x = b ? Symbol["for"]("react.responder") : 60118,\n    y = b ? Symbol["for"]("react.scope") : 60119;\n\nfunction z(a) {\n  if ("object" === typeof a && null !== a) {\n    var u = a.$$typeof;\n\n    switch (u) {\n      case c:\n        switch (a = a.type, a) {\n          case l:\n          case m:\n          case e:\n          case g:\n          case f:\n          case p:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case n:\n              case t:\n              case r:\n              case h:\n                return a;\n\n              default:\n                return u;\n            }\n\n        }\n\n      case d:\n        return u;\n    }\n  }\n}\n\nfunction A(a) {\n  return z(a) === m;\n}\n\nexports.AsyncMode = l;\nexports.ConcurrentMode = m;\nexports.ContextConsumer = k;\nexports.ContextProvider = h;\nexports.Element = c;\nexports.ForwardRef = n;\nexports.Fragment = e;\nexports.Lazy = t;\nexports.Memo = r;\nexports.Portal = d;\nexports.Profiler = g;\nexports.StrictMode = f;\nexports.Suspense = p;\n\nexports.isAsyncMode = function (a) {\n  return A(a) || z(a) === l;\n};\n\nexports.isConcurrentMode = A;\n\nexports.isContextConsumer = function (a) {\n  return z(a) === k;\n};\n\nexports.isContextProvider = function (a) {\n  return z(a) === h;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === c;\n};\n\nexports.isForwardRef = function (a) {\n  return z(a) === n;\n};\n\nexports.isFragment = function (a) {\n  return z(a) === e;\n};\n\nexports.isLazy = function (a) {\n  return z(a) === t;\n};\n\nexports.isMemo = function (a) {\n  return z(a) === r;\n};\n\nexports.isPortal = function (a) {\n  return z(a) === d;\n};\n\nexports.isProfiler = function (a) {\n  return z(a) === g;\n};\n\nexports.isStrictMode = function (a) {\n  return z(a) === f;\n};\n\nexports.isSuspense = function (a) {\n  return z(a) === p;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\n\nexports.typeOf = z;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9iN/\n')},B5Mt:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar loopable = function loopable(i, length) {\n  var props = {};\n\n  var setProp = function setProp(name) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    props[name] = value;\n  };\n\n  i === 0 && setProp('first-child');\n  i === length - 1 && setProp('last-child');\n  (i === 0 || i % 2 === 0) && setProp('even');\n  Math.abs(i % 2) === 1 && setProp('odd');\n  setProp('nth-child', i);\n  return props;\n};\n\nexports[\"default\"] = loopable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2xvb3AuanM/MDc5MyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvb3BhYmxlIiwiaSIsImxlbmd0aCIsInByb3BzIiwic2V0UHJvcCIsIm5hbWUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFO0FBRG9DLENBQTdDOztBQUdBLElBQUlDLFFBQVEsR0FBRyxTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQkMsTUFBckIsRUFBNkI7QUFDMUMsTUFBSUMsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsTUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCO0FBQ25DLFFBQUlOLEtBQUssR0FBR08sU0FBUyxDQUFDSixNQUFWLEdBQW1CLENBQW5CLElBQXdCSSxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCQyxTQUF6QyxHQUFxREQsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7QUFFQUgsU0FBSyxDQUFDRSxJQUFELENBQUwsR0FBY04sS0FBZDtBQUNELEdBSkQ7O0FBTUFFLEdBQUMsS0FBSyxDQUFOLElBQVdHLE9BQU8sQ0FBQyxhQUFELENBQWxCO0FBQ0FILEdBQUMsS0FBS0MsTUFBTSxHQUFHLENBQWYsSUFBb0JFLE9BQU8sQ0FBQyxZQUFELENBQTNCO0FBQ0EsR0FBQ0gsQ0FBQyxLQUFLLENBQU4sSUFBV0EsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUF0QixLQUE0QkcsT0FBTyxDQUFDLE1BQUQsQ0FBbkM7QUFDQUksTUFBSSxDQUFDQyxHQUFMLENBQVNSLENBQUMsR0FBRyxDQUFiLE1BQW9CLENBQXBCLElBQXlCRyxPQUFPLENBQUMsS0FBRCxDQUFoQztBQUNBQSxTQUFPLENBQUMsV0FBRCxFQUFjSCxDQUFkLENBQVA7QUFFQSxTQUFPRSxLQUFQO0FBQ0QsQ0FmRDs7QUFpQkFMLE9BQU8sV0FBUCxHQUFrQkUsUUFBbEIiLCJmaWxlIjoiQjVNdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsb29wYWJsZSA9IGZ1bmN0aW9uIGxvb3BhYmxlKGksIGxlbmd0aCkge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHNldFByb3AgPSBmdW5jdGlvbiBzZXRQcm9wKG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBwcm9wc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIGkgPT09IDAgJiYgc2V0UHJvcCgnZmlyc3QtY2hpbGQnKTtcbiAgaSA9PT0gbGVuZ3RoIC0gMSAmJiBzZXRQcm9wKCdsYXN0LWNoaWxkJyk7XG4gIChpID09PSAwIHx8IGkgJSAyID09PSAwKSAmJiBzZXRQcm9wKCdldmVuJyk7XG4gIE1hdGguYWJzKGkgJSAyKSA9PT0gMSAmJiBzZXRQcm9wKCdvZGQnKTtcbiAgc2V0UHJvcCgnbnRoLWNoaWxkJywgaSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbG9vcGFibGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///B5Mt\n")},FUNW:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof global !== \'undefined\' ? global : {};\n\nfunction getUniqueId() {\n  var key = \'__global_unique_id__\';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = \'__create-react-context-\' + getUniqueId() + \'__\';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === \'function\' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;\n/* harmony default export */ __webpack_exports__["a"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("IyRk")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///FUNW\n')},Gytx:function(module,exports){eval('//\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A\'s keys different from B.\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valueA !== valueB) {\n      return false;\n    }\n  }\n\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzPzFiMmIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwiY29tcGFyZSIsImNvbXBhcmVDb250ZXh0IiwicmV0IiwiY2FsbCIsImtleXNBIiwiT2JqZWN0Iiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwiYkhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiaW5kIiwiaWR4Iiwia2V5IiwidmFsdWVBIiwidmFsdWVCIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQ0MsY0FBM0MsRUFBMkQ7QUFDMUUsTUFBSUMsR0FBRyxHQUFHRixPQUFPLEdBQUdBLE9BQU8sQ0FBQ0csSUFBUixDQUFhRixjQUFiLEVBQTZCSCxJQUE3QixFQUFtQ0MsSUFBbkMsQ0FBSCxHQUE4QyxLQUFLLENBQXBFOztBQUVBLE1BQUlHLEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0FBQ2xCLFdBQU8sQ0FBQyxDQUFDQSxHQUFUO0FBQ0Q7O0FBRUQsTUFBSUosSUFBSSxLQUFLQyxJQUFiLEVBQW1CO0FBQ2pCLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUksT0FBT0QsSUFBUCxLQUFnQixRQUFoQixJQUE0QixDQUFDQSxJQUE3QixJQUFxQyxPQUFPQyxJQUFQLEtBQWdCLFFBQXJELElBQWlFLENBQUNBLElBQXRFLEVBQTRFO0FBQzFFLFdBQU8sS0FBUDtBQUNEOztBQUVELE1BQUlLLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlSLElBQVosQ0FBWjtBQUNBLE1BQUlTLEtBQUssR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlQLElBQVosQ0FBWjs7QUFFQSxNQUFJSyxLQUFLLENBQUNJLE1BQU4sS0FBaUJELEtBQUssQ0FBQ0MsTUFBM0IsRUFBbUM7QUFDakMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsZUFBZSxHQUFHSixNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsSUFBckMsQ0FBdEIsQ0F0QjBFLENBd0IxRTs7QUFDQSxPQUFLLElBQUljLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdULEtBQUssQ0FBQ0ksTUFBOUIsRUFBc0NLLEdBQUcsRUFBekMsRUFBNkM7QUFDM0MsUUFBSUMsR0FBRyxHQUFHVixLQUFLLENBQUNTLEdBQUQsQ0FBZjs7QUFFQSxRQUFJLENBQUNKLGVBQWUsQ0FBQ0ssR0FBRCxDQUFwQixFQUEyQjtBQUN6QixhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJQyxNQUFNLEdBQUdqQixJQUFJLENBQUNnQixHQUFELENBQWpCO0FBQ0EsUUFBSUUsTUFBTSxHQUFHakIsSUFBSSxDQUFDZSxHQUFELENBQWpCO0FBRUFaLE9BQUcsR0FBR0YsT0FBTyxHQUFHQSxPQUFPLENBQUNHLElBQVIsQ0FBYUYsY0FBYixFQUE2QmMsTUFBN0IsRUFBcUNDLE1BQXJDLEVBQTZDRixHQUE3QyxDQUFILEdBQXVELEtBQUssQ0FBekU7O0FBRUEsUUFBSVosR0FBRyxLQUFLLEtBQVIsSUFBa0JBLEdBQUcsS0FBSyxLQUFLLENBQWIsSUFBa0JhLE1BQU0sS0FBS0MsTUFBbkQsRUFBNEQ7QUFDMUQsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCxDQTNDRCIsImZpbGUiOiJHeXR4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///Gytx\n')},KfSR:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.autoprefix = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar transforms = {\n  borderRadius: function borderRadius(value) {\n    return {\n      msBorderRadius: value,\n      MozBorderRadius: value,\n      OBorderRadius: value,\n      WebkitBorderRadius: value,\n      borderRadius: value\n    };\n  },\n  boxShadow: function boxShadow(value) {\n    return {\n      msBoxShadow: value,\n      MozBoxShadow: value,\n      OBoxShadow: value,\n      WebkitBoxShadow: value,\n      boxShadow: value\n    };\n  },\n  userSelect: function userSelect(value) {\n    return {\n      WebkitTouchCallout: value,\n      KhtmlUserSelect: value,\n      MozUserSelect: value,\n      msUserSelect: value,\n      WebkitUserSelect: value,\n      userSelect: value\n    };\n  },\n  flex: function flex(value) {\n    return {\n      WebkitBoxFlex: value,\n      MozBoxFlex: value,\n      WebkitFlex: value,\n      msFlex: value,\n      flex: value\n    };\n  },\n  flexBasis: function flexBasis(value) {\n    return {\n      WebkitFlexBasis: value,\n      flexBasis: value\n    };\n  },\n  justifyContent: function justifyContent(value) {\n    return {\n      WebkitJustifyContent: value,\n      justifyContent: value\n    };\n  },\n  transition: function transition(value) {\n    return {\n      msTransition: value,\n      MozTransition: value,\n      OTransition: value,\n      WebkitTransition: value,\n      transition: value\n    };\n  },\n  transform: function transform(value) {\n    return {\n      msTransform: value,\n      MozTransform: value,\n      OTransform: value,\n      WebkitTransform: value,\n      transform: value\n    };\n  },\n  absolute: function absolute(value) {\n    var direction = value && value.split(\' \');\n    return {\n      position: \'absolute\',\n      top: direction && direction[0],\n      right: direction && direction[1],\n      bottom: direction && direction[2],\n      left: direction && direction[3]\n    };\n  },\n  extend: function extend(name, otherElementStyles) {\n    var otherStyle = otherElementStyles[name];\n\n    if (otherStyle) {\n      return otherStyle;\n    }\n\n    return {\n      \'extend\': name\n    };\n  }\n};\n\nvar autoprefix = exports.autoprefix = function autoprefix(elements) {\n  var prefixed = {};\n  (0, _forOwn3["default"])(elements, function (styles, element) {\n    var expanded = {};\n    (0, _forOwn3["default"])(styles, function (value, key) {\n      var transform = transforms[key];\n\n      if (transform) {\n        expanded = _extends({}, expanded, transform(value));\n      } else {\n        expanded[key] = value;\n      }\n    });\n    prefixed[element] = expanded;\n  });\n  return prefixed;\n};\n\nexports["default"] = autoprefix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///KfSR\n')},TOwV:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("qT12");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxNQUFELENBQXhCO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IlRPd1YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///TOwV\n')},Ty5D:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MemoryRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Prompt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Redirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return Route; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return StaticRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return Switch; });\n/* unused harmony export __HistoryContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return context; });\n/* unused harmony export generatePath */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return matchPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return useHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return useLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return useParams; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return useRouteMatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return withRouter; });\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("YS25");\n/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("FUNW");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("9R94");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("wx14");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("vRGJ");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("mSXw");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("zLVn");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("2mql");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\n // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext = /*#__PURE__*/createNamedContext("Router-History"); // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar context = /*#__PURE__*/createNamedContext$1("Router");\n/**\n * The public API for putting history on context.\n */\n\nvar Router = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\n\nvar MemoryRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createMemoryHistory */ "d"])(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nvar Lifecycle = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default.a.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n/**\n * The public API for navigating programmatically with a component.\n */\n\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(prevProps.to);\n\n        if (!Object(history__WEBPACK_IMPORTED_MODULE_2__[/* locationsAreEqual */ "f"])(prevLocation, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? undefined : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? undefined : children(props) : children : component ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? undefined : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createPath */ "e"])(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n     false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false);\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: stripBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.forEach(_this.props.children, function (child) {\n        if (match == null && react__WEBPACK_IMPORTED_MODULE_1___default.a.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? react__WEBPACK_IMPORTED_MODULE_1___default.a.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * A public higher-order component to access the imperative API\n */\n\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(props, ["wrappedComponentRef"]);\n\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default()(C, Component);\n}\n\nvar useContext = react__WEBPACK_IMPORTED_MODULE_1___default.a.useContext;\n\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\n\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(context).location;\n}\n\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\n\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, key, global; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Ty5D\n')},"V/vL":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRoutes", function() { return matchRoutes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderRoutes", function() { return renderRoutes; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("wx14");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction matchRoutes(routes, pathname,\n/*not public API*/\nbranch) {\n  if (branch === void 0) {\n    branch = [];\n  }\n\n  routes.some(function (route) {\n    var match = route.path ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"].computeRootMatch(pathname); // use default "root" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, branch);\n      }\n    }\n\n    return match;\n  });\n  return branch;\n}\n\nfunction renderRoutes(routes, extraProps, switchProps) {\n  if (extraProps === void 0) {\n    extraProps = {};\n  }\n\n  if (switchProps === void 0) {\n    switchProps = {};\n  }\n\n  return routes ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Switch */ "g"], switchProps, routes.map(function (route, i) {\n    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Route */ "d"], {\n      key: route.key || i,\n      path: route.path,\n      exact: route.exact,\n      strict: route.strict,\n      render: function render(props) {\n        return route.render ? route.render(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, {}, extraProps, {\n          route: route\n        })) : react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(route.component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, extraProps, {\n          route: route\n        }));\n      }\n    });\n  })) : null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9tYXRjaFJvdXRlcy5qcz8yOWM3Iiwid2VicGFjazovLy8uLi9tb2R1bGVzL3JlbmRlclJvdXRlcy5qcz9hYTEwIl0sIm5hbWVzIjpbImJyYW5jaCIsInJvdXRlcyIsIm1hdGNoIiwicm91dGUiLCJtYXRjaFBhdGgiLCJSb3V0ZXIiLCJtYXRjaFJvdXRlcyIsImV4dHJhUHJvcHMiLCJzd2l0Y2hQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFBQSxRQUF1RTtNQUFiQSxNQUFhLFcsRUFBQTtBQUFiQSxVQUFhLEdBQUosRUFBVEE7OztBQUN4REMsUUFBTSxDQUFOQSxLQUFZLGlCQUFTO1FBQ2JDLEtBQUssR0FBR0MsS0FBSyxDQUFMQSxPQUNWQyxzRUFBUyxXQURDRCxLQUNELENBRENBLEdBRVZILE1BQU0sQ0FBTkEsU0FDRUEsTUFBTSxDQUFDQSxNQUFNLENBQU5BLFNBQVBBLENBQU0sQ0FBTkEsQ0FERkE7QUFBQUEsTUFFRUssMkRBQU0sQ0FBTkEsaUJBTGEsUUFLYkEsQyxDQUxhOztRQU9uQixLLEVBQVc7QUFDVEwsWUFBTSxDQUFOQSxLQUFZO0FBQUVHLGFBQUssRUFBUDtBQUFTRCxhQUFLLEVBQUxBO0FBQVQsT0FBWkY7O1VBRUlHLEtBQUssQ0FBVCxNLEVBQWtCO0FBQ2hCRyxtQkFBVyxDQUFDSCxLQUFLLENBQU4sa0JBQVhHLE1BQVcsQ0FBWEE7Ozs7V0FJSixLO0FBZkZMO1NBa0JBLE07OztBQ2xCRix1REFBaUU7TUFBbkNNLFVBQW1DLFcsRUFBQTtBQUFuQ0EsY0FBbUMsR0FBdEIsRUFBYkE7OztNQUFpQkMsV0FBa0IsVyxFQUFBO0FBQWxCQSxlQUFrQixHQUFKLEVBQWRBOzs7U0FDdENQLE1BQU0sR0FDWCxxSUFDRyxNQUFNLENBQU4sSUFBVztXQUNWO0FBQ0UsU0FBRyxFQUFFRSxLQUFLLENBQUxBLE9BRFA7QUFFRSxVQUFJLEVBQUVBLEtBQUssQ0FGYjtBQUdFLFdBQUssRUFBRUEsS0FBSyxDQUhkO0FBSUUsWUFBTSxFQUFFQSxLQUFLLENBSmY7QUFLRSxZQUFNLEVBQUUsdUJBQUs7ZUFDWCxLQUFLLENBQUwsU0FDRUEsS0FBSyxDQUFMQTtBQUF3Q0EsZUFBSyxFQUFFQTtBQUEvQ0EsV0FERixHQUdFLDJEQUFDLEtBQUQ7QUFBNEMsZUFBSyxFQUFFQTtBQUFuRCxXOztBQVROLE07QUFITyxHQUVSLENBREgsQ0FEVyxHQUFiLEkiLCJmaWxlIjoiVi92TC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hdGNoUGF0aCwgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIHBhdGhuYW1lLCAvKm5vdCBwdWJsaWMgQVBJKi8gYnJhbmNoID0gW10pIHtcbiAgcm91dGVzLnNvbWUocm91dGUgPT4ge1xuICAgIGNvbnN0IG1hdGNoID0gcm91dGUucGF0aFxuICAgICAgPyBtYXRjaFBhdGgocGF0aG5hbWUsIHJvdXRlKVxuICAgICAgOiBicmFuY2gubGVuZ3RoXG4gICAgICAgID8gYnJhbmNoW2JyYW5jaC5sZW5ndGggLSAxXS5tYXRjaCAvLyB1c2UgcGFyZW50IG1hdGNoXG4gICAgICAgIDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpOyAvLyB1c2UgZGVmYXVsdCBcInJvb3RcIiBtYXRjaFxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBicmFuY2gucHVzaCh7IHJvdXRlLCBtYXRjaCB9KTtcblxuICAgICAgaWYgKHJvdXRlLnJvdXRlcykge1xuICAgICAgICBtYXRjaFJvdXRlcyhyb3V0ZS5yb3V0ZXMsIHBhdGhuYW1lLCBicmFuY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG5cbiAgcmV0dXJuIGJyYW5jaDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hSb3V0ZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTd2l0Y2gsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiByZW5kZXJSb3V0ZXMocm91dGVzLCBleHRyYVByb3BzID0ge30sIHN3aXRjaFByb3BzID0ge30pIHtcbiAgcmV0dXJuIHJvdXRlcyA/IChcbiAgICA8U3dpdGNoIHsuLi5zd2l0Y2hQcm9wc30+XG4gICAgICB7cm91dGVzLm1hcCgocm91dGUsIGkpID0+IChcbiAgICAgICAgPFJvdXRlXG4gICAgICAgICAga2V5PXtyb3V0ZS5rZXkgfHwgaX1cbiAgICAgICAgICBwYXRoPXtyb3V0ZS5wYXRofVxuICAgICAgICAgIGV4YWN0PXtyb3V0ZS5leGFjdH1cbiAgICAgICAgICBzdHJpY3Q9e3JvdXRlLnN0cmljdH1cbiAgICAgICAgICByZW5kZXI9e3Byb3BzID0+XG4gICAgICAgICAgICByb3V0ZS5yZW5kZXIgPyAoXG4gICAgICAgICAgICAgIHJvdXRlLnJlbmRlcih7IC4uLnByb3BzLCAuLi5leHRyYVByb3BzLCByb3V0ZTogcm91dGUgfSlcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxyb3V0ZS5jb21wb25lbnQgey4uLnByb3BzfSB7Li4uZXh0cmFQcm9wc30gcm91dGU9e3JvdXRlfSAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvU3dpdGNoPlxuICApIDogbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyUm91dGVzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///V/vL\n')},VYtm:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.hover = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar hover = exports.hover = function hover(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Hover, _React$Component);\n\n    function Hover() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Hover);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        hover: false\n      }, _this.handleMouseOver = function () {\n        return _this.setState({\n          hover: true\n        });\n      }, _this.handleMouseOut = function () {\n        return _this.setState({\n          hover: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseOver: _this.handleMouseOver,\n          onMouseOut: _this.handleMouseOut\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Hover;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = hover;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///VYtm\n')},W3HW:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.flattenNames = undefined;\n\nvar _isString2 = __webpack_require__("4qC0");\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _isPlainObject2 = __webpack_require__("YO3V");\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _map2 = __webpack_require__("3WF5");\n\nvar _map3 = _interopRequireDefault(_map2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar flattenNames = exports.flattenNames = function flattenNames() {\n  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var names = [];\n  (0, _map3["default"])(things, function (thing) {\n    if (Array.isArray(thing)) {\n      flattenNames(thing).map(function (name) {\n        return names.push(name);\n      });\n    } else if ((0, _isPlainObject3["default"])(thing)) {\n      (0, _forOwn3["default"])(thing, function (value, key) {\n        value === true && names.push(key);\n        names.push(key + \'-\' + value);\n      });\n    } else if ((0, _isString3["default"])(thing)) {\n      names.push(thing);\n    }\n  });\n  return names;\n};\n\nexports["default"] = flattenNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2ZsYXR0ZW5OYW1lcy5qcz81YjcxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmxhdHRlbk5hbWVzIiwidW5kZWZpbmVkIiwiX2lzU3RyaW5nMiIsInJlcXVpcmUiLCJfaXNTdHJpbmczIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9mb3JPd24yIiwiX2Zvck93bjMiLCJfaXNQbGFpbk9iamVjdDIiLCJfaXNQbGFpbk9iamVjdDMiLCJfbWFwMiIsIl9tYXAzIiwib2JqIiwiX19lc01vZHVsZSIsInRoaW5ncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwidGhpbmciLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJuYW1lIiwicHVzaCIsImtleSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXhCOztBQUVBLElBQUlDLFVBQVUsR0FBR0Msc0JBQXNCLENBQUNILFVBQUQsQ0FBdkM7O0FBRUEsSUFBSUksUUFBUSxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBRUEsSUFBSUksUUFBUSxHQUFHRixzQkFBc0IsQ0FBQ0MsUUFBRCxDQUFyQzs7QUFFQSxJQUFJRSxlQUFlLEdBQUdMLG1CQUFPLENBQUMsTUFBRCxDQUE3Qjs7QUFFQSxJQUFJTSxlQUFlLEdBQUdKLHNCQUFzQixDQUFDRyxlQUFELENBQTVDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyxNQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUUsZUFBU0E7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBSVosWUFBWSxHQUFHRixPQUFPLENBQUNFLFlBQVIsR0FBdUIsU0FBU0EsWUFBVCxHQUF3QjtBQUNoRSxNQUFJYyxNQUFNLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmQsU0FBekMsR0FBcURjLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQWpGO0FBRUEsTUFBSUUsS0FBSyxHQUFHLEVBQVo7QUFFQSxHQUFDLEdBQUdOLEtBQUssV0FBVCxFQUFtQkcsTUFBbkIsRUFBMkIsVUFBVUksS0FBVixFQUFpQjtBQUMxQyxRQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCbEIsa0JBQVksQ0FBQ2tCLEtBQUQsQ0FBWixDQUFvQkcsR0FBcEIsQ0FBd0IsVUFBVUMsSUFBVixFQUFnQjtBQUN0QyxlQUFPTCxLQUFLLENBQUNNLElBQU4sQ0FBV0QsSUFBWCxDQUFQO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTyxJQUFJLENBQUMsR0FBR2IsZUFBZSxXQUFuQixFQUE2QlMsS0FBN0IsQ0FBSixFQUF5QztBQUM5QyxPQUFDLEdBQUdYLFFBQVEsV0FBWixFQUFzQlcsS0FBdEIsRUFBNkIsVUFBVW5CLEtBQVYsRUFBaUJ5QixHQUFqQixFQUFzQjtBQUNqRHpCLGFBQUssS0FBSyxJQUFWLElBQWtCa0IsS0FBSyxDQUFDTSxJQUFOLENBQVdDLEdBQVgsQ0FBbEI7QUFDQVAsYUFBSyxDQUFDTSxJQUFOLENBQVdDLEdBQUcsR0FBRyxHQUFOLEdBQVl6QixLQUF2QjtBQUNELE9BSEQ7QUFJRCxLQUxNLE1BS0EsSUFBSSxDQUFDLEdBQUdLLFVBQVUsV0FBZCxFQUF3QmMsS0FBeEIsQ0FBSixFQUFvQztBQUN6Q0QsV0FBSyxDQUFDTSxJQUFOLENBQVdMLEtBQVg7QUFDRDtBQUNGLEdBYkQ7QUFlQSxTQUFPRCxLQUFQO0FBQ0QsQ0FyQkQ7O0FBdUJBbkIsT0FBTyxXQUFQLEdBQWtCRSxZQUFsQiIsImZpbGUiOiJXM0hXLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mbGF0dGVuTmFtZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfaXNTdHJpbmcyID0gcmVxdWlyZSgnbG9kYXNoL2lzU3RyaW5nJyk7XG5cbnZhciBfaXNTdHJpbmczID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTdHJpbmcyKTtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9pc1BsYWluT2JqZWN0MiA9IHJlcXVpcmUoJ2xvZGFzaC9pc1BsYWluT2JqZWN0Jyk7XG5cbnZhciBfaXNQbGFpbk9iamVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1BsYWluT2JqZWN0Mik7XG5cbnZhciBfbWFwMiA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcblxudmFyIF9tYXAzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBmbGF0dGVuTmFtZXMgPSBleHBvcnRzLmZsYXR0ZW5OYW1lcyA9IGZ1bmN0aW9uIGZsYXR0ZW5OYW1lcygpIHtcbiAgdmFyIHRoaW5ncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgdmFyIG5hbWVzID0gW107XG5cbiAgKDAsIF9tYXAzLmRlZmF1bHQpKHRoaW5ncywgZnVuY3Rpb24gKHRoaW5nKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpbmcpKSB7XG4gICAgICBmbGF0dGVuTmFtZXModGhpbmcpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1BsYWluT2JqZWN0My5kZWZhdWx0KSh0aGluZykpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0aGluZywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFsdWUgPT09IHRydWUgJiYgbmFtZXMucHVzaChrZXkpO1xuICAgICAgICBuYW1lcy5wdXNoKGtleSArICctJyArIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1N0cmluZzMuZGVmYXVsdCkodGhpbmcpKSB7XG4gICAgICBuYW1lcy5wdXNoKHRoaW5nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZsYXR0ZW5OYW1lczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///W3HW\n')},X0wg:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorType", function() { return AnchorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bottom", function() { return Bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomResizable", function() { return BottomResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenterType", function() { return CenterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Centered", function() { return Centered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenteredVertically", function() { return CenteredVertically; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Custom", function() { return Custom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layer", function() { return Layer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Left", function() { return Left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftResizable", function() { return LeftResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positioned", function() { return Positioned; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeHandlePlacement", function() { return ResizeHandlePlacement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeType", function() { return ResizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Right", function() { return Right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightResizable", function() { return RightResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Top", function() { return Top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopResizable", function() { return TopResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPort", function() { return ViewPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anchoredProps", function() { return anchoredProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizableProps", function() { return resizableProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCurrentSpace", function() { return useCurrentSpace; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("h9Sk");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === \'undefined\') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName(\'head\')[0];\n  var style = document.createElement(\'style\');\n  style.type = \'text/css\';\n\n  if (insertAt === \'top\') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = ".spaces-centered-vertically {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n}\\r\\n\\r\\n.spaces-centered {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n\\ttext-align: center;\\r\\n}\\r\\n\\r\\n.spaces-clearfix:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tdisplay: table;\\r\\n\\tclear: both;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9999;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:before {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tz-index: 2;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9998;\\r\\n\\tpointer-events: all;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left:before {\\r\\n\\tcursor: w-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right:before {\\r\\n\\tcursor: e-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top:before {\\r\\n\\tcursor: n-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom:before {\\r\\n\\tcursor: s-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-space {\\r\\n\\toverflow: hidden;\\r\\n\\ttouch-action: none;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-resizing .spaces-space {\\r\\n\\ttransition: none !important;\\r\\n}\\r\\n\\r\\n.spaces-space .spaces-space-inner {\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-space.scrollable .spaces-space-inner {\\r\\n\\toverflow: auto;\\r\\n\\ttouch-action: auto;\\r\\n}\\r\\n";\nstyleInject(css_248z);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Type;\n\n(function (Type) {\n  Type["ViewPort"] = "viewport";\n  Type["Fixed"] = "fixed";\n  Type["Fill"] = "fill";\n  Type["Positioned"] = "positioned";\n  Type["Anchored"] = "anchored";\n  Type["Custom"] = "custom";\n})(Type || (Type = {}));\n\nvar AnchorType;\n\n(function (AnchorType) {\n  AnchorType["Left"] = "anchor-left";\n  AnchorType["Right"] = "anchor-right";\n  AnchorType["Top"] = "anchor-top";\n  AnchorType["Bottom"] = "anchor-bottom";\n})(AnchorType || (AnchorType = {}));\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";\n  Orientation[Orientation["Vertical"] = 1] = "Vertical";\n})(Orientation || (Orientation = {}));\n\nvar ResizeType;\n\n(function (ResizeType) {\n  ResizeType["Left"] = "resize-left";\n  ResizeType["Right"] = "resize-right";\n  ResizeType["Top"] = "resize-top";\n  ResizeType["Bottom"] = "resize-bottom";\n  ResizeType["TopLeft"] = "resize-topleft";\n  ResizeType["TopRight"] = "resize-topright";\n  ResizeType["BottomLeft"] = "resize-bottomleft";\n  ResizeType["BottomRight"] = "resize-bottomright";\n})(ResizeType || (ResizeType = {}));\n\nvar ResizeHandlePlacement;\n\n(function (ResizeHandlePlacement) {\n  ResizeHandlePlacement["OverlayInside"] = "overlay-inside";\n  ResizeHandlePlacement["Inside"] = "inside";\n  ResizeHandlePlacement["OverlayBoundary"] = "overlay-boundary";\n})(ResizeHandlePlacement || (ResizeHandlePlacement = {}));\n\nvar CenterType;\n\n(function (CenterType) {\n  CenterType["None"] = "none";\n  CenterType["Vertical"] = "vertical";\n  CenterType["HorizontalVertical"] = "horizontalVertical";\n})(CenterType || (CenterType = {}));\n\nvar MoveEvent;\n\n(function (MoveEvent) {\n  MoveEvent["Mouse"] = "mousemove";\n  MoveEvent["Touch"] = "touchmove";\n})(MoveEvent || (MoveEvent = {}));\n\nvar EndEvent;\n\n(function (EndEvent) {\n  EndEvent["Mouse"] = "mouseup";\n  EndEvent["Touch"] = "touchend";\n})(EndEvent || (EndEvent = {}));\n\nfunction shortuuid() {\n  var firstPart = Math.random() * 46656 | 0;\n  var secondPart = Math.random() * 46656 | 0;\n  return ("000" + firstPart.toString(36)).slice(-3) + ("000" + secondPart.toString(36)).slice(-3);\n}\n\nfunction getSizeString(size) {\n  return typeof size === "string" ? size : size + "px";\n}\n\nfunction css(size, dontAddCalc) {\n  if (size.size === 0 && size.adjusted.length === 0 && size.resized === 0) {\n    return "0px";\n  }\n\n  var parts = [];\n\n  if (size.size !== undefined) {\n    parts.push(getSizeString(size.size));\n  }\n\n  size.adjusted.forEach(function (l) {\n    return parts.push(getSizeString(l));\n  });\n\n  if (size.resized !== 0) {\n    parts.push(getSizeString(size.resized));\n  }\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  if (parts.length === 1) {\n    return parts[0];\n  }\n\n  if (dontAddCalc) {\n    return parts.join(" + ");\n  }\n\n  return "calc(" + parts.join(" + ") + ")";\n}\n\nfunction coalesce() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.find(function (x) {\n    return x !== null && x !== undefined;\n  });\n}\n\nfunction adjustmentsEqual(item1, item2) {\n  if (item1.length !== item2.length) {\n    return false;\n  }\n\n  for (var i = 0, len = item1.length; i < len; i++) {\n    if (item1[i] !== item2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction throttle(callback, limit) {\n  var wait = false; // Initially, we\'re not waiting\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // We return a throttled function\n\n\n    if (!wait) {\n      // If we\'re not waiting\n      callback.apply(void 0, args); // Execute users function\n\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nfunction styleDefinition(space) {\n  var cssElements = [];\n  var style = {\n    position: space.position,\n    left: css(space.left),\n    top: css(space.top),\n    right: css(space.right),\n    bottom: css(space.bottom),\n    width: css(space.width),\n    height: css(space.height),\n    zIndex: space.zIndex\n  };\n  var cssString = [];\n\n  if (style.position) {\n    cssString.push("position: " + style.position + ";");\n  }\n\n  if (style.left) {\n    cssString.push("left: " + style.left + ";");\n  }\n\n  if (style.top) {\n    cssString.push("top: " + style.top + ";");\n  }\n\n  if (style.right) {\n    cssString.push("right: " + style.right + ";");\n  }\n\n  if (style.bottom) {\n    cssString.push("bottom: " + style.bottom + ";");\n  }\n\n  if (style.width) {\n    cssString.push("width: " + style.width + ";");\n  }\n\n  if (style.height) {\n    cssString.push("height: " + style.height + ";");\n  }\n\n  if (style.zIndex) {\n    cssString.push("z-index: " + style.zIndex + ";");\n  }\n\n  if (space.allowOverflow) {\n    cssString.push("overflow: visible;");\n  }\n\n  if (cssString.length > 0) {\n    cssElements.push("#" + space.id + " { " + cssString.join(" ") + " }");\n  }\n\n  if (space.scrollable) {\n    cssElements.push("#" + space.id + " > .spaces-space-inner { overflow: auto; touch-action: auto; }");\n  }\n\n  var handleOffset = 0;\n  var touchHandleSize = space.touchHandleSize / 2 - space.handleSize / 2;\n\n  switch (space.handlePlacement) {\n    case ResizeHandlePlacement.Inside:\n    case ResizeHandlePlacement.OverlayInside:\n      handleOffset = space.handleSize;\n\n      if (space.type === Type.Positioned) {\n        handleOffset = 0;\n      }\n\n      break;\n\n    case ResizeHandlePlacement.OverlayBoundary:\n      handleOffset = space.handleSize / 2;\n      break;\n  }\n\n  if (space.type === Type.Positioned) {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { left: calc(" + css(space.left, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { top: calc(" + css(space.top, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n\n      if (space.width.size) {\n        cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + space.handleSize + "px + " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mr { right: calc(" + css(space.right, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      if (space.height.size) {\n        cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + space.handleSize + "px + " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mb { bottom: calc(" + css(space.bottom, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  } else {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { right: calc(" + css(space.right, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-ml:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { bottom: calc(" + css(space.bottom, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  }\n\n  return cssElements.join(" ");\n}\n\nfunction updateStyleDefinition(space) {\n  var definition = styleDefinition(space);\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    if (existing.innerHTML !== definition) {\n      existing.innerHTML = definition;\n    }\n  } else {\n    var newStyle = document.createElement("style");\n    newStyle.id = "style_" + space.id;\n    newStyle.innerHTML = definition;\n    document.head.appendChild(newStyle);\n  }\n}\n\nfunction removeStyleDefinition(space) {\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    document.head.removeChild(existing);\n  }\n}\n\nvar RESIZE_THROTTLE = 0;\n\nfunction isHorizontal(resizeType) {\n  return resizeType === ResizeType.Left || resizeType === ResizeType.Right;\n}\n\nfunction createAdjuster(resizeType, space, originalX, originalY) {\n  var dimensionToAdjust = function () {\n    if (resizeType === ResizeType.Left) {\n      return space.left;\n    } else if (resizeType === ResizeType.Right) {\n      return space.right;\n    } else if (resizeType === ResizeType.Bottom) {\n      return space.bottom;\n    } else if (resizeType === ResizeType.Top) {\n      return space.top;\n    } else {\n      throw new Error("unknown resize type");\n    }\n  }();\n\n  var negater = resizeType === ResizeType.Right || resizeType === ResizeType.Bottom ? function (val) {\n    return -val;\n  } : function (val) {\n    return val;\n  };\n  var candidateOppositeDimensionToAdjust = isHorizontal(resizeType) ? space.width : space.height;\n  var offset1 = dimensionToAdjust.resized;\n  var offset2 = candidateOppositeDimensionToAdjust.resized;\n  var rect = space.element.getBoundingClientRect();\n  var size = isHorizontal(resizeType) ? rect.width : rect.height;\n  var minimumAdjust = coalesce(space.minimumSize, 20) - size + 0;\n  var maximumAdjust = space.maximumSize ? space.maximumSize - size + 0 : undefined;\n  return function (currentX, currentY) {\n    var adjustment = (isHorizontal(resizeType) ? originalX : originalY) - (isHorizontal(resizeType) ? currentX : currentY);\n    var dimensionResized = negater(adjustment);\n\n    if (space.type !== Type.Positioned) {\n      dimensionResized = Math.max(negater(adjustment), minimumAdjust);\n\n      if (dimensionResized < minimumAdjust) {\n        dimensionResized = minimumAdjust;\n      }\n\n      if (typeof maximumAdjust === "number") {\n        if (dimensionResized > maximumAdjust) {\n          dimensionResized = maximumAdjust;\n        }\n      }\n    }\n\n    if (dimensionToAdjust.size !== undefined) {\n      dimensionToAdjust.resized = negater(-adjustment) + offset1;\n\n      if (candidateOppositeDimensionToAdjust.size) {\n        candidateOppositeDimensionToAdjust.resized = negater(adjustment) + offset2;\n      }\n    } else {\n      candidateOppositeDimensionToAdjust.resized = dimensionResized + offset2;\n    }\n  };\n}\n\nfunction createResize(store) {\n  return {\n    startResize: function startResize(e, resizeType, space, endEvent, moveEvent, getCoords, onResizeEnd) {\n      if (space.onResizeStart) {\n        var result = space.onResizeStart(resizeType);\n\n        if (typeof result === "boolean" && !result) {\n          return;\n        }\n      }\n\n      var originalCoords = getCoords(e);\n      var adjuster = createAdjuster(resizeType, space, originalCoords.x, originalCoords.y);\n      space.resizing = true;\n      space.updateParent();\n      var lastX = 0;\n      var lastY = 0;\n      var moved = false;\n\n      var resize = function resize(currentX, currentY) {\n        adjuster(currentX, currentY);\n        store.updateStyles(space);\n      };\n\n      var withPreventDefault = function withPreventDefault(e) {\n        moved = true;\n        var newCoords = getCoords(e);\n        lastX = newCoords.x;\n        lastY = newCoords.y;\n        e.preventDefault();\n        throttle(function (x, y) {\n          return window.requestAnimationFrame(function () {\n            return resize(x, y);\n          });\n        }, RESIZE_THROTTLE)(lastX, lastY);\n      };\n\n      var removeListener = function removeListener() {\n        if (moved) {\n          resize(lastX, lastY);\n        }\n\n        window.removeEventListener(moveEvent, withPreventDefault);\n        window.removeEventListener(endEvent, removeListener);\n        space.resizing = false;\n        space.updateParent();\n        var resizeEnd = onResizeEnd || space.onResizeEnd;\n\n        if (resizeEnd) {\n          var currentRect = space.element.getBoundingClientRect();\n          resizeEnd(Math.floor(isHorizontal(resizeType) ? currentRect.width : currentRect.height), currentRect, resizeType);\n        }\n      };\n\n      window.addEventListener(moveEvent, withPreventDefault);\n      window.addEventListener(endEvent, removeListener);\n    }\n  };\n}\n\nfunction createDrag(store) {\n  function onMove(space, originalX, originalY, x, y) {\n    var adjustmentX = -(originalX - x);\n    var adjustmentY = -(originalY - y);\n    space.left.adjusted = [adjustmentX];\n    space.top.adjusted = [adjustmentY];\n\n    if (space.right.size) {\n      space.right.adjusted = [-adjustmentX];\n    }\n\n    if (space.bottom.size) {\n      space.bottom.adjusted = [-adjustmentY];\n    }\n\n    store.updateStyles(space);\n  }\n\n  return {\n    startDrag: function startDrag(e, space, endEvent, moveEvent, getCoords, onDragEnd) {\n      if (space.element) {\n        var coords = getCoords(e);\n        var adjustedLeft = space.left.adjusted.length === 0 ? 0 : space.left.adjusted[0];\n        var adjustedTop = space.top.adjusted.length === 0 ? 0 : space.top.adjusted[0];\n        var originalMouseX_1 = coords.x - adjustedLeft;\n        var originalMouseY_1 = coords.y - adjustedTop;\n        var lastX_1 = 0;\n        var lastY_1 = 0;\n        var moved_1 = false;\n\n        var mouseMove_1 = function mouseMove_1(x, y) {\n          return onMove(space, originalMouseX_1, originalMouseY_1, x, y);\n        };\n\n        var throttledMouseMove_1 = throttle(mouseMove_1, 5);\n\n        var withPreventDefault_1 = function withPreventDefault_1(e) {\n          moved_1 = true;\n          var newCoords = getCoords(e);\n          lastX_1 = newCoords.x;\n          lastY_1 = newCoords.y;\n          e.preventDefault();\n          throttledMouseMove_1(lastX_1, lastY_1);\n        };\n\n        var removeListener_1 = function removeListener_1() {\n          var _a;\n\n          if (moved_1) {\n            mouseMove_1(lastX_1, lastY_1);\n          }\n\n          window.removeEventListener(moveEvent, withPreventDefault_1);\n          window.removeEventListener(endEvent, removeListener_1);\n\n          if (onDragEnd) {\n            var parentInfo = space.parentId && ((_a = store.getSpace(space.parentId)) === null || _a === void 0 ? void 0 : _a.element.getBoundingClientRect()) || {\n              left: 0,\n              top: 0,\n              right: 0,\n              bottom: 0,\n              width: 0,\n              height: 0\n            };\n\n            var info = function (_a) {\n              var left = _a.left,\n                  top = _a.top,\n                  right = _a.right,\n                  bottom = _a.bottom,\n                  width = _a.width,\n                  height = _a.height;\n              return {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n                width: width,\n                height: height\n              };\n            }(space.element.getBoundingClientRect());\n\n            onDragEnd(_assign(_assign({}, info), {\n              left: info.left - parentInfo.left,\n              top: info.top - parentInfo.top\n            }), moved_1);\n          }\n        };\n\n        window.addEventListener(moveEvent, withPreventDefault_1);\n        window.addEventListener(endEvent, removeListener_1);\n      }\n    }\n  };\n}\n\nvar spaceDefaults = {\n  id: "",\n  zIndex: 0,\n  scrollable: false,\n  resizing: false,\n  allowOverflow: false,\n  centerContent: "none",\n  dimension: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  },\n  handleSize: 5,\n  touchHandleSize: 5,\n  handlePlacement: ResizeHandlePlacement.OverlayInside,\n  adjustLeft: function adjustLeft() {\n    return false;\n  },\n  adjustRight: function adjustRight() {\n    return false;\n  },\n  adjustTop: function adjustTop() {\n    return false;\n  },\n  adjustBottom: function adjustBottom() {\n    return false;\n  },\n  adjustEdge: function adjustEdge() {\n    return false;\n  },\n  anchoredChildren: function anchoredChildren() {\n    return [];\n  }\n};\nvar anchorTypes = [AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom];\n\nfunction getPosition(type) {\n  if (type === Type.ViewPort) {\n    return "fixed";\n  }\n\n  if (type === Type.Fixed) {\n    return "relative";\n  }\n\n  return "absolute";\n}\n\nfunction getOrientation(anchor) {\n  return anchor === AnchorType.Bottom || anchor === AnchorType.Top ? Orientation.Vertical : Orientation.Horizontal;\n}\n\nfunction anchorUpdates(space) {\n  return [{\n    anchor: AnchorType.Left,\n    update: space.adjustLeft\n  }, {\n    anchor: AnchorType.Top,\n    update: space.adjustTop\n  }, {\n    anchor: AnchorType.Right,\n    update: space.adjustRight\n  }, {\n    anchor: AnchorType.Bottom,\n    update: space.adjustBottom\n  }];\n}\n\nfunction sizeInfoDefault(size) {\n  return {\n    size: size,\n    adjusted: [],\n    resized: 0\n  };\n}\n\nfunction createStore() {\n  var spaces = [];\n\n  var setSpaces = function setSpaces(newSpaces) {\n    spaces = newSpaces;\n  };\n\n  var getSpace = function getSpace(id) {\n    return getSpaces().find(function (s) {\n      return s.id === id;\n    });\n  };\n\n  var getSpaces = function getSpaces() {\n    return spaces;\n  };\n\n  var recalcSpaces = function recalcSpaces(parent) {\n    var onlyUnique = function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    };\n\n    var addDefaultOrders = function addDefaultOrders(spaces) {\n      var result = [];\n      anchorTypes.forEach(function (t) {\n        var anchoredSpaces = spaces.filter(function (s) {\n          return s.anchor !== undefined && s.anchor === t;\n        });\n        var zIndices = anchoredSpaces.map(function (s) {\n          return s.zIndex;\n        }).filter(onlyUnique);\n        zIndices.forEach(function (i) {\n          var anchoredSpacesInLayer = anchoredSpaces.filter(function (s) {\n            return s.zIndex === i;\n          });\n          var orderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order !== undefined;\n          });\n          var unorderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order === undefined;\n          });\n          var maxOrder = orderedSpaces.length > 0 ? orderedSpaces.map(function (a) {\n            return a.order;\n          }).reduce(function (a, b) {\n            return Math.max(a, b);\n          }) : 0;\n          result = __spreadArray(__spreadArray([], result, true), __spreadArray(__spreadArray([], orderedSpaces, true), unorderedSpaces.map(function (c, idx) {\n            return _assign(_assign({}, c), {\n              order: maxOrder + idx + 1\n            });\n          }), true), true);\n        });\n      });\n      return __spreadArray(__spreadArray([], result, true), spaces.filter(function (s) {\n        return s.anchor === undefined;\n      }), true);\n    };\n\n    var orderedSpaces = addDefaultOrders(parent.children);\n\n    var _loop_1 = function _loop_1() {\n      var space = orderedSpaces[i];\n      var changed = false;\n\n      if (space.type === Type.Fill) {\n        anchorUpdates(space).forEach(function (info) {\n          var adjusted = [];\n          var anchoredSpaces = parent.anchoredChildren(orderedSpaces, info.anchor, space.zIndex);\n          anchoredSpaces.forEach(function (as) {\n            if (as.orientation === Orientation.Vertical) {\n              if (as.height.size) {\n                adjusted.push(as.height.size);\n              }\n\n              if (as.height.resized) {\n                adjusted.push(as.height.resized);\n              }\n            } else {\n              if (as.width.size) {\n                adjusted.push(as.width.size);\n              }\n\n              if (as.width.resized) {\n                adjusted.push(as.width.resized);\n              }\n            }\n          });\n\n          if (info.update(adjusted)) {\n            changed = true;\n          }\n        });\n      } else if (space.type === Type.Anchored) {\n        var adjusted_1 = [];\n        var anchoredSpaces = parent.anchoredChildren(orderedSpaces, space.anchor, space.zIndex).filter(function (s) {\n          return s.id !== space.id && s.order <= space.order;\n        });\n        anchoredSpaces.forEach(function (as) {\n          if (as.orientation === Orientation.Vertical) {\n            if (as.height.size) {\n              adjusted_1.push(as.height.size);\n            }\n\n            if (as.height.resized) {\n              adjusted_1.push(as.height.resized);\n            }\n          } else {\n            if (as.width.size) {\n              adjusted_1.push(as.width.size);\n            }\n\n            if (as.width.resized) {\n              adjusted_1.push(as.width.resized);\n            }\n          }\n        });\n\n        if (space.adjustEdge(adjusted_1)) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        updateStyleDefinition(space);\n      }\n    };\n\n    for (var i = 0, len = orderedSpaces.length; i < len; i++) {\n      _loop_1();\n    }\n  };\n\n  var store = {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    addSpace: function addSpace(space) {\n      getSpaces().push(space);\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children.push(space);\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    removeSpace: function removeSpace(space) {\n      setSpaces(getSpaces().filter(function (s) {\n        return s.id !== space.id;\n      }));\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children = parentSpace.children.filter(function (s) {\n            return s.id !== space.id;\n          });\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      removeStyleDefinition(space);\n    },\n    updateStyles: function updateStyles(space) {\n      if (space.parentId) {\n        var parent_1 = getSpace(space.parentId);\n\n        if (parent_1) {\n          recalcSpaces(parent_1);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    updateSpace: function updateSpace(space, props) {\n      var type = props.type,\n          anchor = props.anchor,\n          order = props.order,\n          zIndex = props.zIndex,\n          scrollable = props.scrollable,\n          position = props.position,\n          centerContent = props.centerContent,\n          minimumSize = props.minimumSize,\n          maximumSize = props.maximumSize,\n          handleSize = props.handleSize,\n          touchHandleSize = props.touchHandleSize,\n          handlePlacement = props.handlePlacement,\n          allowOverflow = props.allowOverflow;\n      var canResizeLeft = position && position.leftResizable || false;\n      var canResizeRight = position && position.rightResizable || false;\n      var canResizeTop = position && position.topResizable || false;\n      var canResizeBottom = position && position.bottomResizable || false;\n      var changed = false;\n\n      if (space.type !== type) {\n        space.type = type;\n        space.position = getPosition(type);\n        changed = true;\n      }\n\n      if (space.anchor !== anchor) {\n        space.anchor = anchor;\n        space.orientation = getOrientation(anchor);\n        changed = true;\n\n        if (type === Type.Anchored) {\n          if (anchor === AnchorType.Left) {\n            space.adjustEdge = space.adjustLeft;\n          } else if (anchor === AnchorType.Top) {\n            space.adjustEdge = space.adjustTop;\n          } else if (anchor === AnchorType.Right) {\n            space.adjustEdge = space.adjustRight;\n          } else if (anchor === AnchorType.Bottom) {\n            space.adjustEdge = space.adjustBottom;\n          }\n        }\n      }\n\n      if (space.left.size !== (position && position.left)) {\n        space.left.size = position && position.left;\n        space.left.resized = 0;\n        space.left.adjusted = [];\n        changed = true;\n      }\n\n      if (space.right.size !== (position && position.right)) {\n        space.right.size = position && position.right;\n        space.right.resized = 0;\n        space.right.adjusted = [];\n        changed = true;\n      }\n\n      if (space.top.size !== (position && position.top)) {\n        space.top.size = position && position.top;\n        space.top.resized = 0;\n        space.top.adjusted = [];\n        changed = true;\n      }\n\n      if (space.bottom.size !== (position && position.bottom)) {\n        space.bottom.size = position && position.bottom;\n        space.bottom.resized = 0;\n        space.bottom.adjusted = [];\n        changed = true;\n      }\n\n      if (space.width.size !== (position && position.width)) {\n        space.width.size = position && position.width;\n        space.width.resized = 0;\n        space.width.adjusted = [];\n        changed = true;\n      }\n\n      if (space.height.size !== (position && position.height)) {\n        space.height.size = position && position.height;\n        space.height.resized = 0;\n        space.height.adjusted = [];\n        changed = true;\n      }\n\n      if (coalesce(space.order, 0) !== coalesce(order, 0)) {\n        space.order = coalesce(order, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.zIndex, 0) !== coalesce(zIndex, 0)) {\n        space.zIndex = coalesce(zIndex, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.scrollable, false) !== coalesce(scrollable, false)) {\n        space.scrollable = coalesce(scrollable, false);\n        changed = true;\n      }\n\n      if (space.minimumSize !== minimumSize) {\n        space.minimumSize = minimumSize;\n        changed = true;\n      }\n\n      if (space.maximumSize !== maximumSize) {\n        space.maximumSize = maximumSize;\n        changed = true;\n      }\n\n      if (coalesce(space.centerContent, CenterType.None) !== coalesce(centerContent, CenterType.None)) {\n        space.centerContent = coalesce(centerContent, CenterType.None);\n        changed = true;\n      }\n\n      if (space.handleSize !== handleSize) {\n        space.handleSize = handleSize || spaceDefaults.handleSize;\n        changed = true;\n      }\n\n      if (space.touchHandleSize !== touchHandleSize) {\n        space.touchHandleSize = touchHandleSize || spaceDefaults.touchHandleSize;\n        changed = true;\n      }\n\n      if (space.handlePlacement !== handlePlacement) {\n        space.handlePlacement = handlePlacement || spaceDefaults.handlePlacement;\n        changed = true;\n      }\n\n      if (space.canResizeBottom !== canResizeBottom) {\n        space.canResizeBottom = canResizeBottom;\n        changed = true;\n      }\n\n      if (space.canResizeTop !== canResizeTop) {\n        space.canResizeTop = canResizeTop;\n        changed = true;\n      }\n\n      if (space.canResizeLeft !== canResizeLeft) {\n        space.canResizeLeft = canResizeLeft;\n        changed = true;\n      }\n\n      if (space.canResizeRight !== canResizeRight) {\n        space.canResizeRight = canResizeRight;\n        changed = true;\n      }\n\n      if (space.allowOverflow !== allowOverflow) {\n        space.allowOverflow = allowOverflow || spaceDefaults.allowOverflow;\n        changed = true;\n      }\n\n      if (changed) {\n        if (space.parentId) {\n          var parentSpace = getSpace(space.parentId);\n\n          if (parentSpace) {\n            recalcSpaces(parentSpace);\n          }\n        }\n\n        updateStyleDefinition(space);\n      }\n    },\n    createSpace: function createSpace() {\n      return {};\n    },\n    startMouseResize: function startMouseResize() {\n      return null;\n    },\n    startTouchResize: function startTouchResize() {\n      return null;\n    },\n    startMouseDrag: function startMouseDrag() {\n      return null;\n    },\n    startTouchDrag: function startTouchDrag() {\n      return null;\n    }\n  };\n  var resize = createResize(store);\n  var drag = createDrag(store);\n\n  store.createSpace = function (parentId, props, update) {\n    var position = props.position,\n        anchor = props.anchor,\n        type = props.type,\n        commonProps = __rest(props, ["position", "anchor", "type"]);\n\n    var canResizeLeft = position && position.rightResizable || false;\n    var canResizeRight = position && position.leftResizable || false;\n    var canResizeTop = position && position.bottomResizable || false;\n    var canResizeBottom = position && position.topResizable || false;\n\n    var newSpace = _assign(_assign(_assign({}, spaceDefaults), commonProps), {\n      store: store,\n      update: update,\n      updateParent: function updateParent() {\n        if (parentId) {\n          var parentSpace = store.getSpace(parentId);\n\n          if (parentSpace) {\n            parentSpace.update();\n          }\n        }\n      },\n      parentId: parentId,\n      children: [],\n      anchor: anchor,\n      type: type,\n      orientation: getOrientation(anchor),\n      position: getPosition(type),\n      left: sizeInfoDefault(position && position.left),\n      right: sizeInfoDefault(position && position.right),\n      top: sizeInfoDefault(position && position.top),\n      bottom: sizeInfoDefault(position && position.bottom),\n      width: sizeInfoDefault(position && position.width),\n      height: sizeInfoDefault(position && position.height),\n      canResizeLeft: canResizeLeft,\n      canResizeRight: canResizeRight,\n      canResizeTop: canResizeTop,\n      canResizeBottom: canResizeBottom\n    });\n\n    newSpace.anchoredChildren = function (children, anchor, zIndex) {\n      return children.filter(function (s) {\n        return s.type === Type.Anchored && s.anchor === anchor && s.zIndex === zIndex;\n      });\n    };\n\n    newSpace.adjustLeft = function (adjusted) {\n      if (adjustmentsEqual(newSpace.left.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.left.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustRight = function (adjusted) {\n      if (adjustmentsEqual(newSpace.right.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.right.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustTop = function (adjusted) {\n      if (adjustmentsEqual(newSpace.top.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.top.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustBottom = function (adjusted) {\n      if (adjustmentsEqual(newSpace.bottom.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.bottom.adjusted = adjusted;\n      return true;\n    };\n\n    if (type === Type.Anchored) {\n      if (anchor === AnchorType.Left) {\n        newSpace.adjustEdge = newSpace.adjustLeft;\n      } else if (anchor === AnchorType.Top) {\n        newSpace.adjustEdge = newSpace.adjustTop;\n      } else if (anchor === AnchorType.Right) {\n        newSpace.adjustEdge = newSpace.adjustRight;\n      } else if (anchor === AnchorType.Bottom) {\n        newSpace.adjustEdge = newSpace.adjustBottom;\n      }\n    }\n\n    return newSpace;\n  };\n\n  store.startMouseResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startTouchResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startMouseDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onDragEnd);\n  };\n\n  store.startTouchDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onDragEnd);\n  };\n\n  return store;\n} // WORKAROUND for React18 strict mode\n// https://blog.ag-grid.com/avoiding-react-18-double-mount/\n\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  var destroyFunc = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();\n  var effectCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n  var renderAfterCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n\n  var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);\n\n  _a[0];\n  var setVal = _a[1];\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    } // this forces one render after the effect is run\n\n\n    setVal(function (val) {\n      return val + 1;\n    });\n    return function () {\n      // if the comp didn\'t render since the useEffect was called,\n      // we know it\'s the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n\nvar ParentContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar DOMRectContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar LayerContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar OptionsContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"]({});\nvar currentStore = createStore();\nvar commonProps = {\n  id: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  className: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["object"], prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]]),\n  as: prop_types__WEBPACK_IMPORTED_MODULE_2__["any"],\n  centerContent: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([CenterType.None, CenterType.Vertical, CenterType.HorizontalVertical]),\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  scrollable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  trackSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  allowOverflow: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onDoubleClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n};\n\nfunction useForceUpdate() {\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](0),\n      setTick = _a[1];\n\n  var update = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useSpace(props) {\n  var store = currentStore;\n  var update = useForceUpdate();\n  var parent = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var debug = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](OptionsContext).debug;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useState"](props.id || "s" + shortuuid())[0];\n  var elementRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n  var resizeSensor = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](),\n      domRect = _a[0],\n      setDomRect = _a[1];\n\n  var space = store.getSpace(spaceId);\n\n  if (debug) {\n    console.table(store.getSpaces());\n  }\n\n  var parsedProps = _assign(_assign({}, props), {\n    id: spaceId,\n    zIndex: coalesce(props.zIndex, layer)\n  });\n\n  if (!space) {\n    space = store.createSpace(parent, parsedProps, update);\n    store.addSpace(space);\n  } else {\n    store.updateSpace(space, parsedProps);\n  }\n\n  var resizeHandles = useSpaceResizeHandles(store, space);\n  useEffectOnce(function () {\n    var rect = elementRef.current.getBoundingClientRect();\n    space.dimension = _assign(_assign({}, rect), {\n      left: Math.floor(rect.left),\n      top: Math.floor(rect.top),\n      right: Math.floor(rect.right),\n      bottom: Math.floor(rect.bottom),\n      width: Math.floor(rect.width),\n      height: Math.floor(rect.height),\n      x: Math.floor(rect.x),\n      y: Math.floor(rect.y)\n    });\n    setDomRect(space.dimension);\n\n    if (props.trackSize) {\n      resizeSensor.current = new css_element_queries__WEBPACK_IMPORTED_MODULE_1__["ResizeSensor"](elementRef.current, function (size) {\n        space.dimension = _assign(_assign({}, rect), {\n          width: Math.floor(size.width),\n          height: Math.floor(size.height)\n        });\n        setDomRect(space.dimension);\n      });\n    }\n\n    return function () {\n      resizeSensor.current && resizeSensor.current.detach();\n      store.removeSpace(space);\n    };\n  });\n  return {\n    space: space,\n    resizeHandles: resizeHandles,\n    domRect: domRect,\n    elementRef: elementRef\n  };\n}\n\nfunction useSpaceResizeHandles(store, space) {\n  var mouseHandles = [];\n\n  if (space.canResizeLeft) {\n    mouseHandles.push({\n      id: space.id + "-ml",\n      key: "left",\n      className: "spaces-resize-handle resize-left",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Left, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Left, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeRight) {\n    mouseHandles.push({\n      id: space.id + "-mr",\n      key: "right",\n      className: "spaces-resize-handle resize-right",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Right, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Right, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeTop) {\n    mouseHandles.push({\n      id: space.id + "-mt",\n      key: "top",\n      className: "spaces-resize-handle resize-top",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Top, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Top, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeBottom) {\n    mouseHandles.push({\n      id: space.id + "-mb",\n      key: "bottom",\n      className: "spaces-resize-handle resize-bottom",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Bottom, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Bottom, space, event);\n      }\n    });\n  }\n\n  return {\n    mouseHandles: mouseHandles\n  };\n}\n\nfunction useCurrentSpace() {\n  var store = currentStore;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var space = spaceId ? store.getSpace(spaceId) : undefined;\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var onMouseDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startMouseDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onTouchDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startTouchDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onForceUpdate = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    return space ? store.updateStyles(space) : null;\n  }, [spaceId]);\n  var defaults = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n\n  var size = _assign(_assign({}, defaults), domRect);\n\n  return {\n    size: size,\n    layer: layer || 0,\n    startMouseDrag: onMouseDrag,\n    startTouchDrag: onTouchDrag,\n    forceUpdate: onForceUpdate\n  };\n}\n\nvar Centered = function Centered(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered"\n  }, props.children);\n};\n\nvar CenteredVertically = function CenteredVertically(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered-vertically"\n  }, props.children);\n};\n\nfunction applyCentering(children, centerType) {\n  switch (centerType) {\n    case CenterType.Vertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](CenteredVertically, null, children);\n\n    case CenterType.HorizontalVertical:\n      return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Centered, null, children);\n  }\n\n  return children;\n}\n\nvar Space =\n/** @class */\nfunction (_super) {\n  __extends(Space, _super);\n\n  function Space() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Space.prototype.render = function () {\n    return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SpaceInner, _assign({}, this.props, {\n      wrapperInstance: this\n    }));\n  };\n\n  return Space;\n}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\nvar SpaceInner = function SpaceInner(props) {\n  if (!props.id && !props.wrapperInstance["_react_spaces_uniqueid"]) {\n    props.wrapperInstance["_react_spaces_uniqueid"] = "s" + shortuuid();\n  }\n\n  var style = props.style,\n      className = props.className,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      onMouseDown = props.onMouseDown,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseMove = props.onMouseMove,\n      onTouchStart = props.onTouchStart,\n      onTouchMove = props.onTouchMove,\n      onTouchEnd = props.onTouchEnd,\n      children = props.children,\n      handleRender = props.handleRender;\n  var events = {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseMove: onMouseMove,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n\n  var _a = useSpace(_assign(_assign({}, props), {\n    id: props.id || props.wrapperInstance["_react_spaces_uniqueid"]\n  })),\n      space = _a.space,\n      domRect = _a.domRect,\n      elementRef = _a.elementRef,\n      resizeHandles = _a.resizeHandles;\n\n  useEffectOnce(function () {\n    space.element = elementRef.current;\n  });\n  var userClasses = className ? className.split(" ").map(function (c) {\n    return c.trim();\n  }) : [];\n\n  var outerClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], ["spaces-space", space.children.find(function (s) {\n    return s.resizing;\n  }) ? "spaces-resizing" : undefined], false), [space.type === Type.Fixed ? "spaces-fixedsize-layout" : undefined], false), [space.type === Type.ViewPort ? "spaces-fullpage-layout" : undefined], false), userClasses.map(function (c) {\n    return c + "-container";\n  }), true).filter(function (c) {\n    return c;\n  });\n\n  var innerClasses = __spreadArray(__spreadArray([], ["spaces-space-inner"], false), userClasses, true);\n\n  var innerStyle = style;\n\n  if (space.handlePlacement === ResizeHandlePlacement.Inside) {\n    innerStyle = _assign(_assign({}, style), {\n      left: space.anchor === AnchorType.Right ? space.handleSize : undefined,\n      right: space.anchor === AnchorType.Left ? space.handleSize : undefined,\n      top: space.anchor === AnchorType.Bottom ? space.handleSize : undefined,\n      bottom: space.anchor === AnchorType.Top ? space.handleSize : undefined\n    });\n  }\n\n  var centeredContent = applyCentering(children, props.centerContent);\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, resizeHandles.mouseHandles.map(function (handleProps) {\n    return (handleRender === null || handleRender === void 0 ? void 0 : handleRender(handleProps)) || react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", _assign({}, handleProps));\n  }), react__WEBPACK_IMPORTED_MODULE_0__["createElement"](props.as || "div", _assign({\n    id: space.id,\n    ref: elementRef,\n    className: outerClasses.join(" ")\n  }, events), react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: innerClasses.join(" "),\n    style: innerStyle\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ParentContext.Provider, {\n    value: space.id\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: undefined\n  }, react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DOMRectContext.Provider, {\n    value: domRect\n  }, centeredContent))))));\n};\n\nvar resizableProps = _assign(_assign({}, commonProps), {\n  size: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired,\n  order: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  touchHandleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handlePlacement: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([ResizeHandlePlacement.Inside, ResizeHandlePlacement.OverlayBoundary, ResizeHandlePlacement.OverlayInside]),\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  minimumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  maximumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  onResizeStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onResizeEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n});\n\nvar anchoredProps = _assign(_assign({}, resizableProps), {\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"]\n});\n\nvar LeftResizable = function LeftResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nLeftResizable.propTypes = resizableProps;\n\nvar Left = function Left(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nLeft.propTypes = anchoredProps;\n\nvar TopResizable = function TopResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nTopResizable.propTypes = resizableProps;\n\nvar Top = function Top(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nTop.propTypes = anchoredProps;\n\nvar RightResizable = function RightResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nRightResizable.propTypes = resizableProps;\n\nvar Right = function Right(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nRight.propTypes = anchoredProps;\n\nvar BottomResizable = function BottomResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nBottomResizable.propTypes = resizableProps;\n\nvar Bottom = function Bottom(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nBottom.propTypes = anchoredProps;\n\nvar customProps = _assign(_assign({}, anchoredProps), {\n  type: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([Type.Positioned, Type.Fill, Type.Anchored]),\n  anchor: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom]),\n  anchorSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizeTypes: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n\nvar Custom = function Custom(_a) {\n  var children = _a.children,\n      type = _a.type,\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      anchorSize = _a.anchorSize,\n      anchor = _a.anchor,\n      resizable = _a.resizable,\n      resizeTypes = _a.resizeTypes,\n      props = __rest(_a, ["children", "type", "left", "top", "right", "bottom", "width", "height", "anchorSize", "anchor", "resizable", "resizeTypes"]);\n\n  var position;\n  type = type || Type.Fill;\n\n  if (type === Type.Positioned) {\n    position = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      leftResizable: resizeTypes && resizeTypes.includes(ResizeType.Left),\n      topResizable: resizeTypes && resizeTypes.includes(ResizeType.Top),\n      rightResizable: resizeTypes && resizeTypes.includes(ResizeType.Right),\n      bottomResizable: resizeTypes && resizeTypes.includes(ResizeType.Bottom)\n    };\n  } else {\n    if (anchor === AnchorType.Left) {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        rightResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Right) {\n      position = {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        leftResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Top) {\n      position = {\n        left: 0,\n        top: 0,\n        right: 0,\n        height: anchorSize,\n        bottomResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Bottom) {\n      position = {\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: anchorSize,\n        topResizable: resizable\n      };\n      type = Type.Anchored;\n    } else {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n      type = Type.Fill;\n    }\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: type,\n    anchor: anchor,\n    position: position\n  }), children);\n};\n\nCustom.propTypes = customProps;\n\nvar Fill = function Fill(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Fill,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    }\n  }), props.children);\n};\n\nFill.propTypes = commonProps;\n\nvar Fixed = function Fixed(_a) {\n  var width = _a.width,\n      height = _a.height,\n      children = _a.children,\n      commonProps = __rest(_a, ["width", "height", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Fixed,\n    position: {\n      width: width,\n      height: height\n    }\n  }), children);\n};\n\nFixed.propTypes = _assign(_assign({}, commonProps), {\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired\n});\n\nvar Layer = function Layer(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: props.zIndex\n  }, props.children);\n};\n\nLayer.propTypes = {\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"].isRequired\n};\n\nvar Positioned = function Positioned(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      resizable = _a.resizable,\n      props = __rest(_a, ["left", "top", "right", "bottom", "width", "height", "resizable"]);\n\n  var resizeTypes = resizable || [];\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Positioned,\n    position: {\n      left: left,\n      leftResizable: resizeTypes.includes(ResizeType.Left),\n      top: top,\n      topResizable: resizeTypes.includes(ResizeType.Top),\n      right: right,\n      rightResizable: resizeTypes.includes(ResizeType.Right),\n      bottom: bottom,\n      bottomResizable: resizeTypes.includes(ResizeType.Bottom),\n      width: width,\n      height: height\n    }\n  }), props.children);\n};\n\nPositioned.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n/**\r\n * @deprecated use useCurrentSpace() hook instead\r\n */\n\nvar Info = function Info(props) {\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n\n  if (domRect) {\n    return props.children(domRect);\n  }\n\n  return props.children({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  });\n};\n\nvar ViewPort = function ViewPort(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      children = _a.children,\n      commonProps = __rest(_a, ["left", "top", "right", "bottom", "children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.ViewPort,\n    position: {\n      left: left || 0,\n      top: top || 0,\n      right: right || 0,\n      bottom: bottom || 0\n    }\n  }), children);\n};\n\nViewPort.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]])\n});\n\nvar Options = function Options(_a) {\n  var children = _a.children,\n      opts = __rest(_a, ["children"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](OptionsContext.Provider, {\n    value: opts\n  }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///X0wg\n')},XQvf:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.active = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("kM82");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar active = exports.active = function active(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Active, _React$Component);\n\n    function Active() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Active);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        active: false\n      }, _this.handleMouseDown = function () {\n        return _this.setState({\n          active: true\n        });\n      }, _this.handleMouseUp = function () {\n        return _this.setState({\n          active: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseDown: _this.handleMouseDown,\n          onMouseUp: _this.handleMouseUp\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Active;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = active;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///XQvf\n')},ZpRC:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"Bran\");\n\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? Object(compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(target, options) : []);\n  }\n\n  if (!isTargetAttached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(Object(compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(target, computeOptions), computeOptions.behavior);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (scrollIntoView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsLWludG8tdmlldy1pZi1uZWVkZWQvZXMvaW5kZXguanM/NjY5NCJdLCJuYW1lcyI6WyJpc09wdGlvbnNPYmplY3QiLCJvcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImRlZmF1bHRCZWhhdmlvciIsImFjdGlvbnMiLCJiZWhhdmlvciIsImNhblNtb290aFNjcm9sbCIsImRvY3VtZW50IiwiYm9keSIsInN0eWxlIiwiZm9yRWFjaCIsIl9yZWYiLCJlbCIsInRvcCIsImxlZnQiLCJzY3JvbGwiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZ2V0T3B0aW9ucyIsImJsb2NrIiwiaW5saW5lIiwic2Nyb2xsSW50b1ZpZXciLCJ0YXJnZXQiLCJpc1RhcmdldEF0dGFjaGVkIiwiaXNDb25uZWN0ZWQiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGFpbnMiLCJjb21wdXRlIiwiY29tcHV0ZU9wdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBRUEsU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7QUFDaEMsU0FBT0EsT0FBTyxLQUFLQyxNQUFNLENBQUNELE9BQUQsQ0FBbEIsSUFBK0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixPQUFaLEVBQXFCRyxNQUFyQixLQUFnQyxDQUF0RTtBQUNEOztBQUVELFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxRQUFsQyxFQUE0QztBQUMxQyxNQUFJQSxRQUFRLEtBQUssS0FBSyxDQUF0QixFQUF5QjtBQUN2QkEsWUFBUSxHQUFHLE1BQVg7QUFDRDs7QUFFRCxNQUFJQyxlQUFlLElBQUksb0JBQW9CQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBdEMsQ0FBbkI7QUFDQUwsU0FBTyxDQUFDTSxPQUFSLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsUUFBSUMsRUFBRSxHQUFHRCxJQUFJLENBQUNDLEVBQWQ7QUFBQSxRQUNJQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0UsR0FEZjtBQUFBLFFBRUlDLElBQUksR0FBR0gsSUFBSSxDQUFDRyxJQUZoQjs7QUFJQSxRQUFJRixFQUFFLENBQUNHLE1BQUgsSUFBYVQsZUFBakIsRUFBa0M7QUFDaENNLFFBQUUsQ0FBQ0csTUFBSCxDQUFVO0FBQ1JGLFdBQUcsRUFBRUEsR0FERztBQUVSQyxZQUFJLEVBQUVBLElBRkU7QUFHUlQsZ0JBQVEsRUFBRUE7QUFIRixPQUFWO0FBS0QsS0FORCxNQU1PO0FBQ0xPLFFBQUUsQ0FBQ0ksU0FBSCxHQUFlSCxHQUFmO0FBQ0FELFFBQUUsQ0FBQ0ssVUFBSCxHQUFnQkgsSUFBaEI7QUFDRDtBQUNGLEdBZkQ7QUFnQkQ7O0FBRUQsU0FBU0ksVUFBVCxDQUFvQm5CLE9BQXBCLEVBQTZCO0FBQzNCLE1BQUlBLE9BQU8sS0FBSyxLQUFoQixFQUF1QjtBQUNyQixXQUFPO0FBQ0xvQixXQUFLLEVBQUUsS0FERjtBQUVMQyxZQUFNLEVBQUU7QUFGSCxLQUFQO0FBSUQ7O0FBRUQsTUFBSXRCLGVBQWUsQ0FBQ0MsT0FBRCxDQUFuQixFQUE4QjtBQUM1QixXQUFPQSxPQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUNMb0IsU0FBSyxFQUFFLE9BREY7QUFFTEMsVUFBTSxFQUFFO0FBRkgsR0FBUDtBQUlEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDdkIsT0FBaEMsRUFBeUM7QUFDdkMsTUFBSXdCLGdCQUFnQixHQUFHRCxNQUFNLENBQUNFLFdBQVAsSUFBc0JGLE1BQU0sQ0FBQ0csYUFBUCxDQUFxQkMsZUFBckIsQ0FBcUNDLFFBQXJDLENBQThDTCxNQUE5QyxDQUE3Qzs7QUFFQSxNQUFJeEIsZUFBZSxDQUFDQyxPQUFELENBQWYsSUFBNEIsT0FBT0EsT0FBTyxDQUFDTSxRQUFmLEtBQTRCLFVBQTVELEVBQXdFO0FBQ3RFLFdBQU9OLE9BQU8sQ0FBQ00sUUFBUixDQUFpQmtCLGdCQUFnQixHQUFHSyxnRkFBTyxDQUFDTixNQUFELEVBQVN2QixPQUFULENBQVYsR0FBOEIsRUFBL0QsQ0FBUDtBQUNEOztBQUVELE1BQUksQ0FBQ3dCLGdCQUFMLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBRUQsTUFBSU0sY0FBYyxHQUFHWCxVQUFVLENBQUNuQixPQUFELENBQS9CO0FBQ0EsU0FBT0ksZUFBZSxDQUFDeUIsZ0ZBQU8sQ0FBQ04sTUFBRCxFQUFTTyxjQUFULENBQVIsRUFBa0NBLGNBQWMsQ0FBQ3hCLFFBQWpELENBQXRCO0FBQ0Q7O0FBRWNnQix1RUFBZiIsImZpbGUiOiJacFJDLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbXB1dGUgZnJvbSAnY29tcHV0ZS1zY3JvbGwtaW50by12aWV3JztcblxuZnVuY3Rpb24gaXNPcHRpb25zT2JqZWN0KG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT09IE9iamVjdChvcHRpb25zKSAmJiBPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggIT09IDA7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRCZWhhdmlvcihhY3Rpb25zLCBiZWhhdmlvcikge1xuICBpZiAoYmVoYXZpb3IgPT09IHZvaWQgMCkge1xuICAgIGJlaGF2aW9yID0gJ2F1dG8nO1xuICB9XG5cbiAgdmFyIGNhblNtb290aFNjcm9sbCA9ICgnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmJvZHkuc3R5bGUpO1xuICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZWwgPSBfcmVmLmVsLFxuICAgICAgICB0b3AgPSBfcmVmLnRvcCxcbiAgICAgICAgbGVmdCA9IF9yZWYubGVmdDtcblxuICAgIGlmIChlbC5zY3JvbGwgJiYgY2FuU21vb3RoU2Nyb2xsKSB7XG4gICAgICBlbC5zY3JvbGwoe1xuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgYmVoYXZpb3I6IGJlaGF2aW9yXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgZWwuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICBibG9jazogJ2VuZCcsXG4gICAgICBpbmxpbmU6ICduZWFyZXN0J1xuICAgIH07XG4gIH1cblxuICBpZiAoaXNPcHRpb25zT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJsb2NrOiAnc3RhcnQnLFxuICAgIGlubGluZTogJ25lYXJlc3QnXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KHRhcmdldCwgb3B0aW9ucykge1xuICB2YXIgaXNUYXJnZXRBdHRhY2hlZCA9IHRhcmdldC5pc0Nvbm5lY3RlZCB8fCB0YXJnZXQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGFyZ2V0KTtcblxuICBpZiAoaXNPcHRpb25zT2JqZWN0KG9wdGlvbnMpICYmIHR5cGVvZiBvcHRpb25zLmJlaGF2aW9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYmVoYXZpb3IoaXNUYXJnZXRBdHRhY2hlZCA/IGNvbXB1dGUodGFyZ2V0LCBvcHRpb25zKSA6IFtdKTtcbiAgfVxuXG4gIGlmICghaXNUYXJnZXRBdHRhY2hlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb21wdXRlT3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucyk7XG4gIHJldHVybiBkZWZhdWx0QmVoYXZpb3IoY29tcHV0ZSh0YXJnZXQsIGNvbXB1dGVPcHRpb25zKSwgY29tcHV0ZU9wdGlvbnMuYmVoYXZpb3IpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzY3JvbGxJbnRvVmlldzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///ZpRC\n")},bdgK:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype[\"delete\"] = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations[\"delete\"](target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"IyRk\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bdgK\n")},lCFh:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node's url.parse\n\n\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n  var hasTrailingSlash;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }\n  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n  var result = fromParts.join('/');\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n  return result;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (resolvePathname);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcz85NDIxIl0sIm5hbWVzIjpbImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImxpc3QiLCJpbmRleCIsImkiLCJrIiwibiIsImxlbmd0aCIsInBvcCIsInJlc29sdmVQYXRobmFtZSIsInRvIiwiZnJvbSIsInVuZGVmaW5lZCIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwiam9pbiIsInN1YnN0ciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEI7QUFDNUIsU0FBT0EsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQTlCO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsT0FBSyxJQUFJQyxDQUFDLEdBQUdELEtBQVIsRUFBZUUsQ0FBQyxHQUFHRCxDQUFDLEdBQUcsQ0FBdkIsRUFBMEJFLENBQUMsR0FBR0osSUFBSSxDQUFDSyxNQUF4QyxFQUFnREYsQ0FBQyxHQUFHQyxDQUFwRCxFQUF1REYsQ0FBQyxJQUFJLENBQUwsRUFBUUMsQ0FBQyxJQUFJLENBQXBFLEVBQXVFO0FBQ3JFSCxRQUFJLENBQUNFLENBQUQsQ0FBSixHQUFVRixJQUFJLENBQUNHLENBQUQsQ0FBZDtBQUNEOztBQUVESCxNQUFJLENBQUNNLEdBQUw7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxNQUFJQSxJQUFJLEtBQUtDLFNBQWIsRUFBd0JELElBQUksR0FBRyxFQUFQO0FBRXhCLE1BQUlFLE9BQU8sR0FBSUgsRUFBRSxJQUFJQSxFQUFFLENBQUNJLEtBQUgsQ0FBUyxHQUFULENBQVAsSUFBeUIsRUFBdkM7QUFDQSxNQUFJQyxTQUFTLEdBQUlKLElBQUksSUFBSUEsSUFBSSxDQUFDRyxLQUFMLENBQVcsR0FBWCxDQUFULElBQTZCLEVBQTdDO0FBRUEsTUFBSUUsT0FBTyxHQUFHTixFQUFFLElBQUlaLFVBQVUsQ0FBQ1ksRUFBRCxDQUE5QjtBQUNBLE1BQUlPLFNBQVMsR0FBR04sSUFBSSxJQUFJYixVQUFVLENBQUNhLElBQUQsQ0FBbEM7QUFDQSxNQUFJTyxVQUFVLEdBQUdGLE9BQU8sSUFBSUMsU0FBNUI7O0FBRUEsTUFBSVAsRUFBRSxJQUFJWixVQUFVLENBQUNZLEVBQUQsQ0FBcEIsRUFBMEI7QUFDeEI7QUFDQUssYUFBUyxHQUFHRixPQUFaO0FBQ0QsR0FIRCxNQUdPLElBQUlBLE9BQU8sQ0FBQ04sTUFBWixFQUFvQjtBQUN6QjtBQUNBUSxhQUFTLENBQUNQLEdBQVY7QUFDQU8sYUFBUyxHQUFHQSxTQUFTLENBQUNJLE1BQVYsQ0FBaUJOLE9BQWpCLENBQVo7QUFDRDs7QUFFRCxNQUFJLENBQUNFLFNBQVMsQ0FBQ1IsTUFBZixFQUF1QixPQUFPLEdBQVA7QUFFdkIsTUFBSWEsZ0JBQUo7O0FBQ0EsTUFBSUwsU0FBUyxDQUFDUixNQUFkLEVBQXNCO0FBQ3BCLFFBQUljLElBQUksR0FBR04sU0FBUyxDQUFDQSxTQUFTLENBQUNSLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBcEI7QUFDQWEsb0JBQWdCLEdBQUdDLElBQUksS0FBSyxHQUFULElBQWdCQSxJQUFJLEtBQUssSUFBekIsSUFBaUNBLElBQUksS0FBSyxFQUE3RDtBQUNELEdBSEQsTUFHTztBQUNMRCxvQkFBZ0IsR0FBRyxLQUFuQjtBQUNEOztBQUVELE1BQUlFLEVBQUUsR0FBRyxDQUFUOztBQUNBLE9BQUssSUFBSWxCLENBQUMsR0FBR1csU0FBUyxDQUFDUixNQUF2QixFQUErQkgsQ0FBQyxJQUFJLENBQXBDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDLFFBQUltQixJQUFJLEdBQUdSLFNBQVMsQ0FBQ1gsQ0FBRCxDQUFwQjs7QUFFQSxRQUFJbUIsSUFBSSxLQUFLLEdBQWIsRUFBa0I7QUFDaEJ0QixlQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO0FBQ0QsS0FGRCxNQUVPLElBQUltQixJQUFJLEtBQUssSUFBYixFQUFtQjtBQUN4QnRCLGVBQVMsQ0FBQ2MsU0FBRCxFQUFZWCxDQUFaLENBQVQ7QUFDQWtCLFFBQUU7QUFDSCxLQUhNLE1BR0EsSUFBSUEsRUFBSixFQUFRO0FBQ2JyQixlQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO0FBQ0FrQixRQUFFO0FBQ0g7QUFDRjs7QUFFRCxNQUFJLENBQUNKLFVBQUwsRUFBaUIsT0FBT0ksRUFBRSxFQUFULEVBQWFBLEVBQWI7QUFBaUJQLGFBQVMsQ0FBQ1MsT0FBVixDQUFrQixJQUFsQjtBQUFqQjtBQUVqQixNQUNFTixVQUFVLElBQ1ZILFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUIsRUFEakIsS0FFQyxDQUFDQSxTQUFTLENBQUMsQ0FBRCxDQUFWLElBQWlCLENBQUNqQixVQUFVLENBQUNpQixTQUFTLENBQUMsQ0FBRCxDQUFWLENBRjdCLENBREYsRUFLRUEsU0FBUyxDQUFDUyxPQUFWLENBQWtCLEVBQWxCO0FBRUYsTUFBSUMsTUFBTSxHQUFHVixTQUFTLENBQUNXLElBQVYsQ0FBZSxHQUFmLENBQWI7QUFFQSxNQUFJTixnQkFBZ0IsSUFBSUssTUFBTSxDQUFDRSxNQUFQLENBQWMsQ0FBQyxDQUFmLE1BQXNCLEdBQTlDLEVBQW1ERixNQUFNLElBQUksR0FBVjtBQUVuRCxTQUFPQSxNQUFQO0FBQ0Q7O0FBRWNoQix3RUFBZiIsImZpbGUiOiJsQ0ZoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///lCFh\n")},lreK:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.mergeClasses = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _cloneDeep2 = __webpack_require__("BkRI");\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar mergeClasses = exports.mergeClasses = function mergeClasses(classes) {\n  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var styles = classes["default"] && (0, _cloneDeep3["default"])(classes["default"]) || {};\n  activeNames.map(function (name) {\n    var toMerge = classes[name];\n\n    if (toMerge) {\n      (0, _forOwn3["default"])(toMerge, function (value, key) {\n        if (!styles[key]) {\n          styles[key] = {};\n        }\n\n        styles[key] = _extends({}, styles[key], toMerge[key]);\n      });\n    }\n\n    return name;\n  });\n  return styles;\n};\n\nexports["default"] = mergeClasses;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL21lcmdlQ2xhc3Nlcy5qcz85NmI3Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWVyZ2VDbGFzc2VzIiwidW5kZWZpbmVkIiwiX2Zvck93bjIiLCJyZXF1aXJlIiwiX2Zvck93bjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Nsb25lRGVlcDIiLCJfY2xvbmVEZWVwMyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjbGFzc2VzIiwiYWN0aXZlTmFtZXMiLCJzdHlsZXMiLCJtYXAiLCJuYW1lIiwidG9NZXJnZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXRCOztBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNILFFBQUQsQ0FBckM7O0FBRUEsSUFBSUksV0FBVyxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSUksV0FBVyxHQUFHRixzQkFBc0IsQ0FBQ0MsV0FBRCxDQUF4Qzs7QUFFQSxJQUFJRSxRQUFRLEdBQUdaLE1BQU0sQ0FBQ2EsTUFBUCxJQUFpQixVQUFVQyxNQUFWLEVBQWtCO0FBQUUsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0FBQUUsUUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBdEI7O0FBQTJCLFNBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7QUFBRSxVQUFJbEIsTUFBTSxDQUFDb0IsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDSixNQUFyQyxFQUE2Q0MsR0FBN0MsQ0FBSixFQUF1RDtBQUFFTCxjQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEI7QUFBNEI7QUFBRTtBQUFFOztBQUFDLFNBQU9MLE1BQVA7QUFBZ0IsQ0FBaFE7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NjLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUUsZUFBU0E7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBSW5CLFlBQVksR0FBR0YsT0FBTyxDQUFDRSxZQUFSLEdBQXVCLFNBQVNBLFlBQVQsQ0FBc0JxQixPQUF0QixFQUErQjtBQUN2RSxNQUFJQyxXQUFXLEdBQUdWLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQlgsU0FBekMsR0FBcURXLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQXRGO0FBRUEsTUFBSVcsTUFBTSxHQUFHRixPQUFPLFdBQVAsSUFBbUIsQ0FBQyxHQUFHZCxXQUFXLFdBQWYsRUFBeUJjLE9BQU8sV0FBaEMsQ0FBbkIsSUFBZ0UsRUFBN0U7QUFDQUMsYUFBVyxDQUFDRSxHQUFaLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsUUFBSUMsT0FBTyxHQUFHTCxPQUFPLENBQUNJLElBQUQsQ0FBckI7O0FBQ0EsUUFBSUMsT0FBSixFQUFhO0FBQ1gsT0FBQyxHQUFHdEIsUUFBUSxXQUFaLEVBQXNCc0IsT0FBdEIsRUFBK0IsVUFBVTNCLEtBQVYsRUFBaUJnQixHQUFqQixFQUFzQjtBQUNuRCxZQUFJLENBQUNRLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCO0FBQ2hCUSxnQkFBTSxDQUFDUixHQUFELENBQU4sR0FBYyxFQUFkO0FBQ0Q7O0FBRURRLGNBQU0sQ0FBQ1IsR0FBRCxDQUFOLEdBQWNQLFFBQVEsQ0FBQyxFQUFELEVBQUtlLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCVyxPQUFPLENBQUNYLEdBQUQsQ0FBekIsQ0FBdEI7QUFDRCxPQU5EO0FBT0Q7O0FBRUQsV0FBT1UsSUFBUDtBQUNELEdBYkQ7QUFjQSxTQUFPRixNQUFQO0FBQ0QsQ0FuQkQ7O0FBcUJBekIsT0FBTyxXQUFQLEdBQWtCRSxZQUFsQiIsImZpbGUiOiJscmVLLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5tZXJnZUNsYXNzZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfY2xvbmVEZWVwMiA9IHJlcXVpcmUoJ2xvZGFzaC9jbG9uZURlZXAnKTtcblxudmFyIF9jbG9uZURlZXAzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmVEZWVwMik7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBtZXJnZUNsYXNzZXMgPSBleHBvcnRzLm1lcmdlQ2xhc3NlcyA9IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcyhjbGFzc2VzKSB7XG4gIHZhciBhY3RpdmVOYW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG5cbiAgdmFyIHN0eWxlcyA9IGNsYXNzZXMuZGVmYXVsdCAmJiAoMCwgX2Nsb25lRGVlcDMuZGVmYXVsdCkoY2xhc3Nlcy5kZWZhdWx0KSB8fCB7fTtcbiAgYWN0aXZlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHRvTWVyZ2UgPSBjbGFzc2VzW25hbWVdO1xuICAgIGlmICh0b01lcmdlKSB7XG4gICAgICAoMCwgX2Zvck93bjMuZGVmYXVsdCkodG9NZXJnZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFzdHlsZXNba2V5XSkge1xuICAgICAgICAgIHN0eWxlc1trZXldID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNba2V5XSA9IF9leHRlbmRzKHt9LCBzdHlsZXNba2V5XSwgdG9NZXJnZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1lcmdlQ2xhc3NlczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///lreK\n')},mSXw:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("9iN/");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcz85OTI1Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN6Q0MsUUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxtQkFBTyxDQUFDLE1BQUQsQ0FBeEI7QUFDRCxDQUZELE1BRU8iLCJmaWxlIjoibVNYdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///mSXw\n')},qT12:function(module,exports,__webpack_require__){"use strict";eval('/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = Symbol["for"]("react.element"),\n    c = Symbol["for"]("react.portal"),\n    d = Symbol["for"]("react.fragment"),\n    e = Symbol["for"]("react.strict_mode"),\n    f = Symbol["for"]("react.profiler"),\n    g = Symbol["for"]("react.provider"),\n    h = Symbol["for"]("react.context"),\n    k = Symbol["for"]("react.server_context"),\n    l = Symbol["for"]("react.forward_ref"),\n    m = Symbol["for"]("react.suspense"),\n    n = Symbol["for"]("react.suspense_list"),\n    p = Symbol["for"]("react.memo"),\n    q = Symbol["for"]("react.lazy"),\n    t = Symbol["for"]("react.offscreen"),\n    u;\nu = Symbol["for"]("react.module.reference");\n\nfunction v(a) {\n  if ("object" === typeof a && null !== a) {\n    var r = a.$$typeof;\n\n    switch (r) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case m:\n          case n:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case h:\n              case l:\n              case q:\n              case p:\n              case g:\n                return a;\n\n              default:\n                return r;\n            }\n\n        }\n\n      case c:\n        return r;\n    }\n  }\n}\n\nexports.ContextConsumer = h;\nexports.ContextProvider = g;\nexports.Element = b;\nexports.ForwardRef = l;\nexports.Fragment = d;\nexports.Lazy = q;\nexports.Memo = p;\nexports.Portal = c;\nexports.Profiler = f;\nexports.StrictMode = e;\nexports.Suspense = m;\nexports.SuspenseList = n;\n\nexports.isAsyncMode = function () {\n  return !1;\n};\n\nexports.isConcurrentMode = function () {\n  return !1;\n};\n\nexports.isContextConsumer = function (a) {\n  return v(a) === h;\n};\n\nexports.isContextProvider = function (a) {\n  return v(a) === g;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === b;\n};\n\nexports.isForwardRef = function (a) {\n  return v(a) === l;\n};\n\nexports.isFragment = function (a) {\n  return v(a) === d;\n};\n\nexports.isLazy = function (a) {\n  return v(a) === q;\n};\n\nexports.isMemo = function (a) {\n  return v(a) === p;\n};\n\nexports.isPortal = function (a) {\n  return v(a) === c;\n};\n\nexports.isProfiler = function (a) {\n  return v(a) === f;\n};\n\nexports.isStrictMode = function (a) {\n  return v(a) === e;\n};\n\nexports.isSuspense = function (a) {\n  return v(a) === m;\n};\n\nexports.isSuspenseList = function (a) {\n  return v(a) === n;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;\n};\n\nexports.typeOf = v;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///qT12\n')}}]);