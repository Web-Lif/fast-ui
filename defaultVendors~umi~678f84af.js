(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[5],{"/FUP":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;\n\nvar _flattenNames = __webpack_require__("W3HW");\n\nvar _flattenNames2 = _interopRequireDefault(_flattenNames);\n\nvar _mergeClasses = __webpack_require__("lreK");\n\nvar _mergeClasses2 = _interopRequireDefault(_mergeClasses);\n\nvar _autoprefix = __webpack_require__("KfSR");\n\nvar _autoprefix2 = _interopRequireDefault(_autoprefix);\n\nvar _hover2 = __webpack_require__("VYtm");\n\nvar _hover3 = _interopRequireDefault(_hover2);\n\nvar _active = __webpack_require__("XQvf");\n\nvar _active2 = _interopRequireDefault(_active);\n\nvar _loop2 = __webpack_require__("B5Mt");\n\nvar _loop3 = _interopRequireDefault(_loop2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nexports.hover = _hover3["default"];\nexports.handleHover = _hover3["default"];\nexports.handleActive = _active2["default"];\nexports.loop = _loop3["default"];\n\nvar ReactCSS = exports.ReactCSS = function ReactCSS(classes) {\n  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    activations[_key - 1] = arguments[_key];\n  }\n\n  var activeNames = (0, _flattenNames2["default"])(activations);\n  var merged = (0, _mergeClasses2["default"])(classes, activeNames);\n  return (0, _autoprefix2["default"])(merged);\n};\n\nexports["default"] = ReactCSS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2luZGV4LmpzP2ZjNTUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFjdENTUyIsImxvb3AiLCJoYW5kbGVBY3RpdmUiLCJoYW5kbGVIb3ZlciIsImhvdmVyIiwidW5kZWZpbmVkIiwiX2ZsYXR0ZW5OYW1lcyIsInJlcXVpcmUiLCJfZmxhdHRlbk5hbWVzMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWVyZ2VDbGFzc2VzIiwiX21lcmdlQ2xhc3NlczIiLCJfYXV0b3ByZWZpeCIsIl9hdXRvcHJlZml4MiIsIl9ob3ZlcjIiLCJfaG92ZXIzIiwiX2FjdGl2ZSIsIl9hY3RpdmUyIiwiX2xvb3AyIiwiX2xvb3AzIiwib2JqIiwiX19lc01vZHVsZSIsImNsYXNzZXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYWN0aXZhdGlvbnMiLCJBcnJheSIsIl9rZXkiLCJhY3RpdmVOYW1lcyIsIm1lcmdlZCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFFBQVIsR0FBbUJGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFlBQVIsR0FBdUJKLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQkwsT0FBTyxDQUFDTSxLQUFSLEdBQWdCQyxTQUEvRjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUEzQjs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDSCxhQUFELENBQTNDOztBQUVBLElBQUlJLGFBQWEsR0FBR0gsbUJBQU8sQ0FBQyxNQUFELENBQTNCOztBQUVBLElBQUlJLGNBQWMsR0FBR0Ysc0JBQXNCLENBQUNDLGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUUsV0FBVyxHQUFHTCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSU0sWUFBWSxHQUFHSixzQkFBc0IsQ0FBQ0csV0FBRCxDQUF6Qzs7QUFFQSxJQUFJRSxPQUFPLEdBQUdQLG1CQUFPLENBQUMsTUFBRCxDQUFyQjs7QUFFQSxJQUFJUSxPQUFPLEdBQUdOLHNCQUFzQixDQUFDSyxPQUFELENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR1QsbUJBQU8sQ0FBQyxNQUFELENBQXJCOztBQUVBLElBQUlVLFFBQVEsR0FBR1Isc0JBQXNCLENBQUNPLE9BQUQsQ0FBckM7O0FBRUEsSUFBSUUsTUFBTSxHQUFHWCxtQkFBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsSUFBSVksTUFBTSxHQUFHVixzQkFBc0IsQ0FBQ1MsTUFBRCxDQUFuQzs7QUFFQSxTQUFTVCxzQkFBVCxDQUFnQ1csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRSxlQUFTQTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRnRCLE9BQU8sQ0FBQ00sS0FBUixHQUFnQlcsT0FBTyxXQUF2QjtBQUNBakIsT0FBTyxDQUFDSyxXQUFSLEdBQXNCWSxPQUFPLFdBQTdCO0FBQ0FqQixPQUFPLENBQUNJLFlBQVIsR0FBdUJlLFFBQVEsV0FBL0I7QUFDQW5CLE9BQU8sQ0FBQ0csSUFBUixHQUFla0IsTUFBTSxXQUFyQjs7QUFDQSxJQUFJbkIsUUFBUSxHQUFHRixPQUFPLENBQUNFLFFBQVIsR0FBbUIsU0FBU0EsUUFBVCxDQUFrQnNCLE9BQWxCLEVBQTJCO0FBQzNELE9BQUssSUFBSUMsSUFBSSxHQUFHQyxTQUFTLENBQUNDLE1BQXJCLEVBQTZCQyxXQUFXLEdBQUdDLEtBQUssQ0FBQ0osSUFBSSxHQUFHLENBQVAsR0FBV0EsSUFBSSxHQUFHLENBQWxCLEdBQXNCLENBQXZCLENBQWhELEVBQTJFSyxJQUFJLEdBQUcsQ0FBdkYsRUFBMEZBLElBQUksR0FBR0wsSUFBakcsRUFBdUdLLElBQUksRUFBM0csRUFBK0c7QUFDN0dGLGVBQVcsQ0FBQ0UsSUFBSSxHQUFHLENBQVIsQ0FBWCxHQUF3QkosU0FBUyxDQUFDSSxJQUFELENBQWpDO0FBQ0Q7O0FBRUQsTUFBSUMsV0FBVyxHQUFHLENBQUMsR0FBR3JCLGNBQWMsV0FBbEIsRUFBNEJrQixXQUE1QixDQUFsQjtBQUNBLE1BQUlJLE1BQU0sR0FBRyxDQUFDLEdBQUduQixjQUFjLFdBQWxCLEVBQTRCVyxPQUE1QixFQUFxQ08sV0FBckMsQ0FBYjtBQUNBLFNBQU8sQ0FBQyxHQUFHaEIsWUFBWSxXQUFoQixFQUEwQmlCLE1BQTFCLENBQVA7QUFDRCxDQVJEOztBQVVBaEMsT0FBTyxXQUFQLEdBQWtCRSxRQUFsQiIsImZpbGUiOiIvRlVQLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SZWFjdENTUyA9IGV4cG9ydHMubG9vcCA9IGV4cG9ydHMuaGFuZGxlQWN0aXZlID0gZXhwb3J0cy5oYW5kbGVIb3ZlciA9IGV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZmxhdHRlbk5hbWVzID0gcmVxdWlyZSgnLi9mbGF0dGVuTmFtZXMnKTtcblxudmFyIF9mbGF0dGVuTmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxhdHRlbk5hbWVzKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSByZXF1aXJlKCcuL21lcmdlQ2xhc3NlcycpO1xuXG52YXIgX21lcmdlQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZUNsYXNzZXMpO1xuXG52YXIgX2F1dG9wcmVmaXggPSByZXF1aXJlKCcuL2F1dG9wcmVmaXgnKTtcblxudmFyIF9hdXRvcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9wcmVmaXgpO1xuXG52YXIgX2hvdmVyMiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9ob3ZlcicpO1xuXG52YXIgX2hvdmVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvdmVyMik7XG5cbnZhciBfYWN0aXZlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FjdGl2ZScpO1xuXG52YXIgX2FjdGl2ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3RpdmUpO1xuXG52YXIgX2xvb3AyID0gcmVxdWlyZSgnLi9sb29wJyk7XG5cbnZhciBfbG9vcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb29wMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuaG92ZXIgPSBfaG92ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmhhbmRsZUhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVBY3RpdmUgPSBfYWN0aXZlMi5kZWZhdWx0O1xuZXhwb3J0cy5sb29wID0gX2xvb3AzLmRlZmF1bHQ7XG52YXIgUmVhY3RDU1MgPSBleHBvcnRzLlJlYWN0Q1NTID0gZnVuY3Rpb24gUmVhY3RDU1MoY2xhc3Nlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWN0aXZhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYWN0aXZhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGl2ZU5hbWVzID0gKDAsIF9mbGF0dGVuTmFtZXMyLmRlZmF1bHQpKGFjdGl2YXRpb25zKTtcbiAgdmFyIG1lcmdlZCA9ICgwLCBfbWVyZ2VDbGFzc2VzMi5kZWZhdWx0KShjbGFzc2VzLCBhY3RpdmVOYW1lcyk7XG4gIHJldHVybiAoMCwgX2F1dG9wcmVmaXgyLmRlZmF1bHQpKG1lcmdlZCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdENTUzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:////FUP\n')},"55Ip":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export BrowserRouter */\n/* unused harmony export HashRouter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Link; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return NavLink; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("YS25");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("zLVn");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("9R94");\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createBrowserHistory */ "a"])(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createHashHistory */ "b"])(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"], {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\n\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? Object(history__WEBPACK_IMPORTED_MODULE_3__[/* createLocation */ "c"])(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* __RouterContext */ "h"].Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55Ip\n')},"8yz6":function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (string, separator) {\n  if (!(typeof string === 'string' && typeof separator === 'string')) {\n    throw new TypeError('Expected the arguments to be of type `string`');\n  }\n\n  if (separator === '') {\n    return [string];\n  }\n\n  var separatorIndex = string.indexOf(separator);\n\n  if (separatorIndex === -1) {\n    return [string];\n  }\n\n  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3BsaXQtb24tZmlyc3QvaW5kZXguanM/ZjMyYyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3RyaW5nIiwic2VwYXJhdG9yIiwiVHlwZUVycm9yIiwic2VwYXJhdG9ySW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBQ0MsTUFBRCxFQUFTQyxTQUFULEVBQXVCO0FBQ3ZDLE1BQUksRUFBRSxPQUFPRCxNQUFQLEtBQWtCLFFBQWxCLElBQThCLE9BQU9DLFNBQVAsS0FBcUIsUUFBckQsQ0FBSixFQUFvRTtBQUNuRSxVQUFNLElBQUlDLFNBQUosQ0FBYywrQ0FBZCxDQUFOO0FBQ0E7O0FBRUQsTUFBSUQsU0FBUyxLQUFLLEVBQWxCLEVBQXNCO0FBQ3JCLFdBQU8sQ0FBQ0QsTUFBRCxDQUFQO0FBQ0E7O0FBRUQsTUFBTUcsY0FBYyxHQUFHSCxNQUFNLENBQUNJLE9BQVAsQ0FBZUgsU0FBZixDQUF2Qjs7QUFFQSxNQUFJRSxjQUFjLEtBQUssQ0FBQyxDQUF4QixFQUEyQjtBQUMxQixXQUFPLENBQUNILE1BQUQsQ0FBUDtBQUNBOztBQUVELFNBQU8sQ0FDTkEsTUFBTSxDQUFDSyxLQUFQLENBQWEsQ0FBYixFQUFnQkYsY0FBaEIsQ0FETSxFQUVOSCxNQUFNLENBQUNLLEtBQVAsQ0FBYUYsY0FBYyxHQUFHRixTQUFTLENBQUNLLE1BQXhDLENBRk0sQ0FBUDtBQUlBLENBbkJEIiwiZmlsZSI6Ijh5ejYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0cmluZywgc2VwYXJhdG9yKSA9PiB7XG5cdGlmICghKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCcpO1xuXHR9XG5cblx0aWYgKHNlcGFyYXRvciA9PT0gJycpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG5cblx0aWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdHJldHVybiBbXG5cdFx0c3RyaW5nLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KSxcblx0XHRzdHJpbmcuc2xpY2Uoc2VwYXJhdG9ySW5kZXggKyBzZXBhcmF0b3IubGVuZ3RoKVxuXHRdO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8yz6\n")},"97ZR":function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: "normal",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: "throw",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke("next", value, resolve, reject);\n          }, function (err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === "throw") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError("The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: "root"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = "next";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" || record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    "catch": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error("illegal catch attempt");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n true ? module.exports : undefined);\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97ZR\n')},"9R94":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return invariant; });\nvar isProduction = \"production\" === 'production';\nvar prefix = 'Invariant failed';\n\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n\n  var provided = typeof message === 'function' ? message() : message;\n  var value = provided ? prefix + \": \" + provided : prefix;\n  throw new Error(value);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanM/ZjUxZiJdLCJuYW1lcyI6WyJpc1Byb2R1Y3Rpb24iLCJwcm9jZXNzIiwicHJlZml4IiwiaW52YXJpYW50IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwicHJvdmlkZWQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFJQSxZQUFZLEdBQUdDLFlBQUEsS0FBeUIsWUFBNUM7QUFDQSxJQUFJQyxNQUFNLEdBQUcsa0JBQWI7O0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEJDLE9BQTlCLEVBQXVDO0FBQ25DLE1BQUlELFNBQUosRUFBZTtBQUNYO0FBQ0g7O0FBQ0QsTUFBSUosWUFBSixFQUFrQjtBQUNkLFVBQU0sSUFBSU0sS0FBSixDQUFVSixNQUFWLENBQU47QUFDSDs7QUFDRCxNQUFJSyxRQUFRLEdBQUcsT0FBT0YsT0FBUCxLQUFtQixVQUFuQixHQUFnQ0EsT0FBTyxFQUF2QyxHQUE0Q0EsT0FBM0Q7QUFDQSxNQUFJRyxLQUFLLEdBQUdELFFBQVEsR0FBR0wsTUFBTSxHQUFHLElBQVQsR0FBZ0JLLFFBQW5CLEdBQThCTCxNQUFsRDtBQUNBLFFBQU0sSUFBSUksS0FBSixDQUFVRSxLQUFWLENBQU47QUFDSCIsImZpbGUiOiI5Ujk0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB2YXIgcHJvdmlkZWQgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UoKSA6IG1lc3NhZ2U7XG4gICAgdmFyIHZhbHVlID0gcHJvdmlkZWQgPyBwcmVmaXggKyBcIjogXCIgKyBwcm92aWRlZCA6IHByZWZpeDtcbiAgICB0aHJvdyBuZXcgRXJyb3IodmFsdWUpO1xufVxuXG5leHBvcnQgeyBpbnZhcmlhbnQgYXMgZGVmYXVsdCB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9R94\n")},"9iN/":function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = "function" === typeof Symbol && Symbol["for"],\n    c = b ? Symbol["for"]("react.element") : 60103,\n    d = b ? Symbol["for"]("react.portal") : 60106,\n    e = b ? Symbol["for"]("react.fragment") : 60107,\n    f = b ? Symbol["for"]("react.strict_mode") : 60108,\n    g = b ? Symbol["for"]("react.profiler") : 60114,\n    h = b ? Symbol["for"]("react.provider") : 60109,\n    k = b ? Symbol["for"]("react.context") : 60110,\n    l = b ? Symbol["for"]("react.async_mode") : 60111,\n    m = b ? Symbol["for"]("react.concurrent_mode") : 60111,\n    n = b ? Symbol["for"]("react.forward_ref") : 60112,\n    p = b ? Symbol["for"]("react.suspense") : 60113,\n    q = b ? Symbol["for"]("react.suspense_list") : 60120,\n    r = b ? Symbol["for"]("react.memo") : 60115,\n    t = b ? Symbol["for"]("react.lazy") : 60116,\n    v = b ? Symbol["for"]("react.block") : 60121,\n    w = b ? Symbol["for"]("react.fundamental") : 60117,\n    x = b ? Symbol["for"]("react.responder") : 60118,\n    y = b ? Symbol["for"]("react.scope") : 60119;\n\nfunction z(a) {\n  if ("object" === typeof a && null !== a) {\n    var u = a.$$typeof;\n\n    switch (u) {\n      case c:\n        switch (a = a.type, a) {\n          case l:\n          case m:\n          case e:\n          case g:\n          case f:\n          case p:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case n:\n              case t:\n              case r:\n              case h:\n                return a;\n\n              default:\n                return u;\n            }\n\n        }\n\n      case d:\n        return u;\n    }\n  }\n}\n\nfunction A(a) {\n  return z(a) === m;\n}\n\nexports.AsyncMode = l;\nexports.ConcurrentMode = m;\nexports.ContextConsumer = k;\nexports.ContextProvider = h;\nexports.Element = c;\nexports.ForwardRef = n;\nexports.Fragment = e;\nexports.Lazy = t;\nexports.Memo = r;\nexports.Portal = d;\nexports.Profiler = g;\nexports.StrictMode = f;\nexports.Suspense = p;\n\nexports.isAsyncMode = function (a) {\n  return A(a) || z(a) === l;\n};\n\nexports.isConcurrentMode = A;\n\nexports.isContextConsumer = function (a) {\n  return z(a) === k;\n};\n\nexports.isContextProvider = function (a) {\n  return z(a) === h;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === c;\n};\n\nexports.isForwardRef = function (a) {\n  return z(a) === n;\n};\n\nexports.isFragment = function (a) {\n  return z(a) === e;\n};\n\nexports.isLazy = function (a) {\n  return z(a) === t;\n};\n\nexports.isMemo = function (a) {\n  return z(a) === r;\n};\n\nexports.isPortal = function (a) {\n  return z(a) === d;\n};\n\nexports.isProfiler = function (a) {\n  return z(a) === g;\n};\n\nexports.isStrictMode = function (a) {\n  return z(a) === f;\n};\n\nexports.isSuspense = function (a) {\n  return z(a) === p;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\n\nexports.typeOf = z;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9iN/\n')},B5Mt:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar loopable = function loopable(i, length) {\n  var props = {};\n\n  var setProp = function setProp(name) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    props[name] = value;\n  };\n\n  i === 0 && setProp('first-child');\n  i === length - 1 && setProp('last-child');\n  (i === 0 || i % 2 === 0) && setProp('even');\n  Math.abs(i % 2) === 1 && setProp('odd');\n  setProp('nth-child', i);\n  return props;\n};\n\nexports[\"default\"] = loopable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2xvb3AuanM/MDc5MyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvb3BhYmxlIiwiaSIsImxlbmd0aCIsInByb3BzIiwic2V0UHJvcCIsIm5hbWUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFO0FBRG9DLENBQTdDOztBQUdBLElBQUlDLFFBQVEsR0FBRyxTQUFTQSxRQUFULENBQWtCQyxDQUFsQixFQUFxQkMsTUFBckIsRUFBNkI7QUFDMUMsTUFBSUMsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsTUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCO0FBQ25DLFFBQUlOLEtBQUssR0FBR08sU0FBUyxDQUFDSixNQUFWLEdBQW1CLENBQW5CLElBQXdCSSxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCQyxTQUF6QyxHQUFxREQsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7QUFFQUgsU0FBSyxDQUFDRSxJQUFELENBQUwsR0FBY04sS0FBZDtBQUNELEdBSkQ7O0FBTUFFLEdBQUMsS0FBSyxDQUFOLElBQVdHLE9BQU8sQ0FBQyxhQUFELENBQWxCO0FBQ0FILEdBQUMsS0FBS0MsTUFBTSxHQUFHLENBQWYsSUFBb0JFLE9BQU8sQ0FBQyxZQUFELENBQTNCO0FBQ0EsR0FBQ0gsQ0FBQyxLQUFLLENBQU4sSUFBV0EsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUF0QixLQUE0QkcsT0FBTyxDQUFDLE1BQUQsQ0FBbkM7QUFDQUksTUFBSSxDQUFDQyxHQUFMLENBQVNSLENBQUMsR0FBRyxDQUFiLE1BQW9CLENBQXBCLElBQXlCRyxPQUFPLENBQUMsS0FBRCxDQUFoQztBQUNBQSxTQUFPLENBQUMsV0FBRCxFQUFjSCxDQUFkLENBQVA7QUFFQSxTQUFPRSxLQUFQO0FBQ0QsQ0FmRDs7QUFpQkFMLE9BQU8sV0FBUCxHQUFrQkUsUUFBbEIiLCJmaWxlIjoiQjVNdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsb29wYWJsZSA9IGZ1bmN0aW9uIGxvb3BhYmxlKGksIGxlbmd0aCkge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHNldFByb3AgPSBmdW5jdGlvbiBzZXRQcm9wKG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBwcm9wc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIGkgPT09IDAgJiYgc2V0UHJvcCgnZmlyc3QtY2hpbGQnKTtcbiAgaSA9PT0gbGVuZ3RoIC0gMSAmJiBzZXRQcm9wKCdsYXN0LWNoaWxkJyk7XG4gIChpID09PSAwIHx8IGkgJSAyID09PSAwKSAmJiBzZXRQcm9wKCdldmVuJyk7XG4gIE1hdGguYWJzKGkgJSAyKSA9PT0gMSAmJiBzZXRQcm9wKCdvZGQnKTtcbiAgc2V0UHJvcCgnbnRoLWNoaWxkJywgaSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbG9vcGFibGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///B5Mt\n")},FUNW:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("dI71");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof global !== \'undefined\' ? global : {};\n\nfunction getUniqueId() {\n  var key = \'__global_unique_id__\';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = \'__create-react-context-\' + getUniqueId() + \'__\';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === \'function\' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;\n/* harmony default export */ __webpack_exports__["a"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("IyRk")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///FUNW\n')},Gytx:function(module,exports){eval('//\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A\'s keys different from B.\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valueA !== valueB) {\n      return false;\n    }\n  }\n\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzPzFiMmIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwiY29tcGFyZSIsImNvbXBhcmVDb250ZXh0IiwicmV0IiwiY2FsbCIsImtleXNBIiwiT2JqZWN0Iiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwiYkhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiaW5kIiwiaWR4Iiwia2V5IiwidmFsdWVBIiwidmFsdWVCIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQ0MsY0FBM0MsRUFBMkQ7QUFDMUUsTUFBSUMsR0FBRyxHQUFHRixPQUFPLEdBQUdBLE9BQU8sQ0FBQ0csSUFBUixDQUFhRixjQUFiLEVBQTZCSCxJQUE3QixFQUFtQ0MsSUFBbkMsQ0FBSCxHQUE4QyxLQUFLLENBQXBFOztBQUVBLE1BQUlHLEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0FBQ2xCLFdBQU8sQ0FBQyxDQUFDQSxHQUFUO0FBQ0Q7O0FBRUQsTUFBSUosSUFBSSxLQUFLQyxJQUFiLEVBQW1CO0FBQ2pCLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUksT0FBT0QsSUFBUCxLQUFnQixRQUFoQixJQUE0QixDQUFDQSxJQUE3QixJQUFxQyxPQUFPQyxJQUFQLEtBQWdCLFFBQXJELElBQWlFLENBQUNBLElBQXRFLEVBQTRFO0FBQzFFLFdBQU8sS0FBUDtBQUNEOztBQUVELE1BQUlLLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlSLElBQVosQ0FBWjtBQUNBLE1BQUlTLEtBQUssR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlQLElBQVosQ0FBWjs7QUFFQSxNQUFJSyxLQUFLLENBQUNJLE1BQU4sS0FBaUJELEtBQUssQ0FBQ0MsTUFBM0IsRUFBbUM7QUFDakMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsZUFBZSxHQUFHSixNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsSUFBckMsQ0FBdEIsQ0F0QjBFLENBd0IxRTs7QUFDQSxPQUFLLElBQUljLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdULEtBQUssQ0FBQ0ksTUFBOUIsRUFBc0NLLEdBQUcsRUFBekMsRUFBNkM7QUFDM0MsUUFBSUMsR0FBRyxHQUFHVixLQUFLLENBQUNTLEdBQUQsQ0FBZjs7QUFFQSxRQUFJLENBQUNKLGVBQWUsQ0FBQ0ssR0FBRCxDQUFwQixFQUEyQjtBQUN6QixhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJQyxNQUFNLEdBQUdqQixJQUFJLENBQUNnQixHQUFELENBQWpCO0FBQ0EsUUFBSUUsTUFBTSxHQUFHakIsSUFBSSxDQUFDZSxHQUFELENBQWpCO0FBRUFaLE9BQUcsR0FBR0YsT0FBTyxHQUFHQSxPQUFPLENBQUNHLElBQVIsQ0FBYUYsY0FBYixFQUE2QmMsTUFBN0IsRUFBcUNDLE1BQXJDLEVBQTZDRixHQUE3QyxDQUFILEdBQXVELEtBQUssQ0FBekU7O0FBRUEsUUFBSVosR0FBRyxLQUFLLEtBQVIsSUFBa0JBLEdBQUcsS0FBSyxLQUFLLENBQWIsSUFBa0JhLE1BQU0sS0FBS0MsTUFBbkQsRUFBNEQ7QUFDMUQsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCxDQTNDRCIsImZpbGUiOiJHeXR4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///Gytx\n')},KfSR:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.autoprefix = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar transforms = {\n  borderRadius: function borderRadius(value) {\n    return {\n      msBorderRadius: value,\n      MozBorderRadius: value,\n      OBorderRadius: value,\n      WebkitBorderRadius: value,\n      borderRadius: value\n    };\n  },\n  boxShadow: function boxShadow(value) {\n    return {\n      msBoxShadow: value,\n      MozBoxShadow: value,\n      OBoxShadow: value,\n      WebkitBoxShadow: value,\n      boxShadow: value\n    };\n  },\n  userSelect: function userSelect(value) {\n    return {\n      WebkitTouchCallout: value,\n      KhtmlUserSelect: value,\n      MozUserSelect: value,\n      msUserSelect: value,\n      WebkitUserSelect: value,\n      userSelect: value\n    };\n  },\n  flex: function flex(value) {\n    return {\n      WebkitBoxFlex: value,\n      MozBoxFlex: value,\n      WebkitFlex: value,\n      msFlex: value,\n      flex: value\n    };\n  },\n  flexBasis: function flexBasis(value) {\n    return {\n      WebkitFlexBasis: value,\n      flexBasis: value\n    };\n  },\n  justifyContent: function justifyContent(value) {\n    return {\n      WebkitJustifyContent: value,\n      justifyContent: value\n    };\n  },\n  transition: function transition(value) {\n    return {\n      msTransition: value,\n      MozTransition: value,\n      OTransition: value,\n      WebkitTransition: value,\n      transition: value\n    };\n  },\n  transform: function transform(value) {\n    return {\n      msTransform: value,\n      MozTransform: value,\n      OTransform: value,\n      WebkitTransform: value,\n      transform: value\n    };\n  },\n  absolute: function absolute(value) {\n    var direction = value && value.split(\' \');\n    return {\n      position: \'absolute\',\n      top: direction && direction[0],\n      right: direction && direction[1],\n      bottom: direction && direction[2],\n      left: direction && direction[3]\n    };\n  },\n  extend: function extend(name, otherElementStyles) {\n    var otherStyle = otherElementStyles[name];\n\n    if (otherStyle) {\n      return otherStyle;\n    }\n\n    return {\n      \'extend\': name\n    };\n  }\n};\n\nvar autoprefix = exports.autoprefix = function autoprefix(elements) {\n  var prefixed = {};\n  (0, _forOwn3["default"])(elements, function (styles, element) {\n    var expanded = {};\n    (0, _forOwn3["default"])(styles, function (value, key) {\n      var transform = transforms[key];\n\n      if (transform) {\n        expanded = _extends({}, expanded, transform(value));\n      } else {\n        expanded[key] = value;\n      }\n    });\n    prefixed[element] = expanded;\n  });\n  return prefixed;\n};\n\nexports["default"] = autoprefix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///KfSR\n')},P1xn:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _regeneratorRuntime = __webpack_require__("WmNS");\n\nObject.defineProperty(exports, \'__esModule\', {\n  value: true\n});\n\nvar runtime = __webpack_require__("rlch");\n\nvar React = __webpack_require__("cDcd");\n\nvar reactDom = __webpack_require__("faye");\n\nvar reactRouterConfig = __webpack_require__("V/vL");\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === \'object\' && \'default\' in e ? e : {\n    \'default\': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction Route(props) {\n  return /*#__PURE__*/React__default[\'default\'].createElement(runtime.__RouterContext.Consumer, null, function (context) {\n    var location = props.location || context.location;\n    var match = props.computedMatch;\n\n    var newProps = _objectSpread2(_objectSpread2({}, context), {}, {\n      location: location,\n      match: match\n    });\n\n    var render = props.render;\n    return /*#__PURE__*/React__default[\'default\'].createElement(runtime.__RouterContext.Provider, {\n      value: newProps\n    }, newProps.match ? render(_objectSpread2(_objectSpread2({}, props.layoutProps), newProps)) : null);\n  });\n}\n\nvar _excluded = ["children"];\n\nfunction Switch(props) {\n  return /*#__PURE__*/React__default[\'default\'].createElement(runtime.__RouterContext.Consumer, null, function (context) {\n    var children = props.children,\n        extraProps = _objectWithoutProperties(props, _excluded);\n\n    var location = props.location || context.location;\n    var element,\n        match = null;\n    React.Children.forEach(children, function (child) {\n      if (match === null && /*#__PURE__*/React.isValidElement(child)) {\n        element = child;\n        var path = child.props.path || child.props.from;\n        match = path ? runtime.matchPath(location.pathname, _objectSpread2(_objectSpread2({}, child.props), {}, {\n          path: path\n        })) : context.match;\n      }\n    });\n    return match ? /*#__PURE__*/React.cloneElement(element, {\n      location: location,\n      computedMatch: match,\n      layoutProps: extraProps\n    }) : null;\n  });\n}\n\nvar _excluded$1 = ["component"];\n\nfunction wrapInitialPropsFetch(route, opts) {\n  var component = route.component,\n      restRouteParams = _objectWithoutProperties(route, _excluded$1);\n\n  var Component = route.component;\n\n  function ComponentWithInitialPropsFetch(props) {\n    var _useState = React.useState(function () {\n      return window.g_initialProps;\n    }),\n        _useState2 = _slicedToArray(_useState, 2),\n        initialProps = _useState2[0],\n        setInitialProps = _useState2[1];\n\n    React.useEffect(function () {\n      /**\r\n       * 1. \u9996\u6b21\u6e32\u67d3\u65f6\uff0c\u6b64\u65f6 window.g_initialProps \u53d8\u91cf\u5b58\u5728\uff0c\u4e0d\u9700\u8981\u518d\u8d70\u4e00\u6b21 getInitialProps\uff0c\u8fd9\u6837\u4e00\u6b21 SSR \u5c31\u8d70\u4e86 2 \u6b21 getInitialProps\r\n       * 2. \u4f46\u662f\u8def\u7531\u5207\u6362\u65f6\uff0cwindow.getInitialProps \u4f1a\u88ab\u8d4b\u4e3a null\uff0c\u8fd9\u65f6\u5019\u5c31\u8d70 getInitialProps \u903b\u8f91\r\n       * 3. \u5982\u679c\u4efb\u4f55\u65f6\u5019\u90fd\u8d70 2 \u6b21\uff0c\u914d\u7f6e forceInitial: true\uff0c\u8fd9\u4e2a\u573a\u666f\u7528\u4e8e\u9759\u6001\u7ad9\u70b9\u7684\u9996\u5c4f\u52a0\u8f7d\u5e0c\u671b\u8d70\u6700\u65b0\u6570\u636e\r\n       * 4. \u5f00\u542f\u52a8\u6001\u52a0\u8f7d\u540e\uff0c\u4f1a\u5728\u6267\u884c getInitialProps \u524d\u9884\u52a0\u8f7d\u4e0b\r\n       */\n      var handleGetInitialProps = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _preloadComponent;\n\n          var preloadComponent, defaultCtx, ctx, _initialProps;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // preload when enalbe dynamicImport\n                  preloadComponent = Component;\n\n                  if (!Component.preload) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return Component.preload();\n\n                case 4:\n                  preloadComponent = _context.sent; // for test case, really use .default\n\n                  preloadComponent = preloadComponent["default"] || preloadComponent;\n\n                case 6:\n                  defaultCtx = _objectSpread2(_objectSpread2({\n                    isServer: false,\n                    match: props === null || props === void 0 ? void 0 : props.match,\n                    history: props === null || props === void 0 ? void 0 : props.history,\n                    route: route\n                  }, opts.getInitialPropsCtx || {}), restRouteParams);\n\n                  if (!((_preloadComponent = preloadComponent) === null || _preloadComponent === void 0 ? void 0 : _preloadComponent.getInitialProps)) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  _context.next = 10;\n                  return opts.plugin.applyPlugins({\n                    key: \'ssr.modifyGetInitialPropsCtx\',\n                    type: runtime.ApplyPluginsType.modify,\n                    initialValue: defaultCtx,\n                    async: true\n                  });\n\n                case 10:\n                  ctx = _context.sent;\n                  _context.next = 13;\n                  return preloadComponent.getInitialProps(ctx || defaultCtx);\n\n                case 13:\n                  _initialProps = _context.sent;\n                  setInitialProps(_initialProps);\n\n                case 15:\n                case "end":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function handleGetInitialProps() {\n          return _ref.apply(this, arguments);\n        };\n      }(); // null \u65f6\uff0c\u4e00\u5b9a\u4f1a\u89e6\u53d1 getInitialProps \u6267\u884c\n\n\n      if (!window.g_initialProps) {\n        handleGetInitialProps();\n      }\n    }, [window.location.pathname, window.location.search]);\n    return /*#__PURE__*/React__default[\'default\'].createElement(Component, _extends({}, props, initialProps));\n  } // flag for having wrappered\n\n\n  ComponentWithInitialPropsFetch.wrapInitialPropsLoaded = true;\n  ComponentWithInitialPropsFetch.displayName = \'ComponentWithInitialPropsFetch\';\n  return ComponentWithInitialPropsFetch;\n}\n\nfunction _render(_ref2) {\n  var route = _ref2.route,\n      opts = _ref2.opts,\n      props = _ref2.props;\n  var routes = renderRoutes(_objectSpread2(_objectSpread2({}, opts), {}, {\n    routes: route.routes || [],\n    rootRoutes: opts.rootRoutes\n  }), {\n    location: props.location\n  });\n  var Component = route.component,\n      wrappers = route.wrappers;\n\n  if (Component) {\n    var defaultPageInitialProps = opts.isServer ? {} : window.g_initialProps;\n\n    var newProps = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, props), opts.extraProps), opts.pageInitialProps || defaultPageInitialProps), {}, {\n      route: route,\n      routes: opts.rootRoutes\n    }); // @ts-ignore\n\n\n    var ret = /*#__PURE__*/React__default[\'default\'].createElement(Component, newProps, routes); // route.wrappers\n\n    if (wrappers) {\n      var len = wrappers.length - 1;\n\n      while (len >= 0) {\n        ret = /*#__PURE__*/React.createElement(wrappers[len], newProps, ret);\n        len -= 1;\n      }\n    }\n\n    return ret;\n  } else {\n    return routes;\n  }\n}\n\nfunction getRouteElement(_ref3) {\n  var route = _ref3.route,\n      index = _ref3.index,\n      opts = _ref3.opts;\n  var routeProps = {\n    key: route.key || index,\n    exact: route.exact,\n    strict: route.strict,\n    sensitive: route.sensitive,\n    path: route.path\n  };\n\n  if (route.redirect) {\n    return /*#__PURE__*/React__default[\'default\'].createElement(runtime.Redirect, _extends({}, routeProps, {\n      from: route.path,\n      to: route.redirect\n    }));\n  } else {\n    var _route$component, _route$component2, _route$component3; // avoid mount and unmount with url hash change\n\n\n    if ( // only when SSR config enable\n    opts.ssrProps && !opts.isServer && // make sure loaded once\n    !((_route$component = route.component) === null || _route$component === void 0 ? void 0 : _route$component.wrapInitialPropsLoaded) && ( // TODO need a type\n    ((_route$component2 = route.component) === null || _route$component2 === void 0 ? void 0 : _route$component2.getInitialProps) || ((_route$component3 = route.component) === null || _route$component3 === void 0 ? void 0 : _route$component3.preload))) {\n      // client Render for enable ssr, but not sure SSR success\n      route.component = wrapInitialPropsFetch(route, opts);\n    }\n\n    return /*#__PURE__*/React__default[\'default\'].createElement(Route, _extends({}, routeProps, {\n      render: function render(props) {\n        return _render({\n          route: route,\n          opts: opts,\n          props: props\n        });\n      }\n    }));\n  }\n}\n\nfunction renderRoutes(opts) {\n  var switchProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return opts.routes ? /*#__PURE__*/React__default[\'default\'].createElement(Switch, switchProps, opts.routes.map(function (route, index) {\n    return getRouteElement({\n      route: route,\n      index: index,\n      opts: _objectSpread2(_objectSpread2({}, opts), {}, {\n        rootRoutes: opts.rootRoutes || opts.routes\n      })\n    });\n  })) : null;\n}\n\nvar _excluded$2 = ["history"];\n\nfunction RouterComponent(props) {\n  var history = props.history,\n      renderRoutesProps = _objectWithoutProperties(props, _excluded$2);\n\n  React.useEffect(function () {\n    // first time using window.g_initialProps\n    // switch route fetching data, if exact route reset window.getInitialProps\n    if (window.g_useSSR) {\n      window.g_initialProps = null;\n    }\n\n    function routeChangeHandler(location, action) {\n      var matchedRoutes = reactRouterConfig.matchRoutes(props.routes, location.pathname); // Set title\n\n      if (typeof document !== \'undefined\' && renderRoutesProps.defaultTitle !== undefined) {\n        document.title = matchedRoutes.length && // @ts-ignore\n        matchedRoutes[matchedRoutes.length - 1].route.title || renderRoutesProps.defaultTitle || \'\';\n      }\n\n      props.plugin.applyPlugins({\n        key: \'onRouteChange\',\n        type: runtime.ApplyPluginsType.event,\n        args: {\n          routes: props.routes,\n          matchedRoutes: matchedRoutes,\n          location: location,\n          action: action\n        }\n      });\n    }\n\n    routeChangeHandler(history.location, \'POP\');\n    return history.listen(routeChangeHandler);\n  }, [history]);\n  return /*#__PURE__*/React__default[\'default\'].createElement(runtime.Router, {\n    history: history\n  }, renderRoutes(renderRoutesProps));\n}\n\nfunction getRootContainer(opts) {\n  return opts.plugin.applyPlugins({\n    type: runtime.ApplyPluginsType.modify,\n    key: \'rootContainer\',\n    initialValue: /*#__PURE__*/React__default[\'default\'].createElement(RouterComponent, {\n      history: opts.history,\n      routes: opts.routes,\n      plugin: opts.plugin,\n      ssrProps: opts.ssrProps,\n      defaultTitle: opts.defaultTitle\n    }),\n    args: {\n      history: opts.history,\n      routes: opts.routes,\n      plugin: opts.plugin\n    }\n  });\n}\n/**\r\n * preload for SSR in dynamicImport\r\n * exec preload Promise function before ReactDOM.hydrate\r\n * @param Routes\r\n */\n\n\nfunction preloadComponent(_x) {\n  return _preloadComponent.apply(this, arguments);\n}\n\nfunction _preloadComponent() {\n  _preloadComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(readyRoutes) {\n    var pathname,\n        matchedRoutes,\n        _iterator,\n        _step,\n        _route$component,\n        matchRoute,\n        route,\n        _preloadComponent2,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pathname = _args.length > 1 && _args[1] !== undefined ? _args[1] : window.location.pathname; // using matched routes not load all routes\n\n            matchedRoutes = reactRouterConfig.matchRoutes(readyRoutes, pathname);\n            _iterator = _createForOfIteratorHelper(matchedRoutes);\n            _context.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 19;\n              break;\n            }\n\n            matchRoute = _step.value;\n            route = matchRoute.route; // load all preload function, because of only a chance to load\n\n            if (!(typeof route.component !== \'string\' && ((_route$component = route.component) === null || _route$component === void 0 ? void 0 : _route$component.preload))) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return route.component.preload();\n\n          case 11:\n            _preloadComponent2 = _context.sent;\n            route.component = _preloadComponent2["default"] || _preloadComponent2;\n\n          case 13:\n            if (!route.routes) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 16;\n            return preloadComponent(route.routes, pathname);\n\n          case 16:\n            route.routes = _context.sent;\n\n          case 17:\n            _context.next = 5;\n            break;\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context["catch"](3);\n\n            _iterator.e(_context.t0);\n\n          case 24:\n            _context.prev = 24;\n\n            _iterator.f();\n\n            return _context.finish(24);\n\n          case 27:\n            return _context.abrupt("return", readyRoutes);\n\n          case 28:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 21, 24, 27]]);\n  }));\n  return _preloadComponent.apply(this, arguments);\n}\n\nfunction renderClient(opts) {\n  var rootContainer = getRootContainer(opts);\n\n  if (opts.rootElement) {\n    var rootElement = typeof opts.rootElement === \'string\' ? document.getElementById(opts.rootElement) : opts.rootElement;\n\n    var callback = opts.callback || function () {}; // flag showing SSR succeed\n\n\n    if (window.g_useSSR) {\n      if (opts.dynamicImport) {\n        // dynamicImport should preload current route component\n        // first loades);\n        preloadComponent(opts.routes).then(function () {\n          reactDom.hydrate(rootContainer, rootElement, callback);\n        });\n      } else {\n        reactDom.hydrate(rootContainer, rootElement, callback);\n      }\n    } else {\n      reactDom.render(rootContainer, rootElement, callback);\n    }\n  } else {\n    return rootContainer;\n  }\n}\n\nexports.renderClient = renderClient;\nexports.renderRoutes = renderRoutes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///P1xn\n')},Ty5D:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MemoryRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Prompt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Redirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return Route; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return StaticRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return Switch; });\n/* unused harmony export __HistoryContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return context; });\n/* unused harmony export generatePath */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return matchPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return useHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return useLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return useParams; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return useRouteMatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return withRouter; });\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("dI71");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("YS25");\n/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("FUNW");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("9R94");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("wx14");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("vRGJ");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("mSXw");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("zLVn");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("2mql");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\n\n // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext = /*#__PURE__*/createNamedContext("Router-History"); // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])();\n  context.displayName = name;\n  return context;\n};\n\nvar context = /*#__PURE__*/createNamedContext$1("Router");\n/**\n * The public API for putting history on context.\n */\n\nvar Router = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\n\nvar MemoryRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createMemoryHistory */ "d"])(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nvar Lifecycle = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default.a.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n/**\n * The public API for navigating programmatically with a component.\n */\n\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(prevProps.to);\n\n        if (!Object(history__WEBPACK_IMPORTED_MODULE_2__[/* locationsAreEqual */ "f"])(prevLocation, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_6___default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? undefined : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? undefined : children(props) : children : component ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? undefined : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createPath */ "e"])(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n     false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false);\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: stripBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_2__[/* createLocation */ "c"])(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.forEach(_this.props.children, function (child) {\n        if (match == null && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nif (false) {}\n/**\n * A public higher-order component to access the imperative API\n */\n\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"])(props, ["wrappedComponentRef"]);\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? undefined : Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(false) : void 0;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_9___default()(C, Component);\n}\n\nvar useContext = react__WEBPACK_IMPORTED_MODULE_1___default.a.useContext;\n\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\n\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(context).location;\n}\n\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\n\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, key, global; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Ty5D\n')},"V/vL":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRoutes", function() { return matchRoutes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderRoutes", function() { return renderRoutes; });\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Ty5D");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("wx14");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction matchRoutes(routes, pathname,\n/*not public API*/\nbranch) {\n  if (branch === void 0) {\n    branch = [];\n  }\n\n  routes.some(function (route) {\n    var match = route.path ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__[/* matchPath */ "i"])(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : react_router__WEBPACK_IMPORTED_MODULE_0__[/* Router */ "e"].computeRootMatch(pathname); // use default "root" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, branch);\n      }\n    }\n\n    return match;\n  });\n  return branch;\n}\n\nfunction renderRoutes(routes, extraProps, switchProps) {\n  if (extraProps === void 0) {\n    extraProps = {};\n  }\n\n  if (switchProps === void 0) {\n    switchProps = {};\n  }\n\n  return routes ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Switch */ "g"], switchProps, routes.map(function (route, i) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__[/* Route */ "d"], {\n      key: route.key || i,\n      path: route.path,\n      exact: route.exact,\n      strict: route.strict,\n      render: function render(props) {\n        return route.render ? route.render(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, {}, extraProps, {\n          route: route\n        })) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(route.component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, extraProps, {\n          route: route\n        }));\n      }\n    });\n  })) : null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9tYXRjaFJvdXRlcy5qcz8yOWM3Iiwid2VicGFjazovLy8uLi9tb2R1bGVzL3JlbmRlclJvdXRlcy5qcz9hYTEwIl0sIm5hbWVzIjpbImJyYW5jaCIsInJvdXRlcyIsIm1hdGNoIiwicm91dGUiLCJtYXRjaFBhdGgiLCJSb3V0ZXIiLCJtYXRjaFJvdXRlcyIsImV4dHJhUHJvcHMiLCJzd2l0Y2hQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFBQSxRQUF1RTtNQUFiQSxNQUFhLFcsRUFBQTtBQUFiQSxVQUFhLEdBQUosRUFBVEE7OztBQUN4REMsUUFBTSxDQUFOQSxLQUFZLGlCQUFTO1FBQ2JDLEtBQUssR0FBR0MsS0FBSyxDQUFMQSxPQUNWQyxzRUFBUyxXQURDRCxLQUNELENBRENBLEdBRVZILE1BQU0sQ0FBTkEsU0FDRUEsTUFBTSxDQUFDQSxNQUFNLENBQU5BLFNBQVBBLENBQU0sQ0FBTkEsQ0FERkE7QUFBQUEsTUFFRUssMkRBQU0sQ0FBTkEsaUJBTGEsUUFLYkEsQyxDQUxhOztRQU9uQixLLEVBQVc7QUFDVEwsWUFBTSxDQUFOQSxLQUFZO0FBQUVHLGFBQUssRUFBUDtBQUFTRCxhQUFLLEVBQUxBO0FBQVQsT0FBWkY7O1VBRUlHLEtBQUssQ0FBVCxNLEVBQWtCO0FBQ2hCRyxtQkFBVyxDQUFDSCxLQUFLLENBQU4sa0JBQVhHLE1BQVcsQ0FBWEE7Ozs7V0FJSixLO0FBZkZMO1NBa0JBLE07OztBQ2xCRix1REFBaUU7TUFBbkNNLFVBQW1DLFcsRUFBQTtBQUFuQ0EsY0FBbUMsR0FBdEIsRUFBYkE7OztNQUFpQkMsV0FBa0IsVyxFQUFBO0FBQWxCQSxlQUFrQixHQUFKLEVBQWRBOzs7U0FDdENQLE1BQU0sZ0JBQ1gscUlBQ0csTUFBTSxDQUFOLElBQVc7d0JBQ1Y7QUFDRSxTQUFHLEVBQUVFLEtBQUssQ0FBTEEsT0FEUDtBQUVFLFVBQUksRUFBRUEsS0FBSyxDQUZiO0FBR0UsV0FBSyxFQUFFQSxLQUFLLENBSGQ7QUFJRSxZQUFNLEVBQUVBLEtBQUssQ0FKZjtBQUtFLFlBQU0sRUFBRSx1QkFBSztlQUNYLEtBQUssQ0FBTCxTQUNFQSxLQUFLLENBQUxBO0FBQXdDQSxlQUFLLEVBQUVBO0FBQS9DQSxXQURGLGdCQUdFLDJEQUFDLEtBQUQ7QUFBNEMsZUFBSyxFQUFFQTtBQUFuRCxXOztBQVROLE07QUFITyxHQUVSLENBREgsQ0FEVyxHQUFiLEkiLCJmaWxlIjoiVi92TC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hdGNoUGF0aCwgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIHBhdGhuYW1lLCAvKm5vdCBwdWJsaWMgQVBJKi8gYnJhbmNoID0gW10pIHtcbiAgcm91dGVzLnNvbWUocm91dGUgPT4ge1xuICAgIGNvbnN0IG1hdGNoID0gcm91dGUucGF0aFxuICAgICAgPyBtYXRjaFBhdGgocGF0aG5hbWUsIHJvdXRlKVxuICAgICAgOiBicmFuY2gubGVuZ3RoXG4gICAgICAgID8gYnJhbmNoW2JyYW5jaC5sZW5ndGggLSAxXS5tYXRjaCAvLyB1c2UgcGFyZW50IG1hdGNoXG4gICAgICAgIDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpOyAvLyB1c2UgZGVmYXVsdCBcInJvb3RcIiBtYXRjaFxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBicmFuY2gucHVzaCh7IHJvdXRlLCBtYXRjaCB9KTtcblxuICAgICAgaWYgKHJvdXRlLnJvdXRlcykge1xuICAgICAgICBtYXRjaFJvdXRlcyhyb3V0ZS5yb3V0ZXMsIHBhdGhuYW1lLCBicmFuY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG5cbiAgcmV0dXJuIGJyYW5jaDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hSb3V0ZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTd2l0Y2gsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG5mdW5jdGlvbiByZW5kZXJSb3V0ZXMocm91dGVzLCBleHRyYVByb3BzID0ge30sIHN3aXRjaFByb3BzID0ge30pIHtcbiAgcmV0dXJuIHJvdXRlcyA/IChcbiAgICA8U3dpdGNoIHsuLi5zd2l0Y2hQcm9wc30+XG4gICAgICB7cm91dGVzLm1hcCgocm91dGUsIGkpID0+IChcbiAgICAgICAgPFJvdXRlXG4gICAgICAgICAga2V5PXtyb3V0ZS5rZXkgfHwgaX1cbiAgICAgICAgICBwYXRoPXtyb3V0ZS5wYXRofVxuICAgICAgICAgIGV4YWN0PXtyb3V0ZS5leGFjdH1cbiAgICAgICAgICBzdHJpY3Q9e3JvdXRlLnN0cmljdH1cbiAgICAgICAgICByZW5kZXI9e3Byb3BzID0+XG4gICAgICAgICAgICByb3V0ZS5yZW5kZXIgPyAoXG4gICAgICAgICAgICAgIHJvdXRlLnJlbmRlcih7IC4uLnByb3BzLCAuLi5leHRyYVByb3BzLCByb3V0ZTogcm91dGUgfSlcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxyb3V0ZS5jb21wb25lbnQgey4uLnByb3BzfSB7Li4uZXh0cmFQcm9wc30gcm91dGU9e3JvdXRlfSAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvU3dpdGNoPlxuICApIDogbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyUm91dGVzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///V/vL\n')},VYtm:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.hover = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("cDcd");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar hover = exports.hover = function hover(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Hover, _React$Component);\n\n    function Hover() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Hover);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        hover: false\n      }, _this.handleMouseOver = function () {\n        return _this.setState({\n          hover: true\n        });\n      }, _this.handleMouseOut = function () {\n        return _this.setState({\n          hover: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseOver: _this.handleMouseOver,\n          onMouseOut: _this.handleMouseOut\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Hover;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = hover;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///VYtm\n')},W3HW:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.flattenNames = undefined;\n\nvar _isString2 = __webpack_require__("4qC0");\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _isPlainObject2 = __webpack_require__("YO3V");\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _map2 = __webpack_require__("3WF5");\n\nvar _map3 = _interopRequireDefault(_map2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar flattenNames = exports.flattenNames = function flattenNames() {\n  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var names = [];\n  (0, _map3["default"])(things, function (thing) {\n    if (Array.isArray(thing)) {\n      flattenNames(thing).map(function (name) {\n        return names.push(name);\n      });\n    } else if ((0, _isPlainObject3["default"])(thing)) {\n      (0, _forOwn3["default"])(thing, function (value, key) {\n        value === true && names.push(key);\n        names.push(key + \'-\' + value);\n      });\n    } else if ((0, _isString3["default"])(thing)) {\n      names.push(thing);\n    }\n  });\n  return names;\n};\n\nexports["default"] = flattenNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2ZsYXR0ZW5OYW1lcy5qcz81YjcxIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmxhdHRlbk5hbWVzIiwidW5kZWZpbmVkIiwiX2lzU3RyaW5nMiIsInJlcXVpcmUiLCJfaXNTdHJpbmczIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9mb3JPd24yIiwiX2Zvck93bjMiLCJfaXNQbGFpbk9iamVjdDIiLCJfaXNQbGFpbk9iamVjdDMiLCJfbWFwMiIsIl9tYXAzIiwib2JqIiwiX19lc01vZHVsZSIsInRoaW5ncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwidGhpbmciLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJuYW1lIiwicHVzaCIsImtleSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXhCOztBQUVBLElBQUlDLFVBQVUsR0FBR0Msc0JBQXNCLENBQUNILFVBQUQsQ0FBdkM7O0FBRUEsSUFBSUksUUFBUSxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBRUEsSUFBSUksUUFBUSxHQUFHRixzQkFBc0IsQ0FBQ0MsUUFBRCxDQUFyQzs7QUFFQSxJQUFJRSxlQUFlLEdBQUdMLG1CQUFPLENBQUMsTUFBRCxDQUE3Qjs7QUFFQSxJQUFJTSxlQUFlLEdBQUdKLHNCQUFzQixDQUFDRyxlQUFELENBQTVDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyxNQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUUsZUFBU0E7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBSVosWUFBWSxHQUFHRixPQUFPLENBQUNFLFlBQVIsR0FBdUIsU0FBU0EsWUFBVCxHQUF3QjtBQUNoRSxNQUFJYyxNQUFNLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmQsU0FBekMsR0FBcURjLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQWpGO0FBRUEsTUFBSUUsS0FBSyxHQUFHLEVBQVo7QUFFQSxHQUFDLEdBQUdOLEtBQUssV0FBVCxFQUFtQkcsTUFBbkIsRUFBMkIsVUFBVUksS0FBVixFQUFpQjtBQUMxQyxRQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCbEIsa0JBQVksQ0FBQ2tCLEtBQUQsQ0FBWixDQUFvQkcsR0FBcEIsQ0FBd0IsVUFBVUMsSUFBVixFQUFnQjtBQUN0QyxlQUFPTCxLQUFLLENBQUNNLElBQU4sQ0FBV0QsSUFBWCxDQUFQO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTyxJQUFJLENBQUMsR0FBR2IsZUFBZSxXQUFuQixFQUE2QlMsS0FBN0IsQ0FBSixFQUF5QztBQUM5QyxPQUFDLEdBQUdYLFFBQVEsV0FBWixFQUFzQlcsS0FBdEIsRUFBNkIsVUFBVW5CLEtBQVYsRUFBaUJ5QixHQUFqQixFQUFzQjtBQUNqRHpCLGFBQUssS0FBSyxJQUFWLElBQWtCa0IsS0FBSyxDQUFDTSxJQUFOLENBQVdDLEdBQVgsQ0FBbEI7QUFDQVAsYUFBSyxDQUFDTSxJQUFOLENBQVdDLEdBQUcsR0FBRyxHQUFOLEdBQVl6QixLQUF2QjtBQUNELE9BSEQ7QUFJRCxLQUxNLE1BS0EsSUFBSSxDQUFDLEdBQUdLLFVBQVUsV0FBZCxFQUF3QmMsS0FBeEIsQ0FBSixFQUFvQztBQUN6Q0QsV0FBSyxDQUFDTSxJQUFOLENBQVdMLEtBQVg7QUFDRDtBQUNGLEdBYkQ7QUFlQSxTQUFPRCxLQUFQO0FBQ0QsQ0FyQkQ7O0FBdUJBbkIsT0FBTyxXQUFQLEdBQWtCRSxZQUFsQiIsImZpbGUiOiJXM0hXLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mbGF0dGVuTmFtZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfaXNTdHJpbmcyID0gcmVxdWlyZSgnbG9kYXNoL2lzU3RyaW5nJyk7XG5cbnZhciBfaXNTdHJpbmczID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTdHJpbmcyKTtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9pc1BsYWluT2JqZWN0MiA9IHJlcXVpcmUoJ2xvZGFzaC9pc1BsYWluT2JqZWN0Jyk7XG5cbnZhciBfaXNQbGFpbk9iamVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1BsYWluT2JqZWN0Mik7XG5cbnZhciBfbWFwMiA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcblxudmFyIF9tYXAzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBmbGF0dGVuTmFtZXMgPSBleHBvcnRzLmZsYXR0ZW5OYW1lcyA9IGZ1bmN0aW9uIGZsYXR0ZW5OYW1lcygpIHtcbiAgdmFyIHRoaW5ncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgdmFyIG5hbWVzID0gW107XG5cbiAgKDAsIF9tYXAzLmRlZmF1bHQpKHRoaW5ncywgZnVuY3Rpb24gKHRoaW5nKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpbmcpKSB7XG4gICAgICBmbGF0dGVuTmFtZXModGhpbmcpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1BsYWluT2JqZWN0My5kZWZhdWx0KSh0aGluZykpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0aGluZywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFsdWUgPT09IHRydWUgJiYgbmFtZXMucHVzaChrZXkpO1xuICAgICAgICBuYW1lcy5wdXNoKGtleSArICctJyArIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1N0cmluZzMuZGVmYXVsdCkodGhpbmcpKSB7XG4gICAgICBuYW1lcy5wdXNoKHRoaW5nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZsYXR0ZW5OYW1lczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///W3HW\n')},X0wg:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorType", function() { return AnchorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bottom", function() { return Bottom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomResizable", function() { return BottomResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenterType", function() { return CenterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Centered", function() { return Centered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CenteredVertically", function() { return CenteredVertically; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Custom", function() { return Custom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layer", function() { return Layer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Left", function() { return Left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftResizable", function() { return LeftResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positioned", function() { return Positioned; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeHandlePlacement", function() { return ResizeHandlePlacement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeType", function() { return ResizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Right", function() { return Right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightResizable", function() { return RightResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Top", function() { return Top; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopResizable", function() { return TopResizable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPort", function() { return ViewPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anchoredProps", function() { return anchoredProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizableProps", function() { return resizableProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCurrentSpace", function() { return useCurrentSpace; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("h9Sk");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("17x9");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === \'undefined\') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName(\'head\')[0];\n  var style = document.createElement(\'style\');\n  style.type = \'text/css\';\n\n  if (insertAt === \'top\') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = ".spaces-centered-vertically {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n}\\r\\n\\r\\n.spaces-centered {\\r\\n\\tposition: relative;\\r\\n\\ttop: 50%;\\r\\n\\ttransform: translateY(-50%);\\r\\n\\ttext-align: center;\\r\\n}\\r\\n\\r\\n.spaces-clearfix:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tdisplay: table;\\r\\n\\tclear: both;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9999;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:before {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tz-index: 2;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle:after {\\r\\n\\tcontent: \\"\\";\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle {\\r\\n\\tposition: absolute;\\r\\n\\tz-index: 9998;\\r\\n\\tpointer-events: all;\\r\\n\\tbackground: transparent;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-left:before {\\r\\n\\tcursor: w-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-left {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-right:before {\\r\\n\\tcursor: e-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-right {\\r\\n\\ttop: 0;\\r\\n\\tbottom: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-top:before {\\r\\n\\tcursor: n-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-top {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-resize-handle.resize-bottom:before {\\r\\n\\tcursor: s-resize;\\r\\n}\\r\\n\\r\\n.spaces-touch-handle.resize-bottom {\\r\\n\\tleft: 0;\\r\\n\\tright: 0;\\r\\n}\\r\\n\\r\\n.spaces-space {\\r\\n\\toverflow: hidden;\\r\\n\\ttouch-action: none;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-resizing .spaces-space {\\r\\n\\ttransition: none !important;\\r\\n}\\r\\n\\r\\n.spaces-space .spaces-space-inner {\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\ttop: 0;\\r\\n\\tright: 0;\\r\\n\\tbottom: 0;\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.spaces-space.scrollable .spaces-space-inner {\\r\\n\\toverflow: auto;\\r\\n\\ttouch-action: auto;\\r\\n}\\r\\n";\nstyleInject(css_248z);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Type;\n\n(function (Type) {\n  Type["ViewPort"] = "viewport";\n  Type["Fixed"] = "fixed";\n  Type["Fill"] = "fill";\n  Type["Positioned"] = "positioned";\n  Type["Anchored"] = "anchored";\n  Type["Custom"] = "custom";\n})(Type || (Type = {}));\n\nvar AnchorType;\n\n(function (AnchorType) {\n  AnchorType["Left"] = "anchor-left";\n  AnchorType["Right"] = "anchor-right";\n  AnchorType["Top"] = "anchor-top";\n  AnchorType["Bottom"] = "anchor-bottom";\n})(AnchorType || (AnchorType = {}));\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";\n  Orientation[Orientation["Vertical"] = 1] = "Vertical";\n})(Orientation || (Orientation = {}));\n\nvar ResizeType;\n\n(function (ResizeType) {\n  ResizeType["Left"] = "resize-left";\n  ResizeType["Right"] = "resize-right";\n  ResizeType["Top"] = "resize-top";\n  ResizeType["Bottom"] = "resize-bottom";\n  ResizeType["TopLeft"] = "resize-topleft";\n  ResizeType["TopRight"] = "resize-topright";\n  ResizeType["BottomLeft"] = "resize-bottomleft";\n  ResizeType["BottomRight"] = "resize-bottomright";\n})(ResizeType || (ResizeType = {}));\n\nvar ResizeHandlePlacement;\n\n(function (ResizeHandlePlacement) {\n  ResizeHandlePlacement["OverlayInside"] = "overlay-inside";\n  ResizeHandlePlacement["Inside"] = "inside";\n  ResizeHandlePlacement["OverlayBoundary"] = "overlay-boundary";\n})(ResizeHandlePlacement || (ResizeHandlePlacement = {}));\n\nvar CenterType;\n\n(function (CenterType) {\n  CenterType["None"] = "none";\n  CenterType["Vertical"] = "vertical";\n  CenterType["HorizontalVertical"] = "horizontalVertical";\n})(CenterType || (CenterType = {}));\n\nvar MoveEvent;\n\n(function (MoveEvent) {\n  MoveEvent["Mouse"] = "mousemove";\n  MoveEvent["Touch"] = "touchmove";\n})(MoveEvent || (MoveEvent = {}));\n\nvar EndEvent;\n\n(function (EndEvent) {\n  EndEvent["Mouse"] = "mouseup";\n  EndEvent["Touch"] = "touchend";\n})(EndEvent || (EndEvent = {}));\n\nfunction shortuuid() {\n  var firstPart = Math.random() * 46656 | 0;\n  var secondPart = Math.random() * 46656 | 0;\n  return ("000" + firstPart.toString(36)).slice(-3) + ("000" + secondPart.toString(36)).slice(-3);\n}\n\nfunction getSizeString(size) {\n  return typeof size === "string" ? size : size + "px";\n}\n\nfunction css(size, dontAddCalc) {\n  if (size.size === 0 && size.adjusted.length === 0 && size.resized === 0) {\n    return "0px";\n  }\n\n  var parts = [];\n\n  if (size.size !== undefined) {\n    parts.push(getSizeString(size.size));\n  }\n\n  size.adjusted.forEach(function (l) {\n    return parts.push(getSizeString(l));\n  });\n\n  if (size.resized !== 0) {\n    parts.push(getSizeString(size.resized));\n  }\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  if (parts.length === 1) {\n    return parts[0];\n  }\n\n  if (dontAddCalc) {\n    return parts.join(" + ");\n  }\n\n  return "calc(" + parts.join(" + ") + ")";\n}\n\nfunction coalesce() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.find(function (x) {\n    return x !== null && x !== undefined;\n  });\n}\n\nfunction adjustmentsEqual(item1, item2) {\n  if (item1.length !== item2.length) {\n    return false;\n  }\n\n  for (var i = 0, len = item1.length; i < len; i++) {\n    if (item1[i] !== item2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction throttle(callback, limit) {\n  var wait = false; // Initially, we\'re not waiting\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // We return a throttled function\n\n\n    if (!wait) {\n      // If we\'re not waiting\n      callback.apply(void 0, args); // Execute users function\n\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nfunction styleDefinition(space) {\n  var cssElements = [];\n  var style = {\n    position: space.position,\n    left: css(space.left),\n    top: css(space.top),\n    right: css(space.right),\n    bottom: css(space.bottom),\n    width: css(space.width),\n    height: css(space.height),\n    zIndex: space.zIndex\n  };\n  var cssString = [];\n\n  if (style.position) {\n    cssString.push("position: " + style.position + ";");\n  }\n\n  if (style.left) {\n    cssString.push("left: " + style.left + ";");\n  }\n\n  if (style.top) {\n    cssString.push("top: " + style.top + ";");\n  }\n\n  if (style.right) {\n    cssString.push("right: " + style.right + ";");\n  }\n\n  if (style.bottom) {\n    cssString.push("bottom: " + style.bottom + ";");\n  }\n\n  if (style.width) {\n    cssString.push("width: " + style.width + ";");\n  }\n\n  if (style.height) {\n    cssString.push("height: " + style.height + ";");\n  }\n\n  if (style.zIndex) {\n    cssString.push("z-index: " + style.zIndex + ";");\n  }\n\n  if (space.allowOverflow) {\n    cssString.push("overflow: visible;");\n  }\n\n  if (cssString.length > 0) {\n    cssElements.push("#" + space.id + " { " + cssString.join(" ") + " }");\n  }\n\n  if (space.scrollable) {\n    cssElements.push("#" + space.id + " > .spaces-space-inner { overflow: auto; touch-action: auto; }");\n  }\n\n  var handleOffset = 0;\n  var touchHandleSize = space.touchHandleSize / 2 - space.handleSize / 2;\n\n  switch (space.handlePlacement) {\n    case ResizeHandlePlacement.Inside:\n    case ResizeHandlePlacement.OverlayInside:\n      handleOffset = space.handleSize;\n\n      if (space.type === Type.Positioned) {\n        handleOffset = 0;\n      }\n\n      break;\n\n    case ResizeHandlePlacement.OverlayBoundary:\n      handleOffset = space.handleSize / 2;\n      break;\n  }\n\n  if (space.type === Type.Positioned) {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { left: calc(" + css(space.left, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { top: calc(" + css(space.top, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n\n      if (space.width.size) {\n        cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + space.handleSize + "px + " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mr { right: calc(" + css(space.right, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; top: " + css(space.top) + "; bottom: " + css(space.bottom) + "; height: " + css(space.height) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      if (space.height.size) {\n        cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + space.handleSize + "px + " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      } else {\n        cssElements.push("#" + space.id + "-mb { bottom: calc(" + css(space.bottom, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; left: " + css(space.left) + "; right: " + css(space.right) + "; width: " + css(space.width) + "; }");\n      }\n\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  } else {\n    if (space.canResizeLeft) {\n      cssElements.push("#" + space.id + "-ml { right: calc(" + css(space.right, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-ml:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeTop) {\n      cssElements.push("#" + space.id + "-mt { bottom: calc(" + css(space.bottom, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mt:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n\n    if (space.canResizeRight) {\n      cssElements.push("#" + space.id + "-mr { left: calc(" + css(space.left, true) + " + " + css(space.width, true) + " - " + handleOffset + "px); width: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mr:after { left: -" + touchHandleSize + "px; right: -" + touchHandleSize + "px; top: 0; bottom: 0; }");\n    }\n\n    if (space.canResizeBottom) {\n      cssElements.push("#" + space.id + "-mb { top: calc(" + css(space.top, true) + " + " + css(space.height, true) + " - " + handleOffset + "px); height: " + space.handleSize + "px; }");\n      cssElements.push("#" + space.id + "-mb:after { top: -" + touchHandleSize + "px; bottom: -" + touchHandleSize + "px; left: 0; right: 0; }");\n    }\n  }\n\n  return cssElements.join(" ");\n}\n\nfunction updateStyleDefinition(space) {\n  var definition = styleDefinition(space);\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    if (existing.innerHTML !== definition) {\n      existing.innerHTML = definition;\n    }\n  } else {\n    var newStyle = document.createElement("style");\n    newStyle.id = "style_" + space.id;\n    newStyle.innerHTML = definition;\n    document.head.appendChild(newStyle);\n  }\n}\n\nfunction removeStyleDefinition(space) {\n  var existing = document.getElementById("style_" + space.id);\n\n  if (existing) {\n    document.head.removeChild(existing);\n  }\n}\n\nvar RESIZE_THROTTLE = 0;\n\nfunction isHorizontal(resizeType) {\n  return resizeType === ResizeType.Left || resizeType === ResizeType.Right;\n}\n\nfunction createAdjuster(resizeType, space, originalX, originalY) {\n  var dimensionToAdjust = function () {\n    if (resizeType === ResizeType.Left) {\n      return space.left;\n    } else if (resizeType === ResizeType.Right) {\n      return space.right;\n    } else if (resizeType === ResizeType.Bottom) {\n      return space.bottom;\n    } else if (resizeType === ResizeType.Top) {\n      return space.top;\n    } else {\n      throw new Error("unknown resize type");\n    }\n  }();\n\n  var negater = resizeType === ResizeType.Right || resizeType === ResizeType.Bottom ? function (val) {\n    return -val;\n  } : function (val) {\n    return val;\n  };\n  var candidateOppositeDimensionToAdjust = isHorizontal(resizeType) ? space.width : space.height;\n  var offset1 = dimensionToAdjust.resized;\n  var offset2 = candidateOppositeDimensionToAdjust.resized;\n  var rect = space.element.getBoundingClientRect();\n  var size = isHorizontal(resizeType) ? rect.width : rect.height;\n  var minimumAdjust = coalesce(space.minimumSize, 20) - size + 0;\n  var maximumAdjust = space.maximumSize ? space.maximumSize - size + 0 : undefined;\n  return function (currentX, currentY) {\n    var adjustment = (isHorizontal(resizeType) ? originalX : originalY) - (isHorizontal(resizeType) ? currentX : currentY);\n    var dimensionResized = negater(adjustment);\n\n    if (space.type !== Type.Positioned) {\n      dimensionResized = Math.max(negater(adjustment), minimumAdjust);\n\n      if (dimensionResized < minimumAdjust) {\n        dimensionResized = minimumAdjust;\n      }\n\n      if (typeof maximumAdjust === "number") {\n        if (dimensionResized > maximumAdjust) {\n          dimensionResized = maximumAdjust;\n        }\n      }\n    }\n\n    if (dimensionToAdjust.size !== undefined) {\n      dimensionToAdjust.resized = negater(-adjustment) + offset1;\n\n      if (candidateOppositeDimensionToAdjust.size) {\n        candidateOppositeDimensionToAdjust.resized = negater(adjustment) + offset2;\n      }\n    } else {\n      candidateOppositeDimensionToAdjust.resized = dimensionResized + offset2;\n    }\n  };\n}\n\nfunction createResize(store) {\n  return {\n    startResize: function startResize(e, resizeType, space, endEvent, moveEvent, getCoords, onResizeEnd) {\n      if (space.onResizeStart) {\n        var result = space.onResizeStart(resizeType);\n\n        if (typeof result === "boolean" && !result) {\n          return;\n        }\n      }\n\n      var originalCoords = getCoords(e);\n      var adjuster = createAdjuster(resizeType, space, originalCoords.x, originalCoords.y);\n      space.resizing = true;\n      space.updateParent();\n      var lastX = 0;\n      var lastY = 0;\n      var moved = false;\n\n      var resize = function resize(currentX, currentY) {\n        adjuster(currentX, currentY);\n        store.updateStyles(space);\n      };\n\n      var withPreventDefault = function withPreventDefault(e) {\n        moved = true;\n        var newCoords = getCoords(e);\n        lastX = newCoords.x;\n        lastY = newCoords.y;\n        e.preventDefault();\n        throttle(function (x, y) {\n          return window.requestAnimationFrame(function () {\n            return resize(x, y);\n          });\n        }, RESIZE_THROTTLE)(lastX, lastY);\n      };\n\n      var removeListener = function removeListener() {\n        if (moved) {\n          resize(lastX, lastY);\n        }\n\n        window.removeEventListener(moveEvent, withPreventDefault);\n        window.removeEventListener(endEvent, removeListener);\n        space.resizing = false;\n        space.updateParent();\n        var resizeEnd = onResizeEnd || space.onResizeEnd;\n\n        if (resizeEnd) {\n          var currentRect = space.element.getBoundingClientRect();\n          resizeEnd(Math.floor(isHorizontal(resizeType) ? currentRect.width : currentRect.height), currentRect, resizeType);\n        }\n      };\n\n      window.addEventListener(moveEvent, withPreventDefault);\n      window.addEventListener(endEvent, removeListener);\n    }\n  };\n}\n\nfunction createDrag(store) {\n  function onMove(space, originalX, originalY, x, y) {\n    var adjustmentX = -(originalX - x);\n    var adjustmentY = -(originalY - y);\n    space.left.adjusted = [adjustmentX];\n    space.top.adjusted = [adjustmentY];\n\n    if (space.right.size) {\n      space.right.adjusted = [-adjustmentX];\n    }\n\n    if (space.bottom.size) {\n      space.bottom.adjusted = [-adjustmentY];\n    }\n\n    store.updateStyles(space);\n  }\n\n  return {\n    startDrag: function startDrag(e, space, endEvent, moveEvent, getCoords, onDragEnd) {\n      if (space.element) {\n        var coords = getCoords(e);\n        var adjustedLeft = space.left.adjusted.length === 0 ? 0 : space.left.adjusted[0];\n        var adjustedTop = space.top.adjusted.length === 0 ? 0 : space.top.adjusted[0];\n        var originalMouseX_1 = coords.x - adjustedLeft;\n        var originalMouseY_1 = coords.y - adjustedTop;\n        var lastX_1 = 0;\n        var lastY_1 = 0;\n        var moved_1 = false;\n\n        var mouseMove_1 = function mouseMove_1(x, y) {\n          return onMove(space, originalMouseX_1, originalMouseY_1, x, y);\n        };\n\n        var throttledMouseMove_1 = throttle(mouseMove_1, 5);\n\n        var withPreventDefault_1 = function withPreventDefault_1(e) {\n          moved_1 = true;\n          var newCoords = getCoords(e);\n          lastX_1 = newCoords.x;\n          lastY_1 = newCoords.y;\n          e.preventDefault();\n          throttledMouseMove_1(lastX_1, lastY_1);\n        };\n\n        var removeListener_1 = function removeListener_1() {\n          var _a;\n\n          if (moved_1) {\n            mouseMove_1(lastX_1, lastY_1);\n          }\n\n          window.removeEventListener(moveEvent, withPreventDefault_1);\n          window.removeEventListener(endEvent, removeListener_1);\n\n          if (onDragEnd) {\n            var parentInfo = space.parentId && ((_a = store.getSpace(space.parentId)) === null || _a === void 0 ? void 0 : _a.element.getBoundingClientRect()) || {\n              left: 0,\n              top: 0,\n              right: 0,\n              bottom: 0,\n              width: 0,\n              height: 0\n            };\n\n            var info = function (_a) {\n              var left = _a.left,\n                  top = _a.top,\n                  right = _a.right,\n                  bottom = _a.bottom,\n                  width = _a.width,\n                  height = _a.height;\n              return {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n                width: width,\n                height: height\n              };\n            }(space.element.getBoundingClientRect());\n\n            onDragEnd(_assign(_assign({}, info), {\n              left: info.left - parentInfo.left,\n              top: info.top - parentInfo.top\n            }), moved_1);\n          }\n        };\n\n        window.addEventListener(moveEvent, withPreventDefault_1);\n        window.addEventListener(endEvent, removeListener_1);\n      }\n    }\n  };\n}\n\nvar spaceDefaults = {\n  id: "",\n  zIndex: 0,\n  scrollable: false,\n  resizing: false,\n  allowOverflow: false,\n  centerContent: "none",\n  dimension: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  },\n  handleSize: 5,\n  touchHandleSize: 5,\n  handlePlacement: ResizeHandlePlacement.OverlayInside,\n  adjustLeft: function adjustLeft() {\n    return false;\n  },\n  adjustRight: function adjustRight() {\n    return false;\n  },\n  adjustTop: function adjustTop() {\n    return false;\n  },\n  adjustBottom: function adjustBottom() {\n    return false;\n  },\n  adjustEdge: function adjustEdge() {\n    return false;\n  },\n  anchoredChildren: function anchoredChildren() {\n    return [];\n  }\n};\nvar anchorTypes = [AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom];\n\nfunction getPosition(type) {\n  if (type === Type.ViewPort) {\n    return "fixed";\n  }\n\n  if (type === Type.Fixed) {\n    return "relative";\n  }\n\n  return "absolute";\n}\n\nfunction getOrientation(anchor) {\n  return anchor === AnchorType.Bottom || anchor === AnchorType.Top ? Orientation.Vertical : Orientation.Horizontal;\n}\n\nfunction anchorUpdates(space) {\n  return [{\n    anchor: AnchorType.Left,\n    update: space.adjustLeft\n  }, {\n    anchor: AnchorType.Top,\n    update: space.adjustTop\n  }, {\n    anchor: AnchorType.Right,\n    update: space.adjustRight\n  }, {\n    anchor: AnchorType.Bottom,\n    update: space.adjustBottom\n  }];\n}\n\nfunction sizeInfoDefault(size) {\n  return {\n    size: size,\n    adjusted: [],\n    resized: 0\n  };\n}\n\nfunction createStore() {\n  var spaces = [];\n\n  var setSpaces = function setSpaces(newSpaces) {\n    spaces = newSpaces;\n  };\n\n  var getSpace = function getSpace(id) {\n    return getSpaces().find(function (s) {\n      return s.id === id;\n    });\n  };\n\n  var getSpaces = function getSpaces() {\n    return spaces;\n  };\n\n  var recalcSpaces = function recalcSpaces(parent) {\n    var onlyUnique = function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    };\n\n    var addDefaultOrders = function addDefaultOrders(spaces) {\n      var result = [];\n      anchorTypes.forEach(function (t) {\n        var anchoredSpaces = spaces.filter(function (s) {\n          return s.anchor !== undefined && s.anchor === t;\n        });\n        var zIndices = anchoredSpaces.map(function (s) {\n          return s.zIndex;\n        }).filter(onlyUnique);\n        zIndices.forEach(function (i) {\n          var anchoredSpacesInLayer = anchoredSpaces.filter(function (s) {\n            return s.zIndex === i;\n          });\n          var orderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order !== undefined;\n          });\n          var unorderedSpaces = anchoredSpacesInLayer.filter(function (c) {\n            return c.order === undefined;\n          });\n          var maxOrder = orderedSpaces.length > 0 ? orderedSpaces.map(function (a) {\n            return a.order;\n          }).reduce(function (a, b) {\n            return Math.max(a, b);\n          }) : 0;\n          result = __spreadArray(__spreadArray([], result, true), __spreadArray(__spreadArray([], orderedSpaces, true), unorderedSpaces.map(function (c, idx) {\n            return _assign(_assign({}, c), {\n              order: maxOrder + idx + 1\n            });\n          }), true), true);\n        });\n      });\n      return __spreadArray(__spreadArray([], result, true), spaces.filter(function (s) {\n        return s.anchor === undefined;\n      }), true);\n    };\n\n    var orderedSpaces = addDefaultOrders(parent.children);\n\n    var _loop_1 = function _loop_1() {\n      var space = orderedSpaces[i];\n      var changed = false;\n\n      if (space.type === Type.Fill) {\n        anchorUpdates(space).forEach(function (info) {\n          var adjusted = [];\n          var anchoredSpaces = parent.anchoredChildren(orderedSpaces, info.anchor, space.zIndex);\n          anchoredSpaces.forEach(function (as) {\n            if (as.orientation === Orientation.Vertical) {\n              if (as.height.size) {\n                adjusted.push(as.height.size);\n              }\n\n              if (as.height.resized) {\n                adjusted.push(as.height.resized);\n              }\n            } else {\n              if (as.width.size) {\n                adjusted.push(as.width.size);\n              }\n\n              if (as.width.resized) {\n                adjusted.push(as.width.resized);\n              }\n            }\n          });\n\n          if (info.update(adjusted)) {\n            changed = true;\n          }\n        });\n      } else if (space.type === Type.Anchored) {\n        var adjusted_1 = [];\n        var anchoredSpaces = parent.anchoredChildren(orderedSpaces, space.anchor, space.zIndex).filter(function (s) {\n          return s.id !== space.id && s.order <= space.order;\n        });\n        anchoredSpaces.forEach(function (as) {\n          if (as.orientation === Orientation.Vertical) {\n            if (as.height.size) {\n              adjusted_1.push(as.height.size);\n            }\n\n            if (as.height.resized) {\n              adjusted_1.push(as.height.resized);\n            }\n          } else {\n            if (as.width.size) {\n              adjusted_1.push(as.width.size);\n            }\n\n            if (as.width.resized) {\n              adjusted_1.push(as.width.resized);\n            }\n          }\n        });\n\n        if (space.adjustEdge(adjusted_1)) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        updateStyleDefinition(space);\n      }\n    };\n\n    for (var i = 0, len = orderedSpaces.length; i < len; i++) {\n      _loop_1();\n    }\n  };\n\n  var store = {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    addSpace: function addSpace(space) {\n      getSpaces().push(space);\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children.push(space);\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    removeSpace: function removeSpace(space) {\n      setSpaces(getSpaces().filter(function (s) {\n        return s.id !== space.id;\n      }));\n\n      if (space.parentId) {\n        var parentSpace = getSpace(space.parentId);\n\n        if (parentSpace) {\n          parentSpace.children = parentSpace.children.filter(function (s) {\n            return s.id !== space.id;\n          });\n          recalcSpaces(parentSpace);\n        }\n      }\n\n      removeStyleDefinition(space);\n    },\n    updateStyles: function updateStyles(space) {\n      if (space.parentId) {\n        var parent_1 = getSpace(space.parentId);\n\n        if (parent_1) {\n          recalcSpaces(parent_1);\n        }\n      }\n\n      updateStyleDefinition(space);\n    },\n    updateSpace: function updateSpace(space, props) {\n      var type = props.type,\n          anchor = props.anchor,\n          order = props.order,\n          zIndex = props.zIndex,\n          scrollable = props.scrollable,\n          position = props.position,\n          centerContent = props.centerContent,\n          minimumSize = props.minimumSize,\n          maximumSize = props.maximumSize,\n          handleSize = props.handleSize,\n          touchHandleSize = props.touchHandleSize,\n          handlePlacement = props.handlePlacement,\n          allowOverflow = props.allowOverflow;\n      var canResizeLeft = position && position.leftResizable || false;\n      var canResizeRight = position && position.rightResizable || false;\n      var canResizeTop = position && position.topResizable || false;\n      var canResizeBottom = position && position.bottomResizable || false;\n      var changed = false;\n\n      if (space.type !== type) {\n        space.type = type;\n        space.position = getPosition(type);\n        changed = true;\n      }\n\n      if (space.anchor !== anchor) {\n        space.anchor = anchor;\n        space.orientation = getOrientation(anchor);\n        changed = true;\n\n        if (type === Type.Anchored) {\n          if (anchor === AnchorType.Left) {\n            space.adjustEdge = space.adjustLeft;\n          } else if (anchor === AnchorType.Top) {\n            space.adjustEdge = space.adjustTop;\n          } else if (anchor === AnchorType.Right) {\n            space.adjustEdge = space.adjustRight;\n          } else if (anchor === AnchorType.Bottom) {\n            space.adjustEdge = space.adjustBottom;\n          }\n        }\n      }\n\n      if (space.left.size !== (position && position.left)) {\n        space.left.size = position && position.left;\n        space.left.resized = 0;\n        space.left.adjusted = [];\n        changed = true;\n      }\n\n      if (space.right.size !== (position && position.right)) {\n        space.right.size = position && position.right;\n        space.right.resized = 0;\n        space.right.adjusted = [];\n        changed = true;\n      }\n\n      if (space.top.size !== (position && position.top)) {\n        space.top.size = position && position.top;\n        space.top.resized = 0;\n        space.top.adjusted = [];\n        changed = true;\n      }\n\n      if (space.bottom.size !== (position && position.bottom)) {\n        space.bottom.size = position && position.bottom;\n        space.bottom.resized = 0;\n        space.bottom.adjusted = [];\n        changed = true;\n      }\n\n      if (space.width.size !== (position && position.width)) {\n        space.width.size = position && position.width;\n        space.width.resized = 0;\n        space.width.adjusted = [];\n        changed = true;\n      }\n\n      if (space.height.size !== (position && position.height)) {\n        space.height.size = position && position.height;\n        space.height.resized = 0;\n        space.height.adjusted = [];\n        changed = true;\n      }\n\n      if (coalesce(space.order, 0) !== coalesce(order, 0)) {\n        space.order = coalesce(order, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.zIndex, 0) !== coalesce(zIndex, 0)) {\n        space.zIndex = coalesce(zIndex, 0);\n        changed = true;\n      }\n\n      if (coalesce(space.scrollable, false) !== coalesce(scrollable, false)) {\n        space.scrollable = coalesce(scrollable, false);\n        changed = true;\n      }\n\n      if (space.minimumSize !== minimumSize) {\n        space.minimumSize = minimumSize;\n        changed = true;\n      }\n\n      if (space.maximumSize !== maximumSize) {\n        space.maximumSize = maximumSize;\n        changed = true;\n      }\n\n      if (coalesce(space.centerContent, CenterType.None) !== coalesce(centerContent, CenterType.None)) {\n        space.centerContent = coalesce(centerContent, CenterType.None);\n        changed = true;\n      }\n\n      if (space.handleSize !== handleSize) {\n        space.handleSize = handleSize || spaceDefaults.handleSize;\n        changed = true;\n      }\n\n      if (space.touchHandleSize !== touchHandleSize) {\n        space.touchHandleSize = touchHandleSize || spaceDefaults.touchHandleSize;\n        changed = true;\n      }\n\n      if (space.handlePlacement !== handlePlacement) {\n        space.handlePlacement = handlePlacement || spaceDefaults.handlePlacement;\n        changed = true;\n      }\n\n      if (space.canResizeBottom !== canResizeBottom) {\n        space.canResizeBottom = canResizeBottom;\n        changed = true;\n      }\n\n      if (space.canResizeTop !== canResizeTop) {\n        space.canResizeTop = canResizeTop;\n        changed = true;\n      }\n\n      if (space.canResizeLeft !== canResizeLeft) {\n        space.canResizeLeft = canResizeLeft;\n        changed = true;\n      }\n\n      if (space.canResizeRight !== canResizeRight) {\n        space.canResizeRight = canResizeRight;\n        changed = true;\n      }\n\n      if (space.allowOverflow !== allowOverflow) {\n        space.allowOverflow = allowOverflow || spaceDefaults.allowOverflow;\n        changed = true;\n      }\n\n      if (changed) {\n        if (space.parentId) {\n          var parentSpace = getSpace(space.parentId);\n\n          if (parentSpace) {\n            recalcSpaces(parentSpace);\n          }\n        }\n\n        updateStyleDefinition(space);\n      }\n    },\n    createSpace: function createSpace() {\n      return {};\n    },\n    startMouseResize: function startMouseResize() {\n      return null;\n    },\n    startTouchResize: function startTouchResize() {\n      return null;\n    },\n    startMouseDrag: function startMouseDrag() {\n      return null;\n    },\n    startTouchDrag: function startTouchDrag() {\n      return null;\n    }\n  };\n  var resize = createResize(store);\n  var drag = createDrag(store);\n\n  store.createSpace = function (parentId, props, update) {\n    var position = props.position,\n        anchor = props.anchor,\n        type = props.type,\n        commonProps = __rest(props, ["position", "anchor", "type"]);\n\n    var canResizeLeft = position && position.rightResizable || false;\n    var canResizeRight = position && position.leftResizable || false;\n    var canResizeTop = position && position.bottomResizable || false;\n    var canResizeBottom = position && position.topResizable || false;\n\n    var newSpace = _assign(_assign(_assign({}, spaceDefaults), commonProps), {\n      store: store,\n      update: update,\n      updateParent: function updateParent() {\n        if (parentId) {\n          var parentSpace = store.getSpace(parentId);\n\n          if (parentSpace) {\n            parentSpace.update();\n          }\n        }\n      },\n      parentId: parentId,\n      children: [],\n      anchor: anchor,\n      type: type,\n      orientation: getOrientation(anchor),\n      position: getPosition(type),\n      left: sizeInfoDefault(position && position.left),\n      right: sizeInfoDefault(position && position.right),\n      top: sizeInfoDefault(position && position.top),\n      bottom: sizeInfoDefault(position && position.bottom),\n      width: sizeInfoDefault(position && position.width),\n      height: sizeInfoDefault(position && position.height),\n      canResizeLeft: canResizeLeft,\n      canResizeRight: canResizeRight,\n      canResizeTop: canResizeTop,\n      canResizeBottom: canResizeBottom\n    });\n\n    newSpace.anchoredChildren = function (children, anchor, zIndex) {\n      return children.filter(function (s) {\n        return s.type === Type.Anchored && s.anchor === anchor && s.zIndex === zIndex;\n      });\n    };\n\n    newSpace.adjustLeft = function (adjusted) {\n      if (adjustmentsEqual(newSpace.left.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.left.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustRight = function (adjusted) {\n      if (adjustmentsEqual(newSpace.right.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.right.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustTop = function (adjusted) {\n      if (adjustmentsEqual(newSpace.top.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.top.adjusted = adjusted;\n      return true;\n    };\n\n    newSpace.adjustBottom = function (adjusted) {\n      if (adjustmentsEqual(newSpace.bottom.adjusted, adjusted)) {\n        return false;\n      }\n\n      newSpace.bottom.adjusted = adjusted;\n      return true;\n    };\n\n    if (type === Type.Anchored) {\n      if (anchor === AnchorType.Left) {\n        newSpace.adjustEdge = newSpace.adjustLeft;\n      } else if (anchor === AnchorType.Top) {\n        newSpace.adjustEdge = newSpace.adjustTop;\n      } else if (anchor === AnchorType.Right) {\n        newSpace.adjustEdge = newSpace.adjustRight;\n      } else if (anchor === AnchorType.Bottom) {\n        newSpace.adjustEdge = newSpace.adjustBottom;\n      }\n    }\n\n    return newSpace;\n  };\n\n  store.startMouseResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startTouchResize = function (resizeType, space, event, onResizeEnd) {\n    resize.startResize(event, resizeType, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onResizeEnd);\n  };\n\n  store.startMouseDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Mouse, MoveEvent.Mouse, function (e) {\n      return {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }, onDragEnd);\n  };\n\n  store.startTouchDrag = function (space, event, onDragEnd) {\n    drag.startDrag(event, space, EndEvent.Touch, MoveEvent.Touch, function (e) {\n      return {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    }, onDragEnd);\n  };\n\n  return store;\n} // WORKAROUND for React18 strict mode\n// https://blog.ag-grid.com/avoiding-react-18-double-mount/\n\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  var destroyFunc = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();\n  var effectCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n  var renderAfterCalled = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(false);\n\n  var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);\n\n  _a[0];\n  var setVal = _a[1];\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    } // this forces one render after the effect is run\n\n\n    setVal(function (val) {\n      return val + 1;\n    });\n    return function () {\n      // if the comp didn\'t render since the useEffect was called,\n      // we know it\'s the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n\nvar ParentContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar DOMRectContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar LayerContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);\nvar OptionsContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createContext"]({});\nvar currentStore = createStore();\nvar commonProps = {\n  id: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  className: prop_types__WEBPACK_IMPORTED_MODULE_2__["string"],\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["object"], prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]]),\n  as: prop_types__WEBPACK_IMPORTED_MODULE_2__["any"],\n  centerContent: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([CenterType.None, CenterType.Vertical, CenterType.HorizontalVertical]),\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  scrollable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  trackSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  allowOverflow: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"],\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onDoubleClick: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onMouseMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchMove: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n};\n\nfunction useForceUpdate() {\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](0),\n      setTick = _a[1];\n\n  var update = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useSpace(props) {\n  var store = currentStore;\n  var update = useForceUpdate();\n  var parent = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var debug = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](OptionsContext).debug;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useState"](props.id || "s" + shortuuid())[0];\n  var elementRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n  var resizeSensor = react__WEBPACK_IMPORTED_MODULE_0__["useRef"]();\n\n  var _a = react__WEBPACK_IMPORTED_MODULE_0__["useState"](),\n      domRect = _a[0],\n      setDomRect = _a[1];\n\n  var space = store.getSpace(spaceId);\n\n  if (debug) {\n    console.table(store.getSpaces());\n  }\n\n  var parsedProps = _assign(_assign({}, props), {\n    id: spaceId,\n    zIndex: coalesce(props.zIndex, layer)\n  });\n\n  if (!space) {\n    space = store.createSpace(parent, parsedProps, update);\n    store.addSpace(space);\n  } else {\n    store.updateSpace(space, parsedProps);\n  }\n\n  var resizeHandles = useSpaceResizeHandles(store, space);\n  useEffectOnce(function () {\n    var rect = elementRef.current.getBoundingClientRect();\n    space.dimension = _assign(_assign({}, rect), {\n      left: Math.floor(rect.left),\n      top: Math.floor(rect.top),\n      right: Math.floor(rect.right),\n      bottom: Math.floor(rect.bottom),\n      width: Math.floor(rect.width),\n      height: Math.floor(rect.height),\n      x: Math.floor(rect.x),\n      y: Math.floor(rect.y)\n    });\n    setDomRect(space.dimension);\n\n    if (props.trackSize) {\n      resizeSensor.current = new css_element_queries__WEBPACK_IMPORTED_MODULE_1__["ResizeSensor"](elementRef.current, function (size) {\n        space.dimension = _assign(_assign({}, rect), {\n          width: Math.floor(size.width),\n          height: Math.floor(size.height)\n        });\n        setDomRect(space.dimension);\n      });\n    }\n\n    return function () {\n      resizeSensor.current && resizeSensor.current.detach();\n      store.removeSpace(space);\n    };\n  });\n  return {\n    space: space,\n    resizeHandles: resizeHandles,\n    domRect: domRect,\n    elementRef: elementRef\n  };\n}\n\nfunction useSpaceResizeHandles(store, space) {\n  var mouseHandles = [];\n\n  if (space.canResizeLeft) {\n    mouseHandles.push({\n      id: space.id + "-ml",\n      key: "left",\n      className: "spaces-resize-handle resize-left",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Left, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Left, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeRight) {\n    mouseHandles.push({\n      id: space.id + "-mr",\n      key: "right",\n      className: "spaces-resize-handle resize-right",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Right, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Right, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeTop) {\n    mouseHandles.push({\n      id: space.id + "-mt",\n      key: "top",\n      className: "spaces-resize-handle resize-top",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Top, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Top, space, event);\n      }\n    });\n  }\n\n  if (space.canResizeBottom) {\n    mouseHandles.push({\n      id: space.id + "-mb",\n      key: "bottom",\n      className: "spaces-resize-handle resize-bottom",\n      onMouseDown: function onMouseDown(event) {\n        return store.startMouseResize(ResizeType.Bottom, space, event);\n      },\n      onTouchStart: function onTouchStart(event) {\n        return store.startTouchResize(ResizeType.Bottom, space, event);\n      }\n    });\n  }\n\n  return {\n    mouseHandles: mouseHandles\n  };\n}\n\nfunction useCurrentSpace() {\n  var store = currentStore;\n  var spaceId = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](ParentContext);\n  var space = spaceId ? store.getSpace(spaceId) : undefined;\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n  var layer = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](LayerContext);\n  var onMouseDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startMouseDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onTouchDrag = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function (e, onDragEnd) {\n    return space ? store.startTouchDrag(space, e, onDragEnd) : null;\n  }, [spaceId]);\n  var onForceUpdate = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function () {\n    return space ? store.updateStyles(space) : null;\n  }, [spaceId]);\n  var defaults = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n\n  var size = _assign(_assign({}, defaults), domRect);\n\n  return {\n    size: size,\n    layer: layer || 0,\n    startMouseDrag: onMouseDrag,\n    startTouchDrag: onTouchDrag,\n    forceUpdate: onForceUpdate\n  };\n}\n\nvar Centered = function Centered(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered"\n  }, props.children);\n};\n\nvar CenteredVertically = function CenteredVertically(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: "spaces-centered-vertically"\n  }, props.children);\n};\n\nfunction applyCentering(children, centerType) {\n  switch (centerType) {\n    case CenterType.Vertical:\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](CenteredVertically, null, children);\n\n    case CenterType.HorizontalVertical:\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Centered, null, children);\n  }\n\n  return children;\n}\n\nvar Space =\n/** @class */\nfunction (_super) {\n  __extends(Space, _super);\n\n  function Space() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Space.prototype.render = function () {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SpaceInner, _assign({}, this.props, {\n      wrapperInstance: this\n    }));\n  };\n\n  return Space;\n}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);\n\nvar SpaceInner = function SpaceInner(props) {\n  if (!props.id && !props.wrapperInstance["_react_spaces_uniqueid"]) {\n    props.wrapperInstance["_react_spaces_uniqueid"] = "s" + shortuuid();\n  }\n\n  var style = props.style,\n      className = props.className,\n      onClick = props.onClick,\n      onDoubleClick = props.onDoubleClick,\n      onMouseDown = props.onMouseDown,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseMove = props.onMouseMove,\n      onTouchStart = props.onTouchStart,\n      onTouchMove = props.onTouchMove,\n      onTouchEnd = props.onTouchEnd,\n      children = props.children,\n      handleRender = props.handleRender;\n  var events = {\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseMove: onMouseMove,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n\n  var _a = useSpace(_assign(_assign({}, props), {\n    id: props.id || props.wrapperInstance["_react_spaces_uniqueid"]\n  })),\n      space = _a.space,\n      domRect = _a.domRect,\n      elementRef = _a.elementRef,\n      resizeHandles = _a.resizeHandles;\n\n  useEffectOnce(function () {\n    space.element = elementRef.current;\n  });\n  var userClasses = className ? className.split(" ").map(function (c) {\n    return c.trim();\n  }) : [];\n\n  var outerClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], ["spaces-space", space.children.find(function (s) {\n    return s.resizing;\n  }) ? "spaces-resizing" : undefined], false), [space.type === Type.Fixed ? "spaces-fixedsize-layout" : undefined], false), [space.type === Type.ViewPort ? "spaces-fullpage-layout" : undefined], false), userClasses.map(function (c) {\n    return c + "-container";\n  }), true).filter(function (c) {\n    return c;\n  });\n\n  var innerClasses = __spreadArray(__spreadArray([], ["spaces-space-inner"], false), userClasses, true);\n\n  var innerStyle = style;\n\n  if (space.handlePlacement === ResizeHandlePlacement.Inside) {\n    innerStyle = _assign(_assign({}, style), {\n      left: space.anchor === AnchorType.Right ? space.handleSize : undefined,\n      right: space.anchor === AnchorType.Left ? space.handleSize : undefined,\n      top: space.anchor === AnchorType.Bottom ? space.handleSize : undefined,\n      bottom: space.anchor === AnchorType.Top ? space.handleSize : undefined\n    });\n  }\n\n  var centeredContent = applyCentering(children, props.centerContent);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, resizeHandles.mouseHandles.map(function (handleProps) {\n    return (handleRender === null || handleRender === void 0 ? void 0 : handleRender(handleProps)) || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", _assign({}, handleProps));\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](props.as || "div", _assign({\n    id: space.id,\n    ref: elementRef,\n    className: outerClasses.join(" ")\n  }, events), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", {\n    className: innerClasses.join(" "),\n    style: innerStyle\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ParentContext.Provider, {\n    value: space.id\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: undefined\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DOMRectContext.Provider, {\n    value: domRect\n  }, centeredContent))))));\n};\n\nvar resizableProps = _assign(_assign({}, commonProps), {\n  size: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired,\n  order: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  touchHandleSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  handlePlacement: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([ResizeHandlePlacement.Inside, ResizeHandlePlacement.OverlayBoundary, ResizeHandlePlacement.OverlayInside]),\n  handleRender: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  minimumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  maximumSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"],\n  onResizeStart: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"],\n  onResizeEnd: prop_types__WEBPACK_IMPORTED_MODULE_2__["func"]\n});\n\nvar anchoredProps = _assign(_assign({}, resizableProps), {\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["bool"]\n});\n\nvar LeftResizable = function LeftResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nLeftResizable.propTypes = resizableProps;\n\nvar Left = function Left(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Left,\n    position: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      rightResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nLeft.propTypes = anchoredProps;\n\nvar TopResizable = function TopResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nTopResizable.propTypes = resizableProps;\n\nvar Top = function Top(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Top,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottomResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nTop.propTypes = anchoredProps;\n\nvar RightResizable = function RightResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: true,\n      width: size\n    }\n  }), children);\n};\n\nRightResizable.propTypes = resizableProps;\n\nvar Right = function Right(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Right,\n    position: {\n      bottom: 0,\n      top: 0,\n      right: 0,\n      leftResizable: resizable,\n      width: size\n    }\n  }), children);\n};\n\nRight.propTypes = anchoredProps;\n\nvar BottomResizable = function BottomResizable(_a) {\n  var children = _a.children,\n      size = _a.size,\n      props = __rest(_a, ["children", "size"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: true,\n      height: size\n    }\n  }), children);\n};\n\nBottomResizable.propTypes = resizableProps;\n\nvar Bottom = function Bottom(_a) {\n  var size = _a.size,\n      children = _a.children,\n      resizable = _a.resizable,\n      commonProps = __rest(_a, ["size", "children", "resizable"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Anchored,\n    anchor: AnchorType.Bottom,\n    position: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      topResizable: resizable,\n      height: size\n    }\n  }), children);\n};\n\nBottom.propTypes = anchoredProps;\n\nvar customProps = _assign(_assign({}, anchoredProps), {\n  type: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([Type.Positioned, Type.Fill, Type.Anchored]),\n  anchor: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOf"]([AnchorType.Left, AnchorType.Top, AnchorType.Right, AnchorType.Bottom]),\n  anchorSize: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizeTypes: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n\nvar Custom = function Custom(_a) {\n  var children = _a.children,\n      type = _a.type,\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      anchorSize = _a.anchorSize,\n      anchor = _a.anchor,\n      resizable = _a.resizable,\n      resizeTypes = _a.resizeTypes,\n      props = __rest(_a, ["children", "type", "left", "top", "right", "bottom", "width", "height", "anchorSize", "anchor", "resizable", "resizeTypes"]);\n\n  var position;\n  type = type || Type.Fill;\n\n  if (type === Type.Positioned) {\n    position = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      leftResizable: resizeTypes && resizeTypes.includes(ResizeType.Left),\n      topResizable: resizeTypes && resizeTypes.includes(ResizeType.Top),\n      rightResizable: resizeTypes && resizeTypes.includes(ResizeType.Right),\n      bottomResizable: resizeTypes && resizeTypes.includes(ResizeType.Bottom)\n    };\n  } else {\n    if (anchor === AnchorType.Left) {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        rightResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Right) {\n      position = {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: anchorSize,\n        leftResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Top) {\n      position = {\n        left: 0,\n        top: 0,\n        right: 0,\n        height: anchorSize,\n        bottomResizable: resizable\n      };\n      type = Type.Anchored;\n    } else if (anchor === AnchorType.Bottom) {\n      position = {\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: anchorSize,\n        topResizable: resizable\n      };\n      type = Type.Anchored;\n    } else {\n      position = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n      type = Type.Fill;\n    }\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: type,\n    anchor: anchor,\n    position: position\n  }), children);\n};\n\nCustom.propTypes = customProps;\n\nvar Fill = function Fill(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Fill,\n    position: {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    }\n  }), props.children);\n};\n\nFill.propTypes = commonProps;\n\nvar Fixed = function Fixed(_a) {\n  var width = _a.width,\n      height = _a.height,\n      children = _a.children,\n      commonProps = __rest(_a, ["width", "height", "children"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.Fixed,\n    position: {\n      width: width,\n      height: height\n    }\n  }), children);\n};\n\nFixed.propTypes = _assign(_assign({}, commonProps), {\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]).isRequired\n});\n\nvar Layer = function Layer(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](LayerContext.Provider, {\n    value: props.zIndex\n  }, props.children);\n};\n\nLayer.propTypes = {\n  zIndex: prop_types__WEBPACK_IMPORTED_MODULE_2__["number"].isRequired\n};\n\nvar Positioned = function Positioned(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      width = _a.width,\n      height = _a.height,\n      resizable = _a.resizable,\n      props = __rest(_a, ["left", "top", "right", "bottom", "width", "height", "resizable"]);\n\n  var resizeTypes = resizable || [];\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, props, {\n    type: Type.Positioned,\n    position: {\n      left: left,\n      leftResizable: resizeTypes.includes(ResizeType.Left),\n      top: top,\n      topResizable: resizeTypes.includes(ResizeType.Top),\n      right: right,\n      rightResizable: resizeTypes.includes(ResizeType.Right),\n      bottom: bottom,\n      bottomResizable: resizeTypes.includes(ResizeType.Bottom),\n      width: width,\n      height: height\n    }\n  }), props.children);\n};\n\nPositioned.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  width: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  height: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  resizable: prop_types__WEBPACK_IMPORTED_MODULE_2__["array"]\n});\n/**\r\n * @deprecated use useCurrentSpace() hook instead\r\n */\n\nvar Info = function Info(props) {\n  var domRect = react__WEBPACK_IMPORTED_MODULE_0__["useContext"](DOMRectContext);\n\n  if (domRect) {\n    return props.children(domRect);\n  }\n\n  return props.children({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n    toJSON: function toJSON() {\n      return "";\n    }\n  });\n};\n\nvar ViewPort = function ViewPort(_a) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      children = _a.children,\n      commonProps = __rest(_a, ["left", "top", "right", "bottom", "children"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Space, _assign({}, commonProps, {\n    type: Type.ViewPort,\n    position: {\n      left: left || 0,\n      top: top || 0,\n      right: right || 0,\n      bottom: bottom || 0\n    }\n  }), children);\n};\n\nViewPort.propTypes = _assign(_assign({}, commonProps), {\n  left: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  top: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  right: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]]),\n  bottom: prop_types__WEBPACK_IMPORTED_MODULE_2__["oneOfType"]([prop_types__WEBPACK_IMPORTED_MODULE_2__["string"], prop_types__WEBPACK_IMPORTED_MODULE_2__["number"]])\n});\n\nvar Options = function Options(_a) {\n  var children = _a.children,\n      opts = __rest(_a, ["children"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__["createElement"](OptionsContext.Provider, {\n    value: opts\n  }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///X0wg\n')},XQvf:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.active = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = __webpack_require__("cDcd");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar active = exports.active = function active(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'span\';\n  return function (_React$Component) {\n    _inherits(Active, _React$Component);\n\n    function Active() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Active);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        active: false\n      }, _this.handleMouseDown = function () {\n        return _this.setState({\n          active: true\n        });\n      }, _this.handleMouseUp = function () {\n        return _this.setState({\n          active: false\n        });\n      }, _this.render = function () {\n        return _react2["default"].createElement(Span, {\n          onMouseDown: _this.handleMouseDown,\n          onMouseUp: _this.handleMouseUp\n        }, _react2["default"].createElement(Component, _extends({}, _this.props, _this.state)));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Active;\n  }(_react2["default"].Component);\n};\n\nexports["default"] = active;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///XQvf\n')},Zss7:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n(function (Math) {\n  var trimLeft = /^\\s+/,\n      trimRight = /\\s+$/,\n      tinyCounter = 0,\n      mathRound = Math.round,\n      mathMin = Math.min,\n      mathMax = Math.max,\n      mathRandom = Math.random;\n\n  function tinycolor(color, opts) {\n    color = color ? color : \'\';\n    opts = opts || {}; // If input is already a tinycolor, return itself\n\n    if (color instanceof tinycolor) {\n      return color;\n    } // If we are called as a function, call using new instead\n\n\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType; // Don\'t let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this._r < 1) {\n      this._r = mathRound(this._r);\n    }\n\n    if (this._g < 1) {\n      this._g = mathRound(this._g);\n    }\n\n    if (this._b < 1) {\n      this._b = mathRound(this._b);\n    }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n  }\n\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n\n      if (RsRGB <= 0.03928) {\n        R = RsRGB / 12.92;\n      } else {\n        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (GsRGB <= 0.03928) {\n        G = GsRGB / 12.92;\n      } else {\n        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (BsRGB <= 0.03928) {\n        B = BsRGB / 12.92;\n      } else {\n        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = mathRound(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = mathRound(hsv.h * 360),\n          s = mathRound(hsv.s * 100),\n          v = mathRound(hsv.v * 100);\n      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = mathRound(hsl.h * 360),\n          s = mathRound(hsl.s * 100),\n          l = mathRound(hsl.l * 100);\n      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \'#\' + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \'#\' + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: mathRound(this._r),\n        g: mathRound(this._g),\n        b: mathRound(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: mathRound(bound01(this._r, 255) * 100) + "%",\n        g: mathRound(bound01(this._g, 255) * 100) + "%",\n        b: mathRound(bound01(this._b, 255) * 100) + "%",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return "transparent";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \'#\' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? "GradientType = 1, " : "";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \'#\' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");\n\n      if (needsAlphaFormat) {\n        // Special case for "transparent", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === "name" && this._a === 0) {\n          return this.toName();\n        }\n\n        return this.toRgbString();\n      }\n\n      if (format === "rgb") {\n        formattedString = this.toRgbString();\n      }\n\n      if (format === "prgb") {\n        formattedString = this.toPercentageRgbString();\n      }\n\n      if (format === "hex" || format === "hex6") {\n        formattedString = this.toHexString();\n      }\n\n      if (format === "hex3") {\n        formattedString = this.toHexString(true);\n      }\n\n      if (format === "hex4") {\n        formattedString = this.toHex8String(true);\n      }\n\n      if (format === "hex8") {\n        formattedString = this.toHex8String();\n      }\n\n      if (format === "name") {\n        formattedString = this.toName();\n      }\n\n      if (format === "hsl") {\n        formattedString = this.toHslString();\n      }\n\n      if (format === "hsv") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    triad: function triad() {\n      return this._applyCombination(_triad, arguments);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(_tetrad, arguments);\n    }\n  }; // If input is an object, force 1 into "1.0" to handle ratios properly\n  // String input requires "1.0" as input, so 1 will be treated as 1\n\n  tinycolor.fromRatio = function (color, opts) {\n    if (typeof color == "object") {\n      var newColor = {};\n\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === "a") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  }; // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     "red"\n  //     "#f00" or "f00"\n  //     "#ff0000" or "ff0000"\n  //     "#ff000000" or "ff000000"\n  //     "rgb 255 0 0" or "rgb (255, 0, 0)"\n  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"\n  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"\n  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"\n  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"\n  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"\n  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"\n  //\n\n\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == "string") {\n      color = stringInputToObject(color);\n    }\n\n    if (typeof color == "object") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = "hsv";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = "hsl";\n      }\n\n      if (color.hasOwnProperty("a")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: mathMin(255, mathMax(rgb.r, 0)),\n      g: mathMin(255, mathMax(rgb.g, 0)),\n      b: mathMin(255, mathMax(rgb.b, 0)),\n      a: a\n    };\n  } // Conversion Functions\n  // --------------------\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n\n\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  } // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n\n\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  } // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n\n\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  } // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n\n\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible\n\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join("");\n  } // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n\n\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible\n\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join("");\n  } // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for "toFilter()"\n\n\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n    return hex.join("");\n  } // `equals`\n  // Can be called with any tinycolor input\n\n\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) {\n      return false;\n    }\n\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: mathRandom(),\n      g: mathRandom(),\n      b: mathRandom()\n    });\n  }; // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n\n\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  } // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function _triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 120) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 240) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 90) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 180) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 270) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n\n    return ret;\n  }\n\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n        s = hsv.s,\n        v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  } // Utility Functions\n  // ---------------------\n\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  }; // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\n\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  }; // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the \'level\' property states \'AA\' or \'AAA\' - if missing or invalid, it defaults to \'AA\';\n  //      the \'size\' property states \'large\' or \'small\' - if missing or invalid, it defaults to \'small\'.\n  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.\n  // *Example*\n  //    tinycolor.isReadable("#000", "#111") => false\n  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false\n\n\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case "AAsmall":\n      case "AAAlarge":\n        out = readability >= 4.5;\n        break;\n\n      case "AAlarge":\n        out = readability >= 3;\n        break;\n\n      case "AAAsmall":\n        out = readability >= 7;\n        break;\n    }\n\n    return out;\n  }; // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"\n  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"\n  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"\n  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"\n\n\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      "level": level,\n      "size": size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);\n    }\n  }; // Big List of Colors\n  // ------------------\n  // <http://www.w3.org/TR/css3-color/#svg-color>\n\n\n  var names = tinycolor.names = {\n    aliceblue: "f0f8ff",\n    antiquewhite: "faebd7",\n    aqua: "0ff",\n    aquamarine: "7fffd4",\n    azure: "f0ffff",\n    beige: "f5f5dc",\n    bisque: "ffe4c4",\n    black: "000",\n    blanchedalmond: "ffebcd",\n    blue: "00f",\n    blueviolet: "8a2be2",\n    brown: "a52a2a",\n    burlywood: "deb887",\n    burntsienna: "ea7e5d",\n    cadetblue: "5f9ea0",\n    chartreuse: "7fff00",\n    chocolate: "d2691e",\n    coral: "ff7f50",\n    cornflowerblue: "6495ed",\n    cornsilk: "fff8dc",\n    crimson: "dc143c",\n    cyan: "0ff",\n    darkblue: "00008b",\n    darkcyan: "008b8b",\n    darkgoldenrod: "b8860b",\n    darkgray: "a9a9a9",\n    darkgreen: "006400",\n    darkgrey: "a9a9a9",\n    darkkhaki: "bdb76b",\n    darkmagenta: "8b008b",\n    darkolivegreen: "556b2f",\n    darkorange: "ff8c00",\n    darkorchid: "9932cc",\n    darkred: "8b0000",\n    darksalmon: "e9967a",\n    darkseagreen: "8fbc8f",\n    darkslateblue: "483d8b",\n    darkslategray: "2f4f4f",\n    darkslategrey: "2f4f4f",\n    darkturquoise: "00ced1",\n    darkviolet: "9400d3",\n    deeppink: "ff1493",\n    deepskyblue: "00bfff",\n    dimgray: "696969",\n    dimgrey: "696969",\n    dodgerblue: "1e90ff",\n    firebrick: "b22222",\n    floralwhite: "fffaf0",\n    forestgreen: "228b22",\n    fuchsia: "f0f",\n    gainsboro: "dcdcdc",\n    ghostwhite: "f8f8ff",\n    gold: "ffd700",\n    goldenrod: "daa520",\n    gray: "808080",\n    green: "008000",\n    greenyellow: "adff2f",\n    grey: "808080",\n    honeydew: "f0fff0",\n    hotpink: "ff69b4",\n    indianred: "cd5c5c",\n    indigo: "4b0082",\n    ivory: "fffff0",\n    khaki: "f0e68c",\n    lavender: "e6e6fa",\n    lavenderblush: "fff0f5",\n    lawngreen: "7cfc00",\n    lemonchiffon: "fffacd",\n    lightblue: "add8e6",\n    lightcoral: "f08080",\n    lightcyan: "e0ffff",\n    lightgoldenrodyellow: "fafad2",\n    lightgray: "d3d3d3",\n    lightgreen: "90ee90",\n    lightgrey: "d3d3d3",\n    lightpink: "ffb6c1",\n    lightsalmon: "ffa07a",\n    lightseagreen: "20b2aa",\n    lightskyblue: "87cefa",\n    lightslategray: "789",\n    lightslategrey: "789",\n    lightsteelblue: "b0c4de",\n    lightyellow: "ffffe0",\n    lime: "0f0",\n    limegreen: "32cd32",\n    linen: "faf0e6",\n    magenta: "f0f",\n    maroon: "800000",\n    mediumaquamarine: "66cdaa",\n    mediumblue: "0000cd",\n    mediumorchid: "ba55d3",\n    mediumpurple: "9370db",\n    mediumseagreen: "3cb371",\n    mediumslateblue: "7b68ee",\n    mediumspringgreen: "00fa9a",\n    mediumturquoise: "48d1cc",\n    mediumvioletred: "c71585",\n    midnightblue: "191970",\n    mintcream: "f5fffa",\n    mistyrose: "ffe4e1",\n    moccasin: "ffe4b5",\n    navajowhite: "ffdead",\n    navy: "000080",\n    oldlace: "fdf5e6",\n    olive: "808000",\n    olivedrab: "6b8e23",\n    orange: "ffa500",\n    orangered: "ff4500",\n    orchid: "da70d6",\n    palegoldenrod: "eee8aa",\n    palegreen: "98fb98",\n    paleturquoise: "afeeee",\n    palevioletred: "db7093",\n    papayawhip: "ffefd5",\n    peachpuff: "ffdab9",\n    peru: "cd853f",\n    pink: "ffc0cb",\n    plum: "dda0dd",\n    powderblue: "b0e0e6",\n    purple: "800080",\n    rebeccapurple: "663399",\n    red: "f00",\n    rosybrown: "bc8f8f",\n    royalblue: "4169e1",\n    saddlebrown: "8b4513",\n    salmon: "fa8072",\n    sandybrown: "f4a460",\n    seagreen: "2e8b57",\n    seashell: "fff5ee",\n    sienna: "a0522d",\n    silver: "c0c0c0",\n    skyblue: "87ceeb",\n    slateblue: "6a5acd",\n    slategray: "708090",\n    slategrey: "708090",\n    snow: "fffafa",\n    springgreen: "00ff7f",\n    steelblue: "4682b4",\n    tan: "d2b48c",\n    teal: "008080",\n    thistle: "d8bfd8",\n    tomato: "ff6347",\n    turquoise: "40e0d0",\n    violet: "ee82ee",\n    wheat: "f5deb3",\n    white: "fff",\n    whitesmoke: "f5f5f5",\n    yellow: "ff0",\n    yellowgreen: "9acd32"\n  }; // Make it easy to access colors via `hexNames[hex]`\n\n  var hexNames = tinycolor.hexNames = flip(names); // Utilities\n  // ---------\n  // `{ \'name1\': \'val1\' }` becomes `{ \'val1\': \'name1\' }`\n\n  function flip(o) {\n    var flipped = {};\n\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n\n    return flipped;\n  } // Return a valid alpha value [0,1] with all invalid values being set to 1\n\n\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  } // Take input from [0, n] and return it as [0, 1]\n\n\n  function bound01(n, max) {\n    if (isOnePointZero(n)) {\n      n = "100%";\n    }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number\n\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    } // Handle floating point rounding errors\n\n\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    } // Convert into [0, 1] range if it isn\'t already\n\n\n    return n % max / parseFloat(max);\n  } // Force a number between 0 and 1\n\n\n  function clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n  } // Parse a base-16 hex value into a base-10 integer\n\n\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\n  function isOnePointZero(n) {\n    return typeof n == "string" && n.indexOf(\'.\') != -1 && parseFloat(n) === 1;\n  } // Check to see if string passed in is a percentage\n\n\n  function isPercentage(n) {\n    return typeof n === "string" && n.indexOf(\'%\') != -1;\n  } // Force a hex value to have 2 characters\n\n\n  function pad2(c) {\n    return c.length == 1 ? \'0\' + c : \'\' + c;\n  } // Replace a decimal with it\'s percentage value\n\n\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + "%";\n    }\n\n    return n;\n  } // Converts a decimal to a hex value\n\n\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  } // Converts a hex value to a decimal\n\n\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = "[-\\\\+]?\\\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>\n\n    var CSS_NUMBER = "[-\\\\+]?\\\\d*\\\\.\\\\d+%?"; // Allow positive/negative integer/number.  Don\'t capture the either/or, just the entire outcome.\n\n    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n\n    var PERMISSIVE_MATCH3 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n    var PERMISSIVE_MATCH4 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),\n      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),\n      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),\n      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),\n      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),\n      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }(); // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n\n\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  } // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\n\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \'\').replace(trimRight, \'\').toLowerCase();\n    var named = false;\n\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \'transparent\') {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: "name"\n      };\n    } // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don\'t worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\n\n    var match;\n\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? "name" : "hex8"\n      };\n    }\n\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? "name" : "hex"\n      };\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \'\' + match[1]),\n        g: parseIntFromHex(match[2] + \'\' + match[2]),\n        b: parseIntFromHex(match[3] + \'\' + match[3]),\n        a: convertHexToDecimal(match[4] + \'\' + match[4]),\n        format: named ? "name" : "hex8"\n      };\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \'\' + match[1]),\n        g: parseIntFromHex(match[2] + \'\' + match[2]),\n        b: parseIntFromHex(match[3] + \'\' + match[3]),\n        format: named ? "name" : "hex"\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {"level":"AA", "size":"small"}\n    var level, size;\n    parms = parms || {\n      "level": "AA",\n      "size": "small"\n    };\n    level = (parms.level || "AA").toUpperCase();\n    size = (parms.size || "small").toLowerCase();\n\n    if (level !== "AA" && level !== "AAA") {\n      level = "AA";\n    }\n\n    if (size !== "small" && size !== "large") {\n      size = "small";\n    }\n\n    return {\n      "level": level,\n      "size": size\n    };\n  } // Node: Export function\n\n\n  if ( true && module.exports) {\n    module.exports = tinycolor;\n  } // AMD/requirejs: Define the module\n  else if (true) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return tinycolor;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } // Browser: Expose to window\n    else {}\n})(Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Zss7\n')},bdgK:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype[\"delete\"] = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations[\"delete\"](target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"IyRk\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bdgK\n")},bw0O:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("mW11");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW1pL25vZGVfbW9kdWxlcy91c2Utc3Vic2NyaXB0aW9uL2luZGV4LmpzPzZmMGQiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3pDQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJDLG1CQUFPLENBQUMsTUFBRCxDQUF4QjtBQUNELENBRkQsTUFFTyIsImZpbGUiOiJidzBPLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3VzZS1zdWJzY3JpcHRpb24ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdXNlLXN1YnNjcmlwdGlvbi5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///bw0O\n')},jjJg:function(__webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export CHARSET */\n/* unused harmony export COMMENT */\n/* unused harmony export COUNTER_STYLE */\n/* unused harmony export DECLARATION */\n/* unused harmony export DOCUMENT */\n/* unused harmony export FONT_FACE */\n/* unused harmony export FONT_FEATURE_VALUES */\n/* unused harmony export IMPORT */\n/* unused harmony export KEYFRAMES */\n/* unused harmony export MEDIA */\n/* unused harmony export MOZ */\n/* unused harmony export MS */\n/* unused harmony export NAMESPACE */\n/* unused harmony export PAGE */\n/* unused harmony export RULESET */\n/* unused harmony export SUPPORTS */\n/* unused harmony export VIEWPORT */\n/* unused harmony export WEBKIT */\n/* unused harmony export abs */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return U; });\n/* unused harmony export append */\n/* unused harmony export assign */\n/* unused harmony export caret */\n/* unused harmony export char */\n/* unused harmony export character */\n/* unused harmony export characters */\n/* unused harmony export charat */\n/* unused harmony export column */\n/* unused harmony export combine */\n/* unused harmony export comment */\n/* unused harmony export commenter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ce; });\n/* unused harmony export copy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return V; });\n/* unused harmony export declaration */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return W; });\n/* unused harmony export delimiter */\n/* unused harmony export escaping */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return d; });\n/* unused harmony export hash */\n/* unused harmony export identifier */\n/* unused harmony export indexof */\n/* unused harmony export length */\n/* unused harmony export line */\n/* unused harmony export match */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return le; });\n/* unused harmony export namespace */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return N; });\n/* unused harmony export node */\n/* unused harmony export parse */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return P; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return F; });\n/* unused harmony export prefix */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return he; });\n/* unused harmony export prev */\n/* unused harmony export replace */\n/* unused harmony export ruleset */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return ve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return fe; });\n/* unused harmony export sizeof */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return R; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return oe; });\n/* unused harmony export strlen */\n/* unused harmony export substr */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return T; });\n/* unused harmony export tokenize */\n/* unused harmony export tokenizer */\n/* unused harmony export trim */\n/* unused harmony export whitespace */\nvar e = "-ms-";\nvar r = "-moz-";\nvar a = "-webkit-";\nvar c = "comm";\nvar n = "rule";\nvar t = "decl";\nvar s = "@page";\nvar u = "@media";\nvar i = "@import";\nvar f = "@charset";\nvar o = "@viewport";\nvar l = "@supports";\nvar v = "@document";\nvar h = "@namespace";\nvar p = "@keyframes";\nvar b = "@font-face";\nvar w = "@counter-style";\nvar $ = "@font-feature-values";\nvar k = Math.abs;\nvar d = String.fromCharCode;\nvar g = Object.assign;\n\nfunction m(e, r) {\n  return (((r << 2 ^ z(e, 0)) << 2 ^ z(e, 1)) << 2 ^ z(e, 2)) << 2 ^ z(e, 3);\n}\n\nfunction x(e) {\n  return e.trim();\n}\n\nfunction y(e, r) {\n  return (e = r.exec(e)) ? e[0] : e;\n}\n\nfunction j(e, r, a) {\n  return e.replace(r, a);\n}\n\nfunction C(e, r) {\n  return e.indexOf(r);\n}\n\nfunction z(e, r) {\n  return e.charCodeAt(r) | 0;\n}\n\nfunction A(e, r, a) {\n  return e.slice(r, a);\n}\n\nfunction O(e) {\n  return e.length;\n}\n\nfunction M(e) {\n  return e.length;\n}\n\nfunction S(e, r) {\n  return r.push(e), e;\n}\n\nfunction q(e, r) {\n  return e.map(r).join("");\n}\n\nvar B = 1;\nvar D = 1;\nvar E = 0;\nvar F = 0;\nvar G = 0;\nvar H = "";\n\nfunction I(e, r, a, c, n, t, s) {\n  return {\n    value: e,\n    root: r,\n    parent: a,\n    type: c,\n    props: n,\n    children: t,\n    line: B,\n    column: D,\n    length: s,\n    "return": ""\n  };\n}\n\nfunction J(e, r) {\n  return g(I("", null, null, "", null, null, 0), e, {\n    length: -e.length\n  }, r);\n}\n\nfunction K() {\n  return G;\n}\n\nfunction L() {\n  G = F > 0 ? z(H, --F) : 0;\n  if (D--, G === 10) D = 1, B--;\n  return G;\n}\n\nfunction N() {\n  G = F < E ? z(H, F++) : 0;\n  if (D++, G === 10) D = 1, B++;\n  return G;\n}\n\nfunction P() {\n  return z(H, F);\n}\n\nfunction Q() {\n  return F;\n}\n\nfunction R(e, r) {\n  return A(H, e, r);\n}\n\nfunction T(e) {\n  switch (e) {\n    case 0:\n    case 9:\n    case 10:\n    case 13:\n    case 32:\n      return 5;\n\n    case 33:\n    case 43:\n    case 44:\n    case 47:\n    case 62:\n    case 64:\n    case 126:\n    case 59:\n    case 123:\n    case 125:\n      return 4;\n\n    case 58:\n      return 3;\n\n    case 34:\n    case 39:\n    case 40:\n    case 91:\n      return 2;\n\n    case 41:\n    case 93:\n      return 1;\n  }\n\n  return 0;\n}\n\nfunction U(e) {\n  return B = D = 1, E = O(H = e), F = 0, [];\n}\n\nfunction V(e) {\n  return H = "", e;\n}\n\nfunction W(e) {\n  return x(R(F - 1, ee(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));\n}\n\nfunction X(e) {\n  return V(Z(U(e)));\n}\n\nfunction Y(e) {\n  while (G = P()) {\n    if (G < 33) N();else break;\n  }\n\n  return T(e) > 2 || T(G) > 3 ? "" : " ";\n}\n\nfunction Z(e) {\n  while (N()) {\n    switch (T(G)) {\n      case 0:\n        S(ae(F - 1), e);\n        break;\n\n      case 2:\n        S(W(G), e);\n        break;\n\n      default:\n        S(d(G), e);\n    }\n  }\n\n  return e;\n}\n\nfunction _(e, r) {\n  while (--r && N()) {\n    if (G < 48 || G > 102 || G > 57 && G < 65 || G > 70 && G < 97) break;\n  }\n\n  return R(e, Q() + (r < 6 && P() == 32 && N() == 32));\n}\n\nfunction ee(e) {\n  while (N()) {\n    switch (G) {\n      case e:\n        return F;\n\n      case 34:\n      case 39:\n        if (e !== 34 && e !== 39) ee(G);\n        break;\n\n      case 40:\n        if (e === 41) ee(e);\n        break;\n\n      case 92:\n        N();\n        break;\n    }\n  }\n\n  return F;\n}\n\nfunction re(e, r) {\n  while (N()) {\n    if (e + G === 47 + 10) break;else if (e + G === 42 + 42 && P() === 47) break;\n  }\n\n  return "/*" + R(r, F - 1) + "*" + d(e === 47 ? e : N());\n}\n\nfunction ae(e) {\n  while (!T(P())) {\n    N();\n  }\n\n  return R(e, F);\n}\n\nfunction ce(e) {\n  return V(ne("", null, null, null, [""], e = U(e), 0, [0], e));\n}\n\nfunction ne(e, r, a, c, n, t, s, u, i) {\n  var f = 0;\n  var o = 0;\n  var l = s;\n  var v = 0;\n  var h = 0;\n  var p = 0;\n  var b = 1;\n  var w = 1;\n  var $ = 1;\n  var k = 0;\n  var g = "";\n  var m = n;\n  var x = t;\n  var y = c;\n  var z = g;\n\n  while (w) {\n    switch (p = k, k = N()) {\n      case 40:\n        if (p != 108 && z.charCodeAt(l - 1) == 58) {\n          if (C(z += j(W(k), "&", "&\\f"), "&\\f") != -1) $ = -1;\n          break;\n        }\n\n      case 34:\n      case 39:\n      case 91:\n        z += W(k);\n        break;\n\n      case 9:\n      case 10:\n      case 13:\n      case 32:\n        z += Y(p);\n        break;\n\n      case 92:\n        z += _(Q() - 1, 7);\n        continue;\n\n      case 47:\n        switch (P()) {\n          case 42:\n          case 47:\n            S(se(re(N(), Q()), r, a), i);\n            break;\n\n          default:\n            z += "/";\n        }\n\n        break;\n\n      case 123 * b:\n        u[f++] = O(z) * $;\n\n      case 125 * b:\n      case 59:\n      case 0:\n        switch (k) {\n          case 0:\n          case 125:\n            w = 0;\n\n          case 59 + o:\n            if (h > 0 && O(z) - l) S(h > 32 ? ue(z + ";", c, a, l - 1) : ue(j(z, " ", "") + ";", c, a, l - 2), i);\n            break;\n\n          case 59:\n            z += ";";\n\n          default:\n            S(y = te(z, r, a, f, o, n, u, g, m = [], x = [], l), t);\n            if (k === 123) if (o === 0) ne(z, r, y, y, m, t, l, u, x);else switch (v) {\n              case 100:\n              case 109:\n              case 115:\n                ne(e, y, y, c && S(te(e, y, y, 0, 0, n, u, g, n, m = [], l), x), n, x, l, u, c ? m : x);\n                break;\n\n              default:\n                ne(z, y, y, y, [""], x, 0, u, x);\n            }\n        }\n\n        f = o = h = 0, b = $ = 1, g = z = "", l = s;\n        break;\n\n      case 58:\n        l = 1 + O(z), h = p;\n\n      default:\n        if (b < 1) if (k == 123) --b;else if (k == 125 && b++ == 0 && L() == 125) continue;\n\n        switch (z += d(k), k * b) {\n          case 38:\n            $ = o > 0 ? 1 : (z += "\\f", -1);\n            break;\n\n          case 44:\n            u[f++] = (O(z) - 1) * $, $ = 1;\n            break;\n\n          case 64:\n            if (P() === 45) z += W(N());\n            v = P(), o = l = O(g = z += ae(Q())), k++;\n            break;\n\n          case 45:\n            if (p === 45 && O(z) == 2) b = 0;\n        }\n\n    }\n  }\n\n  return t;\n}\n\nfunction te(e, r, a, c, t, s, u, i, f, o, l) {\n  var v = t - 1;\n  var h = t === 0 ? s : [""];\n  var p = M(h);\n\n  for (var b = 0, w = 0, $ = 0; b < c; ++b) {\n    for (var d = 0, g = A(e, v + 1, v = k(w = u[b])), m = e; d < p; ++d) {\n      if (m = x(w > 0 ? h[d] + " " + g : j(g, /&\\f/g, h[d]))) f[$++] = m;\n    }\n  }\n\n  return I(e, r, a, t === 0 ? n : i, f, o, l);\n}\n\nfunction se(e, r, a) {\n  return I(e, r, a, c, d(K()), A(e, 2, -2), 0);\n}\n\nfunction ue(e, r, a, c) {\n  return I(e, r, a, t, A(e, 0, c), A(e, c + 1, -1), c);\n}\n\nfunction ie(c, n) {\n  switch (m(c, n)) {\n    case 5103:\n      return a + "print-" + c + c;\n\n    case 5737:\n    case 4201:\n    case 3177:\n    case 3433:\n    case 1641:\n    case 4457:\n    case 2921:\n    case 5572:\n    case 6356:\n    case 5844:\n    case 3191:\n    case 6645:\n    case 3005:\n    case 6391:\n    case 5879:\n    case 5623:\n    case 6135:\n    case 4599:\n    case 4855:\n    case 4215:\n    case 6389:\n    case 5109:\n    case 5365:\n    case 5621:\n    case 3829:\n      return a + c + c;\n\n    case 5349:\n    case 4246:\n    case 4810:\n    case 6968:\n    case 2756:\n      return a + c + r + c + e + c + c;\n\n    case 6828:\n    case 4268:\n      return a + c + e + c + c;\n\n    case 6165:\n      return a + c + e + "flex-" + c + c;\n\n    case 5187:\n      return a + c + j(c, /(\\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + c;\n\n    case 5443:\n      return a + c + e + "flex-item-" + j(c, /flex-|-self/, "") + c;\n\n    case 4675:\n      return a + c + e + "flex-line-pack" + j(c, /align-content|flex-|-self/, "") + c;\n\n    case 5548:\n      return a + c + e + j(c, "shrink", "negative") + c;\n\n    case 5292:\n      return a + c + e + j(c, "basis", "preferred-size") + c;\n\n    case 6060:\n      return a + "box-" + j(c, "-grow", "") + a + c + e + j(c, "grow", "positive") + c;\n\n    case 4554:\n      return a + j(c, /([^-])(transform)/g, "$1" + a + "$2") + c;\n\n    case 6187:\n      return j(j(j(c, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), c, "") + c;\n\n    case 5495:\n    case 3959:\n      return j(c, /(image-set\\([^]*)/, a + "$1" + "$`$1");\n\n    case 4968:\n      return j(j(c, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + c + c;\n\n    case 4095:\n    case 3583:\n    case 4068:\n    case 2532:\n      return j(c, /(.+)-inline(.+)/, a + "$1$2") + c;\n\n    case 8116:\n    case 7059:\n    case 5753:\n    case 5535:\n    case 5445:\n    case 5701:\n    case 4933:\n    case 4677:\n    case 5533:\n    case 5789:\n    case 5021:\n    case 4765:\n      if (O(c) - 1 - n > 6) switch (z(c, n + 1)) {\n        case 109:\n          if (z(c, n + 4) !== 45) break;\n\n        case 102:\n          return j(c, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (z(c, n + 3) == 108 ? "$3" : "$2-$3")) + c;\n\n        case 115:\n          return ~C(c, "stretch") ? ie(j(c, "stretch", "fill-available"), n) + c : c;\n      }\n      break;\n\n    case 4949:\n      if (z(c, n + 1) !== 115) break;\n\n    case 6444:\n      switch (z(c, O(c) - 3 - (~C(c, "!important") && 10))) {\n        case 107:\n          return j(c, ":", ":" + a) + c;\n\n        case 101:\n          return j(c, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (z(c, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + c;\n      }\n\n      break;\n\n    case 5936:\n      switch (z(c, n + 11)) {\n        case 114:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "tb") + c;\n\n        case 108:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "tb-rl") + c;\n\n        case 45:\n          return a + c + e + j(c, /[svh]\\w+-[tblr]{2}/, "lr") + c;\n      }\n\n      return a + c + e + c + c;\n  }\n\n  return c;\n}\n\nfunction fe(e, r) {\n  var a = "";\n  var c = M(e);\n\n  for (var n = 0; n < c; n++) {\n    a += r(e[n], n, e, r) || "";\n  }\n\n  return a;\n}\n\nfunction oe(e, r, a, s) {\n  switch (e.type) {\n    case i:\n    case t:\n      return e["return"] = e["return"] || e.value;\n\n    case c:\n      return "";\n\n    case p:\n      return e["return"] = e.value + "{" + fe(e.children, s) + "}";\n\n    case n:\n      e.value = e.props.join(",");\n  }\n\n  return O(a = fe(e.children, s)) ? e["return"] = e.value + "{" + a + "}" : "";\n}\n\nfunction le(e) {\n  var r = M(e);\n  return function (a, c, n, t) {\n    var s = "";\n\n    for (var u = 0; u < r; u++) {\n      s += e[u](a, c, n, t) || "";\n    }\n\n    return s;\n  };\n}\n\nfunction ve(e) {\n  return function (r) {\n    if (!r.root) if (r = r["return"]) e(r);\n  };\n}\n\nfunction he(c, s, u, i) {\n  if (c.length > -1) if (!c["return"]) switch (c.type) {\n    case t:\n      c["return"] = ie(c.value, c.length);\n      break;\n\n    case p:\n      return fe([J(c, {\n        value: j(c.value, "@", "@" + a)\n      })], i);\n\n    case n:\n      if (c.length) return q(c.props, function (n) {\n        switch (y(n, /(::plac\\w+|:read-\\w+)/)) {\n          case ":read-only":\n          case ":read-write":\n            return fe([J(c, {\n              props: [j(n, /:(read-\\w+)/, ":" + r + "$1")]\n            })], i);\n\n          case "::placeholder":\n            return fe([J(c, {\n              props: [j(n, /:(plac\\w+)/, ":" + a + "input-$1")]\n            }), J(c, {\n              props: [j(n, /:(plac\\w+)/, ":" + r + "$1")]\n            }), J(c, {\n              props: [j(n, /:(plac\\w+)/, e + "input-$1")]\n            })], i);\n        }\n\n        return "";\n      });\n  }\n}\n\nfunction pe(e) {\n  switch (e.type) {\n    case n:\n      e.props = e.props.map(function (r) {\n        return q(X(r), function (r, a, c) {\n          switch (z(r, 0)) {\n            case 12:\n              return A(r, 1, O(r));\n\n            case 0:\n            case 40:\n            case 43:\n            case 62:\n            case 126:\n              return r;\n\n            case 58:\n              if (c[++a] === "global") c[a] = "", c[++a] = "\\f" + A(c[a], a = 1, -1);\n\n            case 32:\n              return a === 1 ? "" : r;\n\n            default:\n              switch (a) {\n                case 0:\n                  e = r;\n                  return M(c) > 1 ? "" : r;\n\n                case a = M(c) - 1:\n                case 2:\n                  return a === 2 ? r + e + e : r + e;\n\n                default:\n                  return r;\n              }\n\n          }\n        });\n      });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///jjJg\n')},lCFh:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node's url.parse\n\n\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n  var hasTrailingSlash;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }\n  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n  var result = fromParts.join('/');\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n  return result;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (resolvePathname);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcz85NDIxIl0sIm5hbWVzIjpbImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImxpc3QiLCJpbmRleCIsImkiLCJrIiwibiIsImxlbmd0aCIsInBvcCIsInJlc29sdmVQYXRobmFtZSIsInRvIiwiZnJvbSIsInVuZGVmaW5lZCIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwiam9pbiIsInN1YnN0ciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEI7QUFDNUIsU0FBT0EsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQTlCO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsT0FBSyxJQUFJQyxDQUFDLEdBQUdELEtBQVIsRUFBZUUsQ0FBQyxHQUFHRCxDQUFDLEdBQUcsQ0FBdkIsRUFBMEJFLENBQUMsR0FBR0osSUFBSSxDQUFDSyxNQUF4QyxFQUFnREYsQ0FBQyxHQUFHQyxDQUFwRCxFQUF1REYsQ0FBQyxJQUFJLENBQUwsRUFBUUMsQ0FBQyxJQUFJLENBQXBFLEVBQXVFO0FBQ3JFSCxRQUFJLENBQUNFLENBQUQsQ0FBSixHQUFVRixJQUFJLENBQUNHLENBQUQsQ0FBZDtBQUNEOztBQUVESCxNQUFJLENBQUNNLEdBQUw7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxNQUFJQSxJQUFJLEtBQUtDLFNBQWIsRUFBd0JELElBQUksR0FBRyxFQUFQO0FBRXhCLE1BQUlFLE9BQU8sR0FBSUgsRUFBRSxJQUFJQSxFQUFFLENBQUNJLEtBQUgsQ0FBUyxHQUFULENBQVAsSUFBeUIsRUFBdkM7QUFDQSxNQUFJQyxTQUFTLEdBQUlKLElBQUksSUFBSUEsSUFBSSxDQUFDRyxLQUFMLENBQVcsR0FBWCxDQUFULElBQTZCLEVBQTdDO0FBRUEsTUFBSUUsT0FBTyxHQUFHTixFQUFFLElBQUlaLFVBQVUsQ0FBQ1ksRUFBRCxDQUE5QjtBQUNBLE1BQUlPLFNBQVMsR0FBR04sSUFBSSxJQUFJYixVQUFVLENBQUNhLElBQUQsQ0FBbEM7QUFDQSxNQUFJTyxVQUFVLEdBQUdGLE9BQU8sSUFBSUMsU0FBNUI7O0FBRUEsTUFBSVAsRUFBRSxJQUFJWixVQUFVLENBQUNZLEVBQUQsQ0FBcEIsRUFBMEI7QUFDeEI7QUFDQUssYUFBUyxHQUFHRixPQUFaO0FBQ0QsR0FIRCxNQUdPLElBQUlBLE9BQU8sQ0FBQ04sTUFBWixFQUFvQjtBQUN6QjtBQUNBUSxhQUFTLENBQUNQLEdBQVY7QUFDQU8sYUFBUyxHQUFHQSxTQUFTLENBQUNJLE1BQVYsQ0FBaUJOLE9BQWpCLENBQVo7QUFDRDs7QUFFRCxNQUFJLENBQUNFLFNBQVMsQ0FBQ1IsTUFBZixFQUF1QixPQUFPLEdBQVA7QUFFdkIsTUFBSWEsZ0JBQUo7O0FBQ0EsTUFBSUwsU0FBUyxDQUFDUixNQUFkLEVBQXNCO0FBQ3BCLFFBQUljLElBQUksR0FBR04sU0FBUyxDQUFDQSxTQUFTLENBQUNSLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBcEI7QUFDQWEsb0JBQWdCLEdBQUdDLElBQUksS0FBSyxHQUFULElBQWdCQSxJQUFJLEtBQUssSUFBekIsSUFBaUNBLElBQUksS0FBSyxFQUE3RDtBQUNELEdBSEQsTUFHTztBQUNMRCxvQkFBZ0IsR0FBRyxLQUFuQjtBQUNEOztBQUVELE1BQUlFLEVBQUUsR0FBRyxDQUFUOztBQUNBLE9BQUssSUFBSWxCLENBQUMsR0FBR1csU0FBUyxDQUFDUixNQUF2QixFQUErQkgsQ0FBQyxJQUFJLENBQXBDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDLFFBQUltQixJQUFJLEdBQUdSLFNBQVMsQ0FBQ1gsQ0FBRCxDQUFwQjs7QUFFQSxRQUFJbUIsSUFBSSxLQUFLLEdBQWIsRUFBa0I7QUFDaEJ0QixlQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO0FBQ0QsS0FGRCxNQUVPLElBQUltQixJQUFJLEtBQUssSUFBYixFQUFtQjtBQUN4QnRCLGVBQVMsQ0FBQ2MsU0FBRCxFQUFZWCxDQUFaLENBQVQ7QUFDQWtCLFFBQUU7QUFDSCxLQUhNLE1BR0EsSUFBSUEsRUFBSixFQUFRO0FBQ2JyQixlQUFTLENBQUNjLFNBQUQsRUFBWVgsQ0FBWixDQUFUO0FBQ0FrQixRQUFFO0FBQ0g7QUFDRjs7QUFFRCxNQUFJLENBQUNKLFVBQUwsRUFBaUIsT0FBT0ksRUFBRSxFQUFULEVBQWFBLEVBQWI7QUFBaUJQLGFBQVMsQ0FBQ1MsT0FBVixDQUFrQixJQUFsQjtBQUFqQjtBQUVqQixNQUNFTixVQUFVLElBQ1ZILFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUIsRUFEakIsS0FFQyxDQUFDQSxTQUFTLENBQUMsQ0FBRCxDQUFWLElBQWlCLENBQUNqQixVQUFVLENBQUNpQixTQUFTLENBQUMsQ0FBRCxDQUFWLENBRjdCLENBREYsRUFLRUEsU0FBUyxDQUFDUyxPQUFWLENBQWtCLEVBQWxCO0FBRUYsTUFBSUMsTUFBTSxHQUFHVixTQUFTLENBQUNXLElBQVYsQ0FBZSxHQUFmLENBQWI7QUFFQSxNQUFJTixnQkFBZ0IsSUFBSUssTUFBTSxDQUFDRSxNQUFQLENBQWMsQ0FBQyxDQUFmLE1BQXNCLEdBQTlDLEVBQW1ERixNQUFNLElBQUksR0FBVjtBQUVuRCxTQUFPQSxNQUFQO0FBQ0Q7O0FBRWNoQix3RUFBZiIsImZpbGUiOiJsQ0ZoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///lCFh\n")},lreK:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.mergeClasses = undefined;\n\nvar _forOwn2 = __webpack_require__("Ag8Z");\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _cloneDeep2 = __webpack_require__("BkRI");\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nvar mergeClasses = exports.mergeClasses = function mergeClasses(classes) {\n  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var styles = classes["default"] && (0, _cloneDeep3["default"])(classes["default"]) || {};\n  activeNames.map(function (name) {\n    var toMerge = classes[name];\n\n    if (toMerge) {\n      (0, _forOwn3["default"])(toMerge, function (value, key) {\n        if (!styles[key]) {\n          styles[key] = {};\n        }\n\n        styles[key] = _extends({}, styles[key], toMerge[key]);\n      });\n    }\n\n    return name;\n  });\n  return styles;\n};\n\nexports["default"] = mergeClasses;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL21lcmdlQ2xhc3Nlcy5qcz85NmI3Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWVyZ2VDbGFzc2VzIiwidW5kZWZpbmVkIiwiX2Zvck93bjIiLCJyZXF1aXJlIiwiX2Zvck93bjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Nsb25lRGVlcDIiLCJfY2xvbmVEZWVwMyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjbGFzc2VzIiwiYWN0aXZlTmFtZXMiLCJzdHlsZXMiLCJtYXAiLCJuYW1lIiwidG9NZXJnZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLE9BQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFlBQVIsR0FBdUJDLFNBQXZCOztBQUVBLElBQUlDLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxNQUFELENBQXRCOztBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNILFFBQUQsQ0FBckM7O0FBRUEsSUFBSUksV0FBVyxHQUFHSCxtQkFBTyxDQUFDLE1BQUQsQ0FBekI7O0FBRUEsSUFBSUksV0FBVyxHQUFHRixzQkFBc0IsQ0FBQ0MsV0FBRCxDQUF4Qzs7QUFFQSxJQUFJRSxRQUFRLEdBQUdaLE1BQU0sQ0FBQ2EsTUFBUCxJQUFpQixVQUFVQyxNQUFWLEVBQWtCO0FBQUUsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0FBQUUsUUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBdEI7O0FBQTJCLFNBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7QUFBRSxVQUFJbEIsTUFBTSxDQUFDb0IsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDSixNQUFyQyxFQUE2Q0MsR0FBN0MsQ0FBSixFQUF1RDtBQUFFTCxjQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEI7QUFBNEI7QUFBRTtBQUFFOztBQUFDLFNBQU9MLE1BQVA7QUFBZ0IsQ0FBaFE7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NjLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUUsZUFBU0E7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBSW5CLFlBQVksR0FBR0YsT0FBTyxDQUFDRSxZQUFSLEdBQXVCLFNBQVNBLFlBQVQsQ0FBc0JxQixPQUF0QixFQUErQjtBQUN2RSxNQUFJQyxXQUFXLEdBQUdWLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixJQUF3QkQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQlgsU0FBekMsR0FBcURXLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEVBQXRGO0FBRUEsTUFBSVcsTUFBTSxHQUFHRixPQUFPLFdBQVAsSUFBbUIsQ0FBQyxHQUFHZCxXQUFXLFdBQWYsRUFBeUJjLE9BQU8sV0FBaEMsQ0FBbkIsSUFBZ0UsRUFBN0U7QUFDQUMsYUFBVyxDQUFDRSxHQUFaLENBQWdCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsUUFBSUMsT0FBTyxHQUFHTCxPQUFPLENBQUNJLElBQUQsQ0FBckI7O0FBQ0EsUUFBSUMsT0FBSixFQUFhO0FBQ1gsT0FBQyxHQUFHdEIsUUFBUSxXQUFaLEVBQXNCc0IsT0FBdEIsRUFBK0IsVUFBVTNCLEtBQVYsRUFBaUJnQixHQUFqQixFQUFzQjtBQUNuRCxZQUFJLENBQUNRLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCO0FBQ2hCUSxnQkFBTSxDQUFDUixHQUFELENBQU4sR0FBYyxFQUFkO0FBQ0Q7O0FBRURRLGNBQU0sQ0FBQ1IsR0FBRCxDQUFOLEdBQWNQLFFBQVEsQ0FBQyxFQUFELEVBQUtlLE1BQU0sQ0FBQ1IsR0FBRCxDQUFYLEVBQWtCVyxPQUFPLENBQUNYLEdBQUQsQ0FBekIsQ0FBdEI7QUFDRCxPQU5EO0FBT0Q7O0FBRUQsV0FBT1UsSUFBUDtBQUNELEdBYkQ7QUFjQSxTQUFPRixNQUFQO0FBQ0QsQ0FuQkQ7O0FBcUJBekIsT0FBTyxXQUFQLEdBQWtCRSxZQUFsQiIsImZpbGUiOiJscmVLLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5tZXJnZUNsYXNzZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfY2xvbmVEZWVwMiA9IHJlcXVpcmUoJ2xvZGFzaC9jbG9uZURlZXAnKTtcblxudmFyIF9jbG9uZURlZXAzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmVEZWVwMik7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBtZXJnZUNsYXNzZXMgPSBleHBvcnRzLm1lcmdlQ2xhc3NlcyA9IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcyhjbGFzc2VzKSB7XG4gIHZhciBhY3RpdmVOYW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG5cbiAgdmFyIHN0eWxlcyA9IGNsYXNzZXMuZGVmYXVsdCAmJiAoMCwgX2Nsb25lRGVlcDMuZGVmYXVsdCkoY2xhc3Nlcy5kZWZhdWx0KSB8fCB7fTtcbiAgYWN0aXZlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHRvTWVyZ2UgPSBjbGFzc2VzW25hbWVdO1xuICAgIGlmICh0b01lcmdlKSB7XG4gICAgICAoMCwgX2Zvck93bjMuZGVmYXVsdCkodG9NZXJnZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFzdHlsZXNba2V5XSkge1xuICAgICAgICAgIHN0eWxlc1trZXldID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNba2V5XSA9IF9leHRlbmRzKHt9LCBzdHlsZXNba2V5XSwgdG9NZXJnZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1lcmdlQ2xhc3NlczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///lreK\n')},mSXw:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("9iN/");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcz85OTI1Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN6Q0MsUUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxtQkFBTyxDQUFDLE1BQUQsQ0FBeEI7QUFDRCxDQUZELE1BRU8iLCJmaWxlIjoibVNYdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///mSXw\n')},mW11:function(module,exports,__webpack_require__){"use strict";eval('/** @license React vundefined\n * use-subscription.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar e = __webpack_require__("MgzW"),\n    g = __webpack_require__("cDcd");\n\nexports.useSubscription = function (a) {\n  var c = a.getCurrentValue,\n      d = a.subscribe,\n      b = g.useState(function () {\n    return {\n      getCurrentValue: c,\n      subscribe: d,\n      value: c()\n    };\n  });\n  a = b[0];\n  var f = b[1];\n  b = a.value;\n  if (a.getCurrentValue !== c || a.subscribe !== d) b = c(), f({\n    getCurrentValue: c,\n    subscribe: d,\n    value: b\n  });\n  g.useDebugValue(b);\n  g.useEffect(function () {\n    function b() {\n      if (!a) {\n        var b = c();\n        f(function (a) {\n          return a.getCurrentValue !== c || a.subscribe !== d || a.value === b ? a : e({}, a, {\n            value: b\n          });\n        });\n      }\n    }\n\n    var a = !1,\n        h = d(b);\n    b();\n    return function () {\n      a = !0;\n      h();\n    };\n  }, [c, d]);\n  return b;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW1pL25vZGVfbW9kdWxlcy91c2Utc3Vic2NyaXB0aW9uL2Nqcy91c2Utc3Vic2NyaXB0aW9uLnByb2R1Y3Rpb24ubWluLmpzPzk5NmQiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJnIiwiZXhwb3J0cyIsInVzZVN1YnNjcmlwdGlvbiIsImEiLCJjIiwiZ2V0Q3VycmVudFZhbHVlIiwiZCIsInN1YnNjcmliZSIsImIiLCJ1c2VTdGF0ZSIsInZhbHVlIiwiZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxtQkFBTyxDQUFDLE1BQUQsQ0FBYjtBQUFBLElBQStCQyxDQUFDLEdBQUNELG1CQUFPLENBQUMsTUFBRCxDQUF4Qzs7QUFDYkUsT0FBTyxDQUFDQyxlQUFSLEdBQXdCLFVBQVNDLENBQVQsRUFBVztBQUFDLE1BQUlDLENBQUMsR0FBQ0QsQ0FBQyxDQUFDRSxlQUFSO0FBQUEsTUFBd0JDLENBQUMsR0FBQ0gsQ0FBQyxDQUFDSSxTQUE1QjtBQUFBLE1BQXNDQyxDQUFDLEdBQUNSLENBQUMsQ0FBQ1MsUUFBRixDQUFXLFlBQVU7QUFBQyxXQUFNO0FBQUNKLHFCQUFlLEVBQUNELENBQWpCO0FBQW1CRyxlQUFTLEVBQUNELENBQTdCO0FBQStCSSxXQUFLLEVBQUNOLENBQUM7QUFBdEMsS0FBTjtBQUFnRCxHQUF0RSxDQUF4QztBQUFnSEQsR0FBQyxHQUFDSyxDQUFDLENBQUMsQ0FBRCxDQUFIO0FBQU8sTUFBSUcsQ0FBQyxHQUFDSCxDQUFDLENBQUMsQ0FBRCxDQUFQO0FBQVdBLEdBQUMsR0FBQ0wsQ0FBQyxDQUFDTyxLQUFKO0FBQVUsTUFBR1AsQ0FBQyxDQUFDRSxlQUFGLEtBQW9CRCxDQUFwQixJQUF1QkQsQ0FBQyxDQUFDSSxTQUFGLEtBQWNELENBQXhDLEVBQTBDRSxDQUFDLEdBQUNKLENBQUMsRUFBSCxFQUFNTyxDQUFDLENBQUM7QUFBQ04sbUJBQWUsRUFBQ0QsQ0FBakI7QUFBbUJHLGFBQVMsRUFBQ0QsQ0FBN0I7QUFBK0JJLFNBQUssRUFBQ0Y7QUFBckMsR0FBRCxDQUFQO0FBQWlEUixHQUFDLENBQUNZLGFBQUYsQ0FBZ0JKLENBQWhCO0FBQW1CUixHQUFDLENBQUNhLFNBQUYsQ0FBWSxZQUFVO0FBQUMsYUFBU0wsQ0FBVCxHQUFZO0FBQUMsVUFBRyxDQUFDTCxDQUFKLEVBQU07QUFBQyxZQUFJSyxDQUFDLEdBQUNKLENBQUMsRUFBUDtBQUFVTyxTQUFDLENBQUMsVUFBU1IsQ0FBVCxFQUFXO0FBQUMsaUJBQU9BLENBQUMsQ0FBQ0UsZUFBRixLQUFvQkQsQ0FBcEIsSUFBdUJELENBQUMsQ0FBQ0ksU0FBRixLQUFjRCxDQUFyQyxJQUF3Q0gsQ0FBQyxDQUFDTyxLQUFGLEtBQVVGLENBQWxELEdBQW9ETCxDQUFwRCxHQUFzREwsQ0FBQyxDQUFDLEVBQUQsRUFBSUssQ0FBSixFQUFNO0FBQUNPLGlCQUFLLEVBQUNGO0FBQVAsV0FBTixDQUE5RDtBQUErRSxTQUE1RixDQUFEO0FBQStGO0FBQUM7O0FBQUEsUUFBSUwsQ0FBQyxHQUFDLENBQUMsQ0FBUDtBQUFBLFFBQVNXLENBQUMsR0FBQ1IsQ0FBQyxDQUFDRSxDQUFELENBQVo7QUFBZ0JBLEtBQUM7QUFBRyxXQUFPLFlBQVU7QUFBQ0wsT0FBQyxHQUFDLENBQUMsQ0FBSDtBQUFLVyxPQUFDO0FBQUcsS0FBM0I7QUFBNEIsR0FBck0sRUFBc00sQ0FBQ1YsQ0FBRCxFQUFHRSxDQUFILENBQXRNO0FBQTZNLFNBQU9FLENBQVA7QUFBUyxDQUFwZiIsImZpbGUiOiJtVzExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHZ1bmRlZmluZWRcbiAqIHVzZS1zdWJzY3JpcHRpb24ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBlPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLGc9cmVxdWlyZShcInJlYWN0XCIpO1xuZXhwb3J0cy51c2VTdWJzY3JpcHRpb249ZnVuY3Rpb24oYSl7dmFyIGM9YS5nZXRDdXJyZW50VmFsdWUsZD1hLnN1YnNjcmliZSxiPWcudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm57Z2V0Q3VycmVudFZhbHVlOmMsc3Vic2NyaWJlOmQsdmFsdWU6YygpfX0pO2E9YlswXTt2YXIgZj1iWzFdO2I9YS52YWx1ZTtpZihhLmdldEN1cnJlbnRWYWx1ZSE9PWN8fGEuc3Vic2NyaWJlIT09ZCliPWMoKSxmKHtnZXRDdXJyZW50VmFsdWU6YyxzdWJzY3JpYmU6ZCx2YWx1ZTpifSk7Zy51c2VEZWJ1Z1ZhbHVlKGIpO2cudXNlRWZmZWN0KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYigpe2lmKCFhKXt2YXIgYj1jKCk7ZihmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRDdXJyZW50VmFsdWUhPT1jfHxhLnN1YnNjcmliZSE9PWR8fGEudmFsdWU9PT1iP2E6ZSh7fSxhLHt2YWx1ZTpifSl9KX19dmFyIGE9ITEsaD1kKGIpO2IoKTtyZXR1cm4gZnVuY3Rpb24oKXthPSEwO2goKX19LFtjLGRdKTtyZXR1cm4gYn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///mW11\n')},rlch:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplyPluginsType", function() { return ApplyPluginsType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plugin", function() { return Plugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dynamic", function() { return dynamic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBrowser", function() { return isBrowser; });\n/* harmony import */ var _home_runner_work_fast_ui_fast_ui_node_modules_umijs_babel_preset_umi_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("WmNS");\n/* harmony import */ var _home_runner_work_fast_ui_fast_ui_node_modules_umijs_babel_preset_umi_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_home_runner_work_fast_ui_fast_ui_node_modules_umijs_babel_preset_umi_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var history_with_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("YS25");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createBrowserHistory", function() { return history_with_query__WEBPACK_IMPORTED_MODULE_1__["a"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createHashHistory", function() { return history_with_query__WEBPACK_IMPORTED_MODULE_1__["b"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMemoryHistory", function() { return history_with_query__WEBPACK_IMPORTED_MODULE_1__["d"]; });\n\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("Ty5D");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "__RouterContext", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["h"]; });\n\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("55Ip");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return react_router_dom__WEBPACK_IMPORTED_MODULE_3__["a"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["a"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return react_router_dom__WEBPACK_IMPORTED_MODULE_3__["b"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prompt", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["b"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Redirect", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["c"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["d"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["e"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StaticRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["f"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["g"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchPath", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["i"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useHistory", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["j"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useLocation", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["k"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useParams", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["l"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useRouteMatch", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["m"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["n"]; });\n\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var use_subscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("bw0O");\n/* harmony import */ var use_subscription__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(use_subscription__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar LoadableContext = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_4__["createContext"])(null);\nvar ALL_INITIALIZERS = [];\nvar READY_INITIALIZERS = [];\nvar initialized = false;\n\nfunction load(loader) {\n  var promise = loader();\n  var state = {\n    loading: true,\n    loaded: null,\n    error: null\n  };\n  state.promise = promise.then(function (loaded) {\n    state.loading = false;\n    state.loaded = loaded;\n    return loaded;\n  })["catch"](function (err) {\n    state.loading = false;\n    state.error = err;\n    throw err;\n  });\n  return state;\n}\n\nfunction loadMap(obj) {\n  var state = {\n    loading: false,\n    loaded: {},\n    error: null\n  };\n  var promises = [];\n\n  try {\n    Object.keys(obj).forEach(function (key) {\n      var result = load(obj[key]);\n\n      if (!result.loading) {\n        state.loaded[key] = result.loaded;\n        state.error = result.error;\n      } else {\n        state.loading = true;\n      }\n\n      promises.push(result.promise);\n      result.promise.then(function (res) {\n        state.loaded[key] = res;\n      })["catch"](function (err) {\n        state.error = err;\n      });\n    });\n  } catch (err) {\n    state.error = err;\n  }\n\n  state.promise = Promise.all(promises).then(function (res) {\n    state.loading = false;\n    return res;\n  })["catch"](function (err) {\n    state.loading = false;\n    throw err;\n  });\n  return state;\n}\n\nfunction resolve(obj) {\n  return obj && obj.__esModule ? obj["default"] : obj;\n}\n\nfunction render(loaded, props) {\n  return /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_4__["createElement"])(resolve(loaded), props);\n}\n\nfunction createLoadableComponent(loadFn, options) {\n  var opts = Object.assign({\n    loader: null,\n    loading: null,\n    delay: 200,\n    timeout: null,\n    render: render,\n    webpack: null,\n    modules: null\n  }, options);\n  var subscription = null;\n\n  function init() {\n    if (!subscription) {\n      var sub = new LoadableSubscription(loadFn, opts);\n      subscription = {\n        getCurrentValue: sub.getCurrentValue.bind(sub),\n        subscribe: sub.subscribe.bind(sub),\n        retry: sub.retry.bind(sub),\n        promise: sub.promise.bind(sub)\n      };\n    }\n\n    return subscription.promise();\n  } // Server only\n\n\n  if (typeof window === \'undefined\') {\n    ALL_INITIALIZERS.push(init);\n  } // Client only\n\n\n  if (!initialized && typeof window !== \'undefined\' && typeof opts.webpack === \'function\') {\n    var moduleIds = opts.webpack();\n    READY_INITIALIZERS.push(function (ids) {\n      var _iterator = _createForOfIteratorHelper(moduleIds),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var moduleId = _step.value;\n\n          if (ids.indexOf(moduleId) !== -1) {\n            return init();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n  }\n\n  var LoadableComponent = function LoadableComponent(props, ref) {\n    init();\n    var context = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(LoadableContext);\n    var state = Object(use_subscription__WEBPACK_IMPORTED_MODULE_5__["useSubscription"])(subscription);\n    Object(react__WEBPACK_IMPORTED_MODULE_4__["useImperativeHandle"])(ref, function () {\n      return {\n        retry: subscription.retry\n      };\n    });\n\n    if (context && Array.isArray(opts.modules)) {\n      opts.modules.forEach(function (moduleName) {\n        context(moduleName);\n      });\n    }\n\n    if (state.loading || state.error) {\n      if (false) {}\n\n      return /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_4__["createElement"])(opts.loading, {\n        isLoading: state.loading,\n        pastDelay: state.pastDelay,\n        timedOut: state.timedOut,\n        error: state.error,\n        retry: subscription.retry\n      });\n    } else if (state.loaded) {\n      return opts.render(state.loaded, props);\n    } else {\n      return null;\n    }\n  };\n\n  var LoadableComponentWithRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(LoadableComponent); // add static method in React.forwardRef\n  // https://github.com/facebook/react/issues/17830\n\n  LoadableComponentWithRef.preload = function () {\n    return init();\n  };\n\n  LoadableComponentWithRef.displayName = \'LoadableComponent\';\n  return LoadableComponentWithRef;\n}\n\nvar LoadableSubscription = /*#__PURE__*/function () {\n  function LoadableSubscription(loadFn, opts) {\n    _classCallCheck(this, LoadableSubscription);\n\n    this._loadFn = loadFn;\n    this._opts = opts;\n    this._callbacks = new Set();\n    this._delay = null;\n    this._timeout = null;\n    this.retry();\n  }\n\n  _createClass(LoadableSubscription, [{\n    key: "promise",\n    value: function promise() {\n      return this._res.promise;\n    }\n  }, {\n    key: "retry",\n    value: function retry() {\n      var _this = this;\n\n      this._clearTimeouts();\n\n      this._res = this._loadFn(this._opts.loader);\n      this._state = {\n        pastDelay: false,\n        timedOut: false\n      };\n      var res = this._res,\n          opts = this._opts;\n\n      if (res.loading) {\n        if (typeof opts.delay === \'number\') {\n          if (opts.delay === 0) {\n            this._state.pastDelay = true;\n          } else {\n            this._delay = setTimeout(function () {\n              _this._update({\n                pastDelay: true\n              });\n            }, opts.delay);\n          }\n        }\n\n        if (typeof opts.timeout === \'number\') {\n          this._timeout = setTimeout(function () {\n            _this._update({\n              timedOut: true\n            });\n          }, opts.timeout);\n        }\n      }\n\n      this._res.promise.then(function () {\n        _this._update();\n\n        _this._clearTimeouts();\n      }) // eslint-disable-next-line handle-callback-err\n      ["catch"](function (err) {\n        _this._update();\n\n        _this._clearTimeouts();\n      });\n\n      this._update({});\n    }\n  }, {\n    key: "_update",\n    value: function _update(partial) {\n      this._state = _objectSpread2(_objectSpread2({}, this._state), partial);\n\n      this._callbacks.forEach(function (callback) {\n        return callback();\n      });\n    }\n  }, {\n    key: "_clearTimeouts",\n    value: function _clearTimeouts() {\n      clearTimeout(this._delay);\n      clearTimeout(this._timeout);\n    }\n  }, {\n    key: "getCurrentValue",\n    value: function getCurrentValue() {\n      return _objectSpread2(_objectSpread2({}, this._state), {}, {\n        error: this._res.error,\n        loaded: this._res.loaded,\n        loading: this._res.loading\n      });\n    }\n  }, {\n    key: "subscribe",\n    value: function subscribe(callback) {\n      var _this2 = this;\n\n      this._callbacks.add(callback);\n\n      return function () {\n        _this2._callbacks["delete"](callback);\n      };\n    }\n  }]);\n\n  return LoadableSubscription;\n}();\n\nfunction Loadable(opts) {\n  return createLoadableComponent(load, opts);\n}\n\nfunction LoadableMap(opts) {\n  if (typeof opts.render !== \'function\') {\n    throw new Error(\'LoadableMap requires a `render(loaded, props)` function\');\n  }\n\n  return createLoadableComponent(loadMap, opts);\n}\n\nLoadable.Map = LoadableMap;\n\nfunction flushInitializers(initializers, ids) {\n  var promises = [];\n\n  while (initializers.length) {\n    var init = initializers.pop();\n    promises.push(init(ids));\n  }\n\n  return Promise.all(promises).then(function () {\n    if (initializers.length) {\n      return flushInitializers(initializers, ids);\n    }\n  });\n}\n\nLoadable.preloadAll = function () {\n  return new Promise(function (resolve, reject) {\n    flushInitializers(ALL_INITIALIZERS).then(resolve, reject);\n  });\n};\n\nLoadable.preloadReady = function () {\n  var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return new Promise(function (resolve) {\n    var res = function res() {\n      initialized = true;\n      return resolve();\n    }; // We always will resolve, errors should be handled within loading UIs.\n\n\n    flushInitializers(READY_INITIALIZERS, ids).then(res, res);\n  });\n};\n\nif (typeof window !== \'undefined\') {\n  window.__NEXT_PRELOADREADY = Loadable.preloadReady;\n}\n\nfunction dynamic(opts) {\n  var loadableFn = Loadable;\n  var loadableOptions = {\n    loading: function loading(_ref) {\n      var error = _ref.error,\n          isLoading = _ref.isLoading;\n\n      if (false) {}\n\n      return /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_4__["createElement"])("p", null, "loading...");\n    }\n  }; // Support for direct import(),\n  // eg: dynamic(() => import(\'../hello-world\'))\n\n  if (typeof opts === \'function\') {\n    loadableOptions.loader = opts; // Support for having first argument being options,\n    // eg: dynamic({loader: import(\'../hello-world\')})\n  } else if (_typeof(opts) === \'object\') {\n    loadableOptions = _objectSpread2(_objectSpread2({}, loadableOptions), opts);\n  } else {\n    throw new Error("Unexpect arguments ".concat(opts));\n  } // Support for passing options,\n  // eg: dynamic(import(\'../hello-world\'), {loading: () => <p>Loading something</p>})\n  // loadableOptions = { ...loadableOptions, ...options };\n\n\n  return loadableFn(loadableOptions);\n}\n\nfunction assert(value, message) {\n  if (!value) throw new Error(message);\n}\n/**\r\n * whether in browser env\r\n */\n\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== \'undefined\' && typeof window.document !== \'undefined\' && typeof window.document.createElement !== \'undefined\';\n};\n\nvar ApplyPluginsType;\n\n(function (ApplyPluginsType) {\n  ApplyPluginsType["compose"] = "compose";\n  ApplyPluginsType["modify"] = "modify";\n  ApplyPluginsType["event"] = "event";\n})(ApplyPluginsType || (ApplyPluginsType = {}));\n\nfunction _compose(_ref) {\n  var fns = _ref.fns,\n      args = _ref.args;\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  var last = fns.pop();\n  return fns.reduce(function (a, b) {\n    return function () {\n      return b(a, args);\n    };\n  }, last);\n}\n\nfunction isPromiseLike(obj) {\n  return !!obj && _typeof(obj) === \'object\' && typeof obj.then === \'function\';\n}\n\nvar Plugin = /*#__PURE__*/function () {\n  function Plugin(opts) {\n    _classCallCheck(this, Plugin);\n\n    this.validKeys = void 0;\n    this.hooks = {};\n    this.validKeys = (opts === null || opts === void 0 ? void 0 : opts.validKeys) || [];\n  }\n\n  _createClass(Plugin, [{\n    key: "register",\n    value: function register(plugin) {\n      var _this = this;\n\n      assert(!!plugin.apply, "register failed, plugin.apply must supplied");\n      assert(!!plugin.path, "register failed, plugin.path must supplied");\n      Object.keys(plugin.apply).forEach(function (key) {\n        assert(_this.validKeys.indexOf(key) > -1, "register failed, invalid key ".concat(key, " from plugin ").concat(plugin.path, "."));\n        if (!_this.hooks[key]) _this.hooks[key] = [];\n        _this.hooks[key] = _this.hooks[key].concat(plugin.apply[key]);\n      });\n    }\n  }, {\n    key: "getHooks",\n    value: function getHooks(keyWithDot) {\n      var _keyWithDot$split = keyWithDot.split(\'.\'),\n          _keyWithDot$split2 = _toArray(_keyWithDot$split),\n          key = _keyWithDot$split2[0],\n          memberKeys = _keyWithDot$split2.slice(1);\n\n      var hooks = this.hooks[key] || [];\n\n      if (memberKeys.length) {\n        hooks = hooks.map(function (hook) {\n          try {\n            var ret = hook;\n\n            var _iterator = _createForOfIteratorHelper(memberKeys),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var memberKey = _step.value;\n                ret = ret[memberKey];\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return ret;\n          } catch (e) {\n            return null;\n          }\n        }).filter(Boolean);\n      }\n\n      return hooks;\n    }\n  }, {\n    key: "applyPlugins",\n    value: function applyPlugins(_ref2) {\n      var key = _ref2.key,\n          type = _ref2.type,\n          initialValue = _ref2.initialValue,\n          args = _ref2.args,\n          async = _ref2.async;\n      var hooks = this.getHooks(key) || [];\n\n      if (args) {\n        assert(_typeof(args) === \'object\', "applyPlugins failed, args must be plain object.");\n      }\n\n      switch (type) {\n        case ApplyPluginsType.modify:\n          if (async) {\n            return hooks.reduce( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_home_runner_work_fast_ui_fast_ui_node_modules_umijs_babel_preset_umi_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(memo, hook) {\n                var ret;\n                return _home_runner_work_fast_ui_fast_ui_node_modules_umijs_babel_preset_umi_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        assert(typeof hook === \'function\' || _typeof(hook) === \'object\' || isPromiseLike(hook), "applyPlugins failed, all hooks for key ".concat(key, " must be function, plain object or Promise."));\n\n                        if (!isPromiseLike(memo)) {\n                          _context.next = 5;\n                          break;\n                        }\n\n                        _context.next = 4;\n                        return memo;\n\n                      case 4:\n                        memo = _context.sent;\n\n                      case 5:\n                        if (!(typeof hook === \'function\')) {\n                          _context.next = 16;\n                          break;\n                        }\n\n                        ret = hook(memo, args);\n\n                        if (!isPromiseLike(ret)) {\n                          _context.next = 13;\n                          break;\n                        }\n\n                        _context.next = 10;\n                        return ret;\n\n                      case 10:\n                        return _context.abrupt("return", _context.sent);\n\n                      case 13:\n                        return _context.abrupt("return", ret);\n\n                      case 14:\n                        _context.next = 21;\n                        break;\n\n                      case 16:\n                        if (!isPromiseLike(hook)) {\n                          _context.next = 20;\n                          break;\n                        }\n\n                        _context.next = 19;\n                        return hook;\n\n                      case 19:\n                        hook = _context.sent;\n\n                      case 20:\n                        return _context.abrupt("return", _objectSpread2(_objectSpread2({}, memo), hook));\n\n                      case 21:\n                      case "end":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x, _x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }(), isPromiseLike(initialValue) ? initialValue : Promise.resolve(initialValue));\n          } else {\n            return hooks.reduce(function (memo, hook) {\n              assert(typeof hook === \'function\' || _typeof(hook) === \'object\', "applyPlugins failed, all hooks for key ".concat(key, " must be function or plain object."));\n\n              if (typeof hook === \'function\') {\n                return hook(memo, args);\n              } else {\n                // TODO: deepmerge?\n                return _objectSpread2(_objectSpread2({}, memo), hook);\n              }\n            }, initialValue);\n          }\n\n        case ApplyPluginsType.event:\n          return hooks.forEach(function (hook) {\n            assert(typeof hook === \'function\', "applyPlugins failed, all hooks for key ".concat(key, " must be function."));\n            hook(args);\n          });\n\n        case ApplyPluginsType.compose:\n          return function () {\n            return _compose({\n              fns: hooks.concat(initialValue),\n              args: args\n            })();\n          };\n      }\n    }\n  }]);\n\n  return Plugin;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///rlch\n')},vOnD:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerStyleSheet", function() { return Je; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetConsumer", function() { return le; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetContext", function() { return ue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheetManager", function() { return ye; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeConsumer", function() { return Le; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeContext", function() { return Ge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeProvider", function() { return Fe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__PRIVATE__", function() { return Ke; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createGlobalStyle", function() { return We; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return Ce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStyledComponent", function() { return N; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return Ue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useTheme", function() { return Ze; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return C; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withTheme", function() { return Xe; });\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("TOwV");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("cDcd");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("Gytx");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("0x0X");\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("ME5O");\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("CTjV");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("2mql");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nfunction v() {\n  return (v = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  }).apply(this, arguments);\n}\n\nvar g = function g(e, t) {\n  for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1) {\n    n.push(t[r], e[r + 1]);\n  }\n\n  return n;\n},\n    S = function S(t) {\n  return null !== t && "object" == typeof t && "[object Object]" === (t.toString ? t.toString() : Object.prototype.toString.call(t)) && !Object(react_is__WEBPACK_IMPORTED_MODULE_0__["typeOf"])(t);\n},\n    w = Object.freeze([]),\n    E = Object.freeze({});\n\nfunction b(e) {\n  return "function" == typeof e;\n}\n\nfunction _(e) {\n  return  false || e.displayName || e.name || "Component";\n}\n\nfunction N(e) {\n  return e && "string" == typeof e.styledComponentId;\n}\n\nvar A = "undefined" != typeof process && (Object({"NODE_ENV":"production"}).REACT_APP_SC_ATTR || Object({"NODE_ENV":"production"}).SC_ATTR) || "data-styled",\n    C = "5.3.5",\n    I = "undefined" != typeof window && "HTMLElement" in window,\n    P = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY && "" !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY ? "false" !== Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY && Object({"NODE_ENV":"production"}).REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY && "" !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY ? "false" !== Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY && Object({"NODE_ENV":"production"}).SC_DISABLE_SPEEDY : "production" !== "production"),\n    O = {},\n    R =  false ? undefined : {};\n\nfunction D() {\n  for (var e = arguments.length <= 0 ? void 0 : arguments[0], t = [], n = 1, r = arguments.length; n < r; n += 1) {\n    t.push(n < 0 || arguments.length <= n ? void 0 : arguments[n]);\n  }\n\n  return t.forEach(function (t) {\n    e = e.replace(/%[a-z]/, t);\n  }), e;\n}\n\nfunction j(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  throw  true ? new Error("An error occurred. See https://git.io/JUIaE#" + e + " for more information." + (n.length > 0 ? " Args: " + n.join(", ") : "")) : undefined;\n}\n\nvar T = function () {\n  function e(e) {\n    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;\n  }\n\n  var t = e.prototype;\n  return t.indexOfGroup = function (e) {\n    for (var t = 0, n = 0; n < e; n++) {\n      t += this.groupSizes[n];\n    }\n\n    return t;\n  }, t.insertRules = function (e, t) {\n    if (e >= this.groupSizes.length) {\n      for (var n = this.groupSizes, r = n.length, o = r; e >= o;) {\n        (o <<= 1) < 0 && j(16, "" + e);\n      }\n\n      this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;\n\n      for (var s = r; s < o; s++) {\n        this.groupSizes[s] = 0;\n      }\n    }\n\n    for (var i = this.indexOfGroup(e + 1), a = 0, c = t.length; a < c; a++) {\n      this.tag.insertRule(i, t[a]) && (this.groupSizes[e]++, i++);\n    }\n  }, t.clearGroup = function (e) {\n    if (e < this.length) {\n      var t = this.groupSizes[e],\n          n = this.indexOfGroup(e),\n          r = n + t;\n      this.groupSizes[e] = 0;\n\n      for (var o = n; o < r; o++) {\n        this.tag.deleteRule(n);\n      }\n    }\n  }, t.getGroup = function (e) {\n    var t = "";\n    if (e >= this.length || 0 === this.groupSizes[e]) return t;\n\n    for (var n = this.groupSizes[e], r = this.indexOfGroup(e), o = r + n, s = r; s < o; s++) {\n      t += this.tag.getRule(s) + "/*!sc*/\\n";\n    }\n\n    return t;\n  }, e;\n}(),\n    x = new Map(),\n    k = new Map(),\n    V = 1,\n    B = function B(e) {\n  if (x.has(e)) return x.get(e);\n\n  for (; k.has(V);) {\n    V++;\n  }\n\n  var t = V++;\n  return  false && false, x.set(e, t), k.set(t, e), t;\n},\n    z = function z(e) {\n  return k.get(e);\n},\n    M = function M(e, t) {\n  t >= V && (V = t + 1), x.set(e, t), k.set(t, e);\n},\n    G = "style[" + A + \'][data-styled-version="5.3.5"]\',\n    L = new RegExp("^" + A + \'\\\\.g(\\\\d+)\\\\[id="([\\\\w\\\\d-]+)"\\\\].*?"([^"]*)\'),\n    F = function F(e, t, n) {\n  for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++) {\n    (r = o[s]) && e.registerName(t, r);\n  }\n},\n    Y = function Y(e, t) {\n  for (var n = (t.textContent || "").split("/*!sc*/\\n"), r = [], o = 0, s = n.length; o < s; o++) {\n    var i = n[o].trim();\n\n    if (i) {\n      var a = i.match(L);\n\n      if (a) {\n        var c = 0 | parseInt(a[1], 10),\n            u = a[2];\n        0 !== c && (M(u, c), F(e, u, a[3]), e.getTag().insertRules(c, r)), r.length = 0;\n      } else r.push(i);\n    }\n  }\n},\n    q = function q() {\n  return "undefined" != typeof window && void 0 !== window.__webpack_nonce__ ? window.__webpack_nonce__ : null;\n},\n    H = function H(e) {\n  var t = document.head,\n      n = e || t,\n      r = document.createElement("style"),\n      o = function (e) {\n    for (var t = e.childNodes, n = t.length; n >= 0; n--) {\n      var r = t[n];\n      if (r && 1 === r.nodeType && r.hasAttribute(A)) return r;\n    }\n  }(n),\n      s = void 0 !== o ? o.nextSibling : null;\n\n  r.setAttribute(A, "active"), r.setAttribute("data-styled-version", "5.3.5");\n  var i = q();\n  return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;\n},\n    $ = function () {\n  function e(e) {\n    var t = this.element = H(e);\n    t.appendChild(document.createTextNode("")), this.sheet = function (e) {\n      if (e.sheet) return e.sheet;\n\n      for (var t = document.styleSheets, n = 0, r = t.length; n < r; n++) {\n        var o = t[n];\n        if (o.ownerNode === e) return o;\n      }\n\n      j(17);\n    }(t), this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    try {\n      return this.sheet.insertRule(t, e), this.length++, !0;\n    } catch (e) {\n      return !1;\n    }\n  }, t.deleteRule = function (e) {\n    this.sheet.deleteRule(e), this.length--;\n  }, t.getRule = function (e) {\n    var t = this.sheet.cssRules[e];\n    return void 0 !== t && "string" == typeof t.cssText ? t.cssText : "";\n  }, e;\n}(),\n    W = function () {\n  function e(e) {\n    var t = this.element = H(e);\n    this.nodes = t.childNodes, this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    if (e <= this.length && e >= 0) {\n      var n = document.createTextNode(t),\n          r = this.nodes[e];\n      return this.element.insertBefore(n, r || null), this.length++, !0;\n    }\n\n    return !1;\n  }, t.deleteRule = function (e) {\n    this.element.removeChild(this.nodes[e]), this.length--;\n  }, t.getRule = function (e) {\n    return e < this.length ? this.nodes[e].textContent : "";\n  }, e;\n}(),\n    U = function () {\n  function e(e) {\n    this.rules = [], this.length = 0;\n  }\n\n  var t = e.prototype;\n  return t.insertRule = function (e, t) {\n    return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);\n  }, t.deleteRule = function (e) {\n    this.rules.splice(e, 1), this.length--;\n  }, t.getRule = function (e) {\n    return e < this.length ? this.rules[e] : "";\n  }, e;\n}(),\n    J = I,\n    X = {\n  isServer: !I,\n  useCSSOMInjection: !P\n},\n    Z = function () {\n  function e(e, t, n) {\n    void 0 === e && (e = E), void 0 === t && (t = {}), this.options = v({}, X, {}, e), this.gs = t, this.names = new Map(n), this.server = !!e.isServer, !this.server && I && J && (J = !1, function (e) {\n      for (var t = document.querySelectorAll(G), n = 0, r = t.length; n < r; n++) {\n        var o = t[n];\n        o && "active" !== o.getAttribute(A) && (Y(e, o), o.parentNode && o.parentNode.removeChild(o));\n      }\n    }(this));\n  }\n\n  e.registerId = function (e) {\n    return B(e);\n  };\n\n  var t = e.prototype;\n  return t.reconstructWithOptions = function (t, n) {\n    return void 0 === n && (n = !0), new e(v({}, this.options, {}, t), this.gs, n && this.names || void 0);\n  }, t.allocateGSInstance = function (e) {\n    return this.gs[e] = (this.gs[e] || 0) + 1;\n  }, t.getTag = function () {\n    return this.tag || (this.tag = (n = (t = this.options).isServer, r = t.useCSSOMInjection, o = t.target, e = n ? new U(o) : r ? new $(o) : new W(o), new T(e)));\n    var e, t, n, r, o;\n  }, t.hasNameForId = function (e, t) {\n    return this.names.has(e) && this.names.get(e).has(t);\n  }, t.registerName = function (e, t) {\n    if (B(e), this.names.has(e)) this.names.get(e).add(t);else {\n      var n = new Set();\n      n.add(t), this.names.set(e, n);\n    }\n  }, t.insertRules = function (e, t, n) {\n    this.registerName(e, t), this.getTag().insertRules(B(e), n);\n  }, t.clearNames = function (e) {\n    this.names.has(e) && this.names.get(e).clear();\n  }, t.clearRules = function (e) {\n    this.getTag().clearGroup(B(e)), this.clearNames(e);\n  }, t.clearTag = function () {\n    this.tag = void 0;\n  }, t.toString = function () {\n    return function (e) {\n      for (var t = e.getTag(), n = t.length, r = "", o = 0; o < n; o++) {\n        var s = z(o);\n\n        if (void 0 !== s) {\n          var i = e.names.get(s),\n              a = t.getGroup(o);\n\n          if (i && a && i.size) {\n            var c = A + ".g" + o + \'[id="\' + s + \'"]\',\n                u = "";\n            void 0 !== i && i.forEach(function (e) {\n              e.length > 0 && (u += e + ",");\n            }), r += "" + a + c + \'{content:"\' + u + \'"}/*!sc*/\\n\';\n          }\n        }\n      }\n\n      return r;\n    }(this);\n  }, e;\n}(),\n    K = /(a)(d)/gi,\n    Q = function Q(e) {\n  return String.fromCharCode(e + (e > 25 ? 39 : 97));\n};\n\nfunction ee(e) {\n  var t,\n      n = "";\n\n  for (t = Math.abs(e); t > 52; t = t / 52 | 0) {\n    n = Q(t % 52) + n;\n  }\n\n  return (Q(t % 52) + n).replace(K, "$1-$2");\n}\n\nvar te = function te(e, t) {\n  for (var n = t.length; n;) {\n    e = 33 * e ^ t.charCodeAt(--n);\n  }\n\n  return e;\n},\n    ne = function ne(e) {\n  return te(5381, e);\n};\n\nfunction re(e) {\n  for (var t = 0; t < e.length; t += 1) {\n    var n = e[t];\n    if (b(n) && !N(n)) return !1;\n  }\n\n  return !0;\n}\n\nvar oe = ne("5.3.5"),\n    se = function () {\n  function e(e, t, n) {\n    this.rules = e, this.staticRulesId = "", this.isStatic =  true && (void 0 === n || n.isStatic) && re(e), this.componentId = t, this.baseHash = te(oe, t), this.baseStyle = n, Z.registerId(t);\n  }\n\n  return e.prototype.generateAndInjectStyles = function (e, t, n) {\n    var r = this.componentId,\n        o = [];\n    if (this.baseStyle && o.push(this.baseStyle.generateAndInjectStyles(e, t, n)), this.isStatic && !n.hash) {\n      if (this.staticRulesId && t.hasNameForId(r, this.staticRulesId)) o.push(this.staticRulesId);else {\n        var s = Ne(this.rules, e, t, n).join(""),\n            i = ee(te(this.baseHash, s) >>> 0);\n\n        if (!t.hasNameForId(r, i)) {\n          var a = n(s, "." + i, void 0, r);\n          t.insertRules(r, i, a);\n        }\n\n        o.push(i), this.staticRulesId = i;\n      }\n    } else {\n      for (var c = this.rules.length, u = te(this.baseHash, n.hash), l = "", d = 0; d < c; d++) {\n        var h = this.rules[d];\n        if ("string" == typeof h) l += h,  false && (false);else if (h) {\n          var p = Ne(h, e, t, n),\n              f = Array.isArray(p) ? p.join("") : p;\n          u = te(u, f + d), l += f;\n        }\n      }\n\n      if (l) {\n        var m = ee(u >>> 0);\n\n        if (!t.hasNameForId(r, m)) {\n          var y = n(l, "." + m, void 0, r);\n          t.insertRules(r, m, y);\n        }\n\n        o.push(m);\n      }\n    }\n    return o.join(" ");\n  }, e;\n}(),\n    ie = /^\\s*\\/\\/.*$/gm,\n    ae = [":", "[", ".", "#"];\n\nfunction ce(e) {\n  var t,\n      n,\n      r,\n      o,\n      s = void 0 === e ? E : e,\n      i = s.options,\n      a = void 0 === i ? E : i,\n      c = s.plugins,\n      u = void 0 === c ? w : c,\n      l = new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](a),\n      d = [],\n      h = function (e) {\n    function t(t) {\n      if (t) try {\n        e(t + "}");\n      } catch (e) {}\n    }\n\n    return function (n, r, o, s, i, a, c, u, l, d) {\n      switch (n) {\n        case 1:\n          if (0 === l && 64 === r.charCodeAt(0)) return e(r + ";"), "";\n          break;\n\n        case 2:\n          if (0 === u) return r + "/*|*/";\n          break;\n\n        case 3:\n          switch (u) {\n            case 102:\n            case 112:\n              return e(o[0] + r), "";\n\n            default:\n              return r + (0 === d ? "/*|*/" : "");\n          }\n\n        case -2:\n          r.split("/*|*/}").forEach(t);\n      }\n    };\n  }(function (e) {\n    d.push(e);\n  }),\n      f = function f(e, r, s) {\n    return 0 === r && -1 !== ae.indexOf(s[n.length]) || s.match(o) ? e : "." + t;\n  };\n\n  function m(e, s, i, a) {\n    void 0 === a && (a = "&");\n    var c = e.replace(ie, ""),\n        u = s && i ? i + " " + s + " { " + c + " }" : c;\n    return t = a, n = s, r = new RegExp("\\\\" + n + "\\\\b", "g"), o = new RegExp("(\\\\" + n + "\\\\b){2,}"), l(i || !s ? "" : s, u);\n  }\n\n  return l.use([].concat(u, [function (e, t, o) {\n    2 === e && o.length && o[0].lastIndexOf(n) > 0 && (o[0] = o[0].replace(r, f));\n  }, h, function (e) {\n    if (-2 === e) {\n      var t = d;\n      return d = [], t;\n    }\n  }])), m.hash = u.length ? u.reduce(function (e, t) {\n    return t.name || j(15), te(e, t.name);\n  }, 5381).toString() : "", m;\n}\n\nvar ue = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    le = ue.Consumer,\n    de = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    he = (de.Consumer, new Z()),\n    pe = ce();\n\nfunction fe() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ue) || he;\n}\n\nfunction me() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(de) || pe;\n}\n\nfunction ye(e) {\n  var t = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(e.stylisPlugins),\n      n = t[0],\n      s = t[1],\n      c = fe(),\n      u = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    var t = c;\n    return e.sheet ? t = e.sheet : e.target && (t = t.reconstructWithOptions({\n      target: e.target\n    }, !1)), e.disableCSSOMInjection && (t = t.reconstructWithOptions({\n      useCSSOMInjection: !1\n    })), t;\n  }, [e.disableCSSOMInjection, e.sheet, e.target]),\n      l = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    return ce({\n      options: {\n        prefix: !e.disableVendorPrefixes\n      },\n      plugins: n\n    });\n  }, [e.disableVendorPrefixes, n]);\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {\n    shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n, e.stylisPlugins) || s(e.stylisPlugins);\n  }, [e.stylisPlugins]), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ue.Provider, {\n    value: u\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(de.Provider, {\n    value: l\n  },  false ? undefined : e.children));\n}\n\nvar ve = function () {\n  function e(e, t) {\n    var n = this;\n    this.inject = function (e, t) {\n      void 0 === t && (t = pe);\n      var r = n.name + t.hash;\n      e.hasNameForId(n.id, r) || e.insertRules(n.id, r, t(n.rules, r, "@keyframes"));\n    }, this.toString = function () {\n      return j(12, String(n.name));\n    }, this.name = e, this.id = "sc-keyframes-" + e, this.rules = t;\n  }\n\n  return e.prototype.getName = function (e) {\n    return void 0 === e && (e = pe), this.name + e.hash;\n  }, e;\n}(),\n    ge = /([A-Z])/,\n    Se = /([A-Z])/g,\n    we = /^ms-/,\n    Ee = function Ee(e) {\n  return "-" + e.toLowerCase();\n};\n\nfunction be(e) {\n  return ge.test(e) ? e.replace(Se, Ee).replace(we, "-ms-") : e;\n}\n\nvar _e = function _e(e) {\n  return null == e || !1 === e || "" === e;\n};\n\nfunction Ne(e, n, r, o) {\n  if (Array.isArray(e)) {\n    for (var s, i = [], a = 0, c = e.length; a < c; a += 1) {\n      "" !== (s = Ne(e[a], n, r, o)) && (Array.isArray(s) ? i.push.apply(i, s) : i.push(s));\n    }\n\n    return i;\n  }\n\n  if (_e(e)) return "";\n  if (N(e)) return "." + e.styledComponentId;\n\n  if (b(e)) {\n    if ("function" != typeof (l = e) || l.prototype && l.prototype.isReactComponent || !n) return e;\n    var u = e(n);\n    return  false && false, Ne(u, n, r, o);\n  }\n\n  var l;\n  return e instanceof ve ? r ? (e.inject(r, o), e.getName(o)) : e : S(e) ? function e(t, n) {\n    var r,\n        o,\n        s = [];\n\n    for (var i in t) {\n      t.hasOwnProperty(i) && !_e(t[i]) && (Array.isArray(t[i]) && t[i].isCss || b(t[i]) ? s.push(be(i) + ":", t[i], ";") : S(t[i]) ? s.push.apply(s, e(t[i], i)) : s.push(be(i) + ": " + (r = i, null == (o = t[i]) || "boolean" == typeof o || "" === o ? "" : "number" != typeof o || 0 === o || r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"] ? String(o).trim() : o + "px") + ";"));\n    }\n\n    return n ? [n + " {"].concat(s, ["}"]) : s;\n  }(e) : e.toString();\n}\n\nvar Ae = function Ae(e) {\n  return Array.isArray(e) && (e.isCss = !0), e;\n};\n\nfunction Ce(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  return b(e) || S(e) ? Ae(Ne(g(w, [e].concat(n)))) : 0 === n.length && 1 === e.length && "string" == typeof e[0] ? e : Ae(Ne(g(e, n)));\n}\n\nvar Ie = /invalid hook call/i,\n    Pe = new Set(),\n    Oe = function Oe(e, t) {\n  if (false) { var o, n, r; }\n},\n    Re = function Re(e, t, n) {\n  return void 0 === n && (n = E), e.theme !== n.theme && e.theme || t || n.theme;\n},\n    De = /[!"#$%&\'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,\n    je = /(^-|-$)/g;\n\nfunction Te(e) {\n  return e.replace(De, "-").replace(je, "");\n}\n\nvar xe = function xe(e) {\n  return ee(ne(e) >>> 0);\n};\n\nfunction ke(e) {\n  return "string" == typeof e && ( true || false);\n}\n\nvar Ve = function Ve(e) {\n  return "function" == typeof e || "object" == typeof e && null !== e && !Array.isArray(e);\n},\n    Be = function Be(e) {\n  return "__proto__" !== e && "constructor" !== e && "prototype" !== e;\n};\n\nfunction ze(e, t, n) {\n  var r = e[n];\n  Ve(t) && Ve(r) ? Me(r, t) : e[n] = t;\n}\n\nfunction Me(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  for (var o = 0, s = n; o < s.length; o++) {\n    var i = s[o];\n    if (Ve(i)) for (var a in i) {\n      Be(a) && ze(e, i[a], a);\n    }\n  }\n\n  return e;\n}\n\nvar Ge = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),\n    Le = Ge.Consumer;\n\nfunction Fe(e) {\n  var t = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n      n = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(function () {\n    return function (e, t) {\n      if (!e) return j(14);\n\n      if (b(e)) {\n        var n = e(t);\n        return  true ? n : undefined;\n      }\n\n      return Array.isArray(e) || "object" != typeof e ? j(8) : t ? v({}, t, {}, e) : e;\n    }(e.theme, t);\n  }, [e.theme, t]);\n  return e.children ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Ge.Provider, {\n    value: n\n  }, e.children) : null;\n}\n\nvar Ye = {};\n\nfunction qe(e, t, n) {\n  var o = N(e),\n      i = !ke(e),\n      a = t.attrs,\n      c = void 0 === a ? w : a,\n      d = t.componentId,\n      h = void 0 === d ? function (e, t) {\n    var n = "string" != typeof e ? "sc" : Te(e);\n    Ye[n] = (Ye[n] || 0) + 1;\n    var r = n + "-" + xe("5.3.5" + n + Ye[n]);\n    return t ? t + "-" + r : r;\n  }(t.displayName, t.parentComponentId) : d,\n      p = t.displayName,\n      f = void 0 === p ? function (e) {\n    return ke(e) ? "styled." + e : "Styled(" + _(e) + ")";\n  }(e) : p,\n      g = t.displayName && t.componentId ? Te(t.displayName) + "-" + t.componentId : t.componentId || h,\n      S = o && e.attrs ? Array.prototype.concat(e.attrs, c).filter(Boolean) : c,\n      A = t.shouldForwardProp;\n  o && e.shouldForwardProp && (A = t.shouldForwardProp ? function (n, r, o) {\n    return e.shouldForwardProp(n, r, o) && t.shouldForwardProp(n, r, o);\n  } : e.shouldForwardProp);\n\n  var C,\n      I = new se(n, g, o ? e.componentStyle : void 0),\n      P = I.isStatic && 0 === c.length,\n      O = function O(e, t) {\n    return function (e, t, n, r) {\n      var o = e.attrs,\n          i = e.componentStyle,\n          a = e.defaultProps,\n          c = e.foldedComponentIds,\n          d = e.shouldForwardProp,\n          h = e.styledComponentId,\n          p = e.target;\n       false && false;\n\n      var f = function (e, t, n) {\n        void 0 === e && (e = E);\n        var r = v({}, t, {\n          theme: e\n        }),\n            o = {};\n        return n.forEach(function (e) {\n          var t,\n              n,\n              s,\n              i = e;\n\n          for (t in b(i) && (i = i(r)), i) {\n            r[t] = o[t] = "className" === t ? (n = o[t], s = i[t], n && s ? n + " " + s : n || s) : i[t];\n          }\n        }), [r, o];\n      }(Re(t, Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge), a) || E, t, o),\n          y = f[0],\n          g = f[1],\n          S = function (e, t, n, r) {\n        var o = fe(),\n            s = me(),\n            i = t ? e.generateAndInjectStyles(E, o, s) : e.generateAndInjectStyles(n, o, s);\n        return  false && false,  false && false, i;\n      }(i, r, y,  false ? undefined : void 0),\n          w = n,\n          _ = g.$as || t.$as || g.as || t.as || p,\n          N = ke(_),\n          A = g !== t ? v({}, t, {}, g) : t,\n          C = {};\n\n      for (var I in A) {\n        "$" !== I[0] && "as" !== I && ("forwardedAs" === I ? C.as = A[I] : (d ? d(I, _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"], _) : !N || Object(_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(I)) && (C[I] = A[I]));\n      }\n\n      return t.style && g.style !== t.style && (C.style = v({}, t.style, {}, g.style)), C.className = Array.prototype.concat(c, h, S !== h ? S : null, t.className, g.className).filter(Boolean).join(" "), C.ref = w, /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(_, C);\n    }(C, e, t, P);\n  };\n\n  return O.displayName = f, (C = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef(O)).attrs = S, C.componentStyle = I, C.displayName = f, C.shouldForwardProp = A, C.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : w, C.styledComponentId = g, C.target = o ? e.target : e, C.withComponent = function (e) {\n    var r = t.componentId,\n        o = function (e, t) {\n      if (null == e) return {};\n      var n,\n          r,\n          o = {},\n          s = Object.keys(e);\n\n      for (r = 0; r < s.length; r++) {\n        n = s[r], t.indexOf(n) >= 0 || (o[n] = e[n]);\n      }\n\n      return o;\n    }(t, ["componentId"]),\n        s = r && r + "-" + (ke(e) ? e : Te(_(e)));\n\n    return qe(e, v({}, o, {\n      attrs: S,\n      componentId: s\n    }), n);\n  }, Object.defineProperty(C, "defaultProps", {\n    get: function get() {\n      return this._foldedDefaultProps;\n    },\n    set: function set(t) {\n      this._foldedDefaultProps = o ? Me({}, e.defaultProps, t) : t;\n    }\n  }),  false && (false), C.toString = function () {\n    return "." + C.styledComponentId;\n  }, i && hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C, e, {\n    attrs: !0,\n    componentStyle: !0,\n    displayName: !0,\n    foldedComponentIds: !0,\n    shouldForwardProp: !0,\n    styledComponentId: !0,\n    target: !0,\n    withComponent: !0\n  }), C;\n}\n\nvar He = function He(e) {\n  return function e(t, r, o) {\n    if (void 0 === o && (o = E), !Object(react_is__WEBPACK_IMPORTED_MODULE_0__["isValidElementType"])(r)) return j(1, String(r));\n\n    var s = function s() {\n      return t(r, o, Ce.apply(void 0, arguments));\n    };\n\n    return s.withConfig = function (n) {\n      return e(t, r, v({}, o, {}, n));\n    }, s.attrs = function (n) {\n      return e(t, r, v({}, o, {\n        attrs: Array.prototype.concat(o.attrs, n).filter(Boolean)\n      }));\n    }, s;\n  }(qe, e);\n};\n\n["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function (e) {\n  He[e] = He(e);\n});\n\nvar $e = function () {\n  function e(e, t) {\n    this.rules = e, this.componentId = t, this.isStatic = re(e), Z.registerId(this.componentId + 1);\n  }\n\n  var t = e.prototype;\n  return t.createStyles = function (e, t, n, r) {\n    var o = r(Ne(this.rules, t, n, r).join(""), ""),\n        s = this.componentId + e;\n    n.insertRules(s, s, o);\n  }, t.removeStyles = function (e, t) {\n    t.clearRules(this.componentId + e);\n  }, t.renderStyles = function (e, t, n, r) {\n    e > 2 && Z.registerId(this.componentId + e), this.removeStyles(e, n), this.createStyles(e, t, n, r);\n  }, e;\n}();\n\nfunction We(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {\n    n[o - 1] = arguments[o];\n  }\n\n  var i = Ce.apply(void 0, [e].concat(n)),\n      a = "sc-global-" + xe(JSON.stringify(i)),\n      u = new $e(i, a);\n\n  function l(e) {\n    var t = fe(),\n        n = me(),\n        o = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n        l = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])(t.allocateGSInstance(a)).current;\n    return  false && false,  false && false, t.server && h(l, e, t, o, n), Object(react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"])(function () {\n      if (!t.server) return h(l, e, t, o, n), function () {\n        return u.removeStyles(l, t);\n      };\n    }, [l, e, t, o, n]), null;\n  }\n\n  function h(e, t, n, r, o) {\n    if (u.isStatic) u.renderStyles(e, O, n, o);else {\n      var s = v({}, t, {\n        theme: Re(t, r, l.defaultProps)\n      });\n      u.renderStyles(e, s, n, o);\n    }\n  }\n\n  return  false && false, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(l);\n}\n\nfunction Ue(e) {\n   false && false;\n\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n    n[r - 1] = arguments[r];\n  }\n\n  var o = Ce.apply(void 0, [e].concat(n)).join(""),\n      s = xe(o);\n  return new ve(s, o);\n}\n\nvar Je = function () {\n  function e() {\n    var e = this;\n    this._emitSheetCSS = function () {\n      var t = e.instance.toString();\n      if (!t) return "";\n      var n = q();\n      return "<style " + [n && \'nonce="\' + n + \'"\', A + \'="true"\', \'data-styled-version="5.3.5"\'].filter(Boolean).join(" ") + ">" + t + "</style>";\n    }, this.getStyleTags = function () {\n      return e.sealed ? j(2) : e._emitSheetCSS();\n    }, this.getStyleElement = function () {\n      var t;\n      if (e.sealed) return j(2);\n      var n = ((t = {})[A] = "", t["data-styled-version"] = "5.3.5", t.dangerouslySetInnerHTML = {\n        __html: e.instance.toString()\n      }, t),\n          o = q();\n      return o && (n.nonce = o), [/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("style", v({}, n, {\n        key: "sc-0-0"\n      }))];\n    }, this.seal = function () {\n      e.sealed = !0;\n    }, this.instance = new Z({\n      isServer: !0\n    }), this.sealed = !1;\n  }\n\n  var t = e.prototype;\n  return t.collectStyles = function (e) {\n    return this.sealed ? j(2) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ye, {\n      sheet: this.instance\n    }, e);\n  }, t.interleaveWithNodeStream = function (e) {\n    return j(3);\n  }, e;\n}(),\n    Xe = function Xe(e) {\n  var t = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef(function (t, n) {\n    var o = Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge),\n        i = e.defaultProps,\n        a = Re(t, o, i);\n    return  false && false, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(e, v({}, t, {\n      theme: a,\n      ref: n\n    }));\n  });\n  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t, e), t.displayName = "WithTheme(" + _(e) + ")", t;\n},\n    Ze = function Ze() {\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(Ge);\n},\n    Ke = {\n  StyleSheet: Z,\n  masterSheet: he\n};\n\n false && false,  false && (false);\n/* harmony default export */ __webpack_exports__["default"] = (He);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("Q2Ig")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///vOnD\n')},xhmd:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("function valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true; // Otherwise, if either of them == null they are not equal.\n\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {\n      return valueEqual(item, b[index]);\n    });\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    var aValue = valueOf(a);\n    var bValue = valueOf(b);\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n    return Object.keys(Object.assign({}, a, b)).every(function (key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (valueEqual);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzP2M2MTkiXSwibmFtZXMiOlsidmFsdWVPZiIsIm9iaiIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJ2YWx1ZUVxdWFsIiwiYSIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJldmVyeSIsIml0ZW0iLCJpbmRleCIsImFWYWx1ZSIsImJWYWx1ZSIsImtleXMiLCJhc3NpZ24iLCJrZXkiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCLFNBQU9BLEdBQUcsQ0FBQ0QsT0FBSixHQUFjQyxHQUFHLENBQUNELE9BQUosRUFBZCxHQUE4QkUsTUFBTSxDQUFDQyxTQUFQLENBQWlCSCxPQUFqQixDQUF5QkksSUFBekIsQ0FBOEJILEdBQTlCLENBQXJDO0FBQ0Q7O0FBRUQsU0FBU0ksVUFBVCxDQUFvQkMsQ0FBcEIsRUFBdUJDLENBQXZCLEVBQTBCO0FBQ3hCO0FBQ0EsTUFBSUQsQ0FBQyxLQUFLQyxDQUFWLEVBQWEsT0FBTyxJQUFQLENBRlcsQ0FJeEI7O0FBQ0EsTUFBSUQsQ0FBQyxJQUFJLElBQUwsSUFBYUMsQ0FBQyxJQUFJLElBQXRCLEVBQTRCLE9BQU8sS0FBUDs7QUFFNUIsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNILENBQWQsQ0FBSixFQUFzQjtBQUNwQixXQUNFRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsQ0FBZCxLQUNBRCxDQUFDLENBQUNJLE1BQUYsS0FBYUgsQ0FBQyxDQUFDRyxNQURmLElBRUFKLENBQUMsQ0FBQ0ssS0FBRixDQUFRLFVBQVNDLElBQVQsRUFBZUMsS0FBZixFQUFzQjtBQUM1QixhQUFPUixVQUFVLENBQUNPLElBQUQsRUFBT0wsQ0FBQyxDQUFDTSxLQUFELENBQVIsQ0FBakI7QUFDRCxLQUZELENBSEY7QUFPRDs7QUFFRCxNQUFJLE9BQU9QLENBQVAsS0FBYSxRQUFiLElBQXlCLE9BQU9DLENBQVAsS0FBYSxRQUExQyxFQUFvRDtBQUNsRCxRQUFJTyxNQUFNLEdBQUdkLE9BQU8sQ0FBQ00sQ0FBRCxDQUFwQjtBQUNBLFFBQUlTLE1BQU0sR0FBR2YsT0FBTyxDQUFDTyxDQUFELENBQXBCO0FBRUEsUUFBSU8sTUFBTSxLQUFLUixDQUFYLElBQWdCUyxNQUFNLEtBQUtSLENBQS9CLEVBQWtDLE9BQU9GLFVBQVUsQ0FBQ1MsTUFBRCxFQUFTQyxNQUFULENBQWpCO0FBRWxDLFdBQU9iLE1BQU0sQ0FBQ2MsSUFBUCxDQUFZZCxNQUFNLENBQUNlLE1BQVAsQ0FBYyxFQUFkLEVBQWtCWCxDQUFsQixFQUFxQkMsQ0FBckIsQ0FBWixFQUFxQ0ksS0FBckMsQ0FBMkMsVUFBU08sR0FBVCxFQUFjO0FBQzlELGFBQU9iLFVBQVUsQ0FBQ0MsQ0FBQyxDQUFDWSxHQUFELENBQUYsRUFBU1gsQ0FBQyxDQUFDVyxHQUFELENBQVYsQ0FBakI7QUFDRCxLQUZNLENBQVA7QUFHRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFY2IsbUVBQWYiLCJmaWxlIjoieGhtZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHZhbHVlT2Yob2JqKSB7XG4gIHJldHVybiBvYmoudmFsdWVPZiA/IG9iai52YWx1ZU9mKCkgOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgLy8gVGVzdCBmb3Igc3RyaWN0IGVxdWFsaXR5IGZpcnN0LlxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBpZiBlaXRoZXIgb2YgdGhlbSA9PSBudWxsIHRoZXkgYXJlIG5vdCBlcXVhbC5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiAoXG4gICAgICBBcnJheS5pc0FycmF5KGIpICYmXG4gICAgICBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiZcbiAgICAgIGEuZXZlcnkoZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gdmFsdWVPZihhKTtcbiAgICB2YXIgYlZhbHVlID0gdmFsdWVPZihiKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgYSwgYikpLmV2ZXJ5KGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///xhmd\n")}}]);