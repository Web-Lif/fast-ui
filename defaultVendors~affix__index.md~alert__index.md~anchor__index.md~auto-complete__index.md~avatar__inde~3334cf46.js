(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[10],{BU3w:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export injectCSS */\n/* unused harmony export removeCSS */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return updateCSS; });\n/* harmony import */ var _canUseDom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"MNnm\");\n\nvar MARK_KEY = \"rc-util-key\";\n\nfunction getMark() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      mark = _ref.mark;\n\n  if (mark) {\n    return mark.startsWith('data-') ? mark : \"data-\".concat(mark);\n  }\n\n  return MARK_KEY;\n}\n\nfunction getContainer(option) {\n  if (option.attachTo) {\n    return option.attachTo;\n  }\n\n  var head = document.querySelector('head');\n  return head || document.body;\n}\n\nfunction injectCSS(css) {\n  var _option$csp;\n\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!Object(_canUseDom__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])()) {\n    return null;\n  }\n\n  var styleNode = document.createElement('style');\n\n  if ((_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce) {\n    var _option$csp2;\n\n    styleNode.nonce = (_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce;\n  }\n\n  styleNode.innerHTML = css;\n  var container = getContainer(option);\n  var firstChild = container.firstChild;\n\n  if (option.prepend && container.prepend) {\n    // Use `prepend` first\n    container.prepend(styleNode);\n  } else if (option.prepend && firstChild) {\n    // Fallback to `insertBefore` like IE not support `prepend`\n    container.insertBefore(styleNode, firstChild);\n  } else {\n    container.appendChild(styleNode);\n  }\n\n  return styleNode;\n}\nvar containerCache = new Map();\n\nfunction findExistNode(key) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var container = getContainer(option);\n  return Array.from(containerCache.get(container).children).find(function (node) {\n    return node.tagName === 'STYLE' && node.getAttribute(getMark(option)) === key;\n  });\n}\n\nfunction removeCSS(key) {\n  var _existNode$parentNode;\n\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var existNode = findExistNode(key, option);\n  existNode === null || existNode === void 0 ? void 0 : (_existNode$parentNode = existNode.parentNode) === null || _existNode$parentNode === void 0 ? void 0 : _existNode$parentNode.removeChild(existNode);\n}\nfunction updateCSS(css, key) {\n  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var container = getContainer(option); // Get real parent\n\n  if (!containerCache.has(container)) {\n    var placeholderStyle = injectCSS('', option);\n    var parentNode = placeholderStyle.parentNode;\n    containerCache.set(container, parentNode);\n    parentNode.removeChild(placeholderStyle);\n  }\n\n  var existNode = findExistNode(key, option);\n\n  if (existNode) {\n    var _option$csp3, _option$csp4;\n\n    if (((_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce) && existNode.nonce !== ((_option$csp4 = option.csp) === null || _option$csp4 === void 0 ? void 0 : _option$csp4.nonce)) {\n      var _option$csp5;\n\n      existNode.nonce = (_option$csp5 = option.csp) === null || _option$csp5 === void 0 ? void 0 : _option$csp5.nonce;\n    }\n\n    if (existNode.innerHTML !== css) {\n      existNode.innerHTML = css;\n    }\n\n    return existNode;\n  }\n\n  var newNode = injectCSS(css, option);\n  newNode.setAttribute(getMark(option), key);\n  return newNode;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///BU3w\n")},BdGo:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return splice; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return push; });\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nfunction splice(list, start, remove, items) {\n  var end = list.length;\n  var chunkStart = 0;\n  /** @type {unknown[]} */\n\n  var parameters; // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n\n  remove = remove > 0 ? remove : 0; // No need to chunk the items if there\u2019s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it\u2019s fine.\n    ;\n    [].splice.apply(list, parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it\u2019s fine.\n      ;\n      [].splice.apply(list, parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nfunction push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n\n  return items;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2h1bmtlZC9pbmRleC5qcz8wNWQxIl0sIm5hbWVzIjpbInNwbGljZSIsImxpc3QiLCJzdGFydCIsInJlbW92ZSIsIml0ZW1zIiwiZW5kIiwibGVuZ3RoIiwiY2h1bmtTdGFydCIsInBhcmFtZXRlcnMiLCJBcnJheSIsImZyb20iLCJ1bnNoaWZ0IiwiYXBwbHkiLCJzbGljZSIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxLQUF0QixFQUE2QkMsTUFBN0IsRUFBcUNDLEtBQXJDLEVBQTRDO0VBQ2pELElBQU1DLEdBQUcsR0FBR0osSUFBSSxDQUFDSyxNQUFqQjtFQUNBLElBQUlDLFVBQVUsR0FBRyxDQUFqQjtFQUNBOztFQUVBLElBQUlDLFVBQUosQ0FMaUQsQ0FLbEM7O0VBRWYsSUFBSU4sS0FBSyxHQUFHLENBQVosRUFBZTtJQUNiQSxLQUFLLEdBQUcsQ0FBQ0EsS0FBRCxHQUFTRyxHQUFULEdBQWUsQ0FBZixHQUFtQkEsR0FBRyxHQUFHSCxLQUFqQztFQUNELENBRkQsTUFFTztJQUNMQSxLQUFLLEdBQUdBLEtBQUssR0FBR0csR0FBUixHQUFjQSxHQUFkLEdBQW9CSCxLQUE1QjtFQUNEOztFQUVEQyxNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFULEdBQWFBLE1BQWIsR0FBc0IsQ0FBL0IsQ0FiaUQsQ0FhaEI7O0VBRWpDLElBQUlDLEtBQUssQ0FBQ0UsTUFBTixHQUFlLEtBQW5CLEVBQTBCO0lBQ3hCRSxVQUFVLEdBQUdDLEtBQUssQ0FBQ0MsSUFBTixDQUFXTixLQUFYLENBQWI7SUFDQUksVUFBVSxDQUFDRyxPQUFYLENBQW1CVCxLQUFuQixFQUEwQkMsTUFBMUIsRUFBa0M7SUFBbEM7SUFDQyxHQUFHSCxNQUFILENBQVVZLEtBQVYsQ0FBZ0JYLElBQWhCLEVBQXNCTyxVQUF0QjtFQUNGLENBSkQsTUFJTztJQUNMO0lBQ0EsSUFBSUwsTUFBSixFQUFZLEdBQUdILE1BQUgsQ0FBVVksS0FBVixDQUFnQlgsSUFBaEIsRUFBc0IsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLENBQXRCLEVBRlAsQ0FFOEM7O0lBRW5ELE9BQU9JLFVBQVUsR0FBR0gsS0FBSyxDQUFDRSxNQUExQixFQUFrQztNQUNoQ0UsVUFBVSxHQUFHSixLQUFLLENBQUNTLEtBQU4sQ0FBWU4sVUFBWixFQUF3QkEsVUFBVSxHQUFHLEtBQXJDLENBQWI7TUFDQUMsVUFBVSxDQUFDRyxPQUFYLENBQW1CVCxLQUFuQixFQUEwQixDQUExQixFQUE2QjtNQUE3QjtNQUNDLEdBQUdGLE1BQUgsQ0FBVVksS0FBVixDQUFnQlgsSUFBaEIsRUFBc0JPLFVBQXRCO01BQ0RELFVBQVUsSUFBSSxLQUFkO01BQ0FMLEtBQUssSUFBSSxLQUFUO0lBQ0Q7RUFDRjtBQUNGO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLFNBQVNZLElBQVQsQ0FBY2IsSUFBZCxFQUFvQkcsS0FBcEIsRUFBMkI7RUFDaEMsSUFBSUgsSUFBSSxDQUFDSyxNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7SUFDbkJOLE1BQU0sQ0FBQ0MsSUFBRCxFQUFPQSxJQUFJLENBQUNLLE1BQVosRUFBb0IsQ0FBcEIsRUFBdUJGLEtBQXZCLENBQU47SUFDQSxPQUFPSCxJQUFQO0VBQ0Q7O0VBRUQsT0FBT0csS0FBUDtBQUNEIiwiZmlsZSI6IkJkR28uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpa2UgYEFycmF5I3NwbGljZWAsIGJ1dCBzbWFydGVyIGZvciBnaWFudCBhcnJheXMuXG4gKlxuICogYEFycmF5I3NwbGljZWAgdGFrZXMgYWxsIGl0ZW1zIHRvIGJlIGluc2VydGVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnQgd2hpY2hcbiAqIGNhdXNlcyBhIHN0YWNrIG92ZXJmbG93IGluIFY4IHdoZW4gdHJ5aW5nIHRvIGluc2VydCAxMDBrIGl0ZW1zIGZvciBpbnN0YW5jZS5cbiAqXG4gKiBPdGhlcndpc2UsIHRoaXMgZG9lcyBub3QgcmV0dXJuIHRoZSByZW1vdmVkIGl0ZW1zLCBhbmQgdGFrZXMgYGl0ZW1zYCBhcyBhblxuICogYXJyYXkgaW5zdGVhZCBvZiByZXN0IHBhcmFtZXRlcnMuXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiBAcGFyYW0ge1RbXX0gbGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3ZlXG4gKiBAcGFyYW0ge1RbXX0gaXRlbXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaWNlKGxpc3QsIHN0YXJ0LCByZW1vdmUsIGl0ZW1zKSB7XG4gIGNvbnN0IGVuZCA9IGxpc3QubGVuZ3RoXG4gIGxldCBjaHVua1N0YXJ0ID0gMFxuICAvKiogQHR5cGUge3Vua25vd25bXX0gKi9cblxuICBsZXQgcGFyYW1ldGVycyAvLyBNYWtlIHN0YXJ0IGJldHdlZW4gemVybyBhbmQgYGVuZGAgKGluY2x1ZGVkKS5cblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBlbmQgPyAwIDogZW5kICsgc3RhcnRcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IHN0YXJ0ID4gZW5kID8gZW5kIDogc3RhcnRcbiAgfVxuXG4gIHJlbW92ZSA9IHJlbW92ZSA+IDAgPyByZW1vdmUgOiAwIC8vIE5vIG5lZWQgdG8gY2h1bmsgdGhlIGl0ZW1zIGlmIHRoZXJl4oCZcyBvbmx5IGEgY291cGxlICgxMGspIGl0ZW1zLlxuXG4gIGlmIChpdGVtcy5sZW5ndGggPCAxMDAwMCkge1xuICAgIHBhcmFtZXRlcnMgPSBBcnJheS5mcm9tKGl0ZW1zKVxuICAgIHBhcmFtZXRlcnMudW5zaGlmdChzdGFydCwgcmVtb3ZlKSAvLyBAdHMtZXhwZWN0LWVycm9yIEh1c2gsIGl04oCZcyBmaW5lLlxuICAgIDtbXS5zcGxpY2UuYXBwbHkobGlzdCwgcGFyYW1ldGVycylcbiAgfSBlbHNlIHtcbiAgICAvLyBEZWxldGUgYHJlbW92ZWAgaXRlbXMgc3RhcnRpbmcgZnJvbSBgc3RhcnRgXG4gICAgaWYgKHJlbW92ZSkgW10uc3BsaWNlLmFwcGx5KGxpc3QsIFtzdGFydCwgcmVtb3ZlXSkgLy8gSW5zZXJ0IHRoZSBpdGVtcyBpbiBjaHVua3MgdG8gbm90IGNhdXNlIHN0YWNrIG92ZXJmbG93cy5cblxuICAgIHdoaWxlIChjaHVua1N0YXJ0IDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICBwYXJhbWV0ZXJzID0gaXRlbXMuc2xpY2UoY2h1bmtTdGFydCwgY2h1bmtTdGFydCArIDEwMDAwKVxuICAgICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCAwKSAvLyBAdHMtZXhwZWN0LWVycm9yIEh1c2gsIGl04oCZcyBmaW5lLlxuICAgICAgO1tdLnNwbGljZS5hcHBseShsaXN0LCBwYXJhbWV0ZXJzKVxuICAgICAgY2h1bmtTdGFydCArPSAxMDAwMFxuICAgICAgc3RhcnQgKz0gMTAwMDBcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQXBwZW5kIGBpdGVtc2AgKGFuIGFycmF5KSBhdCB0aGUgZW5kIG9mIGBsaXN0YCAoYW5vdGhlciBhcnJheSkuXG4gKiBXaGVuIGBsaXN0YCB3YXMgZW1wdHksIHJldHVybnMgYGl0ZW1zYCBpbnN0ZWFkLlxuICpcbiAqIFRoaXMgcHJldmVudHMgYSBwb3RlbnRpYWxseSBleHBlbnNpdmUgb3BlcmF0aW9uIHdoZW4gYGxpc3RgIGlzIGVtcHR5LFxuICogYW5kIGFkZHMgaXRlbXMgaW4gYmF0Y2hlcyB0byBwcmV2ZW50IFY4IGZyb20gaGFuZ2luZy5cbiAqXG4gKiBAdGVtcGxhdGUge3Vua25vd259IFRcbiAqIEBwYXJhbSB7VFtdfSBsaXN0XG4gKiBAcGFyYW0ge1RbXX0gaXRlbXNcbiAqIEByZXR1cm5zIHtUW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHB1c2gobGlzdCwgaXRlbXMpIHtcbiAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgIHNwbGljZShsaXN0LCBsaXN0Lmxlbmd0aCwgMCwgaXRlbXMpXG4gICAgcmV0dXJuIGxpc3RcbiAgfVxuXG4gIHJldHVybiBpdGVtc1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///BdGo\n')},CC3I:function(module,exports,__webpack_require__){eval("var parse = __webpack_require__(\"Lc7W\");\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\n\n\nfunction StyleToObject(style, iterator) {\n  var output = null;\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtdG8tb2JqZWN0L2luZGV4LmpzPzA4MmQiXSwibmFtZXMiOlsicGFyc2UiLCJyZXF1aXJlIiwiU3R5bGVUb09iamVjdCIsInN0eWxlIiwiaXRlcmF0b3IiLCJvdXRwdXQiLCJkZWNsYXJhdGlvbiIsImRlY2xhcmF0aW9ucyIsImhhc0l0ZXJhdG9yIiwicHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJsZW4iLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsTUFBRCxDQUFuQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNDLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxRQUE5QixFQUF3QztFQUN0QyxJQUFJQyxNQUFNLEdBQUcsSUFBYjs7RUFDQSxJQUFJLENBQUNGLEtBQUQsSUFBVSxPQUFPQSxLQUFQLEtBQWlCLFFBQS9CLEVBQXlDO0lBQ3ZDLE9BQU9FLE1BQVA7RUFDRDs7RUFFRCxJQUFJQyxXQUFKO0VBQ0EsSUFBSUMsWUFBWSxHQUFHUCxLQUFLLENBQUNHLEtBQUQsQ0FBeEI7RUFDQSxJQUFJSyxXQUFXLEdBQUcsT0FBT0osUUFBUCxLQUFvQixVQUF0QztFQUNBLElBQUlLLFFBQUo7RUFDQSxJQUFJQyxLQUFKOztFQUVBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsR0FBRyxHQUFHTCxZQUFZLENBQUNNLE1BQW5DLEVBQTJDRixDQUFDLEdBQUdDLEdBQS9DLEVBQW9ERCxDQUFDLEVBQXJELEVBQXlEO0lBQ3ZETCxXQUFXLEdBQUdDLFlBQVksQ0FBQ0ksQ0FBRCxDQUExQjtJQUNBRixRQUFRLEdBQUdILFdBQVcsQ0FBQ0csUUFBdkI7SUFDQUMsS0FBSyxHQUFHSixXQUFXLENBQUNJLEtBQXBCOztJQUVBLElBQUlGLFdBQUosRUFBaUI7TUFDZkosUUFBUSxDQUFDSyxRQUFELEVBQVdDLEtBQVgsRUFBa0JKLFdBQWxCLENBQVI7SUFDRCxDQUZELE1BRU8sSUFBSUksS0FBSixFQUFXO01BQ2hCTCxNQUFNLEtBQUtBLE1BQU0sR0FBRyxFQUFkLENBQU47TUFDQUEsTUFBTSxDQUFDSSxRQUFELENBQU4sR0FBbUJDLEtBQW5CO0lBQ0Q7RUFDRjs7RUFFRCxPQUFPTCxNQUFQO0FBQ0Q7O0FBRURTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsYUFBakIiLCJmaWxlIjoiQ0MzSS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wYXJzZXInKTtcblxuLyoqXG4gKiBQYXJzZXMgaW5saW5lIHN0eWxlIHRvIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyB7ICdsaW5lLWhlaWdodCc6ICc0MicgfVxuICogU3R5bGVUb09iamVjdCgnbGluZS1oZWlnaHQ6IDQyOycpO1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICBzdHlsZSAgICAgIC0gVGhlIGlubGluZSBzdHlsZS5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICBbaXRlcmF0b3JdIC0gVGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybiB7bnVsbHxPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIFN0eWxlVG9PYmplY3Qoc3R5bGUsIGl0ZXJhdG9yKSB7XG4gIHZhciBvdXRwdXQgPSBudWxsO1xuICBpZiAoIXN0eWxlIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgdmFyIGRlY2xhcmF0aW9uO1xuICB2YXIgZGVjbGFyYXRpb25zID0gcGFyc2Uoc3R5bGUpO1xuICB2YXIgaGFzSXRlcmF0b3IgPSB0eXBlb2YgaXRlcmF0b3IgPT09ICdmdW5jdGlvbic7XG4gIHZhciBwcm9wZXJ0eTtcbiAgdmFyIHZhbHVlO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkZWNsYXJhdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uc1tpXTtcbiAgICBwcm9wZXJ0eSA9IGRlY2xhcmF0aW9uLnByb3BlcnR5O1xuICAgIHZhbHVlID0gZGVjbGFyYXRpb24udmFsdWU7XG5cbiAgICBpZiAoaGFzSXRlcmF0b3IpIHtcbiAgICAgIGl0ZXJhdG9yKHByb3BlcnR5LCB2YWx1ZSwgZGVjbGFyYXRpb24pO1xuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIG91dHB1dCB8fCAob3V0cHV0ID0ge30pO1xuICAgICAgb3V0cHV0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3R5bGVUb09iamVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///CC3I\n")},EWc2:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeIdentifier; });\n/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeIdentifier(value) {\n  return value // Collapse Markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n  .replace(/^ | $/g, '') // Some characters are considered \u201cuppercase\u201d, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXIvaW5kZXguanM/MTE2NyJdLCJuYW1lcyI6WyJub3JtYWxpemVJZGVudGlmaWVyIiwidmFsdWUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxtQkFBVCxDQUE2QkMsS0FBN0IsRUFBb0M7RUFDekMsT0FDRUEsS0FBSyxDQUFDO0VBQUQsQ0FDRkMsT0FESCxDQUNXLGFBRFgsRUFDMEIsR0FEMUIsRUFDK0I7RUFEL0IsQ0FFR0EsT0FGSCxDQUVXLFFBRlgsRUFFcUIsRUFGckIsRUFFeUI7RUFDdkI7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQVBGLENBUUdDLFdBUkgsR0FTR0MsV0FUSCxFQURGO0FBWUQiLCJmaWxlIjoiRVdjMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTm9ybWFsaXplIGFuIGlkZW50aWZpZXIgKHN1Y2ggYXMgdXNlZCBpbiBkZWZpbml0aW9ucykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllcih2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlIC8vIENvbGxhcHNlIE1hcmtkb3duIHdoaXRlc3BhY2UuXG4gICAgICAucmVwbGFjZSgvW1xcdFxcblxcciBdKy9nLCAnICcpIC8vIFRyaW0uXG4gICAgICAucmVwbGFjZSgvXiB8ICQvZywgJycpIC8vIFNvbWUgY2hhcmFjdGVycyBhcmUgY29uc2lkZXJlZCDigJx1cHBlcmNhc2XigJ0sIGJ1dCBpZiB0aGVpciBsb3dlcmNhc2VcbiAgICAgIC8vIGNvdW50ZXJwYXJ0IGlzIHVwcGVyY2FzZWQgd2lsbCByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdXBwZXJjYXNlXG4gICAgICAvLyBjaGFyYWN0ZXIuXG4gICAgICAvLyBIZW5jZSwgdG8gZ2V0IHRoYXQgZm9ybSwgd2UgcGVyZm9ybSBib3RoIGxvd2VyLSBhbmQgdXBwZXJjYXNlLlxuICAgICAgLy8gVXBwZXIgY2FzZSBtYWtlcyBzdXJlIGtleXMgd2lsbCBub3QgaW50ZXJhY3Qgd2l0aCBkZWZhdWx0IHByb3RvdHlwYWxcbiAgICAgIC8vIG1ldGhvZHM6IG5vIG1ldGhvZCBpcyB1cHBlcmNhc2UuXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnRvVXBwZXJDYXNlKClcbiAgKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///EWc2\n")},IujW:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ ReactMarkdown; });\n\n// NAMESPACE OBJECT: ./node_modules/react-markdown/node_modules/micromark/lib/constructs.js\nvar constructs_namespaceObject = {};\n__webpack_require__.r(constructs_namespaceObject);\n__webpack_require__.d(constructs_namespaceObject, \"document\", function() { return constructs_document; });\n__webpack_require__.d(constructs_namespaceObject, \"contentInitial\", function() { return contentInitial; });\n__webpack_require__.d(constructs_namespaceObject, \"flowInitial\", function() { return flowInitial; });\n__webpack_require__.d(constructs_namespaceObject, \"flow\", function() { return constructs_flow; });\n__webpack_require__.d(constructs_namespaceObject, \"string\", function() { return constructs_string; });\n__webpack_require__.d(constructs_namespaceObject, \"text\", function() { return constructs_text; });\n__webpack_require__.d(constructs_namespaceObject, \"insideSpan\", function() { return insideSpan; });\n__webpack_require__.d(constructs_namespaceObject, \"attentionMarkers\", function() { return attentionMarkers; });\n__webpack_require__.d(constructs_namespaceObject, \"disable\", function() { return disable; });\n\n// NAMESPACE OBJECT: ./node_modules/react-markdown/node_modules/property-information/lib/util/types.js\nvar types_namespaceObject = {};\n__webpack_require__.r(types_namespaceObject);\n__webpack_require__.d(types_namespaceObject, \"boolean\", function() { return _boolean; });\n__webpack_require__.d(types_namespaceObject, \"booleanish\", function() { return booleanish; });\n__webpack_require__.d(types_namespaceObject, \"overloadedBoolean\", function() { return overloadedBoolean; });\n__webpack_require__.d(types_namespaceObject, \"number\", function() { return number; });\n__webpack_require__.d(types_namespaceObject, \"spaceSeparated\", function() { return spaceSeparated; });\n__webpack_require__.d(types_namespaceObject, \"commaSeparated\", function() { return commaSeparated; });\n__webpack_require__.d(types_namespaceObject, \"commaOrSpaceSeparated\", function() { return commaOrSpaceSeparated; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__(\"VTBJ\");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__(\"kM82\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__(\"KQm4\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"1OyB\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"vuIU\");\n\n// EXTERNAL MODULE: ./node_modules/is-buffer/index.js\nvar is_buffer = __webpack_require__(\"BEtg\");\nvar is_buffer_default = /*#__PURE__*/__webpack_require__.n(is_buffer);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(\"Ji7U\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 1 modules\nvar createSuper = __webpack_require__(\"LK+K\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js + 2 modules\nvar wrapNativeSuper = __webpack_require__(\"kHIg\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-stringify-position/index.js\n/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node\u2019s\n * positional information.\n *\n * @param {Node|NodeLike|Position|Point|null} [value]\n * @returns {string}\n */\nfunction stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return '';\n  } // Node.\n\n\n  if ('position' in value || 'type' in value) {\n    return unist_util_stringify_position_position(value.position);\n  } // Position.\n\n\n  if ('start' in value || 'end' in value) {\n    return unist_util_stringify_position_position(value);\n  } // Point.\n\n\n  if ('line' in value || 'column' in value) {\n    return unist_util_stringify_position_point(value);\n  } // ?\n\n\n  return '';\n}\n/**\n * @param {Point|undefined} point\n * @returns {string}\n */\n\nfunction unist_util_stringify_position_point(point) {\n  return unist_util_stringify_position_index(point && point.line) + ':' + unist_util_stringify_position_index(point && point.column);\n}\n/**\n * @param {Position|undefined} pos\n * @returns {string}\n */\n\n\nfunction unist_util_stringify_position_position(pos) {\n  return unist_util_stringify_position_point(pos && pos.start) + '-' + unist_util_stringify_position_point(pos && pos.end);\n}\n/**\n * @param {number|undefined} value\n * @returns {number}\n */\n\n\nfunction unist_util_stringify_position_index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile-message/index.js\n\n\n\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nvar vfile_message_VFileMessage = /*#__PURE__*/function (_Error) {\n  Object(inherits[\"a\" /* default */])(VFileMessage, _Error);\n\n  var _super = Object(createSuper[\"a\" /* default */])(VFileMessage);\n\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  function VFileMessage(reason, place, origin) {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, VFileMessage);\n\n    /** @type {[string|null, string|null]} */\n    var parts = [null, null];\n    /** @type {Position} */\n\n    var position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    _this = _super.call(this);\n\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n\n    if (typeof origin === 'string') {\n      var index = origin.indexOf(':');\n\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position;\n        }\n      } // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place;\n      } // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place;\n      }\n    } // Fields from `Error`\n\n\n    _this.name = stringifyPosition(place) || '1:1';\n    _this.message = typeof reason === 'object' ? reason.message : reason;\n    _this.stack = typeof reason === 'object' ? reason.stack : '';\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n\n    _this.reason = _this.message;\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    _this.fatal;\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n\n    _this.line = position.start.line;\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n\n    _this.column = position.start.column;\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n\n    _this.source = parts[0];\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n\n    _this.ruleId = parts[1];\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n\n    _this.position = position; // The following fields are \u201cwell known\u201d.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * You can use this to specify the source value that\u2019s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n\n    _this.actual;\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n\n    _this.expected;\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n\n    _this.file;\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n\n    _this.url;\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n\n    _this.note;\n    /* eslint-enable no-unused-expressions */\n\n    return _this;\n  }\n\n  return Object(createClass[\"a\" /* default */])(VFileMessage);\n}( /*#__PURE__*/Object(wrapNativeSuper[\"a\" /* default */])(Error));\nvfile_message_VFileMessage.prototype.file = '';\nvfile_message_VFileMessage.prototype.name = '';\nvfile_message_VFileMessage.prototype.reason = '';\nvfile_message_VFileMessage.prototype.message = '';\nvfile_message_VFileMessage.prototype.stack = '';\nvfile_message_VFileMessage.prototype.fatal = null;\nvfile_message_VFileMessage.prototype.column = null;\nvfile_message_VFileMessage.prototype.line = null;\nvfile_message_VFileMessage.prototype.source = null;\nvfile_message_VFileMessage.prototype.ruleId = null;\nvfile_message_VFileMessage.prototype.position = null;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js\n// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node\u2019s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar minpath_browser_path = {\n  basename: minpath_browser_basename,\n  dirname: minpath_browser_dirname,\n  extname: minpath_browser_extname,\n  join: join,\n  sep: '/'\n};\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\n\nfunction minpath_browser_basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n\n  assertPath(path);\n  var start = 0;\n  var end = -1;\n  var index = path.length;\n  /** @type {boolean|undefined} */\n\n  var seenNonSlash;\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47\n      /* `/` */\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end);\n  }\n\n  if (ext === path) {\n    return '';\n  }\n\n  var firstNonSlashEnd = -1;\n  var extIndex = ext.length - 1;\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n\n  return path.slice(start, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction minpath_browser_dirname(path) {\n  assertPath(path);\n\n  if (path.length === 0) {\n    return '.';\n  }\n\n  var end = -1;\n  var index = path.length;\n  /** @type {boolean|undefined} */\n\n  var unmatchedSlash; // Prefix `--` is important to not run on `0`.\n\n  while (--index) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n\n  return end < 0 ? path.charCodeAt(0) === 47\n  /* `/` */\n  ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47\n  /* `/` */\n  ? '//' : path.slice(0, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction minpath_browser_extname(path) {\n  assertPath(path);\n  var index = path.length;\n  var end = -1;\n  var startPart = 0;\n  var startDot = -1; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n\n  var preDotState = 0;\n  /** @type {boolean|undefined} */\n\n  var unmatchedSlash;\n\n  while (index--) {\n    var code = path.charCodeAt(index);\n\n    if (code === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n\n      continue;\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n\n    if (code === 46\n    /* `.` */\n    ) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n\n  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n}\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\n\n\nfunction join() {\n  var index = -1;\n  /** @type {string|undefined} */\n\n  var joined;\n\n  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n    segments[_key] = arguments[_key];\n  }\n\n  while (++index < segments.length) {\n    assertPath(segments[index]);\n\n    if (segments[index]) {\n      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined);\n}\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction normalize(path) {\n  assertPath(path);\n  var absolute = path.charCodeAt(0) === 47;\n  /* `/` */\n  // Normalize the path according to POSIX rules.\n\n  var value = normalizeString(path, !absolute);\n\n  if (value.length === 0 && !absolute) {\n    value = '.';\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47\n  /* / */\n  ) {\n    value += '/';\n  }\n\n  return absolute ? '/' + value : value;\n}\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\n\n\nfunction normalizeString(path, allowAboveRoot) {\n  var result = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var index = -1;\n  /** @type {number|undefined} */\n\n  var code;\n  /** @type {number} */\n\n  var lastSlashIndex;\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47\n    /* `/` */\n    ) {\n      break;\n    } else {\n      code = 47;\n      /* `/` */\n    }\n\n    if (code === 47\n    /* `/` */\n    ) {\n      if (lastSlash === index - 1 || dots === 1) {// Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46\n        /* `.` */\n        || result.charCodeAt(result.length - 2) !== 46\n        /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length > 0) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n\n        lastSegmentLength = index - lastSlash - 1;\n      }\n\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46\n    /* `.` */\n    && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return result;\n}\n/**\n * @param {string} path\n */\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n/* eslint-enable max-depth, complexity */\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js\n// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don\u2019t think one tiny line of code can be copyrighted. \ud83d\ude05\nvar proc = {\n  cwd: cwd\n};\n\nfunction cwd() {\n  return '/';\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js\n/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nfunction isUrl(fileURLOrPath) {\n  return fileURLOrPath !== null && typeof fileURLOrPath === 'object' && // @ts-expect-error: indexable.\n  fileURLOrPath.href && // @ts-expect-error: indexable.\n  fileURLOrPath.origin;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js\n/// <reference lib=\"dom\" />\n // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\n\nfunction urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    var error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    var _error = new TypeError('The URL must be of scheme file');\n\n    _error.code = 'ERR_INVALID_URL_SCHEME';\n    throw _error;\n  }\n\n  return getPathFromURLPosix(path);\n}\n/**\n * @param {URL} url\n */\n\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    var error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n\n  var pathname = url.pathname;\n  var index = -1;\n\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37\n    /* `%` */\n    && pathname.charCodeAt(index + 1) === 50\n    /* `2` */\n    ) {\n      var third = pathname.charCodeAt(index + 2);\n\n      if (third === 70\n      /* `F` */\n      || third === 102\n      /* `f` */\n      ) {\n        /** @type {NodeJS.ErrnoException} */\n        var _error2 = new TypeError('File URL path must not include encoded / characters');\n\n        _error2.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw _error2;\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname);\n}\n\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/vfile/lib/index.js\n\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\n\n\n\n // Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nvar lib_VFile = /*#__PURE__*/function () {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it\u2019s treated as `{value: options}`.\n   * If `options` is a `URL`, it\u2019s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It\u2019s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  function VFile(value) {\n    Object(classCallCheck[\"a\" /* default */])(this, VFile);\n\n    /** @type {Options} */\n    var options;\n\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || is_buffer_default()(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {\n        value: value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value;\n    }\n    /**\n     * Place to store custom information (default: `{}`).\n     * It\u2019s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n\n\n    this.data = {};\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n\n    this.messages = [];\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n\n    this.history = [];\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n\n    this.cwd = proc.cwd();\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n\n    this.value; // The below are non-standard, they are \u201cwell-known\u201d.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n\n    this.stored;\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n\n    this.result;\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n\n    this.map;\n    /* eslint-enable no-unused-expressions */\n    // Set path related properties in the correct order.\n\n    var index = -1;\n\n    while (++index < order.length) {\n      var _prop = order[index]; // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n\n      if (_prop in options && options[_prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[_prop] = _prop === 'history' ? Object(toConsumableArray[\"default\"])(options[_prop]) : options[_prop];\n      }\n    }\n    /** @type {string} */\n\n\n    var prop; // Set non-path related properties.\n\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop];\n    }\n  }\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n\n\n  Object(createClass[\"a\" /* default */])(VFile, [{\n    key: \"path\",\n    get: function get() {\n      return this.history[this.history.length - 1];\n    }\n    /**\n     * Set the full path (example: `'~/index.min.js'`).\n     * Cannot be nullified.\n     * You can set a file URL (a `URL` object with a `file:` protocol) which will\n     * be turned into a path with `url.fileURLToPath`.\n     * @param {string|URL} path\n     */\n    ,\n    set: function set(path) {\n      if (isUrl(path)) {\n        path = urlToPath(path);\n      }\n\n      assertNonEmpty(path, 'path');\n\n      if (this.path !== path) {\n        this.history.push(path);\n      }\n    }\n    /**\n     * Get the parent path (example: `'~'`).\n     */\n\n  }, {\n    key: \"dirname\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.dirname(this.path) : undefined;\n    }\n    /**\n     * Set the parent path (example: `'~'`).\n     * Cannot be set if there\u2019s no `path` yet.\n     */\n    ,\n    set: function set(dirname) {\n      lib_assertPath(this.basename, 'dirname');\n      this.path = minpath_browser_path.join(dirname || '', this.basename);\n    }\n    /**\n     * Get the basename (including extname) (example: `'index.min.js'`).\n     */\n\n  }, {\n    key: \"basename\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.basename(this.path) : undefined;\n    }\n    /**\n     * Set basename (including extname) (`'index.min.js'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(basename) {\n      assertNonEmpty(basename, 'basename');\n      assertPart(basename, 'basename');\n      this.path = minpath_browser_path.join(this.dirname || '', basename);\n    }\n    /**\n     * Get the extname (including dot) (example: `'.js'`).\n     */\n\n  }, {\n    key: \"extname\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.extname(this.path) : undefined;\n    }\n    /**\n     * Set the extname (including dot) (example: `'.js'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be set if there\u2019s no `path` yet.\n     */\n    ,\n    set: function set(extname) {\n      assertPart(extname, 'extname');\n      lib_assertPath(this.dirname, 'extname');\n\n      if (extname) {\n        if (extname.charCodeAt(0) !== 46\n        /* `.` */\n        ) {\n          throw new Error('`extname` must start with `.`');\n        }\n\n        if (extname.includes('.', 1)) {\n          throw new Error('`extname` cannot contain multiple dots');\n        }\n      }\n\n      this.path = minpath_browser_path.join(this.dirname, this.stem + (extname || ''));\n    }\n    /**\n     * Get the stem (basename w/o extname) (example: `'index.min'`).\n     */\n\n  }, {\n    key: \"stem\",\n    get: function get() {\n      return typeof this.path === 'string' ? minpath_browser_path.basename(this.path, this.extname) : undefined;\n    }\n    /**\n     * Set the stem (basename w/o extname) (example: `'index.min'`).\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(stem) {\n      assertNonEmpty(stem, 'stem');\n      assertPart(stem, 'stem');\n      this.path = minpath_browser_path.join(this.dirname || '', stem + (this.extname || ''));\n    }\n    /**\n     * Serialize the file.\n     *\n     * @param {BufferEncoding} [encoding='utf8']\n     *   When `value` is a `Buffer`, `encoding` is a character encoding to\n     *   understand it as (default: `'utf8'`).\n     * @returns {string}\n     *   Serialized file.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      return (this.value || '').toString(encoding);\n    }\n    /**\n     * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n     * associates it with the file by adding it to `vfile.messages` and setting\n     * `message.file` to the current filepath.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"message\",\n    value: function message(reason, place, origin) {\n      var message = new vfile_message_VFileMessage(reason, place, origin);\n\n      if (this.path) {\n        message.name = this.path + ':' + message.name;\n        message.file = this.path;\n      }\n\n      message.fatal = false;\n      this.messages.push(message);\n      return message;\n    }\n    /**\n     * Like `VFile#message()`, but associates an informational message where\n     * `fatal` is set to `null`.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = null;\n      return message;\n    }\n    /**\n     * Like `VFile#message()`, but associates a fatal message where `fatal` is\n     * set to `true`, and then immediately throws it.\n     *\n     * > \ud83d\udc49 **Note**: a fatal error means that a file is no longer processable.\n     *\n     * @param {string|Error} reason\n     *   Human readable reason for the message, uses the stack and message of the error if given.\n     * @param {Node|NodeLike|Position|Point} [place]\n     *   Place where the message occurred in the file.\n     * @param {string} [origin]\n     *   Computer readable reason for the message\n     * @returns {never}\n     *   Message.\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = true;\n      throw message;\n    }\n  }]);\n\n  return VFile;\n}();\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\n\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath_browser_path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + minpath_browser_path.sep + '`');\n  }\n}\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\n\n\nfunction lib_assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js\nvar toArray = __webpack_require__(\"T5bk\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/bail/index.js\n/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nfunction bail(error) {\n  if (error) {\n    throw error;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/extend/index.js\nvar extend = __webpack_require__(\"6dBs\");\nvar extend_default = /*#__PURE__*/__webpack_require__.n(extend);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/is-plain-obj/index.js\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/trough/index.js\n\n\n/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nfunction trough() {\n  /** @type {Array<Middleware>} */\n  var fns = [];\n  /** @type {Pipeline} */\n\n  var pipeline = {\n    run: run,\n    use: use\n  };\n  return pipeline;\n  /** @type {Run} */\n\n  function run() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    var middlewareIndex = -1;\n    /** @type {Callback} */\n\n    var callback = values.pop();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback);\n    }\n\n    next.apply(void 0, [null].concat(Object(toConsumableArray[\"default\"])(values)));\n    /**\n     * Run the next `fn`, or we\u2019re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n\n    function next(error) {\n      var fn = fns[++middlewareIndex];\n      var index = -1;\n\n      if (error) {\n        callback(error);\n        return;\n      } // Copy non-nullish input into values.\n\n\n      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        output[_key2 - 1] = arguments[_key2];\n      }\n\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index];\n        }\n      } // Save the newly created `output` for the next call.\n\n\n      values = output; // Next or done.\n\n      if (fn) {\n        wrap(fn, next).apply(void 0, output);\n      } else {\n        callback.apply(void 0, [null].concat(output));\n      }\n    }\n  }\n  /** @type {Use} */\n\n\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);\n    }\n\n    fns.push(middelware);\n    return pipeline;\n  }\n}\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\n\nfunction wrap(middleware, callback) {\n  /** @type {boolean} */\n  var called;\n  return wrapped;\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n\n  function wrapped() {\n    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      parameters[_key3] = arguments[_key3];\n    }\n\n    var fnExpectsCallback = middleware.length > parameters.length;\n    /** @type {any} */\n\n    var result;\n\n    if (fnExpectsCallback) {\n      parameters.push(done);\n    }\n\n    try {\n      result = middleware.apply(this, parameters);\n    } catch (error) {\n      var exception =\n      /** @type {Error} */\n      error; // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n\n      if (fnExpectsCallback && called) {\n        throw exception;\n      }\n\n      return done(exception);\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n\n\n  function done(error) {\n    if (!called) {\n      called = true;\n\n      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        output[_key4 - 1] = arguments[_key4];\n      }\n\n      callback.apply(void 0, [error].concat(output));\n    }\n  }\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n\n\n  function then(value) {\n    done(null, value);\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unified/lib/index.js\n\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\n\n\n\n\n // Expose a frozen processor.\n\nvar unified = base().freeze();\nvar own = {}.hasOwnProperty; // Function to create the first processor.\n\n/**\n * @returns {Processor}\n */\n\nfunction base() {\n  var transformers = trough();\n  /** @type {Processor['attachers']} */\n\n  var attachers = [];\n  /** @type {Record<string, unknown>} */\n\n  var namespace = {};\n  /** @type {boolean|undefined} */\n\n  var frozen;\n  var freezeIndex = -1; // Data management.\n  // @ts-expect-error: overloads are handled.\n\n  processor.data = data;\n  processor.Parser = undefined;\n  processor.Compiler = undefined; // Lock.\n\n  processor.freeze = freeze; // Plugins.\n\n  processor.attachers = attachers; // @ts-expect-error: overloads are handled.\n\n  processor.use = use; // API.\n\n  processor.parse = parse;\n  processor.stringify = stringify; // @ts-expect-error: overloads are handled.\n\n  processor.run = run;\n  processor.runSync = runSync; // @ts-expect-error: overloads are handled.\n\n  processor.process = process;\n  processor.processSync = processSync; // Expose.\n\n  return processor; // Create a new processor based on the processor in the current scope.\n\n  /** @type {Processor} */\n\n  function processor() {\n    var destination = base();\n    var index = -1;\n\n    while (++index < attachers.length) {\n      destination.use.apply(destination, Object(toConsumableArray[\"default\"])(attachers[index]));\n    }\n\n    destination.data(extend_default()(true, {}, namespace));\n    return destination;\n  }\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n\n\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      } // Get `key`.\n\n\n      return own.call(namespace, key) && namespace[key] || null;\n    } // Set space.\n\n\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    } // Get space.\n\n\n    return namespace;\n  }\n  /** @type {Processor['freeze']} */\n\n\n  function freeze() {\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      var _attachers$freezeInde = Object(toArray[\"a\" /* default */])(attachers[freezeIndex]),\n          attacher = _attachers$freezeInde[0],\n          options = _attachers$freezeInde.slice(1);\n\n      if (options[0] === false) {\n        continue;\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined;\n      }\n      /** @type {Transformer|void} */\n\n\n      var transformer = attacher.call.apply(attacher, [processor].concat(Object(toConsumableArray[\"default\"])(options)));\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Number.POSITIVE_INFINITY;\n    return processor;\n  }\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n\n\n  function use(value) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n\n    /** @type {Record<string, unknown>|undefined} */\n    var settings;\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {// Empty.\n    } else if (typeof value === 'function') {\n      addPlugin.apply(void 0, [value].concat(options));\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings);\n    }\n\n    return processor;\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          var _value = Object(toArray[\"a\" /* default */])(value),\n              plugin = _value[0],\n              _options = _value.slice(1);\n\n          addPlugin.apply(void 0, [plugin].concat(Object(toConsumableArray[\"default\"])(_options)));\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`');\n      }\n    }\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings);\n      }\n    }\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n\n\n    function addList(plugins) {\n      var index = -1;\n\n      if (plugins === null || plugins === undefined) {// Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          var thing = plugins[index];\n          add(thing);\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n\n\n    function addPlugin(plugin, value) {\n      var index = -1;\n      /** @type {Processor['attachers'][number]|undefined} */\n\n      var entry;\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index];\n          break;\n        }\n      }\n\n      if (entry) {\n        if (isPlainObject(entry[1]) && isPlainObject(value)) {\n          value = extend_default()(true, entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push(Array.prototype.slice.call(arguments));\n      }\n    }\n  }\n  /** @type {Processor['parse']} */\n\n\n  function parse(doc) {\n    processor.freeze();\n    var file = vfile(doc);\n    var Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n  /** @type {Processor['stringify']} */\n\n\n  function stringify(node, doc) {\n    processor.freeze();\n    var file = vfile(doc);\n    var Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n\n\n  function run(node, doc, callback) {\n    assertNode(node);\n    processor.freeze();\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc;\n      doc = undefined;\n    }\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can\u2019t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done);\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n\n      function done(error, tree, file) {\n        tree = tree || node;\n\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['runSync']} */\n\n\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    var result;\n    /** @type {boolean|undefined} */\n\n    var complete;\n    processor.run(node, file, done);\n    assertDone('runSync', 'run', complete); // @ts-expect-error: we either bailed on an error or have a tree.\n\n    return result;\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n\n    function done(error, tree) {\n      bail(error);\n      result = tree;\n      complete = true;\n    }\n  }\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n\n\n  function process(doc, callback) {\n    processor.freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n      processor.run(processor.parse(file), file, function (error, tree, file) {\n        if (error || !tree || !file) {\n          done(error);\n        } else {\n          /** @type {unknown} */\n          var result = processor.stringify(tree, file);\n\n          if (result === undefined || result === null) {// Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result;\n          } else {\n            file.result = result;\n          }\n\n          done(error, file);\n        }\n      });\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n\n      function done(error, file) {\n        if (error || !file) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['processSync']} */\n\n\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    var complete;\n    processor.freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    var file = vfile(doc);\n    processor.process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n}\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\n\n\nfunction newable(value, name) {\n  return typeof value === 'function' && // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  value.prototype && ( // A function with keys in its prototype is probably a constructor.\n  // Classes\u2019 prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  keys(value.prototype) || name in value.prototype);\n}\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\n\n\nfunction keys(value) {\n  /** @type {string} */\n  var key;\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\n\n\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`');\n  }\n}\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\n\n\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`');\n  }\n}\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\n\n\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot call `' + name + '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');\n  }\n}\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\n\n\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObject(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`'); // Fine.\n  }\n}\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\n\n\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\n\n\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new lib_VFile(value);\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\n\n\nfunction looksLikeAVFile(value) {\n  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);\n}\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\n\n\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || is_buffer_default()(value);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-string/index.js\n/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node\u2019s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nfunction mdast_util_to_string_toString(node, options) {\n  var _ref = options || {},\n      _ref$includeImageAlt = _ref.includeImageAlt,\n      includeImageAlt = _ref$includeImageAlt === void 0 ? true : _ref$includeImageAlt;\n\n  return one(node, includeImageAlt);\n}\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\nfunction one(node, includeImageAlt) {\n  return node && typeof node === 'object' && ( // @ts-ignore looks like a literal.\n  node.value || ( // @ts-ignore looks like an image.\n  includeImageAlt ? node.alt : '') || // @ts-ignore looks like a parent.\n  'children' in node && mdast_util_to_string_all(node.children, includeImageAlt) || Array.isArray(node) && mdast_util_to_string_all(node, includeImageAlt)) || '';\n}\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\n\nfunction mdast_util_to_string_all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = [];\n  var index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n\n  return result.join('');\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-chunked/index.js\nvar micromark_util_chunked = __webpack_require__(\"BdGo\");\n\n// CONCATENATED MODULE: ./node_modules/micromark-util-combine-extensions/index.js\n/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nvar micromark_util_combine_extensions_hasOwnProperty = {}.hasOwnProperty;\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\n\nfunction combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  var all = {};\n  var index = -1;\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index]);\n  }\n\n  return all;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\n\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  var hook;\n\n  for (hook in extension) {\n    var maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    var left = maybe || (all[hook] = {});\n    var right = extension[hook];\n    /** @type {string} */\n\n    var code = void 0;\n\n    for (code in right) {\n      if (!micromark_util_combine_extensions_hasOwnProperty.call(left, code)) left[code] = [];\n      var value = right[code];\n      micromark_util_combine_extensions_constructs( // @ts-expect-error Looks like a list.\n      left[code], Array.isArray(value) ? value : value ? [value] : []);\n    }\n  }\n}\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\n\n\nfunction micromark_util_combine_extensions_constructs(existing, list) {\n  var index = -1;\n  /** @type {unknown[]} */\n\n  var before = [];\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n\n  Object(micromark_util_chunked[\"b\" /* splice */])(existing, 0, 0, before);\n}\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\n\n\nfunction combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  var handlers = {};\n  var index = -1;\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index]);\n  }\n\n  return handlers;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\n\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  var hook;\n\n  for (hook in extension) {\n    var maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    var left = maybe || (all[hook] = {});\n    var right = extension[hook];\n    /** @type {string} */\n\n    var type = void 0;\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type];\n      }\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/micromark-factory-space/index.js\nvar micromark_factory_space = __webpack_require__(\"fAmA\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-util-character/index.js + 1 modules\nvar micromark_util_character = __webpack_require__(\"Jac1\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\n\n/** @type {InitialConstruct} */\n\nvar content_content = {\n  tokenize: initializeContent\n};\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n\n  var previous;\n  return contentStart;\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, contentStart, 'linePrefix');\n  }\n  /** @type {State} */\n\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n  /** @type {State} */\n\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\n\n\n\n/** @type {InitialConstruct} */\n\nvar document_document = {\n  tokenize: initializeDocument\n};\n/** @type {Construct} */\n\nvar containerConstruct = {\n  tokenize: tokenizeContainer\n};\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  var self = this;\n  /** @type {StackItem[]} */\n\n  var stack = [];\n  var continued = 0;\n  /** @type {TokenizeContext|undefined} */\n\n  var childFlow;\n  /** @type {Token|undefined} */\n\n  var childToken;\n  /** @type {number} */\n\n  var lineStartOffset;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      var item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    } // Done.\n\n\n    return checkNewContainers(code);\n  }\n  /** @type {State} */\n\n\n  function documentContinue(code) {\n    continued++; // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it\u2019s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n\n      if (childFlow) {\n        closeFlow();\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {Point|undefined} */\n\n      var point; // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n\n      exitContainers(continued); // Fix positions.\n\n      var index = indexBeforeExits;\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they\u2019re still also at the end).\n\n\n      Object(micromark_util_chunked[\"b\" /* splice */])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n\n    return start(code);\n  }\n  /** @type {State} */\n\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there\u2019s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can\u2019t have containers \u201cpierce\u201d into them, so we can immediately\n      // start.\n\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      } // If we do have flow, it could still be a blank line,\n      // but we\u2019d be interrupting it w/ a new container if there\u2019s a current\n      // construct.\n\n\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    } // Check if there is a new container.\n\n\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n  /** @type {State} */\n\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n  /** @type {State} */\n\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n  /** @type {State} */\n\n\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]); // Try another.\n\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n  /** @type {State} */\n\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.\n\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n\n    effects.consume(code);\n    return flowContinue;\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n\n  function writeToChild(token, eof) {\n    var stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream); // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can\u2019t \u201cunmake\u201d it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which \u201cunmakes\u201d the first line\n    // and turns the whole into one content block.\n    //\n    // We\u2019ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      var index = childFlow.events.length;\n\n      while (index--) {\n        if ( // The token starts before the line ending\u2026\n        childFlow.events[index][1].start.offset < lineStartOffset && ( // \u2026and either is not ended yet\u2026\n        !childFlow.events[index][1].end || // \u2026or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there\u2019s still something open, which means it\u2019s a lazy line\n          // part of something.\n          return;\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean|undefined} */\n\n      var seen;\n      /** @type {Point|undefined} */\n\n      var point; // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n\n          seen = true;\n        }\n      }\n\n      exitContainers(continued); // Fix positions.\n\n      index = indexBeforeExits;\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they\u2019re still also at the end).\n\n\n      Object(micromark_util_chunked[\"b\" /* splice */])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n\n  function exitContainers(size) {\n    var index = stack.length; // Exit open containers.\n\n    while (index-- > size) {\n      var entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n\n    stack.length = size;\n  }\n\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable[\"null\"].includes('codeIndented') ? undefined : 4);\n}\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/blank-line.js\nvar blank_line = __webpack_require__(\"Jf8z\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/content.js\nvar lib_content = __webpack_require__(\"Y+nY\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\n\n\n\n/** @type {InitialConstruct} */\n\nvar flow = {\n  tokenize: initializeFlow\n};\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  var self = this;\n  var initial = effects.attempt( // Try to parse a blank line.\n  blank_line[\"a\" /* blankLine */], atBlankEnding, // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, Object(micromark_factory_space[\"a\" /* factorySpace */])(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(lib_content[\"a\" /* content */], afterConstruct)), 'linePrefix')));\n  return initial;\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n  /** @type {State} */\n\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js\n/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nvar resolver = {\n  resolveAll: createResolver()\n};\nvar text_string = initializeFactory('string');\nvar text_text = initializeFactory('text');\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    var self = this;\n    var constructs = this.parser.constructs[field];\n    var text = effects.attempt(constructs, start, notText);\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n    /** @type {State} */\n\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n    /** @type {State} */\n\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      } // Data.\n\n\n      effects.consume(code);\n      return data;\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n\n      var list = constructs[code];\n      var index = -1;\n\n      if (list) {\n        while (++index < list.length) {\n          var item = list[index];\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\n\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    var index = -1;\n    /** @type {number|undefined} */\n\n    var enter; // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don\u2019t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n\n        enter = undefined;\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can\u2019t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\n\nfunction resolveAllLineSuffixes(events, context) {\n  var eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      var data = events[eventIndex - 1][1];\n      var chunks = context.sliceStream(data);\n      var index = chunks.length;\n      var bufferIndex = -1;\n      var size = 0;\n      /** @type {boolean|undefined} */\n\n      var tabs = void 0;\n\n      while (index--) {\n        var chunk = chunks[index];\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        } // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {// Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      if (size) {\n        var token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n\n      eventIndex++;\n    }\n  }\n\n  return events;\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-resolve-all/index.js\nvar micromark_util_resolve_all = __webpack_require__(\"s+04\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js\n\n\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\n\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn\u2019t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\n\nfunction createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  var point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n\n  var columnStart = {};\n  /** @type {Construct[]} */\n\n  var resolveAllConstructs = [];\n  /** @type {Chunk[]} */\n\n  var chunks = [];\n  /** @type {Token[]} */\n\n  var stack = [];\n  /** @type {boolean|undefined} */\n\n  var consumed = true;\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  var effects = {\n    consume: consume,\n    enter: enter,\n    exit: exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  var context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser: parser,\n    sliceStream: sliceStream,\n    sliceSerialize: sliceSerialize,\n    now: now,\n    defineSkip: defineSkip,\n    write: write\n  };\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  var state = initialize.tokenize.call(context, effects);\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  var expectedCode;\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n\n  return context;\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = Object(micromark_util_chunked[\"a\" /* push */])(chunks, slice);\n    main(); // Exit if we\u2019re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n\n    addResult(initialize, 0); // Otherwise, resolve, and exit.\n\n    context.events = Object(micromark_util_resolve_all[\"a\" /* resolveAll */])(resolveAllConstructs, context.events, context);\n    return context.events;\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  /** @type {TokenizeContext['now']} */\n\n\n  function now() {\n    return Object.assign({}, point);\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n\n  function main() {\n    /** @type {number} */\n    var chunkIndex;\n\n    while (point._index < chunks.length) {\n      var chunk = chunks[point._index]; // If we\u2019re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n  /** @type {Effects['consume']} */\n\n\n  function consume(code) {\n    if (Object(micromark_util_character[\"h\" /* markdownLineEnding */])(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    } // Not in a string chunk.\n\n\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++; // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    } // Expose the previous character.\n\n\n    context.previous = code; // Mark as consumed.\n\n    consumed = true;\n  }\n  /** @type {Effects['enter']} */\n\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    var token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n  /** @type {Effects['exit']} */\n\n\n  function exit(type) {\n    var token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n\n  function constructFactory(onreturn, fields) {\n    return hook;\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      var listOfConstructs;\n      /** @type {number} */\n\n      var constructIndex;\n      /** @type {Construct} */\n\n      var currentConstruct;\n      /** @type {Info} */\n\n      var info;\n      return Array.isArray(constructs) ?\n      /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n      ? handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          var def = code !== null && map[code];\n          var all = code !== null && map[\"null\"];\n          var list = [].concat(Object(toConsumableArray[\"default\"])(Array.isArray(def) ? def : def ? [def] : []), Object(toConsumableArray[\"default\"])(Array.isArray(all) ? all : all ? [all] : []));\n          return handleListOfConstructs(list)(code);\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n\n        if (list.length === 0) {\n          return bogusState;\n        }\n\n        return handleConstruct(list[constructIndex]);\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n\n      function handleConstruct(construct) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn\u2019t work because `inspect` in document does a check\n          // w/o a bogus, which doesn\u2019t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          if (construct.name && context.parser.constructs.disable[\"null\"].includes(construct.name)) {\n            return nok(code);\n          }\n\n          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a \u201clive binding\u201d, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n      /** @type {State} */\n\n\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      /** @type {State} */\n\n\n      function nok(code) {\n        consumed = true;\n        info.restore();\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n\n        return bogusState;\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n\n    if (construct.resolve) {\n      Object(micromark_util_chunked[\"b\" /* splice */])(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n\n  function store() {\n    var startPoint = now();\n    var startPrevious = context.previous;\n    var startCurrentConstruct = context.currentConstruct;\n    var startEventsIndex = context.events.length;\n    var startStack = Array.from(stack);\n    return {\n      restore: restore,\n      from: startEventsIndex\n    };\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it\u2019s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  var startIndex = token.start._index;\n  var startBufferIndex = token.start._bufferIndex;\n  var endIndex = token.end._index;\n  var endBufferIndex = token.end._bufferIndex;\n  /** @type {Chunk[]} */\n\n  var view;\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex);\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n\n  return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\n\nfunction serializeChunks(chunks, expandTabs) {\n  var index = -1;\n  /** @type {string[]} */\n\n  var result = [];\n  /** @type {boolean|undefined} */\n\n  var atTab;\n\n  while (++index < chunks.length) {\n    var chunk = chunks[index];\n    /** @type {string} */\n\n    var value = void 0;\n\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n\n    atTab = chunk === -2;\n    result.push(value);\n  }\n\n  return result.join('');\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(\"rePB\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/list.js\nvar lib_list = __webpack_require__(\"buE5\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/block-quote.js\nvar block_quote = __webpack_require__(\"/P17\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/definition.js\nvar lib_definition = __webpack_require__(\"I211\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-indented.js\nvar code_indented = __webpack_require__(\"C9pk\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/heading-atx.js\nvar heading_atx = __webpack_require__(\"p6qh\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/thematic-break.js\nvar thematic_break = __webpack_require__(\"6e0R\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/setext-underline.js\nvar setext_underline = __webpack_require__(\"sJhA\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/html-flow.js\nvar html_flow = __webpack_require__(\"Xolk\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-fenced.js\nvar code_fenced = __webpack_require__(\"BFk2\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/character-reference.js\nvar character_reference = __webpack_require__(\"F6qR\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/character-escape.js\nvar character_escape = __webpack_require__(\"B5kW\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/line-ending.js\nvar line_ending = __webpack_require__(\"Ccvd\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-image.js\nvar label_start_image = __webpack_require__(\"zwH7\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/attention.js\nvar attention = __webpack_require__(\"GNNO\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/autolink.js\nvar autolink = __webpack_require__(\"uVUd\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/html-text.js\nvar html_text = __webpack_require__(\"uBcU\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-link.js\nvar label_start_link = __webpack_require__(\"N7ly\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/hard-break-escape.js\nvar hard_break_escape = __webpack_require__(\"E9u0\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/label-end.js\nvar label_end = __webpack_require__(\"u4T5\");\n\n// EXTERNAL MODULE: ./node_modules/micromark-core-commonmark/lib/code-text.js\nvar code_text = __webpack_require__(\"jQEU\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/constructs.js\n\n\nvar _document, _flowInitial, _flow, _string, _text;\n\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\n\n/** @type {Extension['document']} */\n\nvar constructs_document = (_document = {}, Object(defineProperty[\"a\" /* default */])(_document, 42, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 43, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 45, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 48, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 49, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 50, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 51, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 52, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 53, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 54, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 55, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 56, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 57, lib_list[\"a\" /* list */]), Object(defineProperty[\"a\" /* default */])(_document, 62, block_quote[\"a\" /* blockQuote */]), _document);\n/** @type {Extension['contentInitial']} */\n\nvar contentInitial = Object(defineProperty[\"a\" /* default */])({}, 91, lib_definition[\"a\" /* definition */]);\n/** @type {Extension['flowInitial']} */\n\nvar flowInitial = (_flowInitial = {}, Object(defineProperty[\"a\" /* default */])(_flowInitial, -2, code_indented[\"a\" /* codeIndented */]), Object(defineProperty[\"a\" /* default */])(_flowInitial, -1, code_indented[\"a\" /* codeIndented */]), Object(defineProperty[\"a\" /* default */])(_flowInitial, 32, code_indented[\"a\" /* codeIndented */]), _flowInitial);\n/** @type {Extension['flow']} */\n\nvar constructs_flow = (_flow = {}, Object(defineProperty[\"a\" /* default */])(_flow, 35, heading_atx[\"a\" /* headingAtx */]), Object(defineProperty[\"a\" /* default */])(_flow, 42, thematic_break[\"a\" /* thematicBreak */]), Object(defineProperty[\"a\" /* default */])(_flow, 45, [setext_underline[\"a\" /* setextUnderline */], thematic_break[\"a\" /* thematicBreak */]]), Object(defineProperty[\"a\" /* default */])(_flow, 60, html_flow[\"a\" /* htmlFlow */]), Object(defineProperty[\"a\" /* default */])(_flow, 61, setext_underline[\"a\" /* setextUnderline */]), Object(defineProperty[\"a\" /* default */])(_flow, 95, thematic_break[\"a\" /* thematicBreak */]), Object(defineProperty[\"a\" /* default */])(_flow, 96, code_fenced[\"a\" /* codeFenced */]), Object(defineProperty[\"a\" /* default */])(_flow, 126, code_fenced[\"a\" /* codeFenced */]), _flow);\n/** @type {Extension['string']} */\n\nvar constructs_string = (_string = {}, Object(defineProperty[\"a\" /* default */])(_string, 38, character_reference[\"a\" /* characterReference */]), Object(defineProperty[\"a\" /* default */])(_string, 92, character_escape[\"a\" /* characterEscape */]), _string);\n/** @type {Extension['text']} */\n\nvar constructs_text = (_text = {}, Object(defineProperty[\"a\" /* default */])(_text, -5, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, -4, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, -3, line_ending[\"a\" /* lineEnding */]), Object(defineProperty[\"a\" /* default */])(_text, 33, label_start_image[\"a\" /* labelStartImage */]), Object(defineProperty[\"a\" /* default */])(_text, 38, character_reference[\"a\" /* characterReference */]), Object(defineProperty[\"a\" /* default */])(_text, 42, attention[\"a\" /* attention */]), Object(defineProperty[\"a\" /* default */])(_text, 60, [autolink[\"a\" /* autolink */], html_text[\"a\" /* htmlText */]]), Object(defineProperty[\"a\" /* default */])(_text, 91, label_start_link[\"a\" /* labelStartLink */]), Object(defineProperty[\"a\" /* default */])(_text, 92, [hard_break_escape[\"a\" /* hardBreakEscape */], character_escape[\"a\" /* characterEscape */]]), Object(defineProperty[\"a\" /* default */])(_text, 93, label_end[\"a\" /* labelEnd */]), Object(defineProperty[\"a\" /* default */])(_text, 95, attention[\"a\" /* attention */]), Object(defineProperty[\"a\" /* default */])(_text, 96, code_text[\"a\" /* codeText */]), _text);\n/** @type {Extension['insideSpan']} */\n\nvar insideSpan = {\n  \"null\": [attention[\"a\" /* attention */], resolver]\n};\n/** @type {Extension['attentionMarkers']} */\n\nvar attentionMarkers = {\n  \"null\": [42, 95]\n};\n/** @type {Extension['disable']} */\n\nvar disable = {\n  \"null\": []\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/parse.js\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\n\n\n\n\n\n\n\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nfunction parse_parse() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  var constructs = combineExtensions( // @ts-expect-error Same as above.\n  [constructs_namespaceObject].concat(options.extensions || []));\n  /** @type {ParseContext} */\n\n  var parser = {\n    defined: [],\n    lazy: {},\n    constructs: constructs,\n    content: create(content_content),\n    document: create(document_document),\n    flow: create(flow),\n    string: create(text_string),\n    text: create(text_text)\n  };\n  return parser;\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js\n/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nvar search = /[\\0\\t\\n\\r]/g;\n/**\n * @returns {Preprocessor}\n */\n\nfunction preprocess() {\n  var column = 1;\n  var buffer = '';\n  /** @type {boolean|undefined} */\n\n  var start = true;\n  /** @type {boolean|undefined} */\n\n  var atCarriageReturn;\n  return preprocessor;\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    var chunks = [];\n    /** @type {RegExpMatchArray|null} */\n\n    var match;\n    /** @type {number} */\n\n    var next;\n    /** @type {number} */\n\n    var startPosition;\n    /** @type {number} */\n\n    var endPosition;\n    /** @type {Code} */\n\n    var code; // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n\n      start = undefined;\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n\n              while (column++ < next) {\n                chunks.push(-1);\n              }\n\n              break;\n            }\n\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n\n      startPosition = endPosition + 1;\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n\n    return chunks;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-subtokenize/index.js\nvar micromark_util_subtokenize = __webpack_require__(\"fcw5\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js\n/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @param {Event[]} events\n * @returns {Event[]}\n */\n\nfunction postprocess(events) {\n  while (!Object(micromark_util_subtokenize[\"a\" /* subtokenize */])(events)) {// Empty\n  }\n\n  return events;\n}\n// CONCATENATED MODULE: ./node_modules/micromark-util-decode-numeric-character-reference/index.js\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nfunction decodeNumericCharacterReference(value, base) {\n  var code = Number.parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space\n  code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of the basic block and C1 controls.\n  code > 126 && code < 160 || // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 || // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n\n  return String.fromCharCode(code);\n}\n// EXTERNAL MODULE: ./node_modules/decode-named-character-reference/index.js + 1 modules\nvar decode_named_character_reference = __webpack_require__(\"/tra\");\n\n// CONCATENATED MODULE: ./node_modules/micromark-util-decode-string/index.js\n\n\nvar characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The \u201cstring\u201d content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  } // Reference.\n\n\n  var head = $2.charCodeAt(0);\n\n  if (head === 35) {\n    var _head = $2.charCodeAt(1);\n\n    var hex = _head === 120 || _head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n\n  return Object(decode_named_character_reference[\"a\" /* decodeNamedCharacterReference */])($2) || $0;\n}\n// EXTERNAL MODULE: ./node_modules/micromark-util-normalize-identifier/index.js\nvar micromark_util_normalize_identifier = __webpack_require__(\"EWc2\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js\n\n\n/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\n\n\n\n\n\n\n\n\n\nvar lib_own = {}.hasOwnProperty;\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it\u2019s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nvar lib_fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n *   ((value: Value, options?: Options) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {Options} [options]\n * @returns {Root}\n */\nfunction fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n\n  return compiler(options)(postprocess(parse_parse(options).document().write(preprocess()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  var config = configure({\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }, options.mdastExtensions || []);\n  /** @type {CompileData} */\n\n  var data = {};\n  return compile;\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    var tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {CompileContext['stack']} */\n\n    var stack = [tree];\n    /** @type {CompileContext['tokenStack']} */\n\n    var tokenStack = [];\n    /** @type {Array<number>} */\n\n    var listStack = [];\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    var context = {\n      stack: stack,\n      tokenStack: tokenStack,\n      config: config,\n      enter: enter,\n      exit: exit,\n      buffer: buffer,\n      resume: resume,\n      setData: setData,\n      getData: getData\n    };\n    var index = -1;\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          var tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      var handler = config[events[index][0]];\n\n      if (lib_own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      var _tail = tokenStack[tokenStack.length - 1];\n\n      var _handler = _tail[1] || defaultOnError;\n\n      _handler.call(context, undefined, _tail[0]);\n    } // Figure out `root` position.\n\n\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n    index = -1;\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n\n    return tree;\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n\n  function prepareList(events, start, length) {\n    var index = start - 1;\n    var containerBalance = -1;\n    var listSpread = false;\n    /** @type {Token|undefined} */\n\n    var listItem;\n    /** @type {number|undefined} */\n\n    var lineIndex;\n    /** @type {number|undefined} */\n\n    var firstBlankLineIndex;\n    /** @type {boolean|undefined} */\n\n    var atMarker;\n\n    while (++index <= length) {\n      var event = events[index];\n\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {// Empty.\n      } else {\n        atMarker = undefined;\n      }\n\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          var tailIndex = index;\n          lineIndex = undefined;\n\n          while (tailIndex--) {\n            var tailEvent = events[tailIndex];\n\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {// Empty\n            } else {\n              break;\n            }\n          }\n\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            // @ts-expect-error Patched.\n            listItem._spread = true;\n          } // Fix position.\n\n\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        } // Create a new list item.\n\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }; // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    } // @ts-expect-error Patched.\n\n\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n\n  function setData(key, value) {\n    data[key] = value;\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n\n  function getData(key) {\n    return data[key];\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    };\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function opener(create, and) {\n    return open;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n\n  function enter(node, token, errorHandler) {\n    var parent = this.stack[this.stack.length - 1]; // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function closer(and) {\n    return close;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n\n  function exit(token, onExitError) {\n    var node = this.stack.pop();\n    var open = this.tokenStack.pop();\n\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it\u2019s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        var handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n\n    node.position.end = point(token.end);\n    return node;\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n\n  function resume() {\n    return mdast_util_to_string_toString(this.stack.pop());\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n  /** @type {Handle} */\n\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      var ancestor =\n      /** @type {List} */\n      this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfenceinfo() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfencemeta() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefenced() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodeindented() {\n    var data = this.resume();\n    var node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    var label = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiontitlestring() {\n    var data = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiondestinationstring() {\n    var data = this.resume();\n    var node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitatxheadingsequence(token) {\n    var node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n\n    if (!node.depth) {\n      var depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadinglinesequence(token) {\n    var node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n  /** @type {Handle} */\n\n\n  function onenterdata(token) {\n    var parent =\n    /** @type {Parent} */\n    this.stack[this.stack.length - 1];\n    /** @type {Node} */\n\n    var tail = parent.children[parent.children.length - 1];\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text(); // @ts-expect-error: we\u2019ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      }; // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail);\n    }\n\n    this.stack.push(tail);\n  }\n  /** @type {Handle} */\n\n\n  function onexitdata(token) {\n    var tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitlineending(token) {\n    var context = this.stack[this.stack.length - 1]; // If we\u2019re at a hard break, include the line ending in there.\n\n    if (getData('atHardBreak')) {\n      var tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmlflow() {\n    var data = this.resume();\n    var node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmltext() {\n    var data = this.resume();\n    var node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodetext() {\n    var data = this.resume();\n    var node =\n    /** @type {InlineCode} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitlink() {\n    var context =\n    /** @type {Link & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitimage() {\n    var context =\n    /** @type {Image & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabeltext(token) {\n    var ancestor =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 2];\n    var string = this.sliceSerialize(token);\n    ancestor.label = decodeString(string);\n    ancestor.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(string).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabel() {\n    var fragment =\n    /** @type {Fragment} */\n    this.stack[this.stack.length - 1];\n    var value = this.resume();\n    var node =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // Assume a reference.\n\n    setData('inReference', true);\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children;\n    } else {\n      node.alt = value;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcedestinationstring() {\n    var data = this.resume();\n    var node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcetitlestring() {\n    var data = this.resume();\n    var node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresource() {\n    setData('inReference');\n  }\n  /** @type {Handle} */\n\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n  /** @type {Handle} */\n\n\n  function onexitreferencestring(token) {\n    var label = this.resume();\n    var node =\n    /** @type {LinkReference|ImageReference} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = Object(micromark_util_normalize_identifier[\"a\" /* normalizeIdentifier */])(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencevalue(token) {\n    var data = this.sliceSerialize(token);\n    var type = getData('characterReferenceType');\n    /** @type {string} */\n\n    var value;\n\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we\u2019ve tokenized is\n      // valid.\n      value = Object(decode_named_character_reference[\"a\" /* decodeNamedCharacterReference */])(data);\n    }\n\n    var tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    var node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    var node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n  /** @returns {Code} */\n\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n  /** @returns {InlineCode} */\n\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n  /** @returns {Definition} */\n\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n  /** @returns {Emphasis} */\n\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n  /** @returns {Heading} */\n\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n  /** @returns {Break} */\n\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n  /** @returns {HTML} */\n\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n  /** @returns {Image} */\n\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n  /** @returns {Link} */\n\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  /** @returns {Paragraph} */\n\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n  /** @returns {Strong} */\n\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n  /** @returns {Text} */\n\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /** @returns {ThematicBreak} */\n\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\n\nfunction configure(combined, extensions) {\n  var index = -1;\n\n  while (++index < extensions.length) {\n    var value = extensions[index];\n\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      lib_extension(combined, value);\n    }\n  }\n\n  return combined;\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\n\nfunction lib_extension(combined, extension) {\n  /** @type {string} */\n  var key;\n\n  for (key in extension) {\n    if (lib_own.call(extension, key)) {\n      var list = key === 'canContainEols' || key === 'transforms';\n      var maybe = lib_own.call(combined, key) ? combined[key] : undefined;\n      /* c8 ignore next */\n\n      var left = maybe || (combined[key] = list ? [] : {});\n      var right = extension[key];\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [].concat(Object(toConsumableArray[\"default\"])(left), Object(toConsumableArray[\"default\"])(right));\n        } else {\n          Object.assign(left, right);\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-parse/lib/index.js\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\n\nfunction remarkParse(options) {\n  var _this = this;\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  var parser = function parser(doc) {\n    // Assume options.\n    var settings =\n    /** @type {Options} */\n    _this.data('settings');\n\n    return lib_fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: _this.data('micromarkExtensions') || [],\n      mdastExtensions: _this.data('fromMarkdownExtensions') || []\n    }));\n  };\n\n  Object.assign(this, {\n    Parser: parser\n  });\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-parse/index.js\n\n/* harmony default export */ var remark_parse = (remarkParse);\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-builder/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\nvar u =\n/**\n* @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n*/\n\n/**\n * @param {string} type Type of node\n * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n * @param {ChildrenOrValue} [value] `children` or `value` of node\n * @returns {Node}\n */\nfunction u(type, props, value) {\n  /** @type {Node} */\n  var node = {\n    type: String(type)\n  };\n\n  if ((value === undefined || value === null) && (typeof props === 'string' || Array.isArray(props))) {\n    value = props;\n  } else {\n    Object.assign(node, props);\n  }\n\n  if (Array.isArray(value)) {\n    node.children = value;\n  } else if (value !== undefined && value !== null) {\n    node.value = String(value);\n  }\n\n  return node;\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-is/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\nvar unist_util_is_is =\n/**\n * Check if a node passes a test.\n * When a `parent` node is known the `index` of node should also be given.\n *\n * @type {(\n *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n * )}\n */\n\n/**\n * Check if a node passes a test.\n * When a `parent` node is known the `index` of node should also be given.\n *\n * @param {unknown} [node] Node to check\n * @param {Test} [test]\n * When nullish, checks if `node` is a `Node`.\n * When `string`, works like passing `function (node) {return node.type === test}`.\n * When `function` checks if function passed the node is true.\n * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n * When `array`, checks any one of the subtests pass.\n * @param {number|null|undefined} [index] Position of `node` in `parent`\n * @param {Parent|null|undefined} [parent] Parent of `node`\n * @param {unknown} [context] Context object to invoke `test` with\n * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n */\n// eslint-disable-next-line max-params\nfunction is(node, test, index, parent, context) {\n  var check = convert(test);\n\n  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {\n    throw new Error('Expected positive finite index');\n  }\n\n  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n\n  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n    throw new Error('Expected both parent and index');\n  } // @ts-expect-error Looks like a node.\n\n\n  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;\n};\nvar convert =\n/**\n * @type {(\n *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n *   ((test?: Test) => AssertAnything)\n * )}\n */\n\n/**\n * Generate an assertion from a check.\n * @param {Test} [test]\n * When nullish, checks if `node` is a `Node`.\n * When `string`, works like passing `function (node) {return node.type === test}`.\n * When `function` checks if function passed the node is true.\n * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n * When `array`, checks any one of the subtests pass.\n * @returns {AssertAnything}\n */\nfunction convert(test) {\n  if (test === undefined || test === null) {\n    return unist_util_is_ok;\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (typeof test === 'object') {\n    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n  }\n\n  if (typeof test === 'function') {\n    return castFactory(test);\n  }\n\n  throw new Error('Expected function, string, or object as test');\n};\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\n\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  var checks = [];\n  var index = -1;\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n\n  return castFactory(any);\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n\n  function any() {\n    var index = -1;\n\n    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      parameters[_key] = arguments[_key];\n    }\n\n    while (++index < checks.length) {\n      var _checks$index;\n\n      if ((_checks$index = checks[index]).call.apply(_checks$index, [this].concat(parameters))) return true;\n    }\n\n    return false;\n  }\n}\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\n\n\nfunction propsFactory(check) {\n  return castFactory(all);\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n\n  function all(node) {\n    /** @type {string} */\n    var key;\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false;\n    }\n\n    return true;\n  }\n}\n/**\n * Utility to convert a string into a function which checks a given node\u2019s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\n\n\nfunction typeFactory(check) {\n  return castFactory(type);\n  /**\n   * @param {Node} node\n   */\n\n  function type(node) {\n    return node && node.type === check;\n  }\n}\n/**\n * Utility to convert a string into a function which checks a given node\u2019s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\n\n\nfunction castFactory(check) {\n  return assertion;\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n\n  function assertion() {\n    for (var _len2 = arguments.length, parameters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      parameters[_key2] = arguments[_key2];\n    }\n\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call.apply(check, [this].concat(parameters)));\n  }\n} // Utility to return true.\n\n\nfunction unist_util_is_ok() {\n  return true;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit-parents/color.browser.js\n/**\n * @param {string} d\n * @returns {string}\n */\nfunction color(d) {\n  return d;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit-parents/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types').Action} Action\n * @typedef {import('./complex-types').Index} Index\n * @typedef {import('./complex-types').ActionTuple} ActionTuple\n * @typedef {import('./complex-types').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\n\n/**\n * Continue traversing as normal\n */\n\nvar CONTINUE = true;\n/**\n * Do not traverse this node\u2019s children\n */\n\nvar SKIP = 'skip';\n/**\n * Stop traversing immediately\n */\n\nvar EXIT = false;\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test node, optional\n * @param visitor Function to run for each node\n * @param reverse Visit the tree in reverse order, defaults to false\n */\n\nvar unist_util_visit_parents_visitParents =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {import('./complex-types').Visitor<Node>} visitor\n * @param {boolean} [reverse]\n */\nfunction visitParents(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor; // @ts-expect-error no visitor given, so `visitor` is test.\n\n    visitor = test;\n    test = null;\n  }\n\n  var is = convert(test);\n  var step = reverse ? -1 : 1;\n  factory(tree, null, [])();\n  /**\n   * @param {Node} node\n   * @param {number?} index\n   * @param {Array.<Parent>} parents\n   */\n\n  function factory(node, index, parents) {\n    /** @type {Object.<string, unknown>} */\n    // @ts-expect-error: hush\n    var value = typeof node === 'object' && node !== null ? node : {};\n    /** @type {string|undefined} */\n\n    var name;\n\n    if (typeof value.type === 'string') {\n      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;\n      Object.defineProperty(visit, 'name', {\n        value: 'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'\n      });\n    }\n\n    return visit;\n\n    function visit() {\n      /** @type {ActionTuple} */\n      var result = [];\n      /** @type {ActionTuple} */\n\n      var subresult;\n      /** @type {number} */\n\n      var offset;\n      /** @type {Array.<Parent>} */\n\n      var grandparents;\n\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents));\n\n        if (result[0] === EXIT) {\n          return result;\n        }\n      } // @ts-expect-error looks like a parent.\n\n\n      if (node.children && result[0] !== SKIP) {\n        // @ts-expect-error looks like a parent.\n        offset = (reverse ? node.children.length : -1) + step; // @ts-expect-error looks like a parent.\n\n        grandparents = parents.concat(node); // @ts-expect-error looks like a parent.\n\n        while (offset > -1 && offset < node.children.length) {\n          // @ts-expect-error looks like a parent.\n          subresult = factory(node.children[offset], offset, grandparents)();\n\n          if (subresult[0] === EXIT) {\n            return subresult;\n          }\n\n          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;\n        }\n      }\n\n      return result;\n    }\n  }\n};\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\n\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value];\n  }\n\n  return [value];\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-visit/index.js\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test, optional\n * @param visitor Function to run for each node\n * @param reverse Fisit the tree in reverse, defaults to false\n */\n\nvar unist_util_visit_visit =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {import('./complex-types').Visitor} visitor\n * @param {boolean} [reverse]\n */\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  unist_util_visit_parents_visitParents(tree, test, overload, reverse);\n  /**\n   * @param {Node} node\n   * @param {Array.<Parent>} parents\n   */\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-position/index.js\n/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {Record<string, unknown> & {type: string, position?: PositionLike|undefined}} NodeLike\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n */\nvar pointStart = unist_util_position_point('start');\nvar pointEnd = unist_util_position_point('end');\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike|Node} [node]\n * @returns {Position}\n */\n\nfunction unist_util_position_position(node) {\n  return {\n    start: pointStart(node),\n    end: pointEnd(node)\n  };\n}\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\n\nfunction unist_util_position_point(type) {\n  return point;\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike|Node} [node]\n   * @returns {Point}\n   */\n\n  function point(node) {\n    var point = node && node.position && node.position[type] || {};\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    };\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/unist-util-generated/index.js\n/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nfunction generated(node) {\n  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-definitions/index.js\n/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nvar mdast_util_definitions_own = {}.hasOwnProperty;\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\n\nfunction mdast_util_definitions_definitions(node) {\n  /** @type {Record<string, Definition>} */\n  var cache = Object.create(null);\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n\n  unist_util_visit_visit(node, 'definition', function (definition) {\n    var id = clean(definition.identifier);\n\n    if (id && !mdast_util_definitions_own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n\n  function definition(identifier) {\n    var id = clean(identifier);\n    return id && mdast_util_definitions_own.call(cache, id) ? cache[id] : null;\n  }\n}\n/**\n * @param {string} [value]\n * @returns {string}\n */\n\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/traverse.js\n\n\n\n/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nvar traverse_own = {}.hasOwnProperty;\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\n\nfunction unknown(h, node) {\n  var data = node.data || {};\n\n  if ('value' in node && !(traverse_own.call(data, 'hName') || traverse_own.call(data, 'hProperties') || traverse_own.call(data, 'hChildren'))) {\n    return h.augment(node, u('text', node.value));\n  }\n\n  return h(node, 'div', traverse_all(h, node));\n}\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\n\n\nfunction traverse_one(h, node, parent) {\n  var type = node && node.type;\n  /** @type {Handler} */\n\n  var fn; // Fail on non-nodes.\n\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n\n  if (traverse_own.call(h.handlers, type)) {\n    fn = h.handlers[type];\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode;\n  } else {\n    fn = h.unknownHandler;\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent);\n}\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\n\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, node), {}, {\n    children: traverse_all(h, node)\n  }) : node;\n}\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\n\n\nfunction traverse_all(h, parent) {\n  /** @type {Array<Content>} */\n  var values = [];\n\n  if ('children' in parent) {\n    var nodes = parent.children;\n    var index = -1;\n\n    while (++index < nodes.length) {\n      var result = traverse_one(h, nodes[index], parent);\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '');\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            var head = result.children[0];\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '');\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push.apply(values, Object(toConsumableArray[\"default\"])(result));\n        } else {\n          values.push(result);\n        }\n      }\n    }\n  }\n\n  return values;\n}\n// CONCATENATED MODULE: ./node_modules/micromark-util-encode/index.js\nvar characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n};\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction encode(value) {\n  return value.replace(/[\"&<>]/g, replace);\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n\n  function replace(value) {\n    // @ts-expect-error Hush, it\u2019s fine.\n    return '&' + characterReferences[value] + ';';\n  }\n}\n// CONCATENATED MODULE: ./node_modules/micromark-util-sanitize-uri/index.js\n\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\n\nfunction sanitizeUri(url, protocol) {\n  var value = encode(normalizeUri(url || ''));\n\n  if (!protocol) {\n    return value;\n  }\n\n  var colon = value.indexOf(':');\n  var questionMark = value.indexOf('?');\n  var numberSign = value.indexOf('#');\n  var slash = value.indexOf('/');\n\n  if ( // If there is no protocol, it\u2019s relative.\n  colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it\u2019s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n\n  return '';\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction normalizeUri(value) {\n  /** @type {string[]} */\n  var result = [];\n  var index = -1;\n  var start = 0;\n  var skip = 0;\n\n  while (++index < value.length) {\n    var code = value.charCodeAt(index);\n    /** @type {string} */\n\n    var replace = ''; // A correct percent encoded value.\n\n    if (code === 37 && Object(micromark_util_character[\"b\" /* asciiAlphanumeric */])(value.charCodeAt(index + 1)) && Object(micromark_util_character[\"b\" /* asciiAlphanumeric */])(value.charCodeAt(index + 2))) {\n      skip = 2;\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      var next = value.charCodeAt(index + 1); // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD';\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n\n  return result.join('') + value.slice(start);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/wrap.js\n/**\n * @typedef {import('./index.js').Content} Content\n */\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\n\nfunction wrap_wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  var result = [];\n  var index = -1;\n\n  if (loose) {\n    result.push(u('text', '\\n'));\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'));\n    result.push(nodes[index]);\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'));\n  }\n\n  return result;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/footer.js\n/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\n\n\n\n/**\n * @param {H} h\n */\n\nfunction footer(h) {\n  var index = -1;\n  /** @type {Array<ElementContent>} */\n\n  var listItems = [];\n\n  while (++index < h.footnoteOrder.length) {\n    var def = h.footnoteById[h.footnoteOrder[index].toUpperCase()];\n\n    if (!def) {\n      continue;\n    }\n\n    var content = traverse_all(h, def);\n    var id = String(def.identifier);\n    var safeId = sanitizeUri(id.toLowerCase());\n    var referenceIndex = 0;\n    /** @type {Array<ElementContent>} */\n\n    var backReferences = [];\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      var backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href: '#' + h.clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{\n          type: 'text',\n          value: '\u21a9'\n        }]\n      };\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{\n            type: 'text',\n            value: String(referenceIndex)\n          }]\n        });\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n\n      backReferences.push(backReference);\n    }\n\n    var tail = content[content.length - 1];\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      var _tail$children;\n\n      var tailTail = tail.children[tail.children.length - 1];\n\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' ';\n      } else {\n        tail.children.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n\n      (_tail$children = tail.children).push.apply(_tail$children, backReferences);\n    } else {\n      content.push.apply(content, backReferences);\n    }\n    /** @type {Element} */\n\n\n    var listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {\n        id: h.clobberPrefix + 'fn-' + safeId\n      },\n      children: wrap_wrap(content, true)\n    };\n\n    if (def.position) {\n      listItem.position = def.position;\n    }\n\n    listItems.push(listItem);\n  }\n\n  if (listItems.length === 0) {\n    return null;\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {\n      dataFootnotes: true,\n      className: ['footnotes']\n    },\n    children: [{\n      type: 'element',\n      tagName: 'h2',\n      properties: {\n        id: 'footnote-label',\n        className: ['sr-only']\n      },\n      children: [u('text', h.footnoteLabel)]\n    }, {\n      type: 'text',\n      value: '\\n'\n    }, {\n      type: 'element',\n      tagName: 'ol',\n      properties: {},\n      children: wrap_wrap(listItems, true)\n    }, {\n      type: 'text',\n      value: '\\n'\n    }]\n  };\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js\n/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\n\nfunction blockquote(h, node) {\n  return h(node, 'blockquote', wrap_wrap(traverse_all(h, node), true));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/break.js\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\n\nfunction break_hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')];\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/code.js\n/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\n\nfunction code_code(h, node) {\n  var value = node.value ? node.value + '\\n' : ''; // To do: next major, use `node.lang` w/o regex, the splitting\u2019s been going\n  // on for years in remark now.\n\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/);\n  /** @type {Properties} */\n\n  var props = {};\n\n  if (lang) {\n    props.className = ['language-' + lang];\n  }\n\n  var code = h(node, 'code', props, [u('text', value)]);\n\n  if (node.meta) {\n    code.data = {\n      meta: node.meta\n    };\n  }\n\n  return h(node.position, 'pre', [code]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/delete.js\n/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\n\nfunction strikethrough(h, node) {\n  return h(node, 'del', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js\n/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\n\nfunction emphasis_emphasis(h, node) {\n  return h(node, 'em', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\n\nfunction footnoteReference(h, node) {\n  var id = String(node.identifier);\n  var safeId = sanitizeUri(id.toLowerCase());\n  var index = h.footnoteOrder.indexOf(id);\n  /** @type {number} */\n\n  var counter;\n\n  if (index === -1) {\n    h.footnoteOrder.push(id);\n    h.footnoteCounts[id] = 1;\n    counter = h.footnoteOrder.length;\n  } else {\n    h.footnoteCounts[id]++;\n    counter = index + 1;\n  }\n\n  var reuseCounter = h.footnoteCounts[id];\n  return h(node, 'sup', [h(node.position, 'a', {\n    href: '#' + h.clobberPrefix + 'fn-' + safeId,\n    id: h.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\n    dataFootnoteRef: true,\n    ariaDescribedBy: 'footnote-label'\n  }, [u('text', String(counter))])]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote.js\n/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n *\n * @todo\n *   `footnote` (or \u201cinline note\u201d) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\n\nfunction footnote(h, node) {\n  var footnoteById = h.footnoteById;\n  var no = 1;\n\n  while (no in footnoteById) {\n    no++;\n  }\n\n  var identifier = String(no);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier: identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier: identifier,\n    position: node.position\n  });\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/heading.js\n/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\n\nfunction heading_heading(h, node) {\n  return h(node, 'h' + node.depth, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/html.js\n/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\n\nfunction html_html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null;\n}\n// EXTERNAL MODULE: ./node_modules/mdurl/encode.js\nvar mdurl_encode = __webpack_require__(\"xGQ6\");\nvar encode_default = /*#__PURE__*/__webpack_require__.n(mdurl_encode);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/revert.js\n/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\n\nfunction revert(h, node) {\n  var subtype = node.referenceType;\n  var suffix = ']';\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n\n  var contents = traverse_all(h, node);\n  var head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n\n  var tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n\n  return contents;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js\n/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\n\nfunction imageReference(h, node) {\n  var def = h.definition(node.identifier);\n\n  if (!def) {\n    return revert(h, node);\n  }\n  /** @type {Properties} */\n\n\n  var props = {\n    src: encode_default()(def.url || ''),\n    alt: node.alt\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n\n  return h(node, 'img', props);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image.js\n/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\n\nfunction image_image(h, node) {\n  /** @type {Properties} */\n  var props = {\n    src: encode_default()(node.url),\n    alt: node.alt\n  };\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n\n  return h(node, 'img', props);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js\n/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\n\nfunction inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))]);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js\n/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\n\nfunction linkReference(h, node) {\n  var def = h.definition(node.identifier);\n\n  if (!def) {\n    return revert(h, node);\n  }\n  /** @type {Properties} */\n\n\n  var props = {\n    href: encode_default()(def.url || '')\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n\n  return h(node, 'a', props, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link.js\n/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\n\nfunction link_link(h, node) {\n  /** @type {Properties} */\n  var props = {\n    href: encode_default()(node.url)\n  };\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n\n  return h(node, 'a', props, traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list-item.js\n\n\n/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\n\nfunction list_item_listItem(h, node, parent) {\n  var result = traverse_all(h, node);\n  var loose = parent ? listLoose(parent) : listItemLoose(node);\n  /** @type {Properties} */\n\n  var props = {};\n  /** @type {Array<Content>} */\n\n  var wrapped = [];\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    var paragraph;\n\n    if (result[0] && result[0].type === 'element' && result[0].tagName === 'p') {\n      paragraph = result[0];\n    } else {\n      paragraph = h(null, 'p', []);\n      result.unshift(paragraph);\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '));\n    }\n\n    paragraph.children.unshift(h(null, 'input', {\n      type: 'checkbox',\n      checked: node.checked,\n      disabled: true\n    })); // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n\n    props.className = ['task-list-item'];\n  }\n\n  var index = -1;\n\n  while (++index < result.length) {\n    var child = result[index]; // Add eols before nodes, except if this is a loose, first paragraph.\n\n    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {\n      wrapped.push(u('text', '\\n'));\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push.apply(wrapped, Object(toConsumableArray[\"default\"])(child.children));\n    } else {\n      wrapped.push(child);\n    }\n  }\n\n  var tail = result[result.length - 1]; // Add a final eol.\n\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'));\n  }\n\n  return h(node, 'li', props, wrapped);\n}\n/**\n * @param {List} node\n * @return {Boolean}\n */\n\nfunction listLoose(node) {\n  var loose = node.spread;\n  var children = node.children;\n  var index = -1;\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index]);\n  }\n\n  return Boolean(loose);\n}\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\n\n\nfunction listItemLoose(node) {\n  var spread = node.spread;\n  return spread === undefined || spread === null ? node.children.length > 1 : spread;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list.js\n/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\n\nfunction list_list(h, node) {\n  /** @type {Properties} */\n  var props = {};\n  var name = node.ordered ? 'ol' : 'ul';\n  var items = traverse_all(h, node);\n  var index = -1;\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start;\n  } // Like GitHub, add a class for custom styling.\n\n\n  while (++index < items.length) {\n    var item = items[index];\n\n    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {\n      props.className = ['contains-task-list'];\n      break;\n    }\n  }\n\n  return h(node, name, props, wrap_wrap(items, true));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js\n/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\n\nfunction paragraph_paragraph(h, node) {\n  return h(node, 'p', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/root.js\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\n\nfunction root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap_wrap(traverse_all(h, node))));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/strong.js\n/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\n\nfunction strong_strong(h, node) {\n  return h(node, 'strong', traverse_all(h, node));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table.js\n/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\n\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\n\nfunction table(h, node) {\n  var rows = node.children;\n  var index = -1;\n  var align = node.align || [];\n  /** @type {Array<Element>} */\n\n  var result = [];\n\n  while (++index < rows.length) {\n    var row = rows[index].children;\n    var name = index === 0 ? 'th' : 'td';\n    /** @type {Array<Content>} */\n\n    var out = [];\n    var cellIndex = -1;\n    var length = node.align ? align.length : row.length;\n\n    while (++cellIndex < length) {\n      var cell = row[cellIndex];\n      out.push(h(cell, name, {\n        align: align[cellIndex]\n      }, cell ? traverse_all(h, cell) : []));\n    }\n\n    result[index] = h(rows[index], 'tr', wrap_wrap(out, true));\n  }\n\n  return h(node, 'table', wrap_wrap([h(result[0].position, 'thead', wrap_wrap([result[0]], true))].concat(result[1] ? h({\n    start: pointStart(result[1]),\n    end: pointEnd(result[result.length - 1])\n  }, 'tbody', wrap_wrap(result.slice(1), true)) : []), true));\n}\n// CONCATENATED MODULE: ./node_modules/trim-lines/index.js\nvar tab = 9;\n/* `\\t` */\n\nvar trim_lines_space = 32;\n/* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\n\nfunction trimLines(value) {\n  var source = String(value);\n  var search = /\\r?\\n|\\r/g;\n  var match = search.exec(source);\n  var last = 0;\n  /** @type {Array<string>} */\n\n  var lines = [];\n\n  while (match) {\n    lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);\n    last = match.index + match[0].length;\n    match = search.exec(source);\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false));\n  return lines.join('');\n}\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\n\nfunction trimLine(value, start, end) {\n  var startIndex = 0;\n  var endIndex = value.length;\n\n  if (start) {\n    var code = value.codePointAt(startIndex);\n\n    while (code === tab || code === trim_lines_space) {\n      startIndex++;\n      code = value.codePointAt(startIndex);\n    }\n  }\n\n  if (end) {\n    var _code = value.codePointAt(endIndex - 1);\n\n    while (_code === tab || _code === trim_lines_space) {\n      endIndex--;\n      _code = value.codePointAt(endIndex - 1);\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/text.js\n/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\n\nfunction handlers_text_text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))));\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js\n/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nfunction thematic_break_thematicBreak(h, node) {\n  return h(node, 'hr');\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar handlers = {\n  blockquote: blockquote,\n  \"break\": break_hardBreak,\n  code: code_code,\n  \"delete\": strikethrough,\n  emphasis: emphasis_emphasis,\n  footnoteReference: footnoteReference,\n  footnote: footnote,\n  heading: heading_heading,\n  html: html_html,\n  imageReference: imageReference,\n  image: image_image,\n  inlineCode: inlineCode,\n  linkReference: linkReference,\n  link: link_link,\n  listItem: list_item_listItem,\n  list: list_list,\n  paragraph: paragraph_paragraph,\n  root: root,\n  strong: strong_strong,\n  table: table,\n  text: handlers_text_text,\n  thematicBreak: thematic_break_thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}; // Return nothing for nodes that are ignored.\n\nfunction ignore() {\n  return null;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/index.js\n\n\n/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering\n * @property {string} footnoteLabel Label to use to introduce the footnote section\n * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array<string>} footnoteOrder Order in which footnotes occur\n * @property {Record<string, number>} footnoteCounts Counts the same footnote was used\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)<\/script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you\u2019re authoring in a different language.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you\u2019re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\n\n\n\n\n\n\n\nvar mdast_util_to_hast_lib_own = {}.hasOwnProperty;\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\n\nfunction lib_factory(tree, options) {\n  var settings = options || {};\n  var dangerous = settings.allowDangerousHtml || false;\n  /** @type {Record<string, FootnoteDefinition>} */\n\n  var footnoteById = {};\n  h.dangerous = dangerous;\n  h.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes';\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';\n  h.definition = mdast_util_definitions_definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array<string>} */\n\n  h.footnoteOrder = [];\n  /** @type {Record<string, number>} */\n\n  h.footnoteCounts = {};\n  h.augment = augment;\n  h.handlers = Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, handlers), settings.handlers);\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  unist_util_visit_visit(tree, 'footnoteDefinition', function (definition) {\n    var id = String(definition.identifier).toUpperCase(); // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n\n    if (!mdast_util_to_hast_lib_own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  }); // @ts-expect-error Hush, it\u2019s fine!\n\n  return h;\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      var data = left.data;\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n\n        right.tagName = data.hName;\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, right.properties), data.hProperties);\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n\n    if (left) {\n      var ctx = 'type' in left ? left : {\n        position: left\n      };\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n\n    return right;\n  }\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n\n\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    } // @ts-expect-error augmenting an element yields an element.\n\n\n    return augment(node, {\n      type: 'element',\n      tagName: tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\n\n\nfunction toHast(tree, options) {\n  var h = lib_factory(tree, options);\n  var node = traverse_one(h, tree, null);\n  var foot = footer(h);\n\n  if (foot) {\n    // @ts-expect-error If there\u2019s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/remark-rehype/lib/index.js\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n // Note: the `<MdastRoot, HastRoot>` overload doesn\u2019t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It\u2019s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It\u2019s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\n\nvar remarkRehype =\n/** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\nfunction remarkRehype(destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);\n};\n\n/* harmony default export */ var lib = (remarkRehype);\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\n\nfunction bridge(destination, options) {\n  return function (node, file, next) {\n    destination.run(toHast(node, options), file, function (error) {\n      next(error);\n    });\n  };\n}\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\n\n\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return function (node) {\n    return toHast(node, options);\n  };\n}\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(\"17x9\");\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js\n\n\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\nvar schema_Schema = /*#__PURE__*/Object(createClass[\"a\" /* default */])(\n/**\n * @constructor\n * @param {Properties} property\n * @param {Normal} normal\n * @param {string} [space]\n */\nfunction Schema(property, normal, space) {\n  Object(classCallCheck[\"a\" /* default */])(this, Schema);\n\n  this.property = property;\n  this.normal = normal;\n\n  if (space) {\n    this.space = space;\n  }\n});\n/** @type {Properties} */\n\nschema_Schema.prototype.property = {};\n/** @type {Normal} */\n\nschema_Schema.prototype.normal = {};\n/** @type {string|null} */\n\nschema_Schema.prototype.space = null;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\n\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {};\n  /** @type {Normal} */\n\n  var normal = {};\n  var index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new schema_Schema(property, normal, space);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/normalize.js\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize_normalize(value) {\n  return value.toLowerCase();\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(\"JX7q\");\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/info.js\n\n\nvar info_Info = /*#__PURE__*/Object(createClass[\"a\" /* default */])(\n/**\n * @constructor\n * @param {string} property\n * @param {string} attribute\n */\nfunction Info(property, attribute) {\n  Object(classCallCheck[\"a\" /* default */])(this, Info);\n\n  /** @type {string} */\n  this.property = property;\n  /** @type {string} */\n\n  this.attribute = attribute;\n});\n/** @type {string|null} */\n\ninfo_Info.prototype.space = null;\ninfo_Info.prototype[\"boolean\"] = false;\ninfo_Info.prototype.booleanish = false;\ninfo_Info.prototype.overloadedBoolean = false;\ninfo_Info.prototype.number = false;\ninfo_Info.prototype.commaSeparated = false;\ninfo_Info.prototype.spaceSeparated = false;\ninfo_Info.prototype.commaOrSpaceSeparated = false;\ninfo_Info.prototype.mustUseProperty = false;\ninfo_Info.prototype.defined = false;\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/types.js\nvar powers = 0;\n\nvar _boolean = increment();\n\n\nvar booleanish = increment();\nvar overloadedBoolean = increment();\nvar number = increment();\nvar spaceSeparated = increment();\nvar commaSeparated = increment();\nvar commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return Math.pow(2, ++powers);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js\n\n\n\n\n\n\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\n\nvar checks = Object.keys(types_namespaceObject);\nvar defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {\n  Object(inherits[\"a\" /* default */])(DefinedInfo, _Info);\n\n  var _super = Object(createSuper[\"a\" /* default */])(DefinedInfo);\n\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  function DefinedInfo(property, attribute, mask, space) {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, DefinedInfo);\n\n    var index = -1;\n    _this = _super.call(this, property, attribute);\n    mark(Object(assertThisInitialized[\"a\" /* default */])(_this), 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        var check = checks[index];\n        mark(Object(assertThisInitialized[\"a\" /* default */])(_this), checks[index], (mask & types_namespaceObject[check]) === types_namespaceObject[check]);\n      }\n    }\n\n    return _this;\n  }\n\n  return Object(createClass[\"a\" /* default */])(DefinedInfo);\n}(info_Info);\ndefined_info_DefinedInfo.prototype.defined = true;\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\n\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/create.js\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\n\nvar create_own = {}.hasOwnProperty;\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\n\nfunction create_create(definition) {\n  /** @type {Properties} */\n  var property = {};\n  /** @type {Normal} */\n\n  var normal = {};\n  /** @type {string} */\n\n  var prop;\n\n  for (prop in definition.properties) {\n    if (create_own.call(definition.properties, prop)) {\n      var value = definition.properties[prop];\n      var info = new defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);\n\n      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n      normal[normalize_normalize(prop)] = prop;\n      normal[normalize_normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new schema_Schema(property, normal, definition.space);\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xlink.js\n\nvar xlink = create_create({\n  space: 'xlink',\n  transform: function transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase();\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xml.js\n\nvar xml = create_create({\n  space: 'xml',\n  transform: function transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase();\n  },\n  properties: {\n    xmlLang: null,\n    xmlBase: null,\n    xmlSpace: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute;\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\n\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase());\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js\n\n\nvar xmlns = create_create({\n  space: 'xmlns',\n  attributes: {\n    xmlnsxlink: 'xmlns:xlink'\n  },\n  transform: caseInsensitiveTransform,\n  properties: {\n    xmlns: null,\n    xmlnsXLink: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/aria.js\n\n\nvar aria = create_create({\n  transform: function transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/html.js\n\n\n\nvar lib_html_html = create_create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: _boolean,\n    allowPaymentRequest: _boolean,\n    allowUserMedia: _boolean,\n    alt: null,\n    as: null,\n    async: _boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: _boolean,\n    autoPlay: _boolean,\n    capture: _boolean,\n    charSet: null,\n    checked: _boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: _boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    \"default\": _boolean,\n    defer: _boolean,\n    dir: null,\n    dirName: null,\n    disabled: _boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: _boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: _boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: _boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: _boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: _boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: _boolean,\n    muted: _boolean,\n    name: null,\n    nonce: null,\n    noModule: _boolean,\n    noValidate: _boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: _boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: _boolean,\n    poster: null,\n    preload: null,\n    readOnly: _boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: _boolean,\n    reversed: _boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: _boolean,\n    seamless: _boolean,\n    selected: _boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: _boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null,\n    // Several. Use CSS `text-align` instead,\n    aLink: null,\n    // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated,\n    // `<object>`. List of URIs to archives\n    axis: null,\n    // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null,\n    // `<body>`. Use CSS `background-image` instead\n    bgColor: null,\n    // `<body>` and table elements. Use CSS `background-color` instead\n    border: number,\n    // `<table>`. Use CSS `border-width` instead,\n    borderColor: null,\n    // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number,\n    // `<body>`\n    cellPadding: null,\n    // `<table>`\n    cellSpacing: null,\n    // `<table>`\n    \"char\": null,\n    // Several table elements. When `align=char`, sets the character to align on\n    charOff: null,\n    // Several table elements. When `char`, offsets the alignment\n    classId: null,\n    // `<object>`\n    clear: null,\n    // `<br>`. Use CSS `clear` instead\n    code: null,\n    // `<object>`\n    codeBase: null,\n    // `<object>`\n    codeType: null,\n    // `<object>`\n    color: null,\n    // `<font>` and `<hr>`. Use CSS instead\n    compact: _boolean,\n    // Lists. Use CSS to reduce space between items instead\n    declare: _boolean,\n    // `<object>`\n    event: null,\n    // `<script>`\n    face: null,\n    // `<font>`. Use CSS instead\n    frame: null,\n    // `<table>`\n    frameBorder: null,\n    // `<iframe>`. Use CSS `border` instead\n    hSpace: number,\n    // `<img>` and `<object>`\n    leftMargin: number,\n    // `<body>`\n    link: null,\n    // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null,\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null,\n    // `<img>`. Use a `<picture>`\n    marginHeight: number,\n    // `<body>`\n    marginWidth: number,\n    // `<body>`\n    noResize: _boolean,\n    // `<frame>`\n    noHref: _boolean,\n    // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: _boolean,\n    // `<hr>`. Use background-color and height instead of borders\n    noWrap: _boolean,\n    // `<td>` and `<th>`\n    object: null,\n    // `<applet>`\n    profile: null,\n    // `<head>`\n    prompt: null,\n    // `<isindex>`\n    rev: null,\n    // `<link>`\n    rightMargin: number,\n    // `<body>`\n    rules: null,\n    // `<table>`\n    scheme: null,\n    // `<meta>`\n    scrolling: booleanish,\n    // `<frame>`. Use overflow in the child context\n    standby: null,\n    // `<object>`\n    summary: null,\n    // `<table>`\n    text: null,\n    // `<body>`. Use CSS `color` instead\n    topMargin: number,\n    // `<body>`\n    valueType: null,\n    // `<param>`\n    version: null,\n    // `<html>`. Use a doctype.\n    vAlign: null,\n    // Several. Use CSS `vertical-align` instead\n    vLink: null,\n    // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number,\n    // `<img>` and `<object>`\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: _boolean,\n    disableRemotePlayback: _boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/svg.js\n\n\n\nvar svg = create_create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: _boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    \"in\": null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null,\n    // SEMI_COLON_SEPARATED\n    keySplines: null,\n    // SEMI_COLON_SEPARATED\n    keyTimes: null,\n    // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/index.js\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\n\n\n\n\n\n\n\n\n\nvar property_information_html = merge([xml, xlink, xmlns, aria, lib_html_html], 'html');\nvar property_information_svg = merge([xml, xlink, xmlns, aria, svg], 'svg');\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/rehype-filter.js\n\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\n\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n\n  if (options.allowedElements || options.disallowedElements || options.allowElement) {\n    return function (tree) {\n      unist_util_visit_visit(tree, 'element', function (node, index, parent_) {\n        var parent =\n        /** @type {Element|Root} */\n        parent_;\n        /** @type {boolean|undefined} */\n\n        var remove;\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName);\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName);\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent);\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            var _parent$children;\n\n            (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(Object(toConsumableArray[\"default\"])(node.children)));\n          } else {\n            parent.children.splice(index, 1);\n          }\n\n          return index;\n        }\n\n        return undefined;\n      });\n    };\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/uri-transformer.js\nvar protocols = ['http', 'https', 'mailto', 'tel'];\n/**\n * @param {string} uri\n * @returns {string}\n */\n\nfunction uriTransformer(uri) {\n  var url = (uri || '').trim();\n  var first = url.charAt(0);\n\n  if (first === '#' || first === '/') {\n    return url;\n  }\n\n  var colon = url.indexOf(':');\n\n  if (colon === -1) {\n    return url;\n  }\n\n  var index = -1;\n\n  while (++index < protocols.length) {\n    var protocol = protocols[index];\n\n    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {\n      return url;\n    }\n  }\n\n  index = url.indexOf('?');\n\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n\n  index = url.indexOf('#');\n\n  if (index !== -1 && colon > index) {\n    return url;\n  } // eslint-disable-next-line no-script-url\n\n\n  return 'javascript:void(0)';\n}\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(\"TOwV\");\nvar react_is_default = /*#__PURE__*/__webpack_require__.n(react_is);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/hast-util-whitespace/index.js\n/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nfunction whitespace(thing) {\n  /** @type {string} */\n  var value = // @ts-ignore looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-ignore looks like a text.\n  thing.value || '' : thing; // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/find.js\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\n\nvar valid = /^data[-\\w.:]+$/i;\nvar dash = /-[a-z]/g;\nvar cap = /[A-Z]/g;\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\n\nfunction find(schema, value) {\n  var normal = normalize_normalize(value);\n  var prop = value;\n  var Type = info_Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      var rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      var _rest = value.slice(4);\n\n      if (!dash.test(_rest)) {\n        var dashes = _rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = defined_info_DefinedInfo;\n  }\n\n  return new Type(prop, value);\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js\nvar hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n};\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/space-separated-tokens/index.js\n/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nfunction space_separated_tokens_parse(value) {\n  var input = String(value || '').trim();\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : [];\n}\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\n\nfunction space_separated_tokens_stringify(values) {\n  return values.join(' ').trim();\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/node_modules/comma-separated-tokens/index.js\n/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nfunction comma_separated_tokens_parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = [];\n  var input = String(value || '');\n  var index = input.indexOf(',');\n  var start = 0;\n  /** @type {boolean} */\n\n  var end;\n  /** @type {string} */\n\n  var token;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    token = input.slice(start, index).trim();\n\n    if (token || !end) {\n      tokens.push(token);\n    }\n\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n\n  return tokens;\n}\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\n\nfunction comma_separated_tokens_stringify(values, options) {\n  var settings = options || {}; // Ensure the last empty entry is seen.\n\n  if (values[values.length - 1] === '') {\n    values = values.concat('');\n  }\n\n  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}\n// EXTERNAL MODULE: ./node_modules/style-to-object/index.js\nvar style_to_object = __webpack_require__(\"CC3I\");\nvar style_to_object_default = /*#__PURE__*/__webpack_require__.n(style_to_object);\n\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/ast-to-react.js\n/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\n\n\n\n\n\n\nvar ast_to_react_own = {}.hasOwnProperty; // The table-related elements that must not contain whitespace text according\n// to React.\n\nvar tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\n\nfunction childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  var children = [];\n  var childIndex = -1;\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n\n  var child;\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex];\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node));\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (node.type !== 'element' || !tableElements.has(node.tagName) || !whitespace(child)) {\n        children.push(child.value);\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value);\n    }\n  }\n\n  return children;\n}\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\n\nfunction toReact(context, node, index, parent) {\n  var options = context.options;\n  var parentSchema = context.schema;\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n\n  var name = node.tagName;\n  /** @type {Record<string, unknown>} */\n\n  var properties = {};\n  var schema = parentSchema;\n  /** @type {string} */\n\n  var property;\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = property_information_svg;\n    context.schema = schema;\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (ast_to_react_own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context);\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++;\n  }\n\n  var children = childrenToReact(context, node);\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--;\n  } // Restore parent schema.\n\n\n  context.schema = parentSchema; // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n\n  var position = node.position || {\n    start: {\n      line: null,\n      column: null,\n      offset: null\n    },\n    end: {\n      line: null,\n      column: null,\n      offset: null\n    }\n  };\n  var component = options.components && ast_to_react_own.call(options.components, name) ? options.components[name] : name;\n  var basic = typeof component === 'string' || component === react_default.a.Fragment;\n\n  if (!react_is_default.a.isValidElementType(component)) {\n    throw new TypeError(\"Component for name `\".concat(name, \"` not defined or is not renderable\"));\n  }\n\n  properties.key = [name, position.start.line, position.start.column, index].join('-');\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target = typeof options.linkTarget === 'function' ? options.linkTarget(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null) : options.linkTarget;\n  }\n\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null);\n  }\n\n  if (!basic && name === 'code' && parent.type === 'element' && parent.tagName !== 'pre') {\n    properties.inline = true;\n  }\n\n  if (!basic && (name === 'h1' || name === 'h2' || name === 'h3' || name === 'h4' || name === 'h5' || name === 'h6')) {\n    properties.level = Number.parseInt(name.charAt(1), 10);\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(String(properties.src || ''), String(properties.alt || ''), typeof properties.title === 'string' ? properties.title : null);\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    var input = getInputElement(node);\n    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.ordered = parent.tagName === 'ol';\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol';\n    properties.depth = context.listDepth;\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}; // @ts-expect-error assume `style` is an object\n\n      properties.style.textAlign = properties.align;\n      delete properties.align;\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th';\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead');\n  } // If `sourcePos` is given, pass source information (line/column info from markdown source).\n\n\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position);\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position;\n  } // If `includeElementIndex` is given, pass node index info to components.\n\n\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.siblingCount = getElementsBeforeCount(parent);\n  }\n\n  if (!basic) {\n    properties.node = node;\n  } // Ensure no React warnings are emitted for void elements w/ children.\n\n\n  return children.length > 0 ? react_default.a.createElement(component, properties, children) : react_default.a.createElement(component, properties);\n}\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\n\n\nfunction getInputElement(node) {\n  var index = -1;\n\n  while (++index < node.children.length) {\n    var child = node.children[index];\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\n\n\nfunction getElementsBeforeCount(parent, node) {\n  var index = -1;\n  var count = 0;\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break;\n    if (parent.children[index].type === 'element') count++;\n  }\n\n  return count;\n}\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\n\n\nfunction addProperty(props, prop, value, ctx) {\n  var info = find(ctx.schema, prop);\n  var result = value; // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n\n  if (result === null || result === undefined || result !== result) {\n    return;\n  } // Accept `array`.\n  // Most props are space-separated.\n\n\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? comma_separated_tokens_stringify(result) : space_separated_tokens_stringify(result);\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result);\n  }\n\n  if (info.space && info.property) {\n    props[ast_to_react_own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;\n  } else if (info.attribute) {\n    props[info.attribute] = result;\n  }\n}\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\n\n\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  var result = {};\n\n  try {\n    style_to_object_default()(value, iterator);\n  } catch (_unused) {// Silent.\n  }\n\n  return result;\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n\n  function iterator(name, v) {\n    var k = name.slice(0, 4) === '-ms-' ? \"ms-\".concat(name.slice(4)) : name;\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v;\n  }\n}\n/**\n * @param {unknown} _\n * @param {string} $1\n */\n\n\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase();\n}\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\n\n\nfunction flattenPosition(pos) {\n  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(function (d) {\n    return String(d);\n  }).join('');\n}\n// CONCATENATED MODULE: ./node_modules/react-markdown/lib/react-markdown.js\n\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\n\n\n\n\n\n\n\n\n\nvar react_markdown_own = {}.hasOwnProperty;\nvar changelog = 'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';\n/** @type {Record<string, Deprecation>} */\n\nvar deprecated = {\n  plugins: {\n    to: 'plugins',\n    id: 'change-plugins-to-remarkplugins'\n  },\n  renderers: {\n    to: 'components',\n    id: 'change-renderers-to-components'\n  },\n  astPlugins: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  allowDangerousHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  escapeHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  source: {\n    to: 'children',\n    id: 'change-source-to-children'\n  },\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n};\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\n\nfunction ReactMarkdown(options) {\n  for (var key in deprecated) {\n    if (react_markdown_own.call(deprecated, key) && react_markdown_own.call(options, key)) {\n      var deprecation = deprecated[key];\n      console.warn(\"[react-markdown] Warning: please \".concat(deprecation.to ? \"use `\".concat(deprecation.to, \"` instead of\") : 'remove', \" `\").concat(key, \"` (see <\").concat(changelog, \"#\").concat(deprecation.id, \"> for more info)\"));\n      delete deprecated[key];\n    }\n  }\n\n  var processor = unified().use(remark_parse).use(options.remarkPlugins || []).use(lib, Object(objectSpread2[\"default\"])(Object(objectSpread2[\"default\"])({}, options.remarkRehypeOptions), {}, {\n    allowDangerousHtml: true\n  })).use(options.rehypePlugins || []).use(rehypeFilter, options);\n  var file = new lib_VFile();\n\n  if (typeof options.children === 'string') {\n    file.value = options.children;\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\"[react-markdown] Warning: please pass a string as `children` (not: `\".concat(options.children, \"`)\"));\n  }\n\n  var hastNode = processor.runSync(processor.parse(file), file);\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node');\n  }\n  /** @type {ReactElement} */\n\n\n  var result = react_default.a.createElement(react_default.a.Fragment, {}, childrenToReact({\n    options: options,\n    schema: property_information_html,\n    listDepth: 0\n  }, hastNode));\n\n  if (options.className) {\n    result = react_default.a.createElement('div', {\n      className: options.className\n    }, result);\n  }\n\n  return result;\n}\nReactMarkdown.defaultProps = {\n  transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n  // Core options:\n  children: prop_types_default.a.string,\n  // Layout options:\n  className: prop_types_default.a.string,\n  // Filter options:\n  allowElement: prop_types_default.a.func,\n  allowedElements: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  disallowedElements: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  unwrapDisallowed: prop_types_default.a.bool,\n  // Plugin options:\n  remarkPlugins: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf( // prettier-ignore\n  // type-coverage:ignore-next-line\n  prop_types_default.a.any)]))])),\n  rehypePlugins: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.object, prop_types_default.a.func, prop_types_default.a.arrayOf( // prettier-ignore\n  // type-coverage:ignore-next-line\n  prop_types_default.a.any)]))])),\n  // Transform options:\n  sourcePos: prop_types_default.a.bool,\n  rawSourcePos: prop_types_default.a.bool,\n  skipHtml: prop_types_default.a.bool,\n  includeElementIndex: prop_types_default.a.bool,\n  transformLinkUri: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),\n  linkTarget: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string]),\n  transformImageUri: prop_types_default.a.func,\n  components: prop_types_default.a.object\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///IujW\n")},Jac1:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ asciiAlpha; });\n__webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ asciiDigit; });\n__webpack_require__.d(__webpack_exports__, "f", function() { return /* binding */ asciiHexDigit; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ asciiAlphanumeric; });\n__webpack_require__.d(__webpack_exports__, "g", function() { return /* binding */ asciiPunctuation; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ asciiAtext; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ asciiControl; });\n__webpack_require__.d(__webpack_exports__, "i", function() { return /* binding */ markdownLineEndingOrSpace; });\n__webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ markdownLineEnding; });\n__webpack_require__.d(__webpack_exports__, "j", function() { return /* binding */ markdownSpace; });\n__webpack_require__.d(__webpack_exports__, "l", function() { return /* binding */ unicodeWhitespace; });\n__webpack_require__.d(__webpack_exports__, "k", function() { return /* binding */ unicodePunctuation; });\n\n// CONCATENATED MODULE: ./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js\n// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nvar unicodePunctuationRegex = /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\n// CONCATENATED MODULE: ./node_modules/micromark-util-character/index.js\n/**\n * @typedef {import(\'micromark-util-types\').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nvar asciiAlpha = regexCheck(/[A-Za-z]/);\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nvar asciiDigit = regexCheck(/\\d/);\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nvar asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nvar asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nvar asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`\'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nvar asciiAtext = regexCheck(/[#-\'*+\\--9=?A-Z^-~]/);\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nfunction asciiControl(code) {\n  return (// Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nfunction markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nfunction markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nfunction markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nvar unicodeWhitespace = regexCheck(/\\s/);\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nvar unicodePunctuation = regexCheck(unicodePunctuationRegex);\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check;\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Jac1\n')},Kwbf:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return warning; });\n/* unused harmony export note */\n/* unused harmony export resetWarned */\n/* unused harmony export call */\n/* unused harmony export warningOnce */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return noteOnce; });\n/* eslint-disable no-console */\nvar warned = {};\nfunction warning(valid, message) {\n  // Support uglify\n  if (false) {}\n}\nfunction note(valid, message) {\n  // Support uglify\n  if (false) {}\n}\nfunction resetWarned() {\n  warned = {};\n}\nfunction call(method, valid, message) {\n  if (!valid && !warned[message]) {\n    method(false, message);\n    warned[message] = true;\n  }\n}\nfunction warningOnce(valid, message) {\n  call(warning, valid, message);\n}\nfunction noteOnce(valid, message) {\n  call(note, valid, message);\n}\n/* harmony default export */ __webpack_exports__["a"] = (warningOnce);\n/* eslint-enable *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy93YXJuaW5nLmpzPzJiMDYiXSwibmFtZXMiOlsid2FybmVkIiwid2FybmluZyIsInZhbGlkIiwibWVzc2FnZSIsInByb2Nlc3MiLCJub3RlIiwicmVzZXRXYXJuZWQiLCJjYWxsIiwibWV0aG9kIiwid2FybmluZ09uY2UiLCJub3RlT25jZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxJQUFJQSxNQUFNLEdBQUcsRUFBYjtBQUNPLFNBQVNDLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCQyxPQUF4QixFQUFpQztFQUN0QztFQUNBLElBQUlDLEtBQUosRUFBOEUsRUFFN0U7QUFDRjtBQUNNLFNBQVNDLElBQVQsQ0FBY0gsS0FBZCxFQUFxQkMsT0FBckIsRUFBOEI7RUFDbkM7RUFDQSxJQUFJQyxLQUFKLEVBQThFLEVBRTdFO0FBQ0Y7QUFDTSxTQUFTRSxXQUFULEdBQXVCO0VBQzVCTixNQUFNLEdBQUcsRUFBVDtBQUNEO0FBQ00sU0FBU08sSUFBVCxDQUFjQyxNQUFkLEVBQXNCTixLQUF0QixFQUE2QkMsT0FBN0IsRUFBc0M7RUFDM0MsSUFBSSxDQUFDRCxLQUFELElBQVUsQ0FBQ0YsTUFBTSxDQUFDRyxPQUFELENBQXJCLEVBQWdDO0lBQzlCSyxNQUFNLENBQUMsS0FBRCxFQUFRTCxPQUFSLENBQU47SUFDQUgsTUFBTSxDQUFDRyxPQUFELENBQU4sR0FBa0IsSUFBbEI7RUFDRDtBQUNGO0FBQ00sU0FBU00sV0FBVCxDQUFxQlAsS0FBckIsRUFBNEJDLE9BQTVCLEVBQXFDO0VBQzFDSSxJQUFJLENBQUNOLE9BQUQsRUFBVUMsS0FBVixFQUFpQkMsT0FBakIsQ0FBSjtBQUNEO0FBQ00sU0FBU08sUUFBVCxDQUFrQlIsS0FBbEIsRUFBeUJDLE9BQXpCLEVBQWtDO0VBQ3ZDSSxJQUFJLENBQUNGLElBQUQsRUFBT0gsS0FBUCxFQUFjQyxPQUFkLENBQUo7QUFDRDtBQUNjTSxvRUFBZjtBQUNBIiwiZmlsZSI6Ikt3YmYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG52YXIgd2FybmVkID0ge307XG5leHBvcnQgZnVuY3Rpb24gd2FybmluZyh2YWxpZCwgbWVzc2FnZSkge1xuICAvLyBTdXBwb3J0IHVnbGlmeVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdmFsaWQgJiYgY29uc29sZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IFwiLmNvbmNhdChtZXNzYWdlKSk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXCJOb3RlOiBcIi5jb25jYXQobWVzc2FnZSkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGwobWV0aG9kLCB2YWxpZCwgbWVzc2FnZSkge1xuICBpZiAoIXZhbGlkICYmICF3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICBtZXRob2QoZmFsc2UsIG1lc3NhZ2UpO1xuICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKHdhcm5pbmcsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKG5vdGUsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmdPbmNlO1xuLyogZXNsaW50LWVuYWJsZSAqLyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///Kwbf\n')},MNnm:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return canUseDom; });\nfunction canUseDom() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tLmpzPzMwZDkiXSwibmFtZXMiOlsiY2FuVXNlRG9tIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLFNBQVNBLFNBQVQsR0FBcUI7RUFDbEMsT0FBTyxDQUFDLEVBQUUsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDQyxRQUF4QyxJQUFvREQsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxhQUF0RSxDQUFSO0FBQ0QiLCJmaWxlIjoiTU5ubS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhblVzZURvbSgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///MNnm\n")},TOwV:function(module,exports,__webpack_require__){"use strict";eval('\n\nif (true) {\n  module.exports = __webpack_require__("qT12");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7RUFDekNDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxNQUFELENBQXhCO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IlRPd1YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///TOwV\n')},ZOQX:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return htmlBlockNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return htmlRawNames; });\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn\u2019t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nvar htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\n\nvar htmlRawNames = ['pre', 'script', 'style', 'textarea'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtaHRtbC10YWctbmFtZS9pbmRleC5qcz82NGU0Il0sIm5hbWVzIjpbImh0bWxCbG9ja05hbWVzIiwiaHRtbFJhd05hbWVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQSxjQUFjLEdBQUcsQ0FDNUIsU0FENEIsRUFFNUIsU0FGNEIsRUFHNUIsT0FINEIsRUFJNUIsTUFKNEIsRUFLNUIsVUFMNEIsRUFNNUIsWUFONEIsRUFPNUIsTUFQNEIsRUFRNUIsU0FSNEIsRUFTNUIsUUFUNEIsRUFVNUIsS0FWNEIsRUFXNUIsVUFYNEIsRUFZNUIsSUFaNEIsRUFhNUIsU0FiNEIsRUFjNUIsUUFkNEIsRUFlNUIsS0FmNEIsRUFnQjVCLEtBaEI0QixFQWlCNUIsSUFqQjRCLEVBa0I1QixJQWxCNEIsRUFtQjVCLFVBbkI0QixFQW9CNUIsWUFwQjRCLEVBcUI1QixRQXJCNEIsRUFzQjVCLFFBdEI0QixFQXVCNUIsTUF2QjRCLEVBd0I1QixPQXhCNEIsRUF5QjVCLFVBekI0QixFQTBCNUIsSUExQjRCLEVBMkI1QixJQTNCNEIsRUE0QjVCLElBNUI0QixFQTZCNUIsSUE3QjRCLEVBOEI1QixJQTlCNEIsRUErQjVCLElBL0I0QixFQWdDNUIsTUFoQzRCLEVBaUM1QixRQWpDNEIsRUFrQzVCLElBbEM0QixFQW1DNUIsTUFuQzRCLEVBb0M1QixRQXBDNEIsRUFxQzVCLFFBckM0QixFQXNDNUIsSUF0QzRCLEVBdUM1QixNQXZDNEIsRUF3QzVCLE1BeEM0QixFQXlDNUIsTUF6QzRCLEVBMEM1QixVQTFDNEIsRUEyQzVCLEtBM0M0QixFQTRDNUIsVUE1QzRCLEVBNkM1QixJQTdDNEIsRUE4QzVCLFVBOUM0QixFQStDNUIsUUEvQzRCLEVBZ0Q1QixHQWhENEIsRUFpRDVCLE9BakQ0QixFQWtENUIsU0FsRDRCLEVBbUQ1QixTQW5ENEIsRUFvRDVCLE9BcEQ0QixFQXFENUIsT0FyRDRCLEVBc0Q1QixJQXRENEIsRUF1RDVCLE9BdkQ0QixFQXdENUIsSUF4RDRCLEVBeUQ1QixPQXpENEIsRUEwRDVCLE9BMUQ0QixFQTJENUIsSUEzRDRCLEVBNEQ1QixPQTVENEIsRUE2RDVCLElBN0Q0QixDQUF2QjtBQWdFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxJQUFNQyxZQUFZLEdBQUcsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixPQUFsQixFQUEyQixVQUEzQixDQUFyQiIsImZpbGUiOiJaT1FYLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaXN0IG9mIGxvd2VyY2FzZSBIVE1MIHRhZyBuYW1lcyB3aGljaCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdFxuICogaW4gbW9yZSByZWxheGVkIHJ1bGVzIChjb25kaXRpb24gNik6IGJlY2F1c2UgdGhleSBhcmUga25vd24gYmxvY2tzLCB0aGVcbiAqIEhUTUwtbGlrZSBzeW50YXggZG9lc27igJl0IGhhdmUgdG8gYmUgc3RyaWN0bHkgcGFyc2VkLlxuICogRm9yIHRhZyBuYW1lcyBub3QgaW4gdGhpcyBsaXN0LCBhIG1vcmUgc3RyaWN0IGFsZ29yaXRobSAoY29uZGl0aW9uIDcpIGlzIHVzZWRcbiAqIHRvIGRldGVjdCB3aGV0aGVyIHRoZSBIVE1MLWxpa2Ugc3ludGF4IGlzIHNlZW4gYXMgSFRNTCAoZmxvdykgb3Igbm90LlxuICpcbiAqIFRoaXMgaXMgY29waWVkIGZyb206XG4gKiA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMzAvI2h0bWwtYmxvY2tzPi5cbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxCbG9ja05hbWVzID0gW1xuICAnYWRkcmVzcycsXG4gICdhcnRpY2xlJyxcbiAgJ2FzaWRlJyxcbiAgJ2Jhc2UnLFxuICAnYmFzZWZvbnQnLFxuICAnYmxvY2txdW90ZScsXG4gICdib2R5JyxcbiAgJ2NhcHRpb24nLFxuICAnY2VudGVyJyxcbiAgJ2NvbCcsXG4gICdjb2xncm91cCcsXG4gICdkZCcsXG4gICdkZXRhaWxzJyxcbiAgJ2RpYWxvZycsXG4gICdkaXInLFxuICAnZGl2JyxcbiAgJ2RsJyxcbiAgJ2R0JyxcbiAgJ2ZpZWxkc2V0JyxcbiAgJ2ZpZ2NhcHRpb24nLFxuICAnZmlndXJlJyxcbiAgJ2Zvb3RlcicsXG4gICdmb3JtJyxcbiAgJ2ZyYW1lJyxcbiAgJ2ZyYW1lc2V0JyxcbiAgJ2gxJyxcbiAgJ2gyJyxcbiAgJ2gzJyxcbiAgJ2g0JyxcbiAgJ2g1JyxcbiAgJ2g2JyxcbiAgJ2hlYWQnLFxuICAnaGVhZGVyJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaWZyYW1lJyxcbiAgJ2xlZ2VuZCcsXG4gICdsaScsXG4gICdsaW5rJyxcbiAgJ21haW4nLFxuICAnbWVudScsXG4gICdtZW51aXRlbScsXG4gICduYXYnLFxuICAnbm9mcmFtZXMnLFxuICAnb2wnLFxuICAnb3B0Z3JvdXAnLFxuICAnb3B0aW9uJyxcbiAgJ3AnLFxuICAncGFyYW0nLFxuICAnc2VjdGlvbicsXG4gICdzdW1tYXJ5JyxcbiAgJ3RhYmxlJyxcbiAgJ3Rib2R5JyxcbiAgJ3RkJyxcbiAgJ3Rmb290JyxcbiAgJ3RoJyxcbiAgJ3RoZWFkJyxcbiAgJ3RpdGxlJyxcbiAgJ3RyJyxcbiAgJ3RyYWNrJyxcbiAgJ3VsJ1xuXVxuXG4vKipcbiAqIExpc3Qgb2YgbG93ZXJjYXNlIEhUTUwgdGFnIG5hbWVzIHdoaWNoIHdoZW4gcGFyc2luZyBIVE1MIChmbG93KSwgcmVzdWx0IGluXG4gKiBIVE1MIHRoYXQgY2FuIGluY2x1ZGUgbGluZXMgdy9vIGV4aXRpbmcsIHVudGlsIGEgY2xvc2luZyB0YWcgYWxzbyBpbiB0aGlzXG4gKiBsaXN0IGlzIGZvdW5kIChjb25kaXRpb24gMSkuXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgY29waWVkIGZyb206XG4gKiA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMzAvI2h0bWwtYmxvY2tzPi5cbiAqXG4gKiBOb3RlIHRoYXQgYHRleHRhcmVhYCB3YXMgYWRkZWQgaW4gYENvbW1vbk1hcmtAMC4zMGAuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sUmF3TmFtZXMgPSBbJ3ByZScsICdzY3JpcHQnLCAnc3R5bGUnLCAndGV4dGFyZWEnXVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///ZOQX\n")},ZpwG:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return classifyCharacter; });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("Jac1");\n/**\n * @typedef {import(\'micromark-util-types\').Code} Code\n */\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\n\nfunction classifyCharacter(code) {\n  if (code === null || Object(micromark_util_character__WEBPACK_IMPORTED_MODULE_0__[/* markdownLineEndingOrSpace */ "i"])(code) || Object(micromark_util_character__WEBPACK_IMPORTED_MODULE_0__[/* unicodeWhitespace */ "l"])(code)) {\n    return 1;\n  }\n\n  if (Object(micromark_util_character__WEBPACK_IMPORTED_MODULE_0__[/* unicodePunctuation */ "k"])(code)) {\n    return 2;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2xhc3NpZnktY2hhcmFjdGVyL2luZGV4LmpzPzY2OWMiXSwibmFtZXMiOlsiY2xhc3NpZnlDaGFyYWN0ZXIiLCJjb2RlIiwibWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSIsInVuaWNvZGVXaGl0ZXNwYWNlIiwidW5pY29kZVB1bmN0dWF0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU0EsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0VBQ3RDLElBQ0VBLElBQUksS0FBSyxJQUFULElBQ0FDLGtHQUF5QixDQUFDRCxJQUFELENBRHpCLElBRUFFLDBGQUFpQixDQUFDRixJQUFELENBSG5CLEVBSUU7SUFDQSxPQUFPLENBQVA7RUFDRDs7RUFFRCxJQUFJRywyRkFBa0IsQ0FBQ0gsSUFBRCxDQUF0QixFQUE4QjtJQUM1QixPQUFPLENBQVA7RUFDRDtBQUNGIiwiZmlsZSI6Ilpwd0cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICB1bmljb2RlUHVuY3R1YXRpb24sXG4gIHVuaWNvZGVXaGl0ZXNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqXG4gKiBDbGFzc2lmeSB3aGV0aGVyIGEgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyB3aGl0ZXNwYWNlLCBwdW5jdHVhdGlvbiwgb3JcbiAqIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIFVzZWQgZm9yIGF0dGVudGlvbiAoZW1waGFzaXMsIHN0cm9uZyksIHdob3NlIHNlcXVlbmNlcyBjYW4gb3BlbiBvciBjbG9zZVxuICogYmFzZWQgb24gdGhlIGNsYXNzIG9mIHN1cnJvdW5kaW5nIGNoYXJhY3RlcnMuXG4gKlxuICogTm90ZSB0aGF0IGVvZiAoYG51bGxgKSBpcyBzZWVuIGFzIHdoaXRlc3BhY2UuXG4gKlxuICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gKiBAcmV0dXJucyB7bnVtYmVyfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzaWZ5Q2hhcmFjdGVyKGNvZGUpIHtcbiAgaWYgKFxuICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHx8XG4gICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIGlmICh1bmljb2RlUHVuY3R1YXRpb24oY29kZSkpIHtcbiAgICByZXR1cm4gMlxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///ZpwG\n')},fcw5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return subtokenize; });\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"BdGo\");\n/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\n\nfunction subtokenize(events) {\n  /** @type {Record<string, number>} */\n  var jumps = {};\n  var index = -1;\n  /** @type {Event} */\n\n  var event;\n  /** @type {number|undefined} */\n\n  var lineIndex;\n  /** @type {number} */\n\n  var otherIndex;\n  /** @type {Event} */\n\n  var otherEvent;\n  /** @type {Event[]} */\n\n  var parameters;\n  /** @type {Event[]} */\n\n  var subevents;\n  /** @type {boolean|undefined} */\n\n  var more;\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n\n    event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    } // Enter.\n\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        Object(micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__[/* splice */ \"b\"])(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  var token = events[eventIndex][1];\n  var context = events[eventIndex][2];\n  var startPosition = eventIndex - 1;\n  /** @type {number[]} */\n\n  var startPositions = [];\n  var tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  var childEvents = tokenizer.events;\n  /** @type {[number, number][]} */\n\n  var jumps = [];\n  /** @type {Record<string, number>} */\n\n  var gaps = {};\n  /** @type {Chunk[]} */\n\n  var stream;\n  /** @type {Token|undefined} */\n\n  var previous;\n  var index = -1;\n  /** @type {Token|undefined} */\n\n  var current = token;\n  var adjust = 0;\n  var start = 0;\n  var breaks = [start]; // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {// Empty.\n    }\n\n    startPositions.push(startPosition);\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n\n      if (!current.next) {\n        stream.push(null);\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n\n      tokenizer.write(stream);\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    } // Unravel the next token.\n\n\n    previous = current;\n    current = current.next;\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n\n  current = token;\n\n  while (++index < childEvents.length) {\n    if ( // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start); // Help GC.\n\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  } // Help GC.\n\n\n  tokenizer.events = []; // If there\u2019s one more token (which is the cases for lines that end in an\n  // EOF), that\u2019s perfect: the last point we found starts it.\n  // If there isn\u2019t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren\u2019t affected.\n\n\n  index = breaks.length;\n\n  while (index--) {\n    var slice = childEvents.slice(breaks[index], breaks[index + 1]);\n\n    var _start = startPositions.pop();\n\n    jumps.unshift([_start, _start + slice.length - 1]);\n    Object(micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__[/* splice */ \"b\"])(events, _start, 2, slice);\n  }\n\n  index = -1;\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n\n  return gaps;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///fcw5\n")},qT12:function(module,exports,__webpack_require__){"use strict";eval('/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar b = Symbol["for"]("react.element"),\n    c = Symbol["for"]("react.portal"),\n    d = Symbol["for"]("react.fragment"),\n    e = Symbol["for"]("react.strict_mode"),\n    f = Symbol["for"]("react.profiler"),\n    g = Symbol["for"]("react.provider"),\n    h = Symbol["for"]("react.context"),\n    k = Symbol["for"]("react.server_context"),\n    l = Symbol["for"]("react.forward_ref"),\n    m = Symbol["for"]("react.suspense"),\n    n = Symbol["for"]("react.suspense_list"),\n    p = Symbol["for"]("react.memo"),\n    q = Symbol["for"]("react.lazy"),\n    t = Symbol["for"]("react.offscreen"),\n    u;\nu = Symbol["for"]("react.module.reference");\n\nfunction v(a) {\n  if ("object" === typeof a && null !== a) {\n    var r = a.$$typeof;\n\n    switch (r) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case m:\n          case n:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case h:\n              case l:\n              case q:\n              case p:\n              case g:\n                return a;\n\n              default:\n                return r;\n            }\n\n        }\n\n      case c:\n        return r;\n    }\n  }\n}\n\nexports.ContextConsumer = h;\nexports.ContextProvider = g;\nexports.Element = b;\nexports.ForwardRef = l;\nexports.Fragment = d;\nexports.Lazy = q;\nexports.Memo = p;\nexports.Portal = c;\nexports.Profiler = f;\nexports.StrictMode = e;\nexports.Suspense = m;\nexports.SuspenseList = n;\n\nexports.isAsyncMode = function () {\n  return !1;\n};\n\nexports.isConcurrentMode = function () {\n  return !1;\n};\n\nexports.isContextConsumer = function (a) {\n  return v(a) === h;\n};\n\nexports.isContextProvider = function (a) {\n  return v(a) === g;\n};\n\nexports.isElement = function (a) {\n  return "object" === typeof a && null !== a && a.$$typeof === b;\n};\n\nexports.isForwardRef = function (a) {\n  return v(a) === l;\n};\n\nexports.isFragment = function (a) {\n  return v(a) === d;\n};\n\nexports.isLazy = function (a) {\n  return v(a) === q;\n};\n\nexports.isMemo = function (a) {\n  return v(a) === p;\n};\n\nexports.isPortal = function (a) {\n  return v(a) === c;\n};\n\nexports.isProfiler = function (a) {\n  return v(a) === f;\n};\n\nexports.isStrictMode = function (a) {\n  return v(a) === e;\n};\n\nexports.isSuspense = function (a) {\n  return v(a) === m;\n};\n\nexports.isSuspenseList = function (a) {\n  return v(a) === n;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;\n};\n\nexports.typeOf = v;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzP2E5M2QiXSwibmFtZXMiOlsiYiIsIlN5bWJvbCIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImsiLCJsIiwibSIsIm4iLCJwIiwicSIsInQiLCJ1IiwidiIsImEiLCJyIiwiJCR0eXBlb2YiLCJ0eXBlIiwiZXhwb3J0cyIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiU3VzcGVuc2VMaXN0IiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNTdXNwZW5zZUxpc3QiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJnZXRNb2R1bGVJZCIsInR5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxNQUFNLE9BQU4sQ0FBVyxlQUFYLENBQU47QUFBQSxJQUFrQ0MsQ0FBQyxHQUFDRCxNQUFNLE9BQU4sQ0FBVyxjQUFYLENBQXBDO0FBQUEsSUFBK0RFLENBQUMsR0FBQ0YsTUFBTSxPQUFOLENBQVcsZ0JBQVgsQ0FBakU7QUFBQSxJQUE4RkcsQ0FBQyxHQUFDSCxNQUFNLE9BQU4sQ0FBVyxtQkFBWCxDQUFoRztBQUFBLElBQWdJSSxDQUFDLEdBQUNKLE1BQU0sT0FBTixDQUFXLGdCQUFYLENBQWxJO0FBQUEsSUFBK0pLLENBQUMsR0FBQ0wsTUFBTSxPQUFOLENBQVcsZ0JBQVgsQ0FBaks7QUFBQSxJQUE4TE0sQ0FBQyxHQUFDTixNQUFNLE9BQU4sQ0FBVyxlQUFYLENBQWhNO0FBQUEsSUFBNE5PLENBQUMsR0FBQ1AsTUFBTSxPQUFOLENBQVcsc0JBQVgsQ0FBOU47QUFBQSxJQUFpUVEsQ0FBQyxHQUFDUixNQUFNLE9BQU4sQ0FBVyxtQkFBWCxDQUFuUTtBQUFBLElBQW1TUyxDQUFDLEdBQUNULE1BQU0sT0FBTixDQUFXLGdCQUFYLENBQXJTO0FBQUEsSUFBa1VVLENBQUMsR0FBQ1YsTUFBTSxPQUFOLENBQVcscUJBQVgsQ0FBcFU7QUFBQSxJQUFzV1csQ0FBQyxHQUFDWCxNQUFNLE9BQU4sQ0FBVyxZQUFYLENBQXhXO0FBQUEsSUFBaVlZLENBQUMsR0FBQ1osTUFBTSxPQUFOLENBQVcsWUFBWCxDQUFuWTtBQUFBLElBQTRaYSxDQUFDLEdBQUNiLE1BQU0sT0FBTixDQUFXLGlCQUFYLENBQTlaO0FBQUEsSUFBNGJjLENBQTViO0FBQThiQSxDQUFDLEdBQUNkLE1BQU0sT0FBTixDQUFXLHdCQUFYLENBQUY7O0FBQzNjLFNBQVNlLENBQVQsQ0FBV0MsQ0FBWCxFQUFhO0VBQUMsSUFBRyxhQUFXLE9BQU9BLENBQWxCLElBQXFCLFNBQU9BLENBQS9CLEVBQWlDO0lBQUMsSUFBSUMsQ0FBQyxHQUFDRCxDQUFDLENBQUNFLFFBQVI7O0lBQWlCLFFBQU9ELENBQVA7TUFBVSxLQUFLbEIsQ0FBTDtRQUFPLFFBQU9pQixDQUFDLEdBQUNBLENBQUMsQ0FBQ0csSUFBSixFQUFTSCxDQUFoQjtVQUFtQixLQUFLZCxDQUFMO1VBQU8sS0FBS0UsQ0FBTDtVQUFPLEtBQUtELENBQUw7VUFBTyxLQUFLTSxDQUFMO1VBQU8sS0FBS0MsQ0FBTDtZQUFPLE9BQU9NLENBQVA7O1VBQVM7WUFBUSxRQUFPQSxDQUFDLEdBQUNBLENBQUMsSUFBRUEsQ0FBQyxDQUFDRSxRQUFQLEVBQWdCRixDQUF2QjtjQUEwQixLQUFLVCxDQUFMO2NBQU8sS0FBS0QsQ0FBTDtjQUFPLEtBQUtFLENBQUw7Y0FBTyxLQUFLSSxDQUFMO2NBQU8sS0FBS0QsQ0FBTDtjQUFPLEtBQUtOLENBQUw7Z0JBQU8sT0FBT1csQ0FBUDs7Y0FBUztnQkFBUSxPQUFPQyxDQUFQO1lBQXJGOztRQUF2RTs7TUFBc0ssS0FBS2hCLENBQUw7UUFBTyxPQUFPZ0IsQ0FBUDtJQUE5TDtFQUF3TTtBQUFDOztBQUFBRyxPQUFPLENBQUNDLGVBQVIsR0FBd0JmLENBQXhCO0FBQTBCYyxPQUFPLENBQUNFLGVBQVIsR0FBd0JqQixDQUF4QjtBQUEwQmUsT0FBTyxDQUFDRyxPQUFSLEdBQWdCeEIsQ0FBaEI7QUFBa0JxQixPQUFPLENBQUNJLFVBQVIsR0FBbUJoQixDQUFuQjtBQUFxQlksT0FBTyxDQUFDSyxRQUFSLEdBQWlCdkIsQ0FBakI7QUFBbUJrQixPQUFPLENBQUNNLElBQVIsR0FBYWQsQ0FBYjtBQUFlUSxPQUFPLENBQUNPLElBQVIsR0FBYWhCLENBQWI7QUFBZVMsT0FBTyxDQUFDUSxNQUFSLEdBQWUzQixDQUFmO0FBQWlCbUIsT0FBTyxDQUFDUyxRQUFSLEdBQWlCekIsQ0FBakI7QUFBbUJnQixPQUFPLENBQUNVLFVBQVIsR0FBbUIzQixDQUFuQjtBQUFxQmlCLE9BQU8sQ0FBQ1csUUFBUixHQUFpQnRCLENBQWpCO0FBQy9jVyxPQUFPLENBQUNZLFlBQVIsR0FBcUJ0QixDQUFyQjs7QUFBdUJVLE9BQU8sQ0FBQ2EsV0FBUixHQUFvQixZQUFVO0VBQUMsT0FBTSxDQUFDLENBQVA7QUFBUyxDQUF4Qzs7QUFBeUNiLE9BQU8sQ0FBQ2MsZ0JBQVIsR0FBeUIsWUFBVTtFQUFDLE9BQU0sQ0FBQyxDQUFQO0FBQVMsQ0FBN0M7O0FBQThDZCxPQUFPLENBQUNlLGlCQUFSLEdBQTBCLFVBQVNuQixDQUFULEVBQVc7RUFBQyxPQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPVixDQUFkO0FBQWdCLENBQXREOztBQUF1RGMsT0FBTyxDQUFDZ0IsaUJBQVIsR0FBMEIsVUFBU3BCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9YLENBQWQ7QUFBZ0IsQ0FBdEQ7O0FBQXVEZSxPQUFPLENBQUNpQixTQUFSLEdBQWtCLFVBQVNyQixDQUFULEVBQVc7RUFBQyxPQUFNLGFBQVcsT0FBT0EsQ0FBbEIsSUFBcUIsU0FBT0EsQ0FBNUIsSUFBK0JBLENBQUMsQ0FBQ0UsUUFBRixLQUFhbkIsQ0FBbEQ7QUFBb0QsQ0FBbEY7O0FBQW1GcUIsT0FBTyxDQUFDa0IsWUFBUixHQUFxQixVQUFTdEIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT1IsQ0FBZDtBQUFnQixDQUFqRDs7QUFBa0RZLE9BQU8sQ0FBQ21CLFVBQVIsR0FBbUIsVUFBU3ZCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9kLENBQWQ7QUFBZ0IsQ0FBL0M7O0FBQWdEa0IsT0FBTyxDQUFDb0IsTUFBUixHQUFlLFVBQVN4QixDQUFULEVBQVc7RUFBQyxPQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPSixDQUFkO0FBQWdCLENBQTNDOztBQUE0Q1EsT0FBTyxDQUFDcUIsTUFBUixHQUFlLFVBQVN6QixDQUFULEVBQVc7RUFBQyxPQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPTCxDQUFkO0FBQWdCLENBQTNDOztBQUM3YlMsT0FBTyxDQUFDc0IsUUFBUixHQUFpQixVQUFTMUIsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT2YsQ0FBZDtBQUFnQixDQUE3Qzs7QUFBOENtQixPQUFPLENBQUN1QixVQUFSLEdBQW1CLFVBQVMzQixDQUFULEVBQVc7RUFBQyxPQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxLQUFPWixDQUFkO0FBQWdCLENBQS9DOztBQUFnRGdCLE9BQU8sQ0FBQ3dCLFlBQVIsR0FBcUIsVUFBUzVCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9iLENBQWQ7QUFBZ0IsQ0FBakQ7O0FBQWtEaUIsT0FBTyxDQUFDeUIsVUFBUixHQUFtQixVQUFTN0IsQ0FBVCxFQUFXO0VBQUMsT0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQUQsS0FBT1AsQ0FBZDtBQUFnQixDQUEvQzs7QUFBZ0RXLE9BQU8sQ0FBQzBCLGNBQVIsR0FBdUIsVUFBUzlCLENBQVQsRUFBVztFQUFDLE9BQU9ELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEtBQU9OLENBQWQ7QUFBZ0IsQ0FBbkQ7O0FBQ2hNVSxPQUFPLENBQUMyQixrQkFBUixHQUEyQixVQUFTL0IsQ0FBVCxFQUFXO0VBQUMsT0FBTSxhQUFXLE9BQU9BLENBQWxCLElBQXFCLGVBQWEsT0FBT0EsQ0FBekMsSUFBNENBLENBQUMsS0FBR2QsQ0FBaEQsSUFBbURjLENBQUMsS0FBR1osQ0FBdkQsSUFBMERZLENBQUMsS0FBR2IsQ0FBOUQsSUFBaUVhLENBQUMsS0FBR1AsQ0FBckUsSUFBd0VPLENBQUMsS0FBR04sQ0FBNUUsSUFBK0VNLENBQUMsS0FBR0gsQ0FBbkYsSUFBc0YsYUFBVyxPQUFPRyxDQUFsQixJQUFxQixTQUFPQSxDQUE1QixLQUFnQ0EsQ0FBQyxDQUFDRSxRQUFGLEtBQWFOLENBQWIsSUFBZ0JJLENBQUMsQ0FBQ0UsUUFBRixLQUFhUCxDQUE3QixJQUFnQ0ssQ0FBQyxDQUFDRSxRQUFGLEtBQWFiLENBQTdDLElBQWdEVyxDQUFDLENBQUNFLFFBQUYsS0FBYVosQ0FBN0QsSUFBZ0VVLENBQUMsQ0FBQ0UsUUFBRixLQUFhVixDQUE3RSxJQUFnRlEsQ0FBQyxDQUFDRSxRQUFGLEtBQWFKLENBQTdGLElBQWdHLEtBQUssQ0FBTCxLQUFTRSxDQUFDLENBQUNnQyxXQUEzSSxDQUF0RixHQUE4TyxDQUFDLENBQS9PLEdBQWlQLENBQUMsQ0FBeFA7QUFBMFAsQ0FBalM7O0FBQWtTNUIsT0FBTyxDQUFDNkIsTUFBUixHQUFlbEMsQ0FBZiIsImZpbGUiOiJxVDEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGM9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxkPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxlPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxmPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxnPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxoPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LnNlcnZlcl9jb250ZXh0XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLG09U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikscD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSx1O3U9U3ltYm9sLmZvcihcInJlYWN0Lm1vZHVsZS5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiB2KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciByPWEuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBtOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgaDpjYXNlIGw6Y2FzZSBxOmNhc2UgcDpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gcn19Y2FzZSBjOnJldHVybiByfX19ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1nO2V4cG9ydHMuRWxlbWVudD1iO2V4cG9ydHMuRm9yd2FyZFJlZj1sO2V4cG9ydHMuRnJhZ21lbnQ9ZDtleHBvcnRzLkxhenk9cTtleHBvcnRzLk1lbW89cDtleHBvcnRzLlBvcnRhbD1jO2V4cG9ydHMuUHJvZmlsZXI9ZjtleHBvcnRzLlN0cmljdE1vZGU9ZTtleHBvcnRzLlN1c3BlbnNlPW07XG5leHBvcnRzLlN1c3BlbnNlTGlzdD1uO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bH07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1xfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXB9O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bX07ZXhwb3J0cy5pc1N1c3BlbnNlTGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09ZXx8YT09PW18fGE9PT1ufHxhPT09dHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09bHx8YS4kJHR5cGVvZj09PXV8fHZvaWQgMCE9PWEuZ2V0TW9kdWxlSWQpPyEwOiExfTtleHBvcnRzLnR5cGVPZj12O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///qT12\n')},"s+04":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return resolveAll; });\n/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nfunction resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  var called = [];\n  var index = -1;\n\n  while (++index < constructs.length) {\n    var resolve = constructs[index].resolveAll;\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n\n  return events;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwvaW5kZXguanM/YjNlZCJdLCJuYW1lcyI6WyJyZXNvbHZlQWxsIiwiY29uc3RydWN0cyIsImV2ZW50cyIsImNvbnRleHQiLCJjYWxsZWQiLCJpbmRleCIsImxlbmd0aCIsInJlc29sdmUiLCJpbmNsdWRlcyIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsVUFBVCxDQUFvQkMsVUFBcEIsRUFBZ0NDLE1BQWhDLEVBQXdDQyxPQUF4QyxFQUFpRDtFQUN0RDtFQUNBLElBQU1DLE1BQU0sR0FBRyxFQUFmO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBYjs7RUFFQSxPQUFPLEVBQUVBLEtBQUYsR0FBVUosVUFBVSxDQUFDSyxNQUE1QixFQUFvQztJQUNsQyxJQUFNQyxPQUFPLEdBQUdOLFVBQVUsQ0FBQ0ksS0FBRCxDQUFWLENBQWtCTCxVQUFsQzs7SUFFQSxJQUFJTyxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxRQUFQLENBQWdCRCxPQUFoQixDQUFoQixFQUEwQztNQUN4Q0wsTUFBTSxHQUFHSyxPQUFPLENBQUNMLE1BQUQsRUFBU0MsT0FBVCxDQUFoQjtNQUNBQyxNQUFNLENBQUNLLElBQVAsQ0FBWUYsT0FBWjtJQUNEO0VBQ0Y7O0VBRUQsT0FBT0wsTUFBUDtBQUNEIiwiZmlsZSI6InMrMDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXZlbnR9IEV2ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlJlc29sdmVyfSBSZXNvbHZlclxuICovXG5cbi8qKlxuICogQ2FsbCBhbGwgYHJlc29sdmVBbGxgcy5cbiAqXG4gKiBAcGFyYW0ge3tyZXNvbHZlQWxsPzogUmVzb2x2ZXJ9W119IGNvbnN0cnVjdHNcbiAqIEBwYXJhbSB7RXZlbnRbXX0gZXZlbnRzXG4gKiBAcGFyYW0ge1Rva2VuaXplQ29udGV4dH0gY29udGV4dFxuICogQHJldHVybnMge0V2ZW50W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQWxsKGNvbnN0cnVjdHMsIGV2ZW50cywgY29udGV4dCkge1xuICAvKiogQHR5cGUge1Jlc29sdmVyW119ICovXG4gIGNvbnN0IGNhbGxlZCA9IFtdXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjb25zdHJ1Y3RzLmxlbmd0aCkge1xuICAgIGNvbnN0IHJlc29sdmUgPSBjb25zdHJ1Y3RzW2luZGV4XS5yZXNvbHZlQWxsXG5cbiAgICBpZiAocmVzb2x2ZSAmJiAhY2FsbGVkLmluY2x1ZGVzKHJlc29sdmUpKSB7XG4gICAgICBldmVudHMgPSByZXNvbHZlKGV2ZW50cywgY29udGV4dClcbiAgICAgIGNhbGxlZC5wdXNoKHJlc29sdmUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///s+04\n")}}]);