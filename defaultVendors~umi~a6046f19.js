(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[15],{"1j5w":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "f", function() { return /* reexport */ SubMenu; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ es_MenuItem; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ es_MenuItem; });\n__webpack_require__.d(__webpack_exports__, "e", function() { return /* reexport */ MenuItemGroup; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ MenuItemGroup; });\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ Divider; });\n__webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ es_useFullPath; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/shallowequal/index.js\nvar shallowequal = __webpack_require__("Gytx");\nvar shallowequal_default = /*#__PURE__*/__webpack_require__.n(shallowequal);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js\nvar useMergedState = __webpack_require__("6cGi");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// EXTERNAL MODULE: ./node_modules/rc-overflow/es/index.js + 4 modules\nvar es = __webpack_require__("8z13");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/omit.js\nvar omit = __webpack_require__("bT9E");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMemo.js\nvar useMemo = __webpack_require__("YrtM");\n\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/context/MenuContext.js\n\n\nvar _excluded = ["children", "locked"];\n\n\n\nvar MenuContext = /*#__PURE__*/react["createContext"](null);\n\nfunction mergeProps(origin, target) {\n  var clone = Object(objectSpread2["a" /* default */])({}, origin);\n\n  Object.keys(target).forEach(function (key) {\n    var value = target[key];\n\n    if (value !== undefined) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n}\n\nfunction InheritableContextProvider(_ref) {\n  var children = _ref.children,\n      locked = _ref.locked,\n      restProps = Object(objectWithoutProperties["a" /* default */])(_ref, _excluded);\n\n  var context = react["useContext"](MenuContext);\n  var inheritableContext = Object(useMemo["a" /* default */])(function () {\n    return mergeProps(context, restProps);\n  }, [context, restProps], function (prev, next) {\n    return !locked && (prev[0] !== next[0] || !shallowequal_default()(prev[1], next[1]));\n  });\n  return /*#__PURE__*/react["createElement"](MenuContext.Provider, {\n    value: inheritableContext\n  }, children);\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useActive.js\n\n\nfunction useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {\n  var _React$useContext = react["useContext"](MenuContext),\n      activeKey = _React$useContext.activeKey,\n      onActive = _React$useContext.onActive,\n      onInactive = _React$useContext.onInactive;\n\n  var ret = {\n    active: activeKey === eventKey\n  }; // Skip when disabled\n\n  if (!disabled) {\n    ret.onMouseEnter = function (domEvent) {\n      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({\n        key: eventKey,\n        domEvent: domEvent\n      });\n      onActive(eventKey);\n    };\n\n    ret.onMouseLeave = function (domEvent) {\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({\n        key: eventKey,\n        domEvent: domEvent\n      });\n      onInactive(eventKey);\n    };\n  }\n\n  return ret;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/utils/warnUtil.js\n\nvar warnUtil_excluded = ["item"];\n\n/**\n * `onClick` event return `info.item` which point to react node directly.\n * We should warning this since it will not work on FC.\n */\n\nfunction warnItemProp(_ref) {\n  var item = _ref.item,\n      restInfo = Object(objectWithoutProperties["a" /* default */])(_ref, warnUtil_excluded);\n\n  Object.defineProperty(restInfo, \'item\', {\n    get: function get() {\n      Object(warning["a" /* default */])(false, \'`info.item` is deprecated since we will move to function component that not provides React Node instance in future.\');\n      return item;\n    }\n  });\n  return restInfo;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/Icon.js\n\n\nfunction Icon(_ref) {\n  var icon = _ref.icon,\n      props = _ref.props,\n      children = _ref.children;\n  var iconNode;\n\n  if (typeof icon === \'function\') {\n    iconNode = /*#__PURE__*/react["createElement"](icon, Object(objectSpread2["a" /* default */])({}, props));\n  } else {\n    // Compatible for origin definition\n    iconNode = icon;\n  }\n\n  return iconNode || children || null;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useDirectionStyle.js\n\n\nfunction useDirectionStyle(level) {\n  var _React$useContext = react["useContext"](MenuContext),\n      mode = _React$useContext.mode,\n      rtl = _React$useContext.rtl,\n      inlineIndent = _React$useContext.inlineIndent;\n\n  if (mode !== \'inline\') {\n    return null;\n  }\n\n  var len = level;\n  return rtl ? {\n    paddingRight: len * inlineIndent\n  } : {\n    paddingLeft: len * inlineIndent\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/context/PathContext.js\n\n\nvar EmptyList = [];\nvar PathRegisterContext = /*#__PURE__*/react["createContext"](null);\nfunction useMeasure() {\n  return react["useContext"](PathRegisterContext);\n} // ========================= Path Tracker ==========================\n\nvar PathTrackerContext = /*#__PURE__*/react["createContext"](EmptyList);\nfunction useFullPath(eventKey) {\n  var parentKeyPath = react["useContext"](PathTrackerContext);\n  return react["useMemo"](function () {\n    return eventKey !== undefined ? [].concat(Object(toConsumableArray["a" /* default */])(parentKeyPath), [eventKey]) : parentKeyPath;\n  }, [parentKeyPath, eventKey]);\n}\nvar PathUserContext = /*#__PURE__*/react["createContext"](null);\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/context/IdContext.js\n\nvar IdContext = /*#__PURE__*/react["createContext"](null);\nfunction getMenuId(uuid, eventKey) {\n  if (uuid === undefined) {\n    return null;\n  }\n\n  return "".concat(uuid, "-").concat(eventKey);\n}\n/**\n * Get `data-menu-id`\n */\n\nfunction useMenuId(eventKey) {\n  var id = react["useContext"](IdContext);\n  return getMenuId(id, eventKey);\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/context/PrivateContext.js\n\nvar PrivateContext = /*#__PURE__*/react["createContext"]({});\n/* harmony default export */ var context_PrivateContext = (PrivateContext);\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/MenuItem.js\n\n\n\n\n\n\n\n\n\nvar MenuItem_excluded = ["title", "attribute", "elementRef"],\n    _excluded2 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"],\n    _excluded3 = ["active"];\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Since Menu event provide the `info.item` which point to the MenuItem node instance.\n// We have to use class component here.\n// This should be removed from doc & api in future.\n\nvar MenuItem_LegacyMenuItem = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(LegacyMenuItem, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(LegacyMenuItem);\n\n  function LegacyMenuItem() {\n    Object(classCallCheck["a" /* default */])(this, LegacyMenuItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  Object(createClass["a" /* default */])(LegacyMenuItem, [{\n    key: "render",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          attribute = _this$props.attribute,\n          elementRef = _this$props.elementRef,\n          restProps = Object(objectWithoutProperties["a" /* default */])(_this$props, MenuItem_excluded);\n\n      var passedProps = Object(omit["a" /* default */])(restProps, [\'eventKey\']);\n      Object(warning["a" /* default */])(!attribute, \'`attribute` of Menu.Item is deprecated. Please pass attribute directly.\');\n      return /*#__PURE__*/react["createElement"](es["a" /* default */].Item, Object(esm_extends["a" /* default */])({}, attribute, {\n        title: typeof title === \'string\' ? title : undefined\n      }, passedProps, {\n        ref: elementRef\n      }));\n    }\n  }]);\n\n  return LegacyMenuItem;\n}(react["Component"]);\n/**\n * Real Menu Item component\n */\n\n\nvar MenuItem_InternalMenuItem = function InternalMenuItem(props) {\n  var _classNames;\n\n  var style = props.style,\n      className = props.className,\n      eventKey = props.eventKey,\n      warnKey = props.warnKey,\n      disabled = props.disabled,\n      itemIcon = props.itemIcon,\n      children = props.children,\n      role = props.role,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      onKeyDown = props.onKeyDown,\n      onFocus = props.onFocus,\n      restProps = Object(objectWithoutProperties["a" /* default */])(props, _excluded2);\n\n  var domDataId = useMenuId(eventKey);\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      onItemClick = _React$useContext.onItemClick,\n      contextDisabled = _React$useContext.disabled,\n      overflowDisabled = _React$useContext.overflowDisabled,\n      contextItemIcon = _React$useContext.itemIcon,\n      selectedKeys = _React$useContext.selectedKeys,\n      onActive = _React$useContext.onActive;\n\n  var _React$useContext2 = react["useContext"](context_PrivateContext),\n      _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;\n\n  var itemCls = "".concat(prefixCls, "-item");\n  var legacyMenuItemRef = react["useRef"]();\n  var elementRef = react["useRef"]();\n  var mergedDisabled = contextDisabled || disabled;\n  var connectedKeys = useFullPath(eventKey); // ================================ Warn ================================\n\n  if (false) {} // ============================= Info =============================\n\n\n  var getEventInfo = function getEventInfo(e) {\n    return {\n      key: eventKey,\n      // Note: For legacy code is reversed which not like other antd component\n      keyPath: Object(toConsumableArray["a" /* default */])(connectedKeys).reverse(),\n      item: legacyMenuItemRef.current,\n      domEvent: e\n    };\n  }; // ============================= Icon =============================\n\n\n  var mergedItemIcon = itemIcon || contextItemIcon; // ============================ Active ============================\n\n  var _useActive = useActive(eventKey, mergedDisabled, onMouseEnter, onMouseLeave),\n      active = _useActive.active,\n      activeProps = Object(objectWithoutProperties["a" /* default */])(_useActive, _excluded3); // ============================ Select ============================\n\n\n  var selected = selectedKeys.includes(eventKey); // ======================== DirectionStyle ========================\n\n  var directionStyle = useDirectionStyle(connectedKeys.length); // ============================ Events ============================\n\n  var onInternalClick = function onInternalClick(e) {\n    if (mergedDisabled) {\n      return;\n    }\n\n    var info = getEventInfo(e);\n    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));\n    onItemClick(info);\n  };\n\n  var onInternalKeyDown = function onInternalKeyDown(e) {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n\n    if (e.which === KeyCode["a" /* default */].ENTER) {\n      var info = getEventInfo(e); // Legacy. Key will also trigger click event\n\n      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));\n      onItemClick(info);\n    }\n  };\n  /**\n   * Used for accessibility. Helper will focus element without key board.\n   * We should manually trigger an active\n   */\n\n\n  var onInternalFocus = function onInternalFocus(e) {\n    onActive(eventKey);\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);\n  }; // ============================ Render ============================\n\n\n  var optionRoleProps = {};\n\n  if (props.role === \'option\') {\n    optionRoleProps[\'aria-selected\'] = selected;\n  }\n\n  var renderNode = /*#__PURE__*/react["createElement"](MenuItem_LegacyMenuItem, Object(esm_extends["a" /* default */])({\n    ref: legacyMenuItemRef,\n    elementRef: elementRef,\n    role: role === null ? \'none\' : role || \'menuitem\',\n    tabIndex: disabled ? null : -1,\n    "data-menu-id": overflowDisabled && domDataId ? null : domDataId\n  }, restProps, activeProps, optionRoleProps, {\n    component: "li",\n    "aria-disabled": disabled,\n    style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, directionStyle), style),\n    className: classnames_default()(itemCls, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(itemCls, "-active"), active), Object(defineProperty["a" /* default */])(_classNames, "".concat(itemCls, "-selected"), selected), Object(defineProperty["a" /* default */])(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),\n    onClick: onInternalClick,\n    onKeyDown: onInternalKeyDown,\n    onFocus: onInternalFocus\n  }), children, /*#__PURE__*/react["createElement"](Icon, {\n    props: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, props), {}, {\n      isSelected: selected\n    }),\n    icon: mergedItemIcon\n  }));\n\n  if (_internalRenderMenuItem) {\n    renderNode = _internalRenderMenuItem(renderNode, props, {\n      selected: selected\n    });\n  }\n\n  return renderNode;\n};\n\nfunction MenuItem(props) {\n  var eventKey = props.eventKey; // ==================== Record KeyPath ====================\n\n  var measure = useMeasure();\n  var connectedKeyPath = useFullPath(eventKey); // eslint-disable-next-line consistent-return\n\n  react["useEffect"](function () {\n    if (measure) {\n      measure.registerPath(eventKey, connectedKeyPath);\n      return function () {\n        measure.unregisterPath(eventKey, connectedKeyPath);\n      };\n    }\n  }, [connectedKeyPath]);\n\n  if (measure) {\n    return null;\n  } // ======================== Render ========================\n\n\n  return /*#__PURE__*/react["createElement"](MenuItem_InternalMenuItem, props);\n}\n\n/* harmony default export */ var es_MenuItem = (MenuItem);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__("Zm9Q");\n\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/utils/nodeUtil.js\n\n\n\n\nvar nodeUtil_excluded = ["label", "children", "key", "type"];\n\n\n\nfunction parseChildren(children, keyPath) {\n  return Object(toArray["a" /* default */])(children).map(function (child, index) {\n    if ( /*#__PURE__*/react["isValidElement"](child)) {\n      var _child$props$eventKey, _child$props;\n\n      var key = child.key;\n      var eventKey = (_child$props$eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _child$props$eventKey !== void 0 ? _child$props$eventKey : key;\n      var emptyKey = eventKey === null || eventKey === undefined;\n\n      if (emptyKey) {\n        eventKey = "tmp_key-".concat([].concat(Object(toConsumableArray["a" /* default */])(keyPath), [index]).join(\'-\'));\n      }\n\n      var cloneProps = {\n        key: eventKey,\n        eventKey: eventKey\n      };\n\n      if (false) {}\n\n      return /*#__PURE__*/react["cloneElement"](child, cloneProps);\n    }\n\n    return child;\n  });\n}\n\nfunction convertItemsToNodes(list) {\n  return (list || []).map(function (opt, index) {\n    if (opt && Object(esm_typeof["a" /* default */])(opt) === \'object\') {\n      var label = opt.label,\n          children = opt.children,\n          key = opt.key,\n          type = opt.type,\n          restProps = Object(objectWithoutProperties["a" /* default */])(opt, nodeUtil_excluded);\n\n      var mergedKey = key !== null && key !== void 0 ? key : "tmp-".concat(index); // MenuItemGroup & SubMenuItem\n\n      if (children || type === \'group\') {\n        if (type === \'group\') {\n          // Group\n          return /*#__PURE__*/react["createElement"](MenuItemGroup, Object(esm_extends["a" /* default */])({\n            key: mergedKey\n          }, restProps, {\n            title: label\n          }), convertItemsToNodes(children));\n        } // Sub Menu\n\n\n        return /*#__PURE__*/react["createElement"](SubMenu, Object(esm_extends["a" /* default */])({\n          key: mergedKey\n        }, restProps, {\n          title: label\n        }), convertItemsToNodes(children));\n      } // MenuItem & Divider\n\n\n      if (type === \'divider\') {\n        return /*#__PURE__*/react["createElement"](Divider, Object(esm_extends["a" /* default */])({\n          key: mergedKey\n        }, restProps));\n      }\n\n      return /*#__PURE__*/react["createElement"](es_MenuItem, Object(esm_extends["a" /* default */])({\n        key: mergedKey\n      }, restProps), label);\n    }\n\n    return null;\n  }).filter(function (opt) {\n    return opt;\n  });\n}\n\nfunction parseItems(children, items, keyPath) {\n  var childNodes = children;\n\n  if (items) {\n    childNodes = convertItemsToNodes(items);\n  }\n\n  return parseChildren(childNodes, keyPath);\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useMemoCallback.js\n\n/**\n * Cache callback function that always return same ref instead.\n * This is used for context optimization.\n */\n\nfunction useMemoCallback(func) {\n  var funRef = react["useRef"](func);\n  funRef.current = func;\n  var callback = react["useCallback"](function () {\n    var _funRef$current;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));\n  }, []);\n  return func ? callback : undefined;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/SubMenu/SubMenuList.js\n\n\nvar SubMenuList_excluded = ["className", "children"];\n\n\n\n\nvar SubMenuList_InternalSubMenuList = function InternalSubMenuList(_ref, ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      restProps = Object(objectWithoutProperties["a" /* default */])(_ref, SubMenuList_excluded);\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      mode = _React$useContext.mode,\n      rtl = _React$useContext.rtl;\n\n  return /*#__PURE__*/react["createElement"]("ul", Object(esm_extends["a" /* default */])({\n    className: classnames_default()(prefixCls, rtl && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === \'inline\' ? \'inline\' : \'vertical\'), className)\n  }, restProps, {\n    "data-menu-list": true,\n    ref: ref\n  }), children);\n};\n\nvar SubMenuList = /*#__PURE__*/react["forwardRef"](SubMenuList_InternalSubMenuList);\nSubMenuList.displayName = \'SubMenuList\';\n/* harmony default export */ var SubMenu_SubMenuList = (SubMenuList);\n// EXTERNAL MODULE: ./node_modules/rc-trigger/es/index.js + 9 modules\nvar rc_trigger_es = __webpack_require__("uciX");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/placements.js\nvar autoAdjustOverflow = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar placements = {\n  topLeft: {\n    points: [\'bl\', \'tl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -7]\n  },\n  bottomLeft: {\n    points: [\'tl\', \'bl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 7]\n  },\n  leftTop: {\n    points: [\'tr\', \'tl\'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0]\n  },\n  rightTop: {\n    points: [\'tl\', \'tr\'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0]\n  }\n};\nvar placementsRtl = {\n  topLeft: {\n    points: [\'bl\', \'tl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -7]\n  },\n  bottomLeft: {\n    points: [\'tl\', \'bl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 7]\n  },\n  rightTop: {\n    points: [\'tr\', \'tl\'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0]\n  },\n  leftTop: {\n    points: [\'tl\', \'tr\'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0]\n  }\n};\n/* harmony default export */ var es_placements = (placements);\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/utils/motionUtil.js\nfunction getMotion(mode, motion, defaultMotions) {\n  if (motion) {\n    return motion;\n  }\n\n  if (defaultMotions) {\n    return defaultMotions[mode] || defaultMotions.other;\n  }\n\n  return undefined;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/SubMenu/PopupTrigger.js\n\n\n\n\n\n\n\n\n\n\nvar popupPlacementMap = {\n  horizontal: \'bottomLeft\',\n  vertical: \'rightTop\',\n  \'vertical-left\': \'rightTop\',\n  \'vertical-right\': \'leftTop\'\n};\nfunction PopupTrigger(_ref) {\n  var prefixCls = _ref.prefixCls,\n      visible = _ref.visible,\n      children = _ref.children,\n      popup = _ref.popup,\n      popupClassName = _ref.popupClassName,\n      popupOffset = _ref.popupOffset,\n      disabled = _ref.disabled,\n      mode = _ref.mode,\n      onVisibleChange = _ref.onVisibleChange;\n\n  var _React$useContext = react["useContext"](MenuContext),\n      getPopupContainer = _React$useContext.getPopupContainer,\n      rtl = _React$useContext.rtl,\n      subMenuOpenDelay = _React$useContext.subMenuOpenDelay,\n      subMenuCloseDelay = _React$useContext.subMenuCloseDelay,\n      builtinPlacements = _React$useContext.builtinPlacements,\n      triggerSubMenuAction = _React$useContext.triggerSubMenuAction,\n      forceSubMenuRender = _React$useContext.forceSubMenuRender,\n      rootClassName = _React$useContext.rootClassName,\n      motion = _React$useContext.motion,\n      defaultMotions = _React$useContext.defaultMotions;\n\n  var _React$useState = react["useState"](false),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      innerVisible = _React$useState2[0],\n      setInnerVisible = _React$useState2[1];\n\n  var placement = rtl ? Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, placementsRtl), builtinPlacements) : Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, placements), builtinPlacements);\n  var popupPlacement = popupPlacementMap[mode];\n  var targetMotion = getMotion(mode, motion, defaultMotions);\n\n  var mergedMotion = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, targetMotion), {}, {\n    leavedClassName: "".concat(prefixCls, "-hidden"),\n    removeOnLeave: false,\n    motionAppear: true\n  }); // Delay to change visible\n\n\n  var visibleRef = react["useRef"]();\n  react["useEffect"](function () {\n    visibleRef.current = Object(raf["a" /* default */])(function () {\n      setInnerVisible(visible);\n    });\n    return function () {\n      raf["a" /* default */].cancel(visibleRef.current);\n    };\n  }, [visible]);\n  return /*#__PURE__*/react["createElement"](rc_trigger_es["a" /* default */], {\n    prefixCls: prefixCls,\n    popupClassName: classnames_default()("".concat(prefixCls, "-popup"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-rtl"), rtl), popupClassName, rootClassName),\n    stretch: mode === \'horizontal\' ? \'minWidth\' : null,\n    getPopupContainer: getPopupContainer,\n    builtinPlacements: placement,\n    popupPlacement: popupPlacement,\n    popupVisible: innerVisible,\n    popup: popup,\n    popupAlign: popupOffset && {\n      offset: popupOffset\n    },\n    action: disabled ? [] : [triggerSubMenuAction],\n    mouseEnterDelay: subMenuOpenDelay,\n    mouseLeaveDelay: subMenuCloseDelay,\n    onPopupVisibleChange: onVisibleChange,\n    forceRender: forceSubMenuRender,\n    popupMotion: mergedMotion\n  }, children);\n}\n// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 11 modules\nvar rc_motion_es = __webpack_require__("8XRh");\n\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js\n\n\n\n\n\n\n\n\nfunction InlineSubMenuList(_ref) {\n  var id = _ref.id,\n      open = _ref.open,\n      keyPath = _ref.keyPath,\n      children = _ref.children;\n  var fixedMode = \'inline\';\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      forceSubMenuRender = _React$useContext.forceSubMenuRender,\n      motion = _React$useContext.motion,\n      defaultMotions = _React$useContext.defaultMotions,\n      mode = _React$useContext.mode; // Always use latest mode check\n\n\n  var sameModeRef = react["useRef"](false);\n  sameModeRef.current = mode === fixedMode; // We record `destroy` mark here since when mode change from `inline` to others.\n  // The inline list should remove when motion end.\n\n  var _React$useState = react["useState"](!sameModeRef.current),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      destroy = _React$useState2[0],\n      setDestroy = _React$useState2[1];\n\n  var mergedOpen = sameModeRef.current ? open : false; // ================================= Effect =================================\n  // Reset destroy state when mode change back\n\n  react["useEffect"](function () {\n    if (sameModeRef.current) {\n      setDestroy(false);\n    }\n  }, [mode]); // ================================= Render =================================\n\n  var mergedMotion = Object(objectSpread2["a" /* default */])({}, getMotion(fixedMode, motion, defaultMotions)); // No need appear since nest inlineCollapse changed\n\n\n  if (keyPath.length > 1) {\n    mergedMotion.motionAppear = false;\n  } // Hide inline list when mode changed and motion end\n\n\n  var originOnVisibleChanged = mergedMotion.onVisibleChanged;\n\n  mergedMotion.onVisibleChanged = function (newVisible) {\n    if (!sameModeRef.current && !newVisible) {\n      setDestroy(true);\n    }\n\n    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);\n  };\n\n  if (destroy) {\n    return null;\n  }\n\n  return /*#__PURE__*/react["createElement"](InheritableContextProvider, {\n    mode: fixedMode,\n    locked: !sameModeRef.current\n  }, /*#__PURE__*/react["createElement"](rc_motion_es["b" /* default */], Object(esm_extends["a" /* default */])({\n    visible: mergedOpen\n  }, mergedMotion, {\n    forceRender: forceSubMenuRender,\n    removeOnLeave: false,\n    leavedClassName: "".concat(prefixCls, "-hidden")\n  }), function (_ref2) {\n    var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n    return /*#__PURE__*/react["createElement"](SubMenu_SubMenuList, {\n      id: id,\n      className: motionClassName,\n      style: motionStyle\n    }, children);\n  }));\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/SubMenu/index.js\n\n\n\n\n\nvar SubMenu_excluded = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"],\n    SubMenu_excluded2 = ["active"];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar SubMenu_InternalSubMenu = function InternalSubMenu(props) {\n  var _classNames;\n\n  var style = props.style,\n      className = props.className,\n      title = props.title,\n      eventKey = props.eventKey,\n      warnKey = props.warnKey,\n      disabled = props.disabled,\n      internalPopupClose = props.internalPopupClose,\n      children = props.children,\n      itemIcon = props.itemIcon,\n      expandIcon = props.expandIcon,\n      popupClassName = props.popupClassName,\n      popupOffset = props.popupOffset,\n      onClick = props.onClick,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onTitleClick = props.onTitleClick,\n      onTitleMouseEnter = props.onTitleMouseEnter,\n      onTitleMouseLeave = props.onTitleMouseLeave,\n      restProps = Object(objectWithoutProperties["a" /* default */])(props, SubMenu_excluded);\n\n  var domDataId = useMenuId(eventKey);\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      mode = _React$useContext.mode,\n      openKeys = _React$useContext.openKeys,\n      contextDisabled = _React$useContext.disabled,\n      overflowDisabled = _React$useContext.overflowDisabled,\n      activeKey = _React$useContext.activeKey,\n      selectedKeys = _React$useContext.selectedKeys,\n      contextItemIcon = _React$useContext.itemIcon,\n      contextExpandIcon = _React$useContext.expandIcon,\n      onItemClick = _React$useContext.onItemClick,\n      onOpenChange = _React$useContext.onOpenChange,\n      onActive = _React$useContext.onActive;\n\n  var _React$useContext2 = react["useContext"](context_PrivateContext),\n      _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;\n\n  var _React$useContext3 = react["useContext"](PathUserContext),\n      isSubPathKey = _React$useContext3.isSubPathKey;\n\n  var connectedPath = useFullPath();\n  var subMenuPrefixCls = "".concat(prefixCls, "-submenu");\n  var mergedDisabled = contextDisabled || disabled;\n  var elementRef = react["useRef"]();\n  var popupRef = react["useRef"](); // ================================ Warn ================================\n\n  if (false) {} // ================================ Icon ================================\n\n\n  var mergedItemIcon = itemIcon || contextItemIcon;\n  var mergedExpandIcon = expandIcon || contextExpandIcon; // ================================ Open ================================\n\n  var originOpen = openKeys.includes(eventKey);\n  var open = !overflowDisabled && originOpen; // =============================== Select ===============================\n\n  var childrenSelected = isSubPathKey(selectedKeys, eventKey); // =============================== Active ===============================\n\n  var _useActive = useActive(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave),\n      active = _useActive.active,\n      activeProps = Object(objectWithoutProperties["a" /* default */])(_useActive, SubMenu_excluded2); // Fallback of active check to avoid hover on menu title or disabled item\n\n\n  var _React$useState = react["useState"](false),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      childrenActive = _React$useState2[0],\n      setChildrenActive = _React$useState2[1];\n\n  var triggerChildrenActive = function triggerChildrenActive(newActive) {\n    if (!mergedDisabled) {\n      setChildrenActive(newActive);\n    }\n  };\n\n  var onInternalMouseEnter = function onInternalMouseEnter(domEvent) {\n    triggerChildrenActive(true);\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({\n      key: eventKey,\n      domEvent: domEvent\n    });\n  };\n\n  var onInternalMouseLeave = function onInternalMouseLeave(domEvent) {\n    triggerChildrenActive(false);\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({\n      key: eventKey,\n      domEvent: domEvent\n    });\n  };\n\n  var mergedActive = react["useMemo"](function () {\n    if (active) {\n      return active;\n    }\n\n    if (mode !== \'inline\') {\n      return childrenActive || isSubPathKey([activeKey], eventKey);\n    }\n\n    return false;\n  }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]); // ========================== DirectionStyle ==========================\n\n  var directionStyle = useDirectionStyle(connectedPath.length); // =============================== Events ===============================\n  // >>>> Title click\n\n  var onInternalTitleClick = function onInternalTitleClick(e) {\n    // Skip if disabled\n    if (mergedDisabled) {\n      return;\n    }\n\n    onTitleClick === null || onTitleClick === void 0 ? void 0 : onTitleClick({\n      key: eventKey,\n      domEvent: e\n    }); // Trigger open by click when mode is `inline`\n\n    if (mode === \'inline\') {\n      onOpenChange(eventKey, !originOpen);\n    }\n  }; // >>>> Context for children click\n\n\n  var onMergedItemClick = useMemoCallback(function (info) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));\n    onItemClick(info);\n  }); // >>>>> Visible change\n\n  var onPopupVisibleChange = function onPopupVisibleChange(newVisible) {\n    if (mode !== \'inline\') {\n      onOpenChange(eventKey, newVisible);\n    }\n  };\n  /**\n   * Used for accessibility. Helper will focus element without key board.\n   * We should manually trigger an active\n   */\n\n\n  var onInternalFocus = function onInternalFocus() {\n    onActive(eventKey);\n  }; // =============================== Render ===============================\n\n\n  var popupId = domDataId && "".concat(domDataId, "-popup"); // >>>>> Title\n\n  var titleNode = /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({\n    role: "menuitem",\n    style: directionStyle,\n    className: "".concat(subMenuPrefixCls, "-title"),\n    tabIndex: mergedDisabled ? null : -1,\n    ref: elementRef,\n    title: typeof title === \'string\' ? title : null,\n    "data-menu-id": overflowDisabled && domDataId ? null : domDataId,\n    "aria-expanded": open,\n    "aria-haspopup": true,\n    "aria-controls": popupId,\n    "aria-disabled": mergedDisabled,\n    onClick: onInternalTitleClick,\n    onFocus: onInternalFocus\n  }, activeProps), title, /*#__PURE__*/react["createElement"](Icon, {\n    icon: mode !== \'horizontal\' ? mergedExpandIcon : null,\n    props: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, props), {}, {\n      isOpen: open,\n      // [Legacy] Not sure why need this mark\n      isSubMenu: true\n    })\n  }, /*#__PURE__*/react["createElement"]("i", {\n    className: "".concat(subMenuPrefixCls, "-arrow")\n  }))); // Cache mode if it change to `inline` which do not have popup motion\n\n  var triggerModeRef = react["useRef"](mode);\n\n  if (mode !== \'inline\') {\n    triggerModeRef.current = connectedPath.length > 1 ? \'vertical\' : mode;\n  }\n\n  if (!overflowDisabled) {\n    var triggerMode = triggerModeRef.current; // Still wrap with Trigger here since we need avoid react re-mount dom node\n    // Which makes motion failed\n\n    titleNode = /*#__PURE__*/react["createElement"](PopupTrigger, {\n      mode: triggerMode,\n      prefixCls: subMenuPrefixCls,\n      visible: !internalPopupClose && open && mode !== \'inline\',\n      popupClassName: popupClassName,\n      popupOffset: popupOffset,\n      popup: /*#__PURE__*/react["createElement"](InheritableContextProvider // Special handle of horizontal mode\n      , {\n        mode: triggerMode === \'horizontal\' ? \'vertical\' : triggerMode\n      }, /*#__PURE__*/react["createElement"](SubMenu_SubMenuList, {\n        id: popupId,\n        ref: popupRef\n      }, children)),\n      disabled: mergedDisabled,\n      onVisibleChange: onPopupVisibleChange\n    }, titleNode);\n  } // >>>>> List node\n\n\n  var listNode = /*#__PURE__*/react["createElement"](es["a" /* default */].Item, Object(esm_extends["a" /* default */])({\n    role: "none"\n  }, restProps, {\n    component: "li",\n    style: style,\n    className: classnames_default()(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(subMenuPrefixCls, "-open"), open), Object(defineProperty["a" /* default */])(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), Object(defineProperty["a" /* default */])(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), Object(defineProperty["a" /* default */])(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),\n    onMouseEnter: onInternalMouseEnter,\n    onMouseLeave: onInternalMouseLeave\n  }), titleNode, !overflowDisabled && /*#__PURE__*/react["createElement"](InlineSubMenuList, {\n    id: popupId,\n    open: open,\n    keyPath: connectedPath\n  }, children));\n\n  if (_internalRenderSubMenuItem) {\n    listNode = _internalRenderSubMenuItem(listNode, props, {\n      selected: childrenSelected,\n      active: mergedActive,\n      open: open,\n      disabled: mergedDisabled\n    });\n  } // >>>>> Render\n\n\n  return /*#__PURE__*/react["createElement"](InheritableContextProvider, {\n    onItemClick: onMergedItemClick,\n    mode: mode === \'horizontal\' ? \'vertical\' : mode,\n    itemIcon: mergedItemIcon,\n    expandIcon: mergedExpandIcon\n  }, listNode);\n};\n\nfunction SubMenu(props) {\n  var eventKey = props.eventKey,\n      children = props.children;\n  var connectedKeyPath = useFullPath(eventKey);\n  var childList = parseChildren(children, connectedKeyPath); // ==================== Record KeyPath ====================\n\n  var measure = useMeasure(); // eslint-disable-next-line consistent-return\n\n  react["useEffect"](function () {\n    if (measure) {\n      measure.registerPath(eventKey, connectedKeyPath);\n      return function () {\n        measure.unregisterPath(eventKey, connectedKeyPath);\n      };\n    }\n  }, [connectedKeyPath]);\n  var renderNode; // ======================== Render ========================\n\n  if (measure) {\n    renderNode = childList;\n  } else {\n    renderNode = /*#__PURE__*/react["createElement"](SubMenu_InternalSubMenu, props, childList);\n  }\n\n  return /*#__PURE__*/react["createElement"](PathTrackerContext.Provider, {\n    value: connectedKeyPath\n  }, renderNode);\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/focus.js\nvar Dom_focus = __webpack_require__("qE6j");\n\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useAccessibility.js\n\n\n\n\n\n // destruct to reduce minify size\n\nvar LEFT = KeyCode["a" /* default */].LEFT,\n    RIGHT = KeyCode["a" /* default */].RIGHT,\n    UP = KeyCode["a" /* default */].UP,\n    DOWN = KeyCode["a" /* default */].DOWN,\n    ENTER = KeyCode["a" /* default */].ENTER,\n    ESC = KeyCode["a" /* default */].ESC,\n    HOME = KeyCode["a" /* default */].HOME,\n    END = KeyCode["a" /* default */].END;\nvar ArrowKeys = [UP, DOWN, LEFT, RIGHT];\n\nfunction getOffset(mode, isRootLevel, isRtl, which) {\n  var _inline, _horizontal, _vertical, _offsets$;\n\n  var prev = \'prev\';\n  var next = \'next\';\n  var children = \'children\';\n  var parent = \'parent\'; // Inline enter is special that we use unique operation\n\n  if (mode === \'inline\' && which === ENTER) {\n    return {\n      inlineTrigger: true\n    };\n  }\n\n  var inline = (_inline = {}, Object(defineProperty["a" /* default */])(_inline, UP, prev), Object(defineProperty["a" /* default */])(_inline, DOWN, next), _inline);\n  var horizontal = (_horizontal = {}, Object(defineProperty["a" /* default */])(_horizontal, LEFT, isRtl ? next : prev), Object(defineProperty["a" /* default */])(_horizontal, RIGHT, isRtl ? prev : next), Object(defineProperty["a" /* default */])(_horizontal, DOWN, children), Object(defineProperty["a" /* default */])(_horizontal, ENTER, children), _horizontal);\n  var vertical = (_vertical = {}, Object(defineProperty["a" /* default */])(_vertical, UP, prev), Object(defineProperty["a" /* default */])(_vertical, DOWN, next), Object(defineProperty["a" /* default */])(_vertical, ENTER, children), Object(defineProperty["a" /* default */])(_vertical, ESC, parent), Object(defineProperty["a" /* default */])(_vertical, LEFT, isRtl ? children : parent), Object(defineProperty["a" /* default */])(_vertical, RIGHT, isRtl ? parent : children), _vertical);\n  var offsets = {\n    inline: inline,\n    horizontal: horizontal,\n    vertical: vertical,\n    inlineSub: inline,\n    horizontalSub: vertical,\n    verticalSub: vertical\n  };\n  var type = (_offsets$ = offsets["".concat(mode).concat(isRootLevel ? \'\' : \'Sub\')]) === null || _offsets$ === void 0 ? void 0 : _offsets$[which];\n\n  switch (type) {\n    case prev:\n      return {\n        offset: -1,\n        sibling: true\n      };\n\n    case next:\n      return {\n        offset: 1,\n        sibling: true\n      };\n\n    case parent:\n      return {\n        offset: -1,\n        sibling: false\n      };\n\n    case children:\n      return {\n        offset: 1,\n        sibling: false\n      };\n\n    default:\n      return null;\n  }\n}\n\nfunction findContainerUL(element) {\n  var current = element;\n\n  while (current) {\n    if (current.getAttribute(\'data-menu-list\')) {\n      return current;\n    }\n\n    current = current.parentElement;\n  } // Normally should not reach this line\n\n  /* istanbul ignore next */\n\n\n  return null;\n}\n/**\n * Find focused element within element set provided\n */\n\n\nfunction getFocusElement(activeElement, elements) {\n  var current = activeElement || document.activeElement;\n\n  while (current) {\n    if (elements.has(current)) {\n      return current;\n    }\n\n    current = current.parentElement;\n  }\n\n  return null;\n}\n/**\n * Get focusable elements from the element set under provided container\n */\n\n\nfunction getFocusableElements(container, elements) {\n  var list = Object(Dom_focus["a" /* getFocusNodeList */])(container, true);\n  return list.filter(function (ele) {\n    return elements.has(ele);\n  });\n}\n\nfunction getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1; // Key on the menu item will not get validate parent container\n\n  if (!parentQueryContainer) {\n    return null;\n  } // List current level menu item elements\n\n\n  var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements); // Find next focus index\n\n  var count = sameLevelFocusableMenuElementList.length;\n  var focusIndex = sameLevelFocusableMenuElementList.findIndex(function (ele) {\n    return focusMenuElement === ele;\n  });\n\n  if (offset < 0) {\n    if (focusIndex === -1) {\n      focusIndex = count - 1;\n    } else {\n      focusIndex -= 1;\n    }\n  } else if (offset > 0) {\n    focusIndex += 1;\n  }\n\n  focusIndex = (focusIndex + count) % count; // Focus menu item\n\n  return sameLevelFocusableMenuElementList[focusIndex];\n}\n\nfunction useAccessibility(mode, activeKey, isRtl, id, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {\n  var rafRef = react["useRef"]();\n  var activeRef = react["useRef"]();\n  activeRef.current = activeKey;\n\n  var cleanRaf = function cleanRaf() {\n    raf["a" /* default */].cancel(rafRef.current);\n  };\n\n  react["useEffect"](function () {\n    return function () {\n      cleanRaf();\n    };\n  }, []);\n  return function (e) {\n    var which = e.which;\n\n    if ([].concat(ArrowKeys, [ENTER, ESC, HOME, END]).includes(which)) {\n      // Convert key to elements\n      var elements;\n      var key2element;\n      var element2key; // >>> Wrap as function since we use raf for some case\n\n      var refreshElements = function refreshElements() {\n        elements = new Set();\n        key2element = new Map();\n        element2key = new Map();\n        var keys = getKeys();\n        keys.forEach(function (key) {\n          var element = document.querySelector("[data-menu-id=\'".concat(getMenuId(id, key), "\']"));\n\n          if (element) {\n            elements.add(element);\n            element2key.set(element, key);\n            key2element.set(key, element);\n          }\n        });\n        return elements;\n      };\n\n      refreshElements(); // First we should find current focused MenuItem/SubMenu element\n\n      var activeElement = key2element.get(activeKey);\n      var focusMenuElement = getFocusElement(activeElement, elements);\n      var focusMenuKey = element2key.get(focusMenuElement);\n      var offsetObj = getOffset(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which); // Some mode do not have fully arrow operation like inline\n\n      if (!offsetObj && which !== HOME && which !== END) {\n        return;\n      } // Arrow prevent default to avoid page scroll\n\n\n      if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {\n        e.preventDefault();\n      }\n\n      var tryFocus = function tryFocus(menuElement) {\n        if (menuElement) {\n          var focusTargetElement = menuElement; // Focus to link instead of menu item if possible\n\n          var link = menuElement.querySelector(\'a\');\n\n          if (link === null || link === void 0 ? void 0 : link.getAttribute(\'href\')) {\n            focusTargetElement = link;\n          }\n\n          var targetKey = element2key.get(menuElement);\n          triggerActiveKey(targetKey);\n          /**\n           * Do not `useEffect` here since `tryFocus` may trigger async\n           * which makes React sync update the `activeKey`\n           * that force render before `useRef` set the next activeKey\n           */\n\n          cleanRaf();\n          rafRef.current = Object(raf["a" /* default */])(function () {\n            if (activeRef.current === targetKey) {\n              focusTargetElement.focus();\n            }\n          });\n        }\n      };\n\n      if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {\n        // ========================== Sibling ==========================\n        // Find walkable focus menu element container\n        var parentQueryContainer;\n\n        if (!focusMenuElement || mode === \'inline\') {\n          parentQueryContainer = containerRef.current;\n        } else {\n          parentQueryContainer = findContainerUL(focusMenuElement);\n        } // Get next focus element\n\n\n        var targetElement;\n        var focusableElements = getFocusableElements(parentQueryContainer, elements);\n\n        if (which === HOME) {\n          targetElement = focusableElements[0];\n        } else if (which === END) {\n          targetElement = focusableElements[focusableElements.length - 1];\n        } else {\n          targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);\n        } // Focus menu item\n\n\n        tryFocus(targetElement); // ======================= InlineTrigger =======================\n      } else if (offsetObj.inlineTrigger) {\n        // Inline trigger no need switch to sub menu item\n        triggerAccessibilityOpen(focusMenuKey); // =========================== Level ===========================\n      } else if (offsetObj.offset > 0) {\n        triggerAccessibilityOpen(focusMenuKey, true);\n        cleanRaf();\n        rafRef.current = Object(raf["a" /* default */])(function () {\n          // Async should resync elements\n          refreshElements();\n          var controlId = focusMenuElement.getAttribute(\'aria-controls\');\n          var subQueryContainer = document.getElementById(controlId); // Get sub focusable menu item\n\n          var targetElement = getNextFocusElement(subQueryContainer, elements); // Focus menu item\n\n          tryFocus(targetElement);\n        }, 5);\n      } else if (offsetObj.offset < 0) {\n        var keyPath = getKeyPath(focusMenuKey, true);\n        var parentKey = keyPath[keyPath.length - 2];\n        var parentMenuElement = key2element.get(parentKey); // Focus menu item\n\n        triggerAccessibilityOpen(parentKey, false);\n        tryFocus(parentMenuElement);\n      }\n    } // Pass origin key down event\n\n\n    originOnKeyDown === null || originOnKeyDown === void 0 ? void 0 : originOnKeyDown(e);\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useUUID.js\n\n\n\nvar uniquePrefix = Math.random().toFixed(5).toString().slice(2);\nvar internalId = 0;\nfunction useUUID(id) {\n  var _useMergedState = Object(useMergedState["a" /* default */])(id, {\n    value: id\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      uuid = _useMergedState2[0],\n      setUUID = _useMergedState2[1];\n\n  react["useEffect"](function () {\n    internalId += 1;\n    var newId =  false ? undefined : "".concat(uniquePrefix, "-").concat(internalId);\n    setUUID("rc-menu-uuid-".concat(newId));\n  }, []);\n  return uuid;\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/utils/timeUtil.js\nfunction nextSlice(callback) {\n  /* istanbul ignore next */\n  Promise.resolve().then(callback);\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/hooks/useKeyRecords.js\n\n\n\n\n\n\nvar PATH_SPLIT = \'__RC_UTIL_PATH_SPLIT__\';\n\nvar getPathStr = function getPathStr(keyPath) {\n  return keyPath.join(PATH_SPLIT);\n};\n\nvar getPathKeys = function getPathKeys(keyPathStr) {\n  return keyPathStr.split(PATH_SPLIT);\n};\n\nvar OVERFLOW_KEY = \'rc-menu-more\';\nfunction useKeyRecords() {\n  var _React$useState = react["useState"]({}),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      internalForceUpdate = _React$useState2[1];\n\n  var key2pathRef = Object(react["useRef"])(new Map());\n  var path2keyRef = Object(react["useRef"])(new Map());\n\n  var _React$useState3 = react["useState"]([]),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      overflowKeys = _React$useState4[0],\n      setOverflowKeys = _React$useState4[1];\n\n  var updateRef = Object(react["useRef"])(0);\n  var destroyRef = Object(react["useRef"])(false);\n\n  var forceUpdate = function forceUpdate() {\n    if (!destroyRef.current) {\n      internalForceUpdate({});\n    }\n  };\n\n  var registerPath = Object(react["useCallback"])(function (key, keyPath) {\n    // Warning for invalidate or duplicated `key`\n    if (false) {} // Fill map\n\n\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current.set(connectedPath, key);\n    key2pathRef.current.set(key, connectedPath);\n    updateRef.current += 1;\n    var id = updateRef.current;\n    nextSlice(function () {\n      if (id === updateRef.current) {\n        forceUpdate();\n      }\n    });\n  }, []);\n  var unregisterPath = Object(react["useCallback"])(function (key, keyPath) {\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current["delete"](connectedPath);\n    key2pathRef.current["delete"](key);\n  }, []);\n  var refreshOverflowKeys = Object(react["useCallback"])(function (keys) {\n    setOverflowKeys(keys);\n  }, []);\n  var getKeyPath = Object(react["useCallback"])(function (eventKey, includeOverflow) {\n    var fullPath = key2pathRef.current.get(eventKey) || \'\';\n    var keys = getPathKeys(fullPath);\n\n    if (includeOverflow && overflowKeys.includes(keys[0])) {\n      keys.unshift(OVERFLOW_KEY);\n    }\n\n    return keys;\n  }, [overflowKeys]);\n  var isSubPathKey = Object(react["useCallback"])(function (pathKeys, eventKey) {\n    return pathKeys.some(function (pathKey) {\n      var pathKeyList = getKeyPath(pathKey, true);\n      return pathKeyList.includes(eventKey);\n    });\n  }, [getKeyPath]);\n\n  var getKeys = function getKeys() {\n    var keys = Object(toConsumableArray["a" /* default */])(key2pathRef.current.keys());\n\n    if (overflowKeys.length) {\n      keys.push(OVERFLOW_KEY);\n    }\n\n    return keys;\n  };\n  /**\n   * Find current key related child path keys\n   */\n\n\n  var getSubPathKeys = Object(react["useCallback"])(function (key) {\n    var connectedPath = "".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);\n    var pathKeys = new Set();\n\n    Object(toConsumableArray["a" /* default */])(path2keyRef.current.keys()).forEach(function (pathKey) {\n      if (pathKey.startsWith(connectedPath)) {\n        pathKeys.add(path2keyRef.current.get(pathKey));\n      }\n    });\n\n    return pathKeys;\n  }, []);\n  react["useEffect"](function () {\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n  return {\n    // Register\n    registerPath: registerPath,\n    unregisterPath: unregisterPath,\n    refreshOverflowKeys: refreshOverflowKeys,\n    // Util\n    isSubPathKey: isSubPathKey,\n    getKeyPath: getKeyPath,\n    getKeys: getKeys,\n    getSubPathKeys: getSubPathKeys\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/Menu.js\n\n\n\n\n\n\nvar Menu_excluded = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Menu modify after refactor:\n * ## Add\n * - disabled\n *\n * ## Remove\n * - openTransitionName\n * - openAnimation\n * - onDestroy\n * - siderCollapsed: Seems antd do not use this prop (Need test in antd)\n * - collapsedWidth: Seems this logic should be handle by antd Layout.Sider\n */\n// optimize for render\n\nvar EMPTY_LIST = [];\nvar Menu = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var _childList$, _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-menu\' : _props$prefixCls,\n      rootClassName = props.rootClassName,\n      style = props.style,\n      className = props.className,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      items = props.items,\n      children = props.children,\n      direction = props.direction,\n      id = props.id,\n      _props$mode = props.mode,\n      mode = _props$mode === void 0 ? \'vertical\' : _props$mode,\n      inlineCollapsed = props.inlineCollapsed,\n      disabled = props.disabled,\n      disabledOverflow = props.disabledOverflow,\n      _props$subMenuOpenDel = props.subMenuOpenDelay,\n      subMenuOpenDelay = _props$subMenuOpenDel === void 0 ? 0.1 : _props$subMenuOpenDel,\n      _props$subMenuCloseDe = props.subMenuCloseDelay,\n      subMenuCloseDelay = _props$subMenuCloseDe === void 0 ? 0.1 : _props$subMenuCloseDe,\n      forceSubMenuRender = props.forceSubMenuRender,\n      defaultOpenKeys = props.defaultOpenKeys,\n      openKeys = props.openKeys,\n      activeKey = props.activeKey,\n      defaultActiveFirst = props.defaultActiveFirst,\n      _props$selectable = props.selectable,\n      selectable = _props$selectable === void 0 ? true : _props$selectable,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      defaultSelectedKeys = props.defaultSelectedKeys,\n      selectedKeys = props.selectedKeys,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      _props$inlineIndent = props.inlineIndent,\n      inlineIndent = _props$inlineIndent === void 0 ? 24 : _props$inlineIndent,\n      motion = props.motion,\n      defaultMotions = props.defaultMotions,\n      _props$triggerSubMenu = props.triggerSubMenuAction,\n      triggerSubMenuAction = _props$triggerSubMenu === void 0 ? \'hover\' : _props$triggerSubMenu,\n      builtinPlacements = props.builtinPlacements,\n      itemIcon = props.itemIcon,\n      expandIcon = props.expandIcon,\n      _props$overflowedIndi = props.overflowedIndicator,\n      overflowedIndicator = _props$overflowedIndi === void 0 ? \'...\' : _props$overflowedIndi,\n      overflowedIndicatorPopupClassName = props.overflowedIndicatorPopupClassName,\n      getPopupContainer = props.getPopupContainer,\n      onClick = props.onClick,\n      onOpenChange = props.onOpenChange,\n      onKeyDown = props.onKeyDown,\n      openAnimation = props.openAnimation,\n      openTransitionName = props.openTransitionName,\n      _internalRenderMenuItem = props._internalRenderMenuItem,\n      _internalRenderSubMenuItem = props._internalRenderSubMenuItem,\n      restProps = Object(objectWithoutProperties["a" /* default */])(props, Menu_excluded);\n\n  var childList = react["useMemo"](function () {\n    return parseItems(children, items, EMPTY_LIST);\n  }, [children, items]);\n\n  var _React$useState = react["useState"](false),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      mounted = _React$useState2[0],\n      setMounted = _React$useState2[1];\n\n  var containerRef = react["useRef"]();\n  var uuid = useUUID(id);\n  var isRtl = direction === \'rtl\'; // ========================= Warn =========================\n\n  if (false) {} // ========================= Mode =========================\n\n\n  var _React$useMemo = react["useMemo"](function () {\n    if ((mode === \'inline\' || mode === \'vertical\') && inlineCollapsed) {\n      return [\'vertical\', inlineCollapsed];\n    }\n\n    return [mode, false];\n  }, [mode, inlineCollapsed]),\n      _React$useMemo2 = Object(slicedToArray["a" /* default */])(_React$useMemo, 2),\n      mergedMode = _React$useMemo2[0],\n      mergedInlineCollapsed = _React$useMemo2[1]; // ====================== Responsive ======================\n\n\n  var _React$useState3 = react["useState"](0),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      lastVisibleIndex = _React$useState4[0],\n      setLastVisibleIndex = _React$useState4[1];\n\n  var allVisible = lastVisibleIndex >= childList.length - 1 || mergedMode !== \'horizontal\' || disabledOverflow; // ========================= Open =========================\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(defaultOpenKeys, {\n    value: openKeys,\n    postState: function postState(keys) {\n      return keys || EMPTY_LIST;\n    }\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      mergedOpenKeys = _useMergedState2[0],\n      setMergedOpenKeys = _useMergedState2[1];\n\n  var triggerOpenKeys = function triggerOpenKeys(keys) {\n    setMergedOpenKeys(keys);\n    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(keys);\n  }; // >>>>> Cache & Reset open keys when inlineCollapsed changed\n\n\n  var _React$useState5 = react["useState"](mergedOpenKeys),\n      _React$useState6 = Object(slicedToArray["a" /* default */])(_React$useState5, 2),\n      inlineCacheOpenKeys = _React$useState6[0],\n      setInlineCacheOpenKeys = _React$useState6[1];\n\n  var isInlineMode = mergedMode === \'inline\';\n  var mountRef = react["useRef"](false); // Cache\n\n  react["useEffect"](function () {\n    if (isInlineMode) {\n      setInlineCacheOpenKeys(mergedOpenKeys);\n    }\n  }, [mergedOpenKeys]); // Restore\n\n  react["useEffect"](function () {\n    if (!mountRef.current) {\n      mountRef.current = true;\n      return;\n    }\n\n    if (isInlineMode) {\n      setMergedOpenKeys(inlineCacheOpenKeys);\n    } else {\n      // Trigger open event in case its in control\n      triggerOpenKeys(EMPTY_LIST);\n    }\n  }, [isInlineMode]); // ========================= Path =========================\n\n  var _useKeyRecords = useKeyRecords(),\n      registerPath = _useKeyRecords.registerPath,\n      unregisterPath = _useKeyRecords.unregisterPath,\n      refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys,\n      isSubPathKey = _useKeyRecords.isSubPathKey,\n      getKeyPath = _useKeyRecords.getKeyPath,\n      getKeys = _useKeyRecords.getKeys,\n      getSubPathKeys = _useKeyRecords.getSubPathKeys;\n\n  var registerPathContext = react["useMemo"](function () {\n    return {\n      registerPath: registerPath,\n      unregisterPath: unregisterPath\n    };\n  }, [registerPath, unregisterPath]);\n  var pathUserContext = react["useMemo"](function () {\n    return {\n      isSubPathKey: isSubPathKey\n    };\n  }, [isSubPathKey]);\n  react["useEffect"](function () {\n    refreshOverflowKeys(allVisible ? EMPTY_LIST : childList.slice(lastVisibleIndex + 1).map(function (child) {\n      return child.key;\n    }));\n  }, [lastVisibleIndex, allVisible]); // ======================== Active ========================\n\n  var _useMergedState3 = Object(useMergedState["a" /* default */])(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {\n    value: activeKey\n  }),\n      _useMergedState4 = Object(slicedToArray["a" /* default */])(_useMergedState3, 2),\n      mergedActiveKey = _useMergedState4[0],\n      setMergedActiveKey = _useMergedState4[1];\n\n  var onActive = useMemoCallback(function (key) {\n    setMergedActiveKey(key);\n  });\n  var onInactive = useMemoCallback(function () {\n    setMergedActiveKey(undefined);\n  });\n  Object(react["useImperativeHandle"])(ref, function () {\n    return {\n      list: containerRef.current,\n      focus: function focus(options) {\n        var _childList$find;\n\n        var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : (_childList$find = childList.find(function (node) {\n          return !node.props.disabled;\n        })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;\n\n        if (shouldFocusKey) {\n          var _containerRef$current, _containerRef$current2, _containerRef$current3;\n\n          (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.querySelector("li[data-menu-id=\'".concat(getMenuId(uuid, shouldFocusKey), "\']"))) === null || _containerRef$current2 === void 0 ? void 0 : (_containerRef$current3 = _containerRef$current2.focus) === null || _containerRef$current3 === void 0 ? void 0 : _containerRef$current3.call(_containerRef$current2, options);\n        }\n      }\n    };\n  }); // ======================== Select ========================\n  // >>>>> Select keys\n\n  var _useMergedState5 = Object(useMergedState["a" /* default */])(defaultSelectedKeys || [], {\n    value: selectedKeys,\n    // Legacy convert key to array\n    postState: function postState(keys) {\n      if (Array.isArray(keys)) {\n        return keys;\n      }\n\n      if (keys === null || keys === undefined) {\n        return EMPTY_LIST;\n      }\n\n      return [keys];\n    }\n  }),\n      _useMergedState6 = Object(slicedToArray["a" /* default */])(_useMergedState5, 2),\n      mergedSelectKeys = _useMergedState6[0],\n      setMergedSelectKeys = _useMergedState6[1]; // >>>>> Trigger select\n\n\n  var triggerSelection = function triggerSelection(info) {\n    if (selectable) {\n      // Insert or Remove\n      var targetKey = info.key;\n      var exist = mergedSelectKeys.includes(targetKey);\n      var newSelectKeys;\n\n      if (multiple) {\n        if (exist) {\n          newSelectKeys = mergedSelectKeys.filter(function (key) {\n            return key !== targetKey;\n          });\n        } else {\n          newSelectKeys = [].concat(Object(toConsumableArray["a" /* default */])(mergedSelectKeys), [targetKey]);\n        }\n      } else {\n        newSelectKeys = [targetKey];\n      }\n\n      setMergedSelectKeys(newSelectKeys); // Trigger event\n\n      var selectInfo = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, info), {}, {\n        selectedKeys: newSelectKeys\n      });\n\n      if (exist) {\n        onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectInfo);\n      } else {\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectInfo);\n      }\n    } // Whatever selectable, always close it\n\n\n    if (!multiple && mergedOpenKeys.length && mergedMode !== \'inline\') {\n      triggerOpenKeys(EMPTY_LIST);\n    }\n  }; // ========================= Open =========================\n\n  /**\n   * Click for item. SubMenu do not have selection status\n   */\n\n\n  var onInternalClick = useMemoCallback(function (info) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));\n    triggerSelection(info);\n  });\n  var onInternalOpenChange = useMemoCallback(function (key, open) {\n    var newOpenKeys = mergedOpenKeys.filter(function (k) {\n      return k !== key;\n    });\n\n    if (open) {\n      newOpenKeys.push(key);\n    } else if (mergedMode !== \'inline\') {\n      // We need find all related popup to close\n      var subPathKeys = getSubPathKeys(key);\n      newOpenKeys = newOpenKeys.filter(function (k) {\n        return !subPathKeys.has(k);\n      });\n    }\n\n    if (!shallowequal_default()(mergedOpenKeys, newOpenKeys)) {\n      triggerOpenKeys(newOpenKeys);\n    }\n  });\n  var getInternalPopupContainer = useMemoCallback(getPopupContainer); // ==================== Accessibility =====================\n\n  var triggerAccessibilityOpen = function triggerAccessibilityOpen(key, open) {\n    var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key);\n    onInternalOpenChange(key, nextOpen);\n  };\n\n  var onInternalKeyDown = useAccessibility(mergedMode, mergedActiveKey, isRtl, uuid, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown); // ======================== Effect ========================\n\n  react["useEffect"](function () {\n    setMounted(true);\n  }, []); // ======================= Context ========================\n\n  var privateContext = react["useMemo"](function () {\n    return {\n      _internalRenderMenuItem: _internalRenderMenuItem,\n      _internalRenderSubMenuItem: _internalRenderSubMenuItem\n    };\n  }, [_internalRenderMenuItem, _internalRenderSubMenuItem]); // ======================== Render ========================\n  // >>>>> Children\n\n  var wrappedChildList = mergedMode !== \'horizontal\' || disabledOverflow ? childList : // Need wrap for overflow dropdown that do not response for open\n  childList.map(function (child, index) {\n    return (\n      /*#__PURE__*/\n      // Always wrap provider to avoid sub node re-mount\n      react["createElement"](InheritableContextProvider, {\n        key: child.key,\n        overflowDisabled: index > lastVisibleIndex\n      }, child)\n    );\n  }); // >>>>> Container\n\n  var container = /*#__PURE__*/react["createElement"](es["a" /* default */], Object(esm_extends["a" /* default */])({\n    id: id,\n    ref: containerRef,\n    prefixCls: "".concat(prefixCls, "-overflow"),\n    component: "ul",\n    itemComponent: es_MenuItem,\n    className: classnames_default()(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(mergedMode), className, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-inline-collapsed"), mergedInlineCollapsed), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames), rootClassName),\n    dir: direction,\n    style: style,\n    role: "menu",\n    tabIndex: tabIndex,\n    data: wrappedChildList,\n    renderRawItem: function renderRawItem(node) {\n      return node;\n    },\n    renderRawRest: function renderRawRest(omitItems) {\n      // We use origin list since wrapped list use context to prevent open\n      var len = omitItems.length;\n      var originOmitItems = len ? childList.slice(-len) : null;\n      return /*#__PURE__*/react["createElement"](SubMenu, {\n        eventKey: OVERFLOW_KEY,\n        title: overflowedIndicator,\n        disabled: allVisible,\n        internalPopupClose: len === 0,\n        popupClassName: overflowedIndicatorPopupClassName\n      }, originOmitItems);\n    },\n    maxCount: mergedMode !== \'horizontal\' || disabledOverflow ? es["a" /* default */].INVALIDATE : es["a" /* default */].RESPONSIVE,\n    ssr: "full",\n    "data-menu-list": true,\n    onVisibleChange: function onVisibleChange(newLastIndex) {\n      setLastVisibleIndex(newLastIndex);\n    },\n    onKeyDown: onInternalKeyDown\n  }, restProps)); // >>>>> Render\n\n  return /*#__PURE__*/react["createElement"](context_PrivateContext.Provider, {\n    value: privateContext\n  }, /*#__PURE__*/react["createElement"](IdContext.Provider, {\n    value: uuid\n  }, /*#__PURE__*/react["createElement"](InheritableContextProvider, {\n    prefixCls: prefixCls,\n    rootClassName: rootClassName,\n    mode: mergedMode,\n    openKeys: mergedOpenKeys,\n    rtl: isRtl // Disabled\n    ,\n    disabled: disabled // Motion\n    ,\n    motion: mounted ? motion : null,\n    defaultMotions: mounted ? defaultMotions : null // Active\n    ,\n    activeKey: mergedActiveKey,\n    onActive: onActive,\n    onInactive: onInactive // Selection\n    ,\n    selectedKeys: mergedSelectKeys // Level\n    ,\n    inlineIndent: inlineIndent // Popup\n    ,\n    subMenuOpenDelay: subMenuOpenDelay,\n    subMenuCloseDelay: subMenuCloseDelay,\n    forceSubMenuRender: forceSubMenuRender,\n    builtinPlacements: builtinPlacements,\n    triggerSubMenuAction: triggerSubMenuAction,\n    getPopupContainer: getInternalPopupContainer // Icon\n    ,\n    itemIcon: itemIcon,\n    expandIcon: expandIcon // Events\n    ,\n    onItemClick: onInternalClick,\n    onOpenChange: onInternalOpenChange\n  }, /*#__PURE__*/react["createElement"](PathUserContext.Provider, {\n    value: pathUserContext\n  }, container), /*#__PURE__*/react["createElement"]("div", {\n    style: {\n      display: \'none\'\n    },\n    "aria-hidden": true\n  }, /*#__PURE__*/react["createElement"](PathRegisterContext.Provider, {\n    value: registerPathContext\n  }, childList)))));\n});\n/* harmony default export */ var es_Menu = (Menu);\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/MenuItemGroup.js\n\n\nvar MenuItemGroup_excluded = ["className", "title", "eventKey", "children"],\n    MenuItemGroup_excluded2 = ["children"];\n\n\n\n\n\n\n\nvar MenuItemGroup_InternalMenuItemGroup = function InternalMenuItemGroup(_ref) {\n  var className = _ref.className,\n      title = _ref.title,\n      eventKey = _ref.eventKey,\n      children = _ref.children,\n      restProps = Object(objectWithoutProperties["a" /* default */])(_ref, MenuItemGroup_excluded);\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls;\n\n  var groupPrefixCls = "".concat(prefixCls, "-item-group");\n  return /*#__PURE__*/react["createElement"]("li", Object(esm_extends["a" /* default */])({}, restProps, {\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    },\n    className: classnames_default()(groupPrefixCls, className)\n  }), /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(groupPrefixCls, "-title"),\n    title: typeof title === \'string\' ? title : undefined\n  }, title), /*#__PURE__*/react["createElement"]("ul", {\n    className: "".concat(groupPrefixCls, "-list")\n  }, children));\n};\n\nfunction MenuItemGroup(_ref2) {\n  var children = _ref2.children,\n      props = Object(objectWithoutProperties["a" /* default */])(_ref2, MenuItemGroup_excluded2);\n\n  var connectedKeyPath = useFullPath(props.eventKey);\n  var childList = parseChildren(children, connectedKeyPath);\n  var measure = useMeasure();\n\n  if (measure) {\n    return childList;\n  }\n\n  return /*#__PURE__*/react["createElement"](MenuItemGroup_InternalMenuItemGroup, Object(omit["a" /* default */])(props, [\'warnKey\']), childList);\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/Divider.js\n\n\n\n\nfunction Divider(_ref) {\n  var className = _ref.className,\n      style = _ref.style;\n\n  var _React$useContext = react["useContext"](MenuContext),\n      prefixCls = _React$useContext.prefixCls;\n\n  var measure = useMeasure();\n\n  if (measure) {\n    return null;\n  }\n\n  return /*#__PURE__*/react["createElement"]("li", {\n    className: classnames_default()("".concat(prefixCls, "-item-divider"), className),\n    style: style\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-menu/es/index.js\n\n\n\n\n\n\n/** @private Only used for antd internal. Do not use in your production. */\n\nvar es_useFullPath = useFullPath;\n\nvar ExportMenu = es_Menu;\nExportMenu.Item = es_MenuItem;\nExportMenu.SubMenu = SubMenu;\nExportMenu.ItemGroup = MenuItemGroup;\nExportMenu.Divider = Divider;\n/* harmony default export */ var rc_menu_es = __webpack_exports__["g"] = (ExportMenu);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1j5w\n')},"4ldJ":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__("Zm9Q");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/rc-textarea/es/index.js + 2 modules\nvar es = __webpack_require__("Y1PL");\n\n// EXTERNAL MODULE: ./node_modules/rc-trigger/es/index.js + 9 modules\nvar rc_trigger_es = __webpack_require__("uciX");\n\n// EXTERNAL MODULE: ./node_modules/rc-menu/es/index.js + 24 modules\nvar rc_menu_es = __webpack_require__("1j5w");\n\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/MentionsContext.js\n/* tslint:disable: no-object-literal-type-assertion */\n // We will never use default, here only to fix TypeScript warning\n\nvar MentionsContext = /*#__PURE__*/react["createContext"](null);\nvar MentionsContextProvider = MentionsContext.Provider;\nvar MentionsContextConsumer = MentionsContext.Consumer;\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/DropdownMenu.js\n\n\n\n\n\n\n\n/**\n * We only use Menu to display the candidate.\n * The focus is controlled by textarea to make accessibility easy.\n */\n\nvar DropdownMenu_DropdownMenu = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(DropdownMenu, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(DropdownMenu);\n\n  function DropdownMenu() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, DropdownMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderDropdown = function (_ref) {\n      var notFoundContent = _ref.notFoundContent,\n          activeIndex = _ref.activeIndex,\n          setActiveIndex = _ref.setActiveIndex,\n          selectOption = _ref.selectOption,\n          onFocus = _ref.onFocus,\n          onBlur = _ref.onBlur;\n      var _this$props = _this.props,\n          prefixCls = _this$props.prefixCls,\n          options = _this$props.options;\n      var activeOption = options[activeIndex] || {};\n      return /*#__PURE__*/react["createElement"](rc_menu_es["g" /* default */], {\n        prefixCls: "".concat(prefixCls, "-menu"),\n        activeKey: activeOption.key,\n        onSelect: function onSelect(_ref2) {\n          var key = _ref2.key;\n          var option = options.find(function (_ref3) {\n            var optionKey = _ref3.key;\n            return optionKey === key;\n          });\n          selectOption(option);\n        },\n        onFocus: onFocus,\n        onBlur: onBlur\n      }, options.map(function (option, index) {\n        var key = option.key,\n            disabled = option.disabled,\n            children = option.children,\n            className = option.className,\n            style = option.style;\n        return /*#__PURE__*/react["createElement"](rc_menu_es["d" /* MenuItem */], {\n          key: key,\n          disabled: disabled,\n          className: className,\n          style: style,\n          onMouseEnter: function onMouseEnter() {\n            setActiveIndex(index);\n          }\n        }, children);\n      }), !options.length && /*#__PURE__*/react["createElement"](rc_menu_es["d" /* MenuItem */], {\n        disabled: true\n      }, notFoundContent));\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(DropdownMenu, [{\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react["createElement"](MentionsContextConsumer, null, this.renderDropdown);\n    }\n  }]);\n\n  return DropdownMenu;\n}(react["Component"]);\n\n/* harmony default export */ var es_DropdownMenu = (DropdownMenu_DropdownMenu);\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/KeywordTrigger.js\n\n\n\n\n\n\n\nvar BUILT_IN_PLACEMENTS = {\n  bottomRight: {\n    points: [\'tl\', \'br\'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  bottomLeft: {\n    points: [\'tr\', \'bl\'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  topRight: {\n    points: [\'bl\', \'tr\'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  },\n  topLeft: {\n    points: [\'br\', \'tl\'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 1,\n      adjustY: 1\n    }\n  }\n};\n\nvar KeywordTrigger_KeywordTrigger = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(KeywordTrigger, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(KeywordTrigger);\n\n  function KeywordTrigger() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, KeywordTrigger);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getDropdownPrefix = function () {\n      return "".concat(_this.props.prefixCls, "-dropdown");\n    };\n\n    _this.getDropdownElement = function () {\n      var options = _this.props.options;\n      return /*#__PURE__*/react["createElement"](es_DropdownMenu, {\n        prefixCls: _this.getDropdownPrefix(),\n        options: options\n      });\n    };\n\n    _this.getDropDownPlacement = function () {\n      var _this$props = _this.props,\n          placement = _this$props.placement,\n          direction = _this$props.direction;\n      var popupPlacement = \'topRight\';\n\n      if (direction === \'rtl\') {\n        popupPlacement = placement === \'top\' ? \'topLeft\' : \'bottomLeft\';\n      } else {\n        popupPlacement = placement === \'top\' ? \'topRight\' : \'bottomRight\';\n      }\n\n      return popupPlacement;\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(KeywordTrigger, [{\n    key: "render",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          visible = _this$props2.visible,\n          transitionName = _this$props2.transitionName,\n          getPopupContainer = _this$props2.getPopupContainer;\n      var popupElement = this.getDropdownElement();\n      return /*#__PURE__*/react["createElement"](rc_trigger_es["a" /* default */], {\n        prefixCls: this.getDropdownPrefix(),\n        popupVisible: visible,\n        popup: popupElement,\n        popupPlacement: this.getDropDownPlacement(),\n        popupTransitionName: transitionName,\n        builtinPlacements: BUILT_IN_PLACEMENTS,\n        getPopupContainer: getPopupContainer,\n        popupClassName: this.props.dropdownClassName\n      }, children);\n    }\n  }]);\n\n  return KeywordTrigger;\n}(react["Component"]);\n\n/* harmony default export */ var es_KeywordTrigger = (KeywordTrigger_KeywordTrigger);\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/Option.js\nvar Option = function Option() {\n  return null;\n};\n\n/* harmony default export */ var es_Option = (Option);\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/util.js\n\nvar util_omit = function omit(obj) {\n  var clone = Object(objectSpread2["a" /* default */])({}, obj);\n\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  keys.forEach(function (key) {\n    delete clone[key];\n  });\n  return clone;\n};\n/**\n * Cut input selection into 2 part and return text before selection start\n */\n\nfunction getBeforeSelectionText(input) {\n  var selectionStart = input.selectionStart;\n  return input.value.slice(0, selectionStart);\n}\n/**\n * Find the last match prefix index\n */\n\nfunction getLastMeasureIndex(text) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n  var prefixList = Array.isArray(prefix) ? prefix : [prefix];\n  return prefixList.reduce(function (lastMatch, prefixStr) {\n    var lastIndex = text.lastIndexOf(prefixStr);\n\n    if (lastIndex > lastMatch.location) {\n      return {\n        location: lastIndex,\n        prefix: prefixStr\n      };\n    }\n\n    return lastMatch;\n  }, {\n    location: -1,\n    prefix: \'\'\n  });\n}\n\nfunction lower(_char) {\n  return (_char || \'\').toLowerCase();\n}\n\nfunction reduceText(text, targetText, split) {\n  var firstChar = text[0];\n\n  if (!firstChar || firstChar === split) {\n    return text;\n  } // Reuse rest text as it can\n\n\n  var restText = text;\n  var targetTextLen = targetText.length;\n\n  for (var i = 0; i < targetTextLen; i += 1) {\n    if (lower(restText[i]) !== lower(targetText[i])) {\n      restText = restText.slice(i);\n      break;\n    } else if (i === targetTextLen - 1) {\n      restText = restText.slice(targetTextLen);\n    }\n  }\n\n  return restText;\n}\n/**\n * Paint targetText into current text:\n *  text: little@litest\n *  targetText: light\n *  => little @light test\n */\n\n\nfunction replaceWithMeasure(text, measureConfig) {\n  var measureLocation = measureConfig.measureLocation,\n      prefix = measureConfig.prefix,\n      targetText = measureConfig.targetText,\n      selectionStart = measureConfig.selectionStart,\n      split = measureConfig.split; // Before text will append one space if have other text\n\n  var beforeMeasureText = text.slice(0, measureLocation);\n\n  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {\n    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);\n  }\n\n  if (beforeMeasureText) {\n    beforeMeasureText = "".concat(beforeMeasureText).concat(split);\n  } // Cut duplicate string with current targetText\n\n\n  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);\n\n  if (restText.slice(0, split.length) === split) {\n    restText = restText.slice(split.length);\n  }\n\n  var connectedStartText = "".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);\n  return {\n    text: "".concat(connectedStartText).concat(restText),\n    selectionLocation: connectedStartText.length\n  };\n}\nfunction setInputSelection(input, location) {\n  input.setSelectionRange(location, location);\n  /**\n   * Reset caret into view.\n   * Since this function always called by user control, it\'s safe to focus element.\n   */\n\n  input.blur();\n  input.focus();\n}\nfunction util_validateSearch(text, props) {\n  var split = props.split;\n  return !split || text.indexOf(split) === -1;\n}\nfunction util_filterOption(input, _ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? \'\' : _ref$value;\n  var lowerCase = input.toLowerCase();\n  return value.toLowerCase().indexOf(lowerCase) !== -1;\n}\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/Mentions.js\n\n\n\n\n\n\n\nvar _excluded = ["prefixCls", "placement", "direction", "transitionName", "className", "style", "autoFocus", "notFoundContent", "getPopupContainer", "dropdownClassName"];\n\n\n\n\n\n\n\n\n\n\nvar Mentions_Mentions = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(Mentions, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(Mentions);\n\n  function Mentions(_props) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Mentions);\n\n    _this = _super.call(this, _props);\n    _this.textarea = void 0;\n    _this.measure = void 0;\n    _this.focusId = undefined;\n\n    _this.triggerChange = function (value) {\n      var onChange = _this.props.onChange;\n\n      if (!(\'value\' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      if (onChange) {\n        onChange(value);\n      }\n    };\n\n    _this.onChange = function (_ref) {\n      var value = _ref.target.value;\n\n      _this.triggerChange(value);\n    };\n\n    _this.onKeyDown = function (event) {\n      var which = event.which;\n      var _this$state = _this.state,\n          activeIndex = _this$state.activeIndex,\n          measuring = _this$state.measuring;\n      var clientOnKeyDown = _this.props.onKeyDown;\n\n      if (clientOnKeyDown) {\n        clientOnKeyDown(event);\n      } // Skip if not measuring\n\n\n      if (!measuring) {\n        return;\n      }\n\n      if (which === KeyCode["a" /* default */].UP || which === KeyCode["a" /* default */].DOWN) {\n        // Control arrow function\n        var optionLen = _this.getOptions().length;\n\n        var offset = which === KeyCode["a" /* default */].UP ? -1 : 1;\n        var newActiveIndex = (activeIndex + offset + optionLen) % optionLen;\n\n        _this.setState({\n          activeIndex: newActiveIndex\n        });\n\n        event.preventDefault();\n      } else if (which === KeyCode["a" /* default */].ESC) {\n        _this.stopMeasure();\n      } else if (which === KeyCode["a" /* default */].ENTER) {\n        // Measure hit\n        event.preventDefault();\n\n        var options = _this.getOptions();\n\n        if (!options.length) {\n          _this.stopMeasure();\n\n          return;\n        }\n\n        var option = options[activeIndex];\n\n        _this.selectOption(option);\n      }\n    };\n\n    _this.onKeyUp = function (event) {\n      var key = event.key,\n          which = event.which;\n      var _this$state2 = _this.state,\n          prevMeasureText = _this$state2.measureText,\n          measuring = _this$state2.measuring;\n      var _this$props = _this.props,\n          _this$props$prefix = _this$props.prefix,\n          prefix = _this$props$prefix === void 0 ? \'\' : _this$props$prefix,\n          clientOnKeyUp = _this$props.onKeyUp,\n          onSearch = _this$props.onSearch,\n          validateSearch = _this$props.validateSearch;\n      var target = event.target;\n      var selectionStartText = getBeforeSelectionText(target);\n\n      var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, prefix),\n          measureIndex = _getLastMeasureIndex.location,\n          measurePrefix = _getLastMeasureIndex.prefix; // If the client implements an onKeyUp handler, call it\n\n\n      if (clientOnKeyUp) {\n        clientOnKeyUp(event);\n      } // Skip if match the white key list\n\n\n      if ([KeyCode["a" /* default */].ESC, KeyCode["a" /* default */].UP, KeyCode["a" /* default */].DOWN, KeyCode["a" /* default */].ENTER].indexOf(which) !== -1) {\n        return;\n      }\n\n      if (measureIndex !== -1) {\n        var measureText = selectionStartText.slice(measureIndex + measurePrefix.length);\n        var validateMeasure = validateSearch(measureText, _this.props);\n        var matchOption = !!_this.getOptions(measureText).length;\n\n        if (validateMeasure) {\n          if (key === measurePrefix || key === \'Shift\' || measuring || measureText !== prevMeasureText && matchOption) {\n            _this.startMeasure(measureText, measurePrefix, measureIndex);\n          }\n        } else if (measuring) {\n          // Stop if measureText is invalidate\n          _this.stopMeasure();\n        }\n        /**\n         * We will trigger `onSearch` to developer since they may use for async update.\n         * If met `space` means user finished searching.\n         */\n\n\n        if (onSearch && validateMeasure) {\n          onSearch(measureText, measurePrefix);\n        }\n      } else if (measuring) {\n        _this.stopMeasure();\n      }\n    };\n\n    _this.onPressEnter = function (event) {\n      var measuring = _this.state.measuring;\n      var onPressEnter = _this.props.onPressEnter;\n\n      if (!measuring && onPressEnter) {\n        onPressEnter(event);\n      }\n    };\n\n    _this.onInputFocus = function (event) {\n      _this.onFocus(event);\n    };\n\n    _this.onInputBlur = function (event) {\n      _this.onBlur(event);\n    };\n\n    _this.onDropdownFocus = function () {\n      _this.onFocus();\n    };\n\n    _this.onDropdownBlur = function () {\n      _this.onBlur();\n    };\n\n    _this.onFocus = function (event) {\n      window.clearTimeout(_this.focusId);\n      var isFocus = _this.state.isFocus;\n      var onFocus = _this.props.onFocus;\n\n      if (!isFocus && event && onFocus) {\n        onFocus(event);\n      }\n\n      _this.setState({\n        isFocus: true\n      });\n    };\n\n    _this.onBlur = function (event) {\n      _this.focusId = window.setTimeout(function () {\n        var onBlur = _this.props.onBlur;\n\n        _this.setState({\n          isFocus: false\n        });\n\n        _this.stopMeasure();\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }, 0);\n    };\n\n    _this.selectOption = function (option) {\n      var _this$state3 = _this.state,\n          value = _this$state3.value,\n          measureLocation = _this$state3.measureLocation,\n          measurePrefix = _this$state3.measurePrefix;\n      var _this$props2 = _this.props,\n          split = _this$props2.split,\n          onSelect = _this$props2.onSelect;\n      var _option$value = option.value,\n          mentionValue = _option$value === void 0 ? \'\' : _option$value;\n\n      var _replaceWithMeasure = replaceWithMeasure(value, {\n        measureLocation: measureLocation,\n        targetText: mentionValue,\n        prefix: measurePrefix,\n        selectionStart: _this.textarea.selectionStart,\n        split: split\n      }),\n          text = _replaceWithMeasure.text,\n          selectionLocation = _replaceWithMeasure.selectionLocation;\n\n      _this.triggerChange(text);\n\n      _this.stopMeasure(function () {\n        // We need restore the selection position\n        setInputSelection(_this.textarea, selectionLocation);\n      });\n\n      if (onSelect) {\n        onSelect(option, measurePrefix);\n      }\n    };\n\n    _this.setActiveIndex = function (activeIndex) {\n      _this.setState({\n        activeIndex: activeIndex\n      });\n    };\n\n    _this.setTextAreaRef = function (element) {\n      var _element$resizableTex;\n\n      _this.textarea = element === null || element === void 0 ? void 0 : (_element$resizableTex = element.resizableTextArea) === null || _element$resizableTex === void 0 ? void 0 : _element$resizableTex.textArea;\n    };\n\n    _this.setMeasureRef = function (element) {\n      _this.measure = element;\n    };\n\n    _this.getOptions = function (measureText) {\n      var targetMeasureText = measureText || _this.state.measureText || \'\';\n      var _this$props3 = _this.props,\n          children = _this$props3.children,\n          filterOption = _this$props3.filterOption;\n      var list = Object(toArray["a" /* default */])(children).map(function (_ref2) {\n        var props = _ref2.props,\n            key = _ref2.key;\n        return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, props), {}, {\n          key: key || props.value\n        });\n      }).filter(function (option) {\n        /** Return all result if `filterOption` is false. */\n        if (filterOption === false) {\n          return true;\n        }\n\n        return filterOption(targetMeasureText, option);\n      });\n      return list;\n    };\n\n    _this.state = {\n      value: _props.defaultValue || _props.value || \'\',\n      measuring: false,\n      measureLocation: 0,\n      measureText: null,\n      measurePrefix: \'\',\n      activeIndex: 0,\n      isFocus: false\n    };\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Mentions, [{\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      var measuring = this.state.measuring; // Sync measure div top with textarea for rc-trigger usage\n\n      if (measuring) {\n        this.measure.scrollTop = this.textarea.scrollTop;\n      }\n    }\n  }, {\n    key: "startMeasure",\n    value: function startMeasure(measureText, measurePrefix, measureLocation) {\n      this.setState({\n        measuring: true,\n        measureText: measureText,\n        measurePrefix: measurePrefix,\n        measureLocation: measureLocation,\n        activeIndex: 0\n      });\n    }\n  }, {\n    key: "stopMeasure",\n    value: function stopMeasure(callback) {\n      this.setState({\n        measuring: false,\n        measureLocation: 0,\n        measureText: null\n      }, callback);\n    }\n  }, {\n    key: "focus",\n    value: function focus() {\n      this.textarea.focus();\n    }\n  }, {\n    key: "blur",\n    value: function blur() {\n      this.textarea.blur();\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this$state4 = this.state,\n          value = _this$state4.value,\n          measureLocation = _this$state4.measureLocation,\n          measurePrefix = _this$state4.measurePrefix,\n          measuring = _this$state4.measuring,\n          activeIndex = _this$state4.activeIndex;\n\n      var _this$props4 = this.props,\n          prefixCls = _this$props4.prefixCls,\n          placement = _this$props4.placement,\n          direction = _this$props4.direction,\n          transitionName = _this$props4.transitionName,\n          className = _this$props4.className,\n          style = _this$props4.style,\n          autoFocus = _this$props4.autoFocus,\n          notFoundContent = _this$props4.notFoundContent,\n          getPopupContainer = _this$props4.getPopupContainer,\n          dropdownClassName = _this$props4.dropdownClassName,\n          restProps = Object(objectWithoutProperties["a" /* default */])(_this$props4, _excluded);\n\n      var inputProps = util_omit(restProps, \'value\', \'defaultValue\', \'prefix\', \'split\', \'children\', \'validateSearch\', \'filterOption\', \'onSelect\', \'onSearch\');\n      var options = measuring ? this.getOptions() : [];\n      return /*#__PURE__*/react["createElement"]("div", {\n        className: classnames_default()(prefixCls, className),\n        style: style\n      }, /*#__PURE__*/react["createElement"](es["a" /* default */], Object(esm_extends["a" /* default */])({\n        autoFocus: autoFocus,\n        ref: this.setTextAreaRef,\n        value: value\n      }, inputProps, {\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        onKeyUp: this.onKeyUp,\n        onPressEnter: this.onPressEnter,\n        onFocus: this.onInputFocus,\n        onBlur: this.onInputBlur\n      })), measuring && /*#__PURE__*/react["createElement"]("div", {\n        ref: this.setMeasureRef,\n        className: "".concat(prefixCls, "-measure")\n      }, value.slice(0, measureLocation), /*#__PURE__*/react["createElement"](MentionsContextProvider, {\n        value: {\n          notFoundContent: notFoundContent,\n          activeIndex: activeIndex,\n          setActiveIndex: this.setActiveIndex,\n          selectOption: this.selectOption,\n          onFocus: this.onDropdownFocus,\n          onBlur: this.onDropdownBlur\n        }\n      }, /*#__PURE__*/react["createElement"](es_KeywordTrigger, {\n        prefixCls: prefixCls,\n        transitionName: transitionName,\n        placement: placement,\n        direction: direction,\n        options: options,\n        visible: true,\n        getPopupContainer: getPopupContainer,\n        dropdownClassName: dropdownClassName\n      }, /*#__PURE__*/react["createElement"]("span", null, measurePrefix))), value.slice(measureLocation + measurePrefix.length)));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var newState = {};\n\n      if (\'value\' in props && props.value !== prevState.value) {\n        newState.value = props.value || \'\';\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Mentions;\n}(react["Component"]);\n\nMentions_Mentions.Option = es_Option;\nMentions_Mentions.defaultProps = {\n  prefixCls: \'rc-mentions\',\n  prefix: \'@\',\n  split: \' \',\n  validateSearch: util_validateSearch,\n  filterOption: util_filterOption,\n  notFoundContent: \'Not Found\',\n  rows: 1\n};\n/* harmony default export */ var es_Mentions = (Mentions_Mentions);\n// CONCATENATED MODULE: ./node_modules/rc-mentions/es/index.js\n\n/* harmony default export */ var rc_mentions_es = __webpack_exports__["a"] = (es_Mentions);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4ldJ\n')},"85Yc":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ es_Field; });\n__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ es_List; });\n__webpack_require__.d(__webpack_exports__, "g", function() { return /* reexport */ es_useForm; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ FormContext_FormProvider; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ FieldContext; });\n__webpack_require__.d(__webpack_exports__, "e", function() { return /* reexport */ es_ListContext; });\n__webpack_require__.d(__webpack_exports__, "h", function() { return /* reexport */ es_useWatch; });\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__("JX7q");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__("Zm9Q");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/FieldContext.js\n\n\nvar HOOK_MARK = \'RC_FORM_INTERNAL_HOOKS\'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nvar FieldContext_warningFunc = function warningFunc() {\n  Object(warning["a" /* default */])(false, \'Can not find FormContext. Please make sure you wrap Field under Form.\');\n};\n\nvar Context = /*#__PURE__*/react["createContext"]({\n  getFieldValue: FieldContext_warningFunc,\n  getFieldsValue: FieldContext_warningFunc,\n  getFieldError: FieldContext_warningFunc,\n  getFieldWarning: FieldContext_warningFunc,\n  getFieldsError: FieldContext_warningFunc,\n  isFieldsTouched: FieldContext_warningFunc,\n  isFieldTouched: FieldContext_warningFunc,\n  isFieldValidating: FieldContext_warningFunc,\n  isFieldsValidating: FieldContext_warningFunc,\n  resetFields: FieldContext_warningFunc,\n  setFields: FieldContext_warningFunc,\n  setFieldsValue: FieldContext_warningFunc,\n  validateFields: FieldContext_warningFunc,\n  submit: FieldContext_warningFunc,\n  getInternalHooks: function getInternalHooks() {\n    FieldContext_warningFunc();\n    return {\n      dispatch: FieldContext_warningFunc,\n      initEntityValue: FieldContext_warningFunc,\n      registerField: FieldContext_warningFunc,\n      useSubscribe: FieldContext_warningFunc,\n      setInitialValues: FieldContext_warningFunc,\n      destroyForm: FieldContext_warningFunc,\n      setCallbacks: FieldContext_warningFunc,\n      registerWatch: FieldContext_warningFunc,\n      getFields: FieldContext_warningFunc,\n      setValidateMessages: FieldContext_warningFunc,\n      setPreserve: FieldContext_warningFunc,\n      getInitialValue: FieldContext_warningFunc\n    };\n  }\n});\n/* harmony default export */ var FieldContext = (Context);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/typeUtil.js\nfunction typeUtil_toArray(value) {\n  if (value === undefined || value === null) {\n    return [];\n  }\n\n  return Array.isArray(value) ? value : [value];\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\nvar regeneratorRuntime = __webpack_require__("x+uP");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__("HaE+");\n\n// EXTERNAL MODULE: ./node_modules/async-validator/dist-web/index.js\nvar dist_web = __webpack_require__("KpVd");\n\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/messages.js\nvar typeTemplate = "\'${name}\' is not a valid ${type}";\nvar defaultValidateMessages = {\n  "default": "Validation error on field \'${name}\'",\n  required: "\'${name}\' is required",\n  "enum": "\'${name}\' must be one of [${enum}]",\n  whitespace: "\'${name}\' cannot be empty",\n  date: {\n    format: "\'${name}\' is invalid for format date",\n    parse: "\'${name}\' could not be parsed as date",\n    invalid: "\'${name}\' is invalid date"\n  },\n  types: {\n    string: typeTemplate,\n    method: typeTemplate,\n    array: typeTemplate,\n    object: typeTemplate,\n    number: typeTemplate,\n    date: typeTemplate,\n    "boolean": typeTemplate,\n    integer: typeTemplate,\n    "float": typeTemplate,\n    regexp: typeTemplate,\n    email: typeTemplate,\n    url: typeTemplate,\n    hex: typeTemplate\n  },\n  string: {\n    len: "\'${name}\' must be exactly ${len} characters",\n    min: "\'${name}\' must be at least ${min} characters",\n    max: "\'${name}\' cannot be longer than ${max} characters",\n    range: "\'${name}\' must be between ${min} and ${max} characters"\n  },\n  number: {\n    len: "\'${name}\' must equal ${len}",\n    min: "\'${name}\' cannot be less than ${min}",\n    max: "\'${name}\' cannot be greater than ${max}",\n    range: "\'${name}\' must be between ${min} and ${max}"\n  },\n  array: {\n    len: "\'${name}\' must be exactly ${len} in length",\n    min: "\'${name}\' cannot be less than ${min} in length",\n    max: "\'${name}\' cannot be greater than ${max} in length",\n    range: "\'${name}\' must be between ${min} and ${max} in length"\n  },\n  pattern: {\n    mismatch: "\'${name}\' does not match pattern ${pattern}"\n  }\n};\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/utils/get.js\nvar get = __webpack_require__("ub+h");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/utils/set.js\nvar set = __webpack_require__("bG1m");\n\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/cloneDeep.js\n\n\nfunction cloneDeep(val) {\n  if (Array.isArray(val)) {\n    return cloneArrayDeep(val);\n  } else if (Object(esm_typeof["a" /* default */])(val) === \'object\' && val !== null) {\n    return cloneObjectDeep(val);\n  }\n\n  return val;\n}\n\nfunction cloneObjectDeep(val) {\n  if (Object.getPrototypeOf(val) === Object.prototype) {\n    var res = {};\n\n    for (var key in val) {\n      res[key] = cloneDeep(val[key]);\n    }\n\n    return res;\n  }\n\n  return val;\n}\n\nfunction cloneArrayDeep(val) {\n  return val.map(function (item) {\n    return cloneDeep(item);\n  });\n}\n\n/* harmony default export */ var utils_cloneDeep = (cloneDeep);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/valueUtil.js\n\n\n\n\n\n\n\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * \'a\' => [\'a\']\n * 123 => [123]\n * [\'a\', 123] => [\'a\', 123]\n */\n\nfunction getNamePath(path) {\n  return typeUtil_toArray(path);\n}\nfunction getValue(store, namePath) {\n  var value = Object(get["a" /* default */])(store, namePath);\n  return value;\n}\nfunction valueUtil_setValue(store, namePath, value) {\n  var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var newStore = Object(set["a" /* default */])(store, namePath, value, removeIfUndefined);\n  return newStore;\n}\nfunction cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = valueUtil_setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\nfunction containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return Object(esm_typeof["a" /* default */])(obj) === \'object\' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? Object(toConsumableArray["a" /* default */])(store) : Object(objectSpread2["a" /* default */])({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value\n\n    var recursive = isObject(prevValue) && isObject(value);\n    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : utils_cloneDeep(value); // Clone deep for arrays\n  });\n  return newStore;\n}\n\nfunction setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nfunction matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}\nfunction isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || Object(esm_typeof["a" /* default */])(source) !== \'object\' || Object(esm_typeof["a" /* default */])(target) !== \'object\') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(Object(toConsumableArray["a" /* default */])(sourceKeys), Object(toConsumableArray["a" /* default */])(targetKeys)));\n  return Object(toConsumableArray["a" /* default */])(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === \'function\' && typeof targetValue === \'function\') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nfunction defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && Object(esm_typeof["a" /* default */])(event.target) === \'object\' && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nfunction valueUtil_move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(Object(toConsumableArray["a" /* default */])(array.slice(0, toIndex)), [item], Object(toConsumableArray["a" /* default */])(array.slice(toIndex, moveIndex)), Object(toConsumableArray["a" /* default */])(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(Object(toConsumableArray["a" /* default */])(array.slice(0, moveIndex)), Object(toConsumableArray["a" /* default */])(array.slice(moveIndex + 1, toIndex + 1)), [item], Object(toConsumableArray["a" /* default */])(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/validateUtil.js\n\n\n\n\n\n\n\n\n\n // Remove incorrect original ts define\n\nvar AsyncValidator = dist_web["a" /* default */];\n/**\n * Replace with template.\n *   `I\'m ${name}` + { name: \'bamboo\' } = I\'m bamboo\n */\n\nfunction replaceMessage(template, kv) {\n  return template.replace(/\\$\\{\\w+\\}/g, function (str) {\n    var key = str.slice(2, -1);\n    return kv[key];\n  });\n}\n\nvar CODE_LOGIC_ERROR = \'CODE_LOGIC_ERROR\';\n\nfunction validateRule(_x, _x2, _x3, _x4, _x5) {\n  return _validateRule.apply(this, arguments);\n}\n/**\n * We use `async-validator` to validate the value.\n * But only check one value in a time to avoid namePath validate issue.\n */\n\n\nfunction _validateRule() {\n  _validateRule = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/Object(regeneratorRuntime["a" /* default */])().mark(function _callee2(name, value, rule, options, messageVariables) {\n    var cloneRule, originValidator, subRuleField, validator, messages, result, subResults, kv, fillVariableResult;\n    return Object(regeneratorRuntime["a" /* default */])().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cloneRule = Object(objectSpread2["a" /* default */])({}, rule); // Bug of `async-validator`\n            // https://github.com/react-component/field-form/issues/316\n            // https://github.com/react-component/field-form/issues/313\n\n            delete cloneRule.ruleIndex;\n\n            if (cloneRule.validator) {\n              originValidator = cloneRule.validator;\n\n              cloneRule.validator = function () {\n                try {\n                  return originValidator.apply(void 0, arguments);\n                } catch (error) {\n                  console.error(error);\n                  return Promise.reject(CODE_LOGIC_ERROR);\n                }\n              };\n            } // We should special handle array validate\n\n\n            subRuleField = null;\n\n            if (cloneRule && cloneRule.type === \'array\' && cloneRule.defaultField) {\n              subRuleField = cloneRule.defaultField;\n              delete cloneRule.defaultField;\n            }\n\n            validator = new AsyncValidator(Object(defineProperty["a" /* default */])({}, name, [cloneRule]));\n            messages = setValues({}, defaultValidateMessages, options.validateMessages);\n            validator.messages(messages);\n            result = [];\n            _context2.prev = 9;\n            _context2.next = 12;\n            return Promise.resolve(validator.validate(Object(defineProperty["a" /* default */])({}, name, value), Object(objectSpread2["a" /* default */])({}, options)));\n\n          case 12:\n            _context2.next = 17;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2["catch"](9);\n\n            if (_context2.t0.errors) {\n              result = _context2.t0.errors.map(function (_ref4, index) {\n                var message = _ref4.message;\n                var mergedMessage = message === CODE_LOGIC_ERROR ? messages["default"] : message;\n                return /*#__PURE__*/ /*#__PURE__*/react["isValidElement"](mergedMessage) ?\n                /*#__PURE__*/\n                // Wrap ReactNode with `key`\n                react["cloneElement"](mergedMessage, {\n                  key: "error_".concat(index)\n                }) : mergedMessage;\n              });\n            }\n\n          case 17:\n            if (!(!result.length && subRuleField)) {\n              _context2.next = 22;\n              break;\n            }\n\n            _context2.next = 20;\n            return Promise.all(value.map(function (subValue, i) {\n              return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);\n            }));\n\n          case 20:\n            subResults = _context2.sent;\n            return _context2.abrupt("return", subResults.reduce(function (prev, errors) {\n              return [].concat(Object(toConsumableArray["a" /* default */])(prev), Object(toConsumableArray["a" /* default */])(errors));\n            }, []));\n\n          case 22:\n            // Replace message with variables\n            kv = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, rule), {}, {\n              name: name,\n              "enum": (rule["enum"] || []).join(\', \')\n            }, messageVariables);\n            fillVariableResult = result.map(function (error) {\n              if (typeof error === \'string\') {\n                return replaceMessage(error, kv);\n              }\n\n              return error;\n            });\n            return _context2.abrupt("return", fillVariableResult);\n\n          case 25:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[9, 14]]);\n  }));\n  return _validateRule.apply(this, arguments);\n}\n\nfunction validateRules(namePath, value, rules, options, validateFirst, messageVariables) {\n  var name = namePath.join(\'.\'); // Fill rule with context\n\n  var filledRules = rules.map(function (currentRule, ruleIndex) {\n    var originValidatorFunc = currentRule.validator;\n\n    var cloneRule = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, currentRule), {}, {\n      ruleIndex: ruleIndex\n    }); // Replace validator if needed\n\n\n    if (originValidatorFunc) {\n      cloneRule.validator = function (rule, val, callback) {\n        var hasPromise = false; // Wrap callback only accept when promise not provided\n\n        var wrappedCallback = function wrappedCallback() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          } // Wait a tick to make sure return type is a promise\n\n\n          Promise.resolve().then(function () {\n            Object(warning["a" /* default */])(!hasPromise, \'Your validator function has already return a promise. `callback` will be ignored.\');\n\n            if (!hasPromise) {\n              callback.apply(void 0, args);\n            }\n          });\n        }; // Get promise\n\n\n        var promise = originValidatorFunc(rule, val, wrappedCallback);\n        hasPromise = promise && typeof promise.then === \'function\' && typeof promise["catch"] === \'function\';\n        /**\n         * 1. Use promise as the first priority.\n         * 2. If promise not exist, use callback with warning instead\n         */\n\n        Object(warning["a" /* default */])(hasPromise, \'`callback` is deprecated. Please return a promise instead.\');\n\n        if (hasPromise) {\n          promise.then(function () {\n            callback();\n          })["catch"](function (err) {\n            callback(err || \' \');\n          });\n        }\n      };\n    }\n\n    return cloneRule;\n  }).sort(function (_ref, _ref2) {\n    var w1 = _ref.warningOnly,\n        i1 = _ref.ruleIndex;\n    var w2 = _ref2.warningOnly,\n        i2 = _ref2.ruleIndex;\n\n    if (!!w1 === !!w2) {\n      // Let keep origin order\n      return i1 - i2;\n    }\n\n    if (w1) {\n      return 1;\n    }\n\n    return -1;\n  }); // Do validate rules\n\n  var summaryPromise;\n\n  if (validateFirst === true) {\n    // >>>>> Validate by serialization\n    summaryPromise = new Promise( /*#__PURE__*/function () {\n      var _ref3 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/Object(regeneratorRuntime["a" /* default */])().mark(function _callee(resolve, reject) {\n        var i, rule, errors;\n        return Object(regeneratorRuntime["a" /* default */])().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                i = 0;\n\n              case 1:\n                if (!(i < filledRules.length)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                rule = filledRules[i];\n                _context.next = 5;\n                return validateRule(name, value, rule, options, messageVariables);\n\n              case 5:\n                errors = _context.sent;\n\n                if (!errors.length) {\n                  _context.next = 9;\n                  break;\n                }\n\n                reject([{\n                  errors: errors,\n                  rule: rule\n                }]);\n                return _context.abrupt("return");\n\n              case 9:\n                i += 1;\n                _context.next = 1;\n                break;\n\n              case 12:\n                /* eslint-enable */\n                resolve([]);\n\n              case 13:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  } else {\n    // >>>>> Validate by parallel\n    var rulePromises = filledRules.map(function (rule) {\n      return validateRule(name, value, rule, options, messageVariables).then(function (errors) {\n        return {\n          errors: errors,\n          rule: rule\n        };\n      });\n    });\n    summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function (errors) {\n      // Always change to rejection for Field to catch\n      return Promise.reject(errors);\n    });\n  } // Internal catch error to avoid console error log.\n\n\n  summaryPromise["catch"](function (e) {\n    return e;\n  });\n  return summaryPromise;\n}\n\nfunction finishOnAllFailed(_x8) {\n  return _finishOnAllFailed.apply(this, arguments);\n}\n\nfunction _finishOnAllFailed() {\n  _finishOnAllFailed = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/Object(regeneratorRuntime["a" /* default */])().mark(function _callee3(rulePromises) {\n    return Object(regeneratorRuntime["a" /* default */])().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt("return", Promise.all(rulePromises).then(function (errorsList) {\n              var _ref5;\n\n              var errors = (_ref5 = []).concat.apply(_ref5, Object(toConsumableArray["a" /* default */])(errorsList));\n\n              return errors;\n            }));\n\n          case 1:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _finishOnAllFailed.apply(this, arguments);\n}\n\nfunction finishOnFirstFailed(_x9) {\n  return _finishOnFirstFailed.apply(this, arguments);\n}\n\nfunction _finishOnFirstFailed() {\n  _finishOnFirstFailed = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/Object(regeneratorRuntime["a" /* default */])().mark(function _callee4(rulePromises) {\n    var count;\n    return Object(regeneratorRuntime["a" /* default */])().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            count = 0;\n            return _context4.abrupt("return", new Promise(function (resolve) {\n              rulePromises.forEach(function (promise) {\n                promise.then(function (ruleError) {\n                  if (ruleError.errors.length) {\n                    resolve([ruleError]);\n                  }\n\n                  count += 1;\n\n                  if (count === rulePromises.length) {\n                    resolve([]);\n                  }\n                });\n              });\n            }));\n\n          case 2:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _finishOnFirstFailed.apply(this, arguments);\n}\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/Field.js\n\n\n\n\n\n\n\n\n\n\nvar _excluded = ["name"];\n\n\n\n\n\n\n\nvar EMPTY_ERRORS = [];\n\nfunction requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {\n  if (typeof shouldUpdate === \'function\') {\n    return shouldUpdate(prev, next, \'source\' in info ? {\n      source: info.source\n    } : {});\n  }\n\n  return prevValue !== nextValue;\n} // We use Class instead of Hooks here since it will cost much code by using Hooks.\n\n\nvar Field_Field = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(Field, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(Field);\n  /**\n   * Follow state should not management in State since it will async update by React.\n   * This makes first render of form can not get correct state value.\n   */\n\n  /**\n   * Mark when touched & validated. Currently only used for `dependencies`.\n   * Note that we do not think field with `initialValue` is dirty\n   * but this will be by `isFieldDirty` func.\n   */\n  // ============================== Subscriptions ==============================\n\n\n  function Field(props) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Field);\n\n    _this = _super.call(this, props); // Register on init\n\n    _this.state = {\n      resetCount: 0\n    };\n    _this.cancelRegisterFunc = null;\n    _this.mounted = false;\n    _this.touched = false;\n    _this.dirty = false;\n    _this.validatePromise = null;\n    _this.prevValidating = void 0;\n    _this.errors = EMPTY_ERRORS;\n    _this.warnings = EMPTY_ERRORS;\n\n    _this.cancelRegister = function () {\n      var _this$props = _this.props,\n          preserve = _this$props.preserve,\n          isListField = _this$props.isListField,\n          name = _this$props.name;\n\n      if (_this.cancelRegisterFunc) {\n        _this.cancelRegisterFunc(isListField, preserve, getNamePath(name));\n      }\n\n      _this.cancelRegisterFunc = null;\n    };\n\n    _this.getNamePath = function () {\n      var _this$props2 = _this.props,\n          name = _this$props2.name,\n          fieldContext = _this$props2.fieldContext;\n      var _fieldContext$prefixN = fieldContext.prefixName,\n          prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;\n      return name !== undefined ? [].concat(Object(toConsumableArray["a" /* default */])(prefixName), Object(toConsumableArray["a" /* default */])(name)) : [];\n    };\n\n    _this.getRules = function () {\n      var _this$props3 = _this.props,\n          _this$props3$rules = _this$props3.rules,\n          rules = _this$props3$rules === void 0 ? [] : _this$props3$rules,\n          fieldContext = _this$props3.fieldContext;\n      return rules.map(function (rule) {\n        if (typeof rule === \'function\') {\n          return rule(fieldContext);\n        }\n\n        return rule;\n      });\n    };\n\n    _this.refresh = function () {\n      if (!_this.mounted) return;\n      /**\n       * Clean up current node.\n       */\n\n      _this.setState(function (_ref) {\n        var resetCount = _ref.resetCount;\n        return {\n          resetCount: resetCount + 1\n        };\n      });\n    };\n\n    _this.triggerMetaEvent = function (destroy) {\n      var onMetaChange = _this.props.onMetaChange;\n      onMetaChange === null || onMetaChange === void 0 ? void 0 : onMetaChange(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, _this.getMeta()), {}, {\n        destroy: destroy\n      }));\n    };\n\n    _this.onStoreChange = function (prevStore, namePathList, info) {\n      var _this$props4 = _this.props,\n          shouldUpdate = _this$props4.shouldUpdate,\n          _this$props4$dependen = _this$props4.dependencies,\n          dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen,\n          onReset = _this$props4.onReset;\n      var store = info.store;\n\n      var namePath = _this.getNamePath();\n\n      var prevValue = _this.getValue(prevStore);\n\n      var curValue = _this.getValue(store);\n\n      var namePathMatch = namePathList && containsNamePath(namePathList, namePath); // `setFieldsValue` is a quick access to update related status\n\n      if (info.type === \'valueUpdate\' && info.source === \'external\' && prevValue !== curValue) {\n        _this.touched = true;\n        _this.dirty = true;\n        _this.validatePromise = null;\n        _this.errors = EMPTY_ERRORS;\n        _this.warnings = EMPTY_ERRORS;\n\n        _this.triggerMetaEvent();\n      }\n\n      switch (info.type) {\n        case \'reset\':\n          if (!namePathList || namePathMatch) {\n            // Clean up state\n            _this.touched = false;\n            _this.dirty = false;\n            _this.validatePromise = null;\n            _this.errors = EMPTY_ERRORS;\n            _this.warnings = EMPTY_ERRORS;\n\n            _this.triggerMetaEvent();\n\n            onReset === null || onReset === void 0 ? void 0 : onReset();\n\n            _this.refresh();\n\n            return;\n          }\n\n          break;\n\n        /**\n         * In case field with `preserve = false` nest deps like:\n         * - A = 1 => show B\n         * - B = 1 => show C\n         * - Reset A, need clean B, C\n         */\n\n        case \'remove\':\n          {\n            if (shouldUpdate) {\n              _this.reRender();\n\n              return;\n            }\n\n            break;\n          }\n\n        case \'setField\':\n          {\n            if (namePathMatch) {\n              var data = info.data;\n\n              if (\'touched\' in data) {\n                _this.touched = data.touched;\n              }\n\n              if (\'validating\' in data && !(\'originRCField\' in data)) {\n                _this.validatePromise = data.validating ? Promise.resolve([]) : null;\n              }\n\n              if (\'errors\' in data) {\n                _this.errors = data.errors || EMPTY_ERRORS;\n              }\n\n              if (\'warnings\' in data) {\n                _this.warnings = data.warnings || EMPTY_ERRORS;\n              }\n\n              _this.dirty = true;\n\n              _this.triggerMetaEvent();\n\n              _this.reRender();\n\n              return;\n            } // Handle update by `setField` with `shouldUpdate`\n\n\n            if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {\n              _this.reRender();\n\n              return;\n            }\n\n            break;\n          }\n\n        case \'dependenciesUpdate\':\n          {\n            /**\n             * Trigger when marked `dependencies` updated. Related fields will all update\n             */\n            var dependencyList = dependencies.map(getNamePath); // No need for `namePathMath` check and `shouldUpdate` check, since `valueUpdate` will be\n            // emitted earlier and they will work there\n            // If set it may cause unnecessary twice rerendering\n\n            if (dependencyList.some(function (dependency) {\n              return containsNamePath(info.relatedFields, dependency);\n            })) {\n              _this.reRender();\n\n              return;\n            }\n\n            break;\n          }\n\n        default:\n          // 1. If `namePath` exists in `namePathList`, means it\'s related value and should update\n          //      For example <List name="list"><Field name={[\'list\', 0]}></List>\n          //      If `namePathList` is [[\'list\']] (List value update), Field should be updated\n          //      If `namePathList` is [[\'list\', 0]] (Field value update), List shouldn\'t be updated\n          // 2.\n          //   2.1 If `dependencies` is set, `name` is not set and `shouldUpdate` is not set,\n          //       don\'t use `shouldUpdate`. `dependencies` is view as a shortcut if `shouldUpdate`\n          //       is not provided\n          //   2.2 If `shouldUpdate` provided, use customize logic to update the field\n          //       else to check if value changed\n          if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {\n            _this.reRender();\n\n            return;\n          }\n\n          break;\n      }\n\n      if (shouldUpdate === true) {\n        _this.reRender();\n      }\n    };\n\n    _this.validateRules = function (options) {\n      // We should fixed namePath & value to avoid developer change then by form function\n      var namePath = _this.getNamePath();\n\n      var currentValue = _this.getValue(); // Force change to async to avoid rule OOD under renderProps field\n\n\n      var rootPromise = Promise.resolve().then(function () {\n        if (!_this.mounted) {\n          return [];\n        }\n\n        var _this$props5 = _this.props,\n            _this$props5$validate = _this$props5.validateFirst,\n            validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate,\n            messageVariables = _this$props5.messageVariables;\n\n        var _ref2 = options || {},\n            triggerName = _ref2.triggerName;\n\n        var filteredRules = _this.getRules();\n\n        if (triggerName) {\n          filteredRules = filteredRules.filter(function (rule) {\n            var validateTrigger = rule.validateTrigger;\n\n            if (!validateTrigger) {\n              return true;\n            }\n\n            var triggerList = typeUtil_toArray(validateTrigger);\n            return triggerList.includes(triggerName);\n          });\n        }\n\n        var promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);\n        promise["catch"](function (e) {\n          return e;\n        }).then(function () {\n          var ruleErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_ERRORS;\n\n          if (_this.validatePromise === rootPromise) {\n            _this.validatePromise = null; // Get errors & warnings\n\n            var nextErrors = [];\n            var nextWarnings = [];\n            ruleErrors.forEach(function (_ref3) {\n              var warningOnly = _ref3.rule.warningOnly,\n                  _ref3$errors = _ref3.errors,\n                  errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;\n\n              if (warningOnly) {\n                nextWarnings.push.apply(nextWarnings, Object(toConsumableArray["a" /* default */])(errors));\n              } else {\n                nextErrors.push.apply(nextErrors, Object(toConsumableArray["a" /* default */])(errors));\n              }\n            });\n            _this.errors = nextErrors;\n            _this.warnings = nextWarnings;\n\n            _this.triggerMetaEvent();\n\n            _this.reRender();\n          }\n        });\n        return promise;\n      });\n      _this.validatePromise = rootPromise;\n      _this.dirty = true;\n      _this.errors = EMPTY_ERRORS;\n      _this.warnings = EMPTY_ERRORS;\n\n      _this.triggerMetaEvent(); // Force trigger re-render since we need sync renderProps with new meta\n\n\n      _this.reRender();\n\n      return rootPromise;\n    };\n\n    _this.isFieldValidating = function () {\n      return !!_this.validatePromise;\n    };\n\n    _this.isFieldTouched = function () {\n      return _this.touched;\n    };\n\n    _this.isFieldDirty = function () {\n      // Touched or validate or has initialValue\n      if (_this.dirty || _this.props.initialValue !== undefined) {\n        return true;\n      } // Form set initialValue\n\n\n      var fieldContext = _this.props.fieldContext;\n\n      var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK),\n          getInitialValue = _fieldContext$getInte.getInitialValue;\n\n      if (getInitialValue(_this.getNamePath()) !== undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.getErrors = function () {\n      return _this.errors;\n    };\n\n    _this.getWarnings = function () {\n      return _this.warnings;\n    };\n\n    _this.isListField = function () {\n      return _this.props.isListField;\n    };\n\n    _this.isList = function () {\n      return _this.props.isList;\n    };\n\n    _this.isPreserve = function () {\n      return _this.props.preserve;\n    };\n\n    _this.getMeta = function () {\n      // Make error & validating in cache to save perf\n      _this.prevValidating = _this.isFieldValidating();\n      var meta = {\n        touched: _this.isFieldTouched(),\n        validating: _this.prevValidating,\n        errors: _this.errors,\n        warnings: _this.warnings,\n        name: _this.getNamePath()\n      };\n      return meta;\n    };\n\n    _this.getOnlyChild = function (children) {\n      // Support render props\n      if (typeof children === \'function\') {\n        var meta = _this.getMeta();\n\n        return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {\n          isFunction: true\n        });\n      } // Filed element only\n\n\n      var childList = Object(toArray["a" /* default */])(children);\n\n      if (childList.length !== 1 || ! /*#__PURE__*/react["isValidElement"](childList[0])) {\n        return {\n          child: childList,\n          isFunction: false\n        };\n      }\n\n      return {\n        child: childList[0],\n        isFunction: false\n      };\n    };\n\n    _this.getValue = function (store) {\n      var getFieldsValue = _this.props.fieldContext.getFieldsValue;\n\n      var namePath = _this.getNamePath();\n\n      return getValue(store || getFieldsValue(true), namePath);\n    };\n\n    _this.getControlled = function () {\n      var childProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props6 = _this.props,\n          trigger = _this$props6.trigger,\n          validateTrigger = _this$props6.validateTrigger,\n          getValueFromEvent = _this$props6.getValueFromEvent,\n          normalize = _this$props6.normalize,\n          valuePropName = _this$props6.valuePropName,\n          getValueProps = _this$props6.getValueProps,\n          fieldContext = _this$props6.fieldContext;\n      var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : fieldContext.validateTrigger;\n\n      var namePath = _this.getNamePath();\n\n      var getInternalHooks = fieldContext.getInternalHooks,\n          getFieldsValue = fieldContext.getFieldsValue;\n\n      var _getInternalHooks = getInternalHooks(HOOK_MARK),\n          dispatch = _getInternalHooks.dispatch;\n\n      var value = _this.getValue();\n\n      var mergedGetValueProps = getValueProps || function (val) {\n        return Object(defineProperty["a" /* default */])({}, valuePropName, val);\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var originTriggerFunc = childProps[trigger];\n\n      var control = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, childProps), mergedGetValueProps(value)); // Add trigger\n\n\n      control[trigger] = function () {\n        // Mark as touched\n        _this.touched = true;\n        _this.dirty = true;\n\n        _this.triggerMetaEvent();\n\n        var newValue;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (getValueFromEvent) {\n          newValue = getValueFromEvent.apply(void 0, args);\n        } else {\n          newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));\n        }\n\n        if (normalize) {\n          newValue = normalize(newValue, value, getFieldsValue(true));\n        }\n\n        dispatch({\n          type: \'updateValue\',\n          namePath: namePath,\n          value: newValue\n        });\n\n        if (originTriggerFunc) {\n          originTriggerFunc.apply(void 0, args);\n        }\n      }; // Add validateTrigger\n\n\n      var validateTriggerList = typeUtil_toArray(mergedValidateTrigger || []);\n      validateTriggerList.forEach(function (triggerName) {\n        // Wrap additional function of component, so that we can get latest value from store\n        var originTrigger = control[triggerName];\n\n        control[triggerName] = function () {\n          if (originTrigger) {\n            originTrigger.apply(void 0, arguments);\n          } // Always use latest rules\n\n\n          var rules = _this.props.rules;\n\n          if (rules && rules.length) {\n            // We dispatch validate to root,\n            // since it will update related data with other field with same name\n            dispatch({\n              type: \'validateField\',\n              namePath: namePath,\n              triggerName: triggerName\n            });\n          }\n        };\n      });\n      return control;\n    };\n\n    if (props.fieldContext) {\n      var getInternalHooks = props.fieldContext.getInternalHooks;\n\n      var _getInternalHooks2 = getInternalHooks(HOOK_MARK),\n          initEntityValue = _getInternalHooks2.initEntityValue;\n\n      initEntityValue(Object(assertThisInitialized["a" /* default */])(_this));\n    }\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Field, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this$props7 = this.props,\n          shouldUpdate = _this$props7.shouldUpdate,\n          fieldContext = _this$props7.fieldContext;\n      this.mounted = true; // Register on init\n\n      if (fieldContext) {\n        var getInternalHooks = fieldContext.getInternalHooks;\n\n        var _getInternalHooks3 = getInternalHooks(HOOK_MARK),\n            registerField = _getInternalHooks3.registerField;\n\n        this.cancelRegisterFunc = registerField(this);\n      } // One more render for component in case fields not ready\n\n\n      if (shouldUpdate === true) {\n        this.reRender();\n      }\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.cancelRegister();\n      this.triggerMetaEvent(true);\n      this.mounted = false;\n    }\n  }, {\n    key: "reRender",\n    value: function reRender() {\n      if (!this.mounted) return;\n      this.forceUpdate();\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var resetCount = this.state.resetCount;\n      var children = this.props.children;\n\n      var _this$getOnlyChild = this.getOnlyChild(children),\n          child = _this$getOnlyChild.child,\n          isFunction = _this$getOnlyChild.isFunction; // Not need to `cloneElement` since user can handle this in render function self\n\n\n      var returnChildNode;\n\n      if (isFunction) {\n        returnChildNode = child;\n      } else if ( /*#__PURE__*/react["isValidElement"](child)) {\n        returnChildNode = /*#__PURE__*/react["cloneElement"](child, this.getControlled(child.props));\n      } else {\n        Object(warning["a" /* default */])(!child, \'`children` of Field is not validate ReactElement.\');\n        returnChildNode = child;\n      }\n\n      return /*#__PURE__*/react["createElement"](react["Fragment"], {\n        key: resetCount\n      }, returnChildNode);\n    }\n  }]);\n\n  return Field;\n}(react["Component"]);\n\nField_Field.contextType = FieldContext;\nField_Field.defaultProps = {\n  trigger: \'onChange\',\n  valuePropName: \'value\'\n};\n\nfunction WrapperField(_ref5) {\n  var name = _ref5.name,\n      restProps = Object(objectWithoutProperties["a" /* default */])(_ref5, _excluded);\n\n  var fieldContext = react["useContext"](FieldContext);\n  var namePath = name !== undefined ? getNamePath(name) : undefined;\n  var key = \'keep\';\n\n  if (!restProps.isListField) {\n    key = "_".concat((namePath || []).join(\'_\'));\n  } // Warning if it\'s a directly list field.\n  // We can still support multiple level field preserve.\n\n\n  if (false) {}\n\n  return /*#__PURE__*/react["createElement"](Field_Field, Object(esm_extends["a" /* default */])({\n    key: key,\n    name: namePath\n  }, restProps, {\n    fieldContext: fieldContext\n  }));\n}\n\n/* harmony default export */ var es_Field = (WrapperField);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/ListContext.js\n\nvar ListContext = /*#__PURE__*/react["createContext"](null);\n/* harmony default export */ var es_ListContext = (ListContext);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/List.js\n\n\n\n\n\n\n\n\n\nvar List_List = function List(_ref) {\n  var name = _ref.name,\n      initialValue = _ref.initialValue,\n      children = _ref.children,\n      rules = _ref.rules,\n      validateTrigger = _ref.validateTrigger;\n  var context = react["useContext"](FieldContext);\n  var keyRef = react["useRef"]({\n    keys: [],\n    id: 0\n  });\n  var keyManager = keyRef.current;\n  var prefixName = react["useMemo"](function () {\n    var parentPrefixName = getNamePath(context.prefixName) || [];\n    return [].concat(Object(toConsumableArray["a" /* default */])(parentPrefixName), Object(toConsumableArray["a" /* default */])(getNamePath(name)));\n  }, [context.prefixName, name]);\n  var fieldContext = react["useMemo"](function () {\n    return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, context), {}, {\n      prefixName: prefixName\n    });\n  }, [context, prefixName]); // List context\n\n  var listContext = react["useMemo"](function () {\n    return {\n      getKey: function getKey(namePath) {\n        var len = prefixName.length;\n        var pathName = namePath[len];\n        return [keyManager.keys[pathName], namePath.slice(len + 1)];\n      }\n    };\n  }, [prefixName]); // User should not pass `children` as other type.\n\n  if (typeof children !== \'function\') {\n    Object(warning["a" /* default */])(false, \'Form.List only accepts function as children.\');\n    return null;\n  }\n\n  var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {\n    var source = _ref2.source;\n\n    if (source === \'internal\') {\n      return false;\n    }\n\n    return prevValue !== nextValue;\n  };\n\n  return /*#__PURE__*/react["createElement"](es_ListContext.Provider, {\n    value: listContext\n  }, /*#__PURE__*/react["createElement"](FieldContext.Provider, {\n    value: fieldContext\n  }, /*#__PURE__*/react["createElement"](es_Field, {\n    name: [],\n    shouldUpdate: shouldUpdate,\n    rules: rules,\n    validateTrigger: validateTrigger,\n    initialValue: initialValue,\n    isList: true\n  }, function (_ref3, meta) {\n    var _ref3$value = _ref3.value,\n        value = _ref3$value === void 0 ? [] : _ref3$value,\n        onChange = _ref3.onChange;\n    var getFieldValue = context.getFieldValue;\n\n    var getNewValue = function getNewValue() {\n      var values = getFieldValue(prefixName || []);\n      return values || [];\n    };\n    /**\n     * Always get latest value in case user update fields by `form` api.\n     */\n\n\n    var operations = {\n      add: function add(defaultValue, index) {\n        // Mapping keys\n        var newValue = getNewValue();\n\n        if (index >= 0 && index <= newValue.length) {\n          keyManager.keys = [].concat(Object(toConsumableArray["a" /* default */])(keyManager.keys.slice(0, index)), [keyManager.id], Object(toConsumableArray["a" /* default */])(keyManager.keys.slice(index)));\n          onChange([].concat(Object(toConsumableArray["a" /* default */])(newValue.slice(0, index)), [defaultValue], Object(toConsumableArray["a" /* default */])(newValue.slice(index))));\n        } else {\n          if (false) {}\n\n          keyManager.keys = [].concat(Object(toConsumableArray["a" /* default */])(keyManager.keys), [keyManager.id]);\n          onChange([].concat(Object(toConsumableArray["a" /* default */])(newValue), [defaultValue]));\n        }\n\n        keyManager.id += 1;\n      },\n      remove: function remove(index) {\n        var newValue = getNewValue();\n        var indexSet = new Set(Array.isArray(index) ? index : [index]);\n\n        if (indexSet.size <= 0) {\n          return;\n        }\n\n        keyManager.keys = keyManager.keys.filter(function (_, keysIndex) {\n          return !indexSet.has(keysIndex);\n        }); // Trigger store change\n\n        onChange(newValue.filter(function (_, valueIndex) {\n          return !indexSet.has(valueIndex);\n        }));\n      },\n      move: function move(from, to) {\n        if (from === to) {\n          return;\n        }\n\n        var newValue = getNewValue(); // Do not handle out of range\n\n        if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {\n          return;\n        }\n\n        keyManager.keys = valueUtil_move(keyManager.keys, from, to); // Trigger store change\n\n        onChange(valueUtil_move(newValue, from, to));\n      }\n    };\n    var listValue = value || [];\n\n    if (!Array.isArray(listValue)) {\n      listValue = [];\n\n      if (false) {}\n    }\n\n    return children(listValue.map(function (__, index) {\n      var key = keyManager.keys[index];\n\n      if (key === undefined) {\n        keyManager.keys[index] = keyManager.id;\n        key = keyManager.keys[index];\n        keyManager.id += 1;\n      }\n\n      return {\n        name: index,\n        key: key,\n        isListField: true\n      };\n    }), operations, meta);\n  })));\n};\n\n/* harmony default export */ var es_List = (List_List);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/asyncUtil.js\nfunction allPromiseFinish(promiseList) {\n  var hasError = false;\n  var count = promiseList.length;\n  var results = [];\n\n  if (!promiseList.length) {\n    return Promise.resolve([]);\n  }\n\n  return new Promise(function (resolve, reject) {\n    promiseList.forEach(function (promise, index) {\n      promise["catch"](function (e) {\n        hasError = true;\n        return e;\n      }).then(function (result) {\n        count -= 1;\n        results[index] = result;\n\n        if (count > 0) {\n          return;\n        }\n\n        if (hasError) {\n          reject(results);\n        }\n\n        resolve(results);\n      });\n    });\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/utils/NameMap.js\n\n\n\n\n\nvar SPLIT = \'__@field_split__\';\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\n\nfunction NameMap_normalize(namePath) {\n  return namePath.map(function (cell) {\n    return "".concat(Object(esm_typeof["a" /* default */])(cell), ":").concat(cell);\n  }) // Magic split\n  .join(SPLIT);\n}\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\n\n\nvar NameMap_NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    Object(classCallCheck["a" /* default */])(this, NameMap);\n\n    this.kvs = new Map();\n  }\n\n  Object(createClass["a" /* default */])(NameMap, [{\n    key: "set",\n    value: function set(key, value) {\n      this.kvs.set(NameMap_normalize(key), value);\n    }\n  }, {\n    key: "get",\n    value: function get(key) {\n      return this.kvs.get(NameMap_normalize(key));\n    }\n  }, {\n    key: "update",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n\n      if (!next) {\n        this["delete"](key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      this.kvs["delete"](NameMap_normalize(key));\n    } // Since we only use this in test, let simply realize this\n\n  }, {\n    key: "map",\n    value: function map(callback) {\n      return Object(toConsumableArray["a" /* default */])(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = Object(slicedToArray["a" /* default */])(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n                _cell$match2 = Object(slicedToArray["a" /* default */])(_cell$match, 3),\n                type = _cell$match2[1],\n                unit = _cell$match2[2];\n\n            return type === \'number\' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n            value = _ref3.value;\n        json[key.join(\'.\')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n\n  return NameMap;\n}();\n\n/* harmony default export */ var utils_NameMap = (NameMap_NameMap);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/useForm.js\n\n\n\n\n\n\nvar useForm_excluded = ["name", "errors"];\n\n\n\n\n\n\n\n\nvar useForm_FormStore = /*#__PURE__*/Object(createClass["a" /* default */])(function FormStore(forceRootUpdate) {\n  var _this = this;\n\n  Object(classCallCheck["a" /* default */])(this, FormStore);\n\n  this.formHooked = false;\n  this.forceRootUpdate = void 0;\n  this.subscribable = true;\n  this.store = {};\n  this.fieldEntities = [];\n  this.initialValues = {};\n  this.callbacks = {};\n  this.validateMessages = null;\n  this.preserve = null;\n  this.lastValidatePromise = null;\n\n  this.getForm = function () {\n    return {\n      getFieldValue: _this.getFieldValue,\n      getFieldsValue: _this.getFieldsValue,\n      getFieldError: _this.getFieldError,\n      getFieldWarning: _this.getFieldWarning,\n      getFieldsError: _this.getFieldsError,\n      isFieldsTouched: _this.isFieldsTouched,\n      isFieldTouched: _this.isFieldTouched,\n      isFieldValidating: _this.isFieldValidating,\n      isFieldsValidating: _this.isFieldsValidating,\n      resetFields: _this.resetFields,\n      setFields: _this.setFields,\n      setFieldsValue: _this.setFieldsValue,\n      validateFields: _this.validateFields,\n      submit: _this.submit,\n      _init: true,\n      getInternalHooks: _this.getInternalHooks\n    };\n  };\n\n  this.getInternalHooks = function (key) {\n    if (key === HOOK_MARK) {\n      _this.formHooked = true;\n      return {\n        dispatch: _this.dispatch,\n        initEntityValue: _this.initEntityValue,\n        registerField: _this.registerField,\n        useSubscribe: _this.useSubscribe,\n        setInitialValues: _this.setInitialValues,\n        destroyForm: _this.destroyForm,\n        setCallbacks: _this.setCallbacks,\n        setValidateMessages: _this.setValidateMessages,\n        getFields: _this.getFields,\n        setPreserve: _this.setPreserve,\n        getInitialValue: _this.getInitialValue,\n        registerWatch: _this.registerWatch\n      };\n    }\n\n    Object(warning["a" /* default */])(false, \'`getInternalHooks` is internal usage. Should not call directly.\');\n    return null;\n  };\n\n  this.useSubscribe = function (subscribable) {\n    _this.subscribable = subscribable;\n  };\n\n  this.prevWithoutPreserves = null;\n\n  this.setInitialValues = function (initialValues, init) {\n    _this.initialValues = initialValues || {};\n\n    if (init) {\n      var _this$prevWithoutPres;\n\n      var nextStore = setValues({}, initialValues, _this.store); // We will take consider prev form unmount fields.\n      // When the field is not `preserve`, we need fill this with initialValues instead of store.\n      // eslint-disable-next-line array-callback-return\n\n      (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 ? void 0 : _this$prevWithoutPres.map(function (_ref) {\n        var namePath = _ref.key;\n        nextStore = valueUtil_setValue(nextStore, namePath, getValue(initialValues, namePath));\n      });\n      _this.prevWithoutPreserves = null;\n\n      _this.updateStore(nextStore);\n    }\n  };\n\n  this.destroyForm = function () {\n    var prevWithoutPreserves = new utils_NameMap();\n\n    _this.getFieldEntities(true).forEach(function (entity) {\n      if (!_this.isMergedPreserve(entity.isPreserve())) {\n        prevWithoutPreserves.set(entity.getNamePath(), true);\n      }\n    });\n\n    _this.prevWithoutPreserves = prevWithoutPreserves;\n  };\n\n  this.getInitialValue = function (namePath) {\n    var initValue = getValue(_this.initialValues, namePath); // Not cloneDeep when without `namePath`\n\n    return namePath.length ? utils_cloneDeep(initValue) : initValue;\n  };\n\n  this.setCallbacks = function (callbacks) {\n    _this.callbacks = callbacks;\n  };\n\n  this.setValidateMessages = function (validateMessages) {\n    _this.validateMessages = validateMessages;\n  };\n\n  this.setPreserve = function (preserve) {\n    _this.preserve = preserve;\n  };\n\n  this.watchList = [];\n\n  this.registerWatch = function (callback) {\n    _this.watchList.push(callback);\n\n    return function () {\n      _this.watchList = _this.watchList.filter(function (fn) {\n        return fn !== callback;\n      });\n    };\n  };\n\n  this.notifyWatch = function () {\n    var namePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : []; // No need to cost perf when nothing need to watch\n\n    if (_this.watchList.length) {\n      var values = _this.getFieldsValue();\n\n      _this.watchList.forEach(function (callback) {\n        callback(values, namePath);\n      });\n    }\n  };\n\n  this.timeoutId = null;\n\n  this.warningUnhooked = function () {\n    if (false) {}\n  };\n\n  this.updateStore = function (nextStore) {\n    _this.store = nextStore;\n  };\n\n  this.getFieldEntities = function () {\n    var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!pure) {\n      return _this.fieldEntities;\n    }\n\n    return _this.fieldEntities.filter(function (field) {\n      return field.getNamePath().length;\n    });\n  };\n\n  this.getFieldsMap = function () {\n    var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var cache = new utils_NameMap();\n\n    _this.getFieldEntities(pure).forEach(function (field) {\n      var namePath = field.getNamePath();\n      cache.set(namePath, field);\n    });\n\n    return cache;\n  };\n\n  this.getFieldEntitiesForNamePathList = function (nameList) {\n    if (!nameList) {\n      return _this.getFieldEntities(true);\n    }\n\n    var cache = _this.getFieldsMap(true);\n\n    return nameList.map(function (name) {\n      var namePath = getNamePath(name);\n      return cache.get(namePath) || {\n        INVALIDATE_NAME_PATH: getNamePath(name)\n      };\n    });\n  };\n\n  this.getFieldsValue = function (nameList, filterFunc) {\n    _this.warningUnhooked();\n\n    if (nameList === true && !filterFunc) {\n      return _this.store;\n    }\n\n    var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);\n\n    var filteredNameList = [];\n    fieldEntities.forEach(function (entity) {\n      var _entity$isListField;\n\n      var namePath = \'INVALIDATE_NAME_PATH\' in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath(); // Ignore when it\'s a list item and not specific the namePath,\n      // since parent field is already take in count\n\n      if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {\n        return;\n      }\n\n      if (!filterFunc) {\n        filteredNameList.push(namePath);\n      } else {\n        var meta = \'getMeta\' in entity ? entity.getMeta() : null;\n\n        if (filterFunc(meta)) {\n          filteredNameList.push(namePath);\n        }\n      }\n    });\n    return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));\n  };\n\n  this.getFieldValue = function (name) {\n    _this.warningUnhooked();\n\n    var namePath = getNamePath(name);\n    return getValue(_this.store, namePath);\n  };\n\n  this.getFieldsError = function (nameList) {\n    _this.warningUnhooked();\n\n    var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);\n\n    return fieldEntities.map(function (entity, index) {\n      if (entity && !(\'INVALIDATE_NAME_PATH\' in entity)) {\n        return {\n          name: entity.getNamePath(),\n          errors: entity.getErrors(),\n          warnings: entity.getWarnings()\n        };\n      }\n\n      return {\n        name: getNamePath(nameList[index]),\n        errors: [],\n        warnings: []\n      };\n    });\n  };\n\n  this.getFieldError = function (name) {\n    _this.warningUnhooked();\n\n    var namePath = getNamePath(name);\n\n    var fieldError = _this.getFieldsError([namePath])[0];\n\n    return fieldError.errors;\n  };\n\n  this.getFieldWarning = function (name) {\n    _this.warningUnhooked();\n\n    var namePath = getNamePath(name);\n\n    var fieldError = _this.getFieldsError([namePath])[0];\n\n    return fieldError.warnings;\n  };\n\n  this.isFieldsTouched = function () {\n    _this.warningUnhooked();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var arg0 = args[0],\n        arg1 = args[1];\n    var namePathList;\n    var isAllFieldsTouched = false;\n\n    if (args.length === 0) {\n      namePathList = null;\n    } else if (args.length === 1) {\n      if (Array.isArray(arg0)) {\n        namePathList = arg0.map(getNamePath);\n        isAllFieldsTouched = false;\n      } else {\n        namePathList = null;\n        isAllFieldsTouched = arg0;\n      }\n    } else {\n      namePathList = arg0.map(getNamePath);\n      isAllFieldsTouched = arg1;\n    }\n\n    var fieldEntities = _this.getFieldEntities(true);\n\n    var isFieldTouched = function isFieldTouched(field) {\n      return field.isFieldTouched();\n    }; // ===== Will get fully compare when not config namePathList =====\n\n\n    if (!namePathList) {\n      return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);\n    } // Generate a nest tree for validate\n\n\n    var map = new utils_NameMap();\n    namePathList.forEach(function (shortNamePath) {\n      map.set(shortNamePath, []);\n    });\n    fieldEntities.forEach(function (field) {\n      var fieldNamePath = field.getNamePath(); // Find matched entity and put into list\n\n      namePathList.forEach(function (shortNamePath) {\n        if (shortNamePath.every(function (nameUnit, i) {\n          return fieldNamePath[i] === nameUnit;\n        })) {\n          map.update(shortNamePath, function (list) {\n            return [].concat(Object(toConsumableArray["a" /* default */])(list), [field]);\n          });\n        }\n      });\n    }); // Check if NameMap value is touched\n\n    var isNamePathListTouched = function isNamePathListTouched(entities) {\n      return entities.some(isFieldTouched);\n    };\n\n    var namePathListEntities = map.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);\n  };\n\n  this.isFieldTouched = function (name) {\n    _this.warningUnhooked();\n\n    return _this.isFieldsTouched([name]);\n  };\n\n  this.isFieldsValidating = function (nameList) {\n    _this.warningUnhooked();\n\n    var fieldEntities = _this.getFieldEntities();\n\n    if (!nameList) {\n      return fieldEntities.some(function (testField) {\n        return testField.isFieldValidating();\n      });\n    }\n\n    var namePathList = nameList.map(getNamePath);\n    return fieldEntities.some(function (testField) {\n      var fieldNamePath = testField.getNamePath();\n      return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();\n    });\n  };\n\n  this.isFieldValidating = function (name) {\n    _this.warningUnhooked();\n\n    return _this.isFieldsValidating([name]);\n  };\n\n  this.resetWithFieldInitialValue = function () {\n    var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Create cache\n\n    var cache = new utils_NameMap();\n\n    var fieldEntities = _this.getFieldEntities(true);\n\n    fieldEntities.forEach(function (field) {\n      var initialValue = field.props.initialValue;\n      var namePath = field.getNamePath(); // Record only if has `initialValue`\n\n      if (initialValue !== undefined) {\n        var records = cache.get(namePath) || new Set();\n        records.add({\n          entity: field,\n          value: initialValue\n        });\n        cache.set(namePath, records);\n      }\n    }); // Reset\n\n    var resetWithFields = function resetWithFields(entities) {\n      entities.forEach(function (field) {\n        var initialValue = field.props.initialValue;\n\n        if (initialValue !== undefined) {\n          var namePath = field.getNamePath();\n\n          var formInitialValue = _this.getInitialValue(namePath);\n\n          if (formInitialValue !== undefined) {\n            // Warning if conflict with form initialValues and do not modify value\n            Object(warning["a" /* default */])(false, "Form already set \'initialValues\' with path \'".concat(namePath.join(\'.\'), "\'. Field can not overwrite it."));\n          } else {\n            var records = cache.get(namePath);\n\n            if (records && records.size > 1) {\n              // Warning if multiple field set `initialValue`and do not modify value\n              Object(warning["a" /* default */])(false, "Multiple Field with path \'".concat(namePath.join(\'.\'), "\' set \'initialValue\'. Can not decide which one to pick."));\n            } else if (records) {\n              var originValue = _this.getFieldValue(namePath); // Set `initialValue`\n\n\n              if (!info.skipExist || originValue === undefined) {\n                _this.updateStore(valueUtil_setValue(_this.store, namePath, Object(toConsumableArray["a" /* default */])(records)[0].value));\n              }\n            }\n          }\n        }\n      });\n    };\n\n    var requiredFieldEntities;\n\n    if (info.entities) {\n      requiredFieldEntities = info.entities;\n    } else if (info.namePathList) {\n      requiredFieldEntities = [];\n      info.namePathList.forEach(function (namePath) {\n        var records = cache.get(namePath);\n\n        if (records) {\n          var _requiredFieldEntitie;\n\n          (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, Object(toConsumableArray["a" /* default */])(Object(toConsumableArray["a" /* default */])(records).map(function (r) {\n            return r.entity;\n          })));\n        }\n      });\n    } else {\n      requiredFieldEntities = fieldEntities;\n    }\n\n    resetWithFields(requiredFieldEntities);\n  };\n\n  this.resetFields = function (nameList) {\n    _this.warningUnhooked();\n\n    var prevStore = _this.store;\n\n    if (!nameList) {\n      _this.updateStore(setValues({}, _this.initialValues));\n\n      _this.resetWithFieldInitialValue();\n\n      _this.notifyObservers(prevStore, null, {\n        type: \'reset\'\n      });\n\n      _this.notifyWatch();\n\n      return;\n    } // Reset by `nameList`\n\n\n    var namePathList = nameList.map(getNamePath);\n    namePathList.forEach(function (namePath) {\n      var initialValue = _this.getInitialValue(namePath);\n\n      _this.updateStore(valueUtil_setValue(_this.store, namePath, initialValue));\n    });\n\n    _this.resetWithFieldInitialValue({\n      namePathList: namePathList\n    });\n\n    _this.notifyObservers(prevStore, namePathList, {\n      type: \'reset\'\n    });\n\n    _this.notifyWatch(namePathList);\n  };\n\n  this.setFields = function (fields) {\n    _this.warningUnhooked();\n\n    var prevStore = _this.store;\n    var namePathList = [];\n    fields.forEach(function (fieldData) {\n      var name = fieldData.name,\n          errors = fieldData.errors,\n          data = Object(objectWithoutProperties["a" /* default */])(fieldData, useForm_excluded);\n\n      var namePath = getNamePath(name);\n      namePathList.push(namePath); // Value\n\n      if (\'value\' in data) {\n        _this.updateStore(valueUtil_setValue(_this.store, namePath, data.value));\n      }\n\n      _this.notifyObservers(prevStore, [namePath], {\n        type: \'setField\',\n        data: fieldData\n      });\n    });\n\n    _this.notifyWatch(namePathList);\n  };\n\n  this.getFields = function () {\n    var entities = _this.getFieldEntities(true);\n\n    var fields = entities.map(function (field) {\n      var namePath = field.getNamePath();\n      var meta = field.getMeta();\n\n      var fieldData = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, meta), {}, {\n        name: namePath,\n        value: _this.getFieldValue(namePath)\n      });\n\n      Object.defineProperty(fieldData, \'originRCField\', {\n        value: true\n      });\n      return fieldData;\n    });\n    return fields;\n  };\n\n  this.initEntityValue = function (entity) {\n    var initialValue = entity.props.initialValue;\n\n    if (initialValue !== undefined) {\n      var namePath = entity.getNamePath();\n      var prevValue = getValue(_this.store, namePath);\n\n      if (prevValue === undefined) {\n        _this.updateStore(valueUtil_setValue(_this.store, namePath, initialValue));\n      }\n    }\n  };\n\n  this.isMergedPreserve = function (fieldPreserve) {\n    var mergedPreserve = fieldPreserve !== undefined ? fieldPreserve : _this.preserve;\n    return mergedPreserve !== null && mergedPreserve !== void 0 ? mergedPreserve : true;\n  };\n\n  this.registerField = function (entity) {\n    _this.fieldEntities.push(entity);\n\n    var namePath = entity.getNamePath();\n\n    _this.notifyWatch([namePath]); // Set initial values\n\n\n    if (entity.props.initialValue !== undefined) {\n      var prevStore = _this.store;\n\n      _this.resetWithFieldInitialValue({\n        entities: [entity],\n        skipExist: true\n      });\n\n      _this.notifyObservers(prevStore, [entity.getNamePath()], {\n        type: \'valueUpdate\',\n        source: \'internal\'\n      });\n    } // un-register field callback\n\n\n    return function (isListField, preserve) {\n      var subNamePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      _this.fieldEntities = _this.fieldEntities.filter(function (item) {\n        return item !== entity;\n      }); // Clean up store value if not preserve\n\n      if (!_this.isMergedPreserve(preserve) && (!isListField || subNamePath.length > 1)) {\n        var defaultValue = isListField ? undefined : _this.getInitialValue(namePath);\n\n        if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function (field) {\n          return (// Only reset when no namePath exist\n            !matchNamePath(field.getNamePath(), namePath)\n          );\n        })) {\n          var _prevStore = _this.store;\n\n          _this.updateStore(valueUtil_setValue(_prevStore, namePath, defaultValue, true)); // Notify that field is unmount\n\n\n          _this.notifyObservers(_prevStore, [namePath], {\n            type: \'remove\'\n          }); // Dependencies update\n\n\n          _this.triggerDependenciesUpdate(_prevStore, namePath);\n        }\n      }\n\n      _this.notifyWatch([namePath]);\n    };\n  };\n\n  this.dispatch = function (action) {\n    switch (action.type) {\n      case \'updateValue\':\n        {\n          var namePath = action.namePath,\n              value = action.value;\n\n          _this.updateValue(namePath, value);\n\n          break;\n        }\n\n      case \'validateField\':\n        {\n          var _namePath = action.namePath,\n              triggerName = action.triggerName;\n\n          _this.validateFields([_namePath], {\n            triggerName: triggerName\n          });\n\n          break;\n        }\n\n      default: // Currently we don\'t have other action. Do nothing.\n\n    }\n  };\n\n  this.notifyObservers = function (prevStore, namePathList, info) {\n    if (_this.subscribable) {\n      var mergedInfo = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, info), {}, {\n        store: _this.getFieldsValue(true)\n      });\n\n      _this.getFieldEntities().forEach(function (_ref3) {\n        var onStoreChange = _ref3.onStoreChange;\n        onStoreChange(prevStore, namePathList, mergedInfo);\n      });\n    } else {\n      _this.forceRootUpdate();\n    }\n  };\n\n  this.triggerDependenciesUpdate = function (prevStore, namePath) {\n    var childrenFields = _this.getDependencyChildrenFields(namePath);\n\n    if (childrenFields.length) {\n      _this.validateFields(childrenFields);\n    }\n\n    _this.notifyObservers(prevStore, childrenFields, {\n      type: \'dependenciesUpdate\',\n      relatedFields: [namePath].concat(Object(toConsumableArray["a" /* default */])(childrenFields))\n    });\n\n    return childrenFields;\n  };\n\n  this.updateValue = function (name, value) {\n    var namePath = getNamePath(name);\n    var prevStore = _this.store;\n\n    _this.updateStore(valueUtil_setValue(_this.store, namePath, value));\n\n    _this.notifyObservers(prevStore, [namePath], {\n      type: \'valueUpdate\',\n      source: \'internal\'\n    });\n\n    _this.notifyWatch([namePath]); // Dependencies update\n\n\n    var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath); // trigger callback function\n\n\n    var onValuesChange = _this.callbacks.onValuesChange;\n\n    if (onValuesChange) {\n      var changedValues = cloneByNamePathList(_this.store, [namePath]);\n      onValuesChange(changedValues, _this.getFieldsValue());\n    }\n\n    _this.triggerOnFieldsChange([namePath].concat(Object(toConsumableArray["a" /* default */])(childrenFields)));\n  };\n\n  this.setFieldsValue = function (store) {\n    _this.warningUnhooked();\n\n    var prevStore = _this.store;\n\n    if (store) {\n      var nextStore = setValues(_this.store, store);\n\n      _this.updateStore(nextStore);\n    }\n\n    _this.notifyObservers(prevStore, null, {\n      type: \'valueUpdate\',\n      source: \'external\'\n    });\n\n    _this.notifyWatch();\n  };\n\n  this.getDependencyChildrenFields = function (rootNamePath) {\n    var children = new Set();\n    var childrenFields = [];\n    var dependencies2fields = new utils_NameMap();\n    /**\n     * Generate maps\n     * Can use cache to save perf if user report performance issue with this\n     */\n\n    _this.getFieldEntities().forEach(function (field) {\n      var dependencies = field.props.dependencies;\n      (dependencies || []).forEach(function (dependency) {\n        var dependencyNamePath = getNamePath(dependency);\n        dependencies2fields.update(dependencyNamePath, function () {\n          var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n          fields.add(field);\n          return fields;\n        });\n      });\n    });\n\n    var fillChildren = function fillChildren(namePath) {\n      var fields = dependencies2fields.get(namePath) || new Set();\n      fields.forEach(function (field) {\n        if (!children.has(field)) {\n          children.add(field);\n          var fieldNamePath = field.getNamePath();\n\n          if (field.isFieldDirty() && fieldNamePath.length) {\n            childrenFields.push(fieldNamePath);\n            fillChildren(fieldNamePath);\n          }\n        }\n      });\n    };\n\n    fillChildren(rootNamePath);\n    return childrenFields;\n  };\n\n  this.triggerOnFieldsChange = function (namePathList, filedErrors) {\n    var onFieldsChange = _this.callbacks.onFieldsChange;\n\n    if (onFieldsChange) {\n      var fields = _this.getFields();\n      /**\n       * Fill errors since `fields` may be replaced by controlled fields\n       */\n\n\n      if (filedErrors) {\n        var cache = new utils_NameMap();\n        filedErrors.forEach(function (_ref4) {\n          var name = _ref4.name,\n              errors = _ref4.errors;\n          cache.set(name, errors);\n        });\n        fields.forEach(function (field) {\n          // eslint-disable-next-line no-param-reassign\n          field.errors = cache.get(field.name) || field.errors;\n        });\n      }\n\n      var changedFields = fields.filter(function (_ref5) {\n        var fieldName = _ref5.name;\n        return containsNamePath(namePathList, fieldName);\n      });\n      onFieldsChange(changedFields, fields);\n    }\n  };\n\n  this.validateFields = function (nameList, options) {\n    _this.warningUnhooked();\n\n    var provideNameList = !!nameList;\n    var namePathList = provideNameList ? nameList.map(getNamePath) : []; // Collect result in promise list\n\n    var promiseList = [];\n\n    _this.getFieldEntities(true).forEach(function (field) {\n      // Add field if not provide `nameList`\n      if (!provideNameList) {\n        namePathList.push(field.getNamePath());\n      }\n      /**\n       * Recursive validate if configured.\n       * TODO: perf improvement @zombieJ\n       */\n\n\n      if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {\n        var namePath = field.getNamePath();\n\n        if ( // nameList[i] === undefined \u8bf4\u660e\u662f\u4ee5 nameList \u5f00\u5934\u7684\n        // [\'name\'] -> [\'name\',\'list\']\n        namePath.every(function (nameUnit, i) {\n          return nameList[i] === nameUnit || nameList[i] === undefined;\n        })) {\n          namePathList.push(namePath);\n        }\n      } // Skip if without rule\n\n\n      if (!field.props.rules || !field.props.rules.length) {\n        return;\n      }\n\n      var fieldNamePath = field.getNamePath(); // Add field validate rule in to promise list\n\n      if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {\n        var promise = field.validateRules(Object(objectSpread2["a" /* default */])({\n          validateMessages: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, defaultValidateMessages), _this.validateMessages)\n        }, options)); // Wrap promise with field\n\n        promiseList.push(promise.then(function () {\n          return {\n            name: fieldNamePath,\n            errors: [],\n            warnings: []\n          };\n        })["catch"](function (ruleErrors) {\n          var mergedErrors = [];\n          var mergedWarnings = [];\n          ruleErrors.forEach(function (_ref6) {\n            var warningOnly = _ref6.rule.warningOnly,\n                errors = _ref6.errors;\n\n            if (warningOnly) {\n              mergedWarnings.push.apply(mergedWarnings, Object(toConsumableArray["a" /* default */])(errors));\n            } else {\n              mergedErrors.push.apply(mergedErrors, Object(toConsumableArray["a" /* default */])(errors));\n            }\n          });\n\n          if (mergedErrors.length) {\n            return Promise.reject({\n              name: fieldNamePath,\n              errors: mergedErrors,\n              warnings: mergedWarnings\n            });\n          }\n\n          return {\n            name: fieldNamePath,\n            errors: mergedErrors,\n            warnings: mergedWarnings\n          };\n        }));\n      }\n    });\n\n    var summaryPromise = allPromiseFinish(promiseList);\n    _this.lastValidatePromise = summaryPromise; // Notify fields with rule that validate has finished and need update\n\n    summaryPromise["catch"](function (results) {\n      return results;\n    }).then(function (results) {\n      var resultNamePathList = results.map(function (_ref7) {\n        var name = _ref7.name;\n        return name;\n      });\n\n      _this.notifyObservers(_this.store, resultNamePathList, {\n        type: \'validateFinish\'\n      });\n\n      _this.triggerOnFieldsChange(resultNamePathList, results);\n    });\n    var returnPromise = summaryPromise.then(function () {\n      if (_this.lastValidatePromise === summaryPromise) {\n        return Promise.resolve(_this.getFieldsValue(namePathList));\n      }\n\n      return Promise.reject([]);\n    })["catch"](function (results) {\n      var errorList = results.filter(function (result) {\n        return result && result.errors.length;\n      });\n      return Promise.reject({\n        values: _this.getFieldsValue(namePathList),\n        errorFields: errorList,\n        outOfDate: _this.lastValidatePromise !== summaryPromise\n      });\n    }); // Do not throw in console\n\n    returnPromise["catch"](function (e) {\n      return e;\n    });\n    return returnPromise;\n  };\n\n  this.submit = function () {\n    _this.warningUnhooked();\n\n    _this.validateFields().then(function (values) {\n      var onFinish = _this.callbacks.onFinish;\n\n      if (onFinish) {\n        try {\n          onFinish(values);\n        } catch (err) {\n          // Should print error if user `onFinish` callback failed\n          console.error(err);\n        }\n      }\n    })["catch"](function (e) {\n      var onFinishFailed = _this.callbacks.onFinishFailed;\n\n      if (onFinishFailed) {\n        onFinishFailed(e);\n      }\n    });\n  };\n\n  this.forceRootUpdate = forceRootUpdate;\n});\n\nfunction useForm(form) {\n  var formRef = react["useRef"]();\n\n  var _React$useState = react["useState"]({}),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  if (!formRef.current) {\n    if (form) {\n      formRef.current = form;\n    } else {\n      // Create a new FormStore if not provided\n      var forceReRender = function forceReRender() {\n        forceUpdate({});\n      };\n\n      var formStore = new useForm_FormStore(forceReRender);\n      formRef.current = formStore.getForm();\n    }\n  }\n\n  return [formRef.current];\n}\n\n/* harmony default export */ var es_useForm = (useForm);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/FormContext.js\n\n\n\nvar FormContext = /*#__PURE__*/react["createContext"]({\n  triggerFormChange: function triggerFormChange() {},\n  triggerFormFinish: function triggerFormFinish() {},\n  registerForm: function registerForm() {},\n  unregisterForm: function unregisterForm() {}\n});\n\nvar FormContext_FormProvider = function FormProvider(_ref) {\n  var validateMessages = _ref.validateMessages,\n      onFormChange = _ref.onFormChange,\n      onFormFinish = _ref.onFormFinish,\n      children = _ref.children;\n  var formContext = react["useContext"](FormContext);\n  var formsRef = react["useRef"]({});\n  return /*#__PURE__*/react["createElement"](FormContext.Provider, {\n    value: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, formContext), {}, {\n      validateMessages: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, formContext.validateMessages), validateMessages),\n      // =========================================================\n      // =                  Global Form Control                  =\n      // =========================================================\n      triggerFormChange: function triggerFormChange(name, changedFields) {\n        if (onFormChange) {\n          onFormChange(name, {\n            changedFields: changedFields,\n            forms: formsRef.current\n          });\n        }\n\n        formContext.triggerFormChange(name, changedFields);\n      },\n      triggerFormFinish: function triggerFormFinish(name, values) {\n        if (onFormFinish) {\n          onFormFinish(name, {\n            values: values,\n            forms: formsRef.current\n          });\n        }\n\n        formContext.triggerFormFinish(name, values);\n      },\n      registerForm: function registerForm(name, form) {\n        if (name) {\n          formsRef.current = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, formsRef.current), {}, Object(defineProperty["a" /* default */])({}, name, form));\n        }\n\n        formContext.registerForm(name, form);\n      },\n      unregisterForm: function unregisterForm(name) {\n        var newForms = Object(objectSpread2["a" /* default */])({}, formsRef.current);\n\n        delete newForms[name];\n        formsRef.current = newForms;\n        formContext.unregisterForm(name);\n      }\n    })\n  }, children);\n};\n\n\n/* harmony default export */ var es_FormContext = (FormContext);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/Form.js\n\n\n\n\nvar Form_excluded = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];\n\n\n\n\n\n\nvar Form_Form = function Form(_ref, ref) {\n  var name = _ref.name,\n      initialValues = _ref.initialValues,\n      fields = _ref.fields,\n      form = _ref.form,\n      preserve = _ref.preserve,\n      children = _ref.children,\n      _ref$component = _ref.component,\n      Component = _ref$component === void 0 ? \'form\' : _ref$component,\n      validateMessages = _ref.validateMessages,\n      _ref$validateTrigger = _ref.validateTrigger,\n      validateTrigger = _ref$validateTrigger === void 0 ? \'onChange\' : _ref$validateTrigger,\n      onValuesChange = _ref.onValuesChange,\n      _onFieldsChange = _ref.onFieldsChange,\n      _onFinish = _ref.onFinish,\n      onFinishFailed = _ref.onFinishFailed,\n      restProps = Object(objectWithoutProperties["a" /* default */])(_ref, Form_excluded);\n\n  var formContext = react["useContext"](es_FormContext); // We customize handle event since Context will makes all the consumer re-render:\n  // https://reactjs.org/docs/context.html#contextprovider\n\n  var _useForm = es_useForm(form),\n      _useForm2 = Object(slicedToArray["a" /* default */])(_useForm, 1),\n      formInstance = _useForm2[0];\n\n  var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK),\n      useSubscribe = _formInstance$getInte.useSubscribe,\n      setInitialValues = _formInstance$getInte.setInitialValues,\n      setCallbacks = _formInstance$getInte.setCallbacks,\n      setValidateMessages = _formInstance$getInte.setValidateMessages,\n      setPreserve = _formInstance$getInte.setPreserve,\n      destroyForm = _formInstance$getInte.destroyForm; // Pass ref with form instance\n\n\n  react["useImperativeHandle"](ref, function () {\n    return formInstance;\n  }); // Register form into Context\n\n  react["useEffect"](function () {\n    formContext.registerForm(name, formInstance);\n    return function () {\n      formContext.unregisterForm(name);\n    };\n  }, [formContext, formInstance, name]); // Pass props to store\n\n  setValidateMessages(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, formContext.validateMessages), validateMessages));\n  setCallbacks({\n    onValuesChange: onValuesChange,\n    onFieldsChange: function onFieldsChange(changedFields) {\n      formContext.triggerFormChange(name, changedFields);\n\n      if (_onFieldsChange) {\n        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          rest[_key - 1] = arguments[_key];\n        }\n\n        _onFieldsChange.apply(void 0, [changedFields].concat(rest));\n      }\n    },\n    onFinish: function onFinish(values) {\n      formContext.triggerFormFinish(name, values);\n\n      if (_onFinish) {\n        _onFinish(values);\n      }\n    },\n    onFinishFailed: onFinishFailed\n  });\n  setPreserve(preserve); // Set initial value, init store value when first mount\n\n  var mountRef = react["useRef"](null);\n  setInitialValues(initialValues, !mountRef.current);\n\n  if (!mountRef.current) {\n    mountRef.current = true;\n  }\n\n  react["useEffect"](function () {\n    return destroyForm;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []); // Prepare children by `children` type\n\n  var childrenNode;\n  var childrenRenderProps = typeof children === \'function\';\n\n  if (childrenRenderProps) {\n    var values = formInstance.getFieldsValue(true);\n    childrenNode = children(values, formInstance);\n  } else {\n    childrenNode = children;\n  } // Not use subscribe when using render props\n\n\n  useSubscribe(!childrenRenderProps); // Listen if fields provided. We use ref to save prev data here to avoid additional render\n\n  var prevFieldsRef = react["useRef"]();\n  react["useEffect"](function () {\n    if (!isSimilar(prevFieldsRef.current || [], fields || [])) {\n      formInstance.setFields(fields || []);\n    }\n\n    prevFieldsRef.current = fields;\n  }, [fields, formInstance]);\n  var formContextValue = react["useMemo"](function () {\n    return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, formInstance), {}, {\n      validateTrigger: validateTrigger\n    });\n  }, [formInstance, validateTrigger]);\n  var wrapperNode = /*#__PURE__*/react["createElement"](FieldContext.Provider, {\n    value: formContextValue\n  }, childrenNode);\n\n  if (Component === false) {\n    return wrapperNode;\n  }\n\n  return /*#__PURE__*/react["createElement"](Component, Object(esm_extends["a" /* default */])({}, restProps, {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      formInstance.submit();\n    },\n    onReset: function onReset(event) {\n      var _restProps$onReset;\n\n      event.preventDefault();\n      formInstance.resetFields();\n      (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);\n    }\n  }), wrapperNode);\n};\n\n/* harmony default export */ var es_Form = (Form_Form);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/useWatch.js\n\n\n\n\n\n\nfunction stringify(value) {\n  try {\n    return JSON.stringify(value);\n  } catch (err) {\n    return Math.random();\n  }\n}\n\nfunction useWatch() {\n  var dependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var form = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = Object(react["useState"])(),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var valueStr = Object(react["useMemo"])(function () {\n    return stringify(value);\n  }, [value]);\n  var valueStrRef = Object(react["useRef"])(valueStr);\n  valueStrRef.current = valueStr;\n  var fieldContext = Object(react["useContext"])(FieldContext);\n  var formInstance = form || fieldContext;\n  var isValidForm = formInstance && formInstance._init; // Warning if not exist form instance\n\n  if (false) {}\n\n  var namePath = getNamePath(dependencies);\n  var namePathRef = Object(react["useRef"])(namePath);\n  namePathRef.current = namePath;\n  Object(react["useEffect"])(function () {\n    // Skip if not exist form instance\n    if (!isValidForm) {\n      return;\n    }\n\n    var getFieldsValue = formInstance.getFieldsValue,\n        getInternalHooks = formInstance.getInternalHooks;\n\n    var _getInternalHooks = getInternalHooks(HOOK_MARK),\n        registerWatch = _getInternalHooks.registerWatch;\n\n    var cancelRegister = registerWatch(function (store) {\n      var newValue = getValue(store, namePathRef.current);\n      var nextValueStr = stringify(newValue); // Compare stringify in case it\'s nest object\n\n      if (valueStrRef.current !== nextValueStr) {\n        valueStrRef.current = nextValueStr;\n        setValue(newValue);\n      }\n    }); // TODO: We can improve this perf in future\n\n    var initialValue = getValue(getFieldsValue(), namePathRef.current);\n    setValue(initialValue);\n    return cancelRegister;\n  }, // We do not need re-register since namePath content is the same\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  return value;\n}\n\n/* harmony default export */ var es_useWatch = (useWatch);\n// CONCATENATED MODULE: ./node_modules/rc-field-form/es/index.js\n\n\n\n\n\n\n\n\n\nvar InternalForm = /*#__PURE__*/react["forwardRef"](es_Form);\nvar RefForm = InternalForm;\nRefForm.FormProvider = FormContext_FormProvider;\nRefForm.Field = es_Field;\nRefForm.List = es_List;\nRefForm.useForm = es_useForm;\nRefForm.useWatch = es_useWatch;\n\n/* harmony default export */ var es = __webpack_exports__["f"] = (RefForm);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85Yc\n')},"8HVG":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useNotification; });\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("KQm4");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("ODXe");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Notice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("EE3K");\n\n\n\n\n\nfunction useNotification(notificationInstance) {\n  var createdRef = react__WEBPACK_IMPORTED_MODULE_3__["useRef"]({});\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_3__["useState"]([]),\n      _React$useState2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(_React$useState, 2),\n      elements = _React$useState2[0],\n      setElements = _React$useState2[1];\n\n  function notify(noticeProps) {\n    var firstMount = true;\n    notificationInstance.add(noticeProps, function (div, props) {\n      var key = props.key;\n\n      if (div && (!createdRef.current[key] || firstMount)) {\n        var noticeEle = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__["createElement"](_Notice__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, props, {\n          holder: div\n        }));\n        createdRef.current[key] = noticeEle;\n        setElements(function (originElements) {\n          var index = originElements.findIndex(function (ele) {\n            return ele.key === props.key;\n          });\n\n          if (index === -1) {\n            return [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(originElements), [noticeEle]);\n          }\n\n          var cloneList = Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(originElements);\n\n          cloneList[index] = noticeEle;\n          return cloneList;\n        });\n      }\n\n      firstMount = false;\n    });\n  }\n\n  return [notify, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__["createElement"](react__WEBPACK_IMPORTED_MODULE_3__["Fragment"], null, elements)];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvbi5qcz9mMDc1Il0sIm5hbWVzIjpbInVzZU5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbkluc3RhbmNlIiwiY3JlYXRlZFJlZiIsIlJlYWN0IiwiX1JlYWN0JHVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5IiwiZWxlbWVudHMiLCJzZXRFbGVtZW50cyIsIm5vdGlmeSIsIm5vdGljZVByb3BzIiwiZmlyc3RNb3VudCIsImFkZCIsImRpdiIsInByb3BzIiwia2V5IiwiY3VycmVudCIsIm5vdGljZUVsZSIsIk5vdGljZSIsIl9leHRlbmRzIiwiaG9sZGVyIiwib3JpZ2luRWxlbWVudHMiLCJpbmRleCIsImZpbmRJbmRleCIsImVsZSIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImNsb25lTGlzdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsZUFBVCxDQUF5QkMsb0JBQXpCLEVBQStDO0FBQzVELE1BQUlDLFVBQVUsR0FBR0MsNENBQUEsQ0FBYSxFQUFiLENBQWpCOztBQUVBLE1BQUlDLGVBQWUsR0FBR0QsOENBQUEsQ0FBZSxFQUFmLENBQXRCO0FBQUEsTUFDSUUsZ0JBQWdCLEdBQUdDLGdHQUFjLENBQUNGLGVBQUQsRUFBa0IsQ0FBbEIsQ0FEckM7QUFBQSxNQUVJRyxRQUFRLEdBQUdGLGdCQUFnQixDQUFDLENBQUQsQ0FGL0I7QUFBQSxNQUdJRyxXQUFXLEdBQUdILGdCQUFnQixDQUFDLENBQUQsQ0FIbEM7O0FBS0EsV0FBU0ksTUFBVCxDQUFnQkMsV0FBaEIsRUFBNkI7QUFDM0IsUUFBSUMsVUFBVSxHQUFHLElBQWpCO0FBQ0FWLHdCQUFvQixDQUFDVyxHQUFyQixDQUF5QkYsV0FBekIsRUFBc0MsVUFBVUcsR0FBVixFQUFlQyxLQUFmLEVBQXNCO0FBQzFELFVBQUlDLEdBQUcsR0FBR0QsS0FBSyxDQUFDQyxHQUFoQjs7QUFFQSxVQUFJRixHQUFHLEtBQUssQ0FBQ1gsVUFBVSxDQUFDYyxPQUFYLENBQW1CRCxHQUFuQixDQUFELElBQTRCSixVQUFqQyxDQUFQLEVBQXFEO0FBQ25ELFlBQUlNLFNBQVMsR0FBRyxhQUFhZCxtREFBQSxDQUFvQmUsdURBQXBCLEVBQTRCQywwRkFBUSxDQUFDLEVBQUQsRUFBS0wsS0FBTCxFQUFZO0FBQzNFTSxnQkFBTSxFQUFFUDtBQURtRSxTQUFaLENBQXBDLENBQTdCO0FBR0FYLGtCQUFVLENBQUNjLE9BQVgsQ0FBbUJELEdBQW5CLElBQTBCRSxTQUExQjtBQUNBVCxtQkFBVyxDQUFDLFVBQVVhLGNBQVYsRUFBMEI7QUFDcEMsY0FBSUMsS0FBSyxHQUFHRCxjQUFjLENBQUNFLFNBQWYsQ0FBeUIsVUFBVUMsR0FBVixFQUFlO0FBQ2xELG1CQUFPQSxHQUFHLENBQUNULEdBQUosS0FBWUQsS0FBSyxDQUFDQyxHQUF6QjtBQUNELFdBRlcsQ0FBWjs7QUFJQSxjQUFJTyxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCLG1CQUFPLEdBQUdHLE1BQUgsQ0FBVUMsb0dBQWtCLENBQUNMLGNBQUQsQ0FBNUIsRUFBOEMsQ0FBQ0osU0FBRCxDQUE5QyxDQUFQO0FBQ0Q7O0FBRUQsY0FBSVUsU0FBUyxHQUFHRCxvR0FBa0IsQ0FBQ0wsY0FBRCxDQUFsQzs7QUFFQU0sbUJBQVMsQ0FBQ0wsS0FBRCxDQUFULEdBQW1CTCxTQUFuQjtBQUNBLGlCQUFPVSxTQUFQO0FBQ0QsU0FiVSxDQUFYO0FBY0Q7O0FBRURoQixnQkFBVSxHQUFHLEtBQWI7QUFDRCxLQXpCRDtBQTBCRDs7QUFFRCxTQUFPLENBQUNGLE1BQUQsRUFBUyxhQUFhTixtREFBQSxDQUFvQkEsOENBQXBCLEVBQW9DLElBQXBDLEVBQTBDSSxRQUExQyxDQUF0QixDQUFQO0FBQ0QiLCJmaWxlIjoiOEhWRy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE5vdGljZSBmcm9tICcuL05vdGljZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24obm90aWZpY2F0aW9uSW5zdGFuY2UpIHtcbiAgdmFyIGNyZWF0ZWRSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBmdW5jdGlvbiBub3RpZnkobm90aWNlUHJvcHMpIHtcbiAgICB2YXIgZmlyc3RNb3VudCA9IHRydWU7XG4gICAgbm90aWZpY2F0aW9uSW5zdGFuY2UuYWRkKG5vdGljZVByb3BzLCBmdW5jdGlvbiAoZGl2LCBwcm9wcykge1xuICAgICAgdmFyIGtleSA9IHByb3BzLmtleTtcblxuICAgICAgaWYgKGRpdiAmJiAoIWNyZWF0ZWRSZWYuY3VycmVudFtrZXldIHx8IGZpcnN0TW91bnQpKSB7XG4gICAgICAgIHZhciBub3RpY2VFbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpY2UsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGhvbGRlcjogZGl2XG4gICAgICAgIH0pKTtcbiAgICAgICAgY3JlYXRlZFJlZi5jdXJyZW50W2tleV0gPSBub3RpY2VFbGU7XG4gICAgICAgIHNldEVsZW1lbnRzKGZ1bmN0aW9uIChvcmlnaW5FbGVtZW50cykge1xuICAgICAgICAgIHZhciBpbmRleCA9IG9yaWdpbkVsZW1lbnRzLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlLmtleSA9PT0gcHJvcHMua2V5O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob3JpZ2luRWxlbWVudHMpLCBbbm90aWNlRWxlXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNsb25lTGlzdCA9IF90b0NvbnN1bWFibGVBcnJheShvcmlnaW5FbGVtZW50cyk7XG5cbiAgICAgICAgICBjbG9uZUxpc3RbaW5kZXhdID0gbm90aWNlRWxlO1xuICAgICAgICAgIHJldHVybiBjbG9uZUxpc3Q7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmaXJzdE1vdW50ID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gW25vdGlmeSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGVsZW1lbnRzKV07XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8HVG\n')},"8XRh":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ es_CSSMotionList; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/findDOMNode.js\nvar findDOMNode = __webpack_require__("m+aA");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/ref.js\nvar es_ref = __webpack_require__("c+Xe");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/canUseDom.js\nvar canUseDom = __webpack_require__("MNnm");\n\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/util/motion.js\n\n // ================= Transition =================\n// Event wrapper. Copy from react source code\n\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);\n  prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);\n  prefixes["ms".concat(styleProp)] = "MS".concat(eventName);\n  prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());\n  return prefixes;\n}\n\nfunction getVendorPrefixes(domSupport, win) {\n  var prefixes = {\n    animationend: makePrefixMap(\'Animation\', \'AnimationEnd\'),\n    transitionend: makePrefixMap(\'Transition\', \'TransitionEnd\')\n  };\n\n  if (domSupport) {\n    if (!(\'AnimationEvent\' in win)) {\n      delete prefixes.animationend.animation;\n    }\n\n    if (!(\'TransitionEvent\' in win)) {\n      delete prefixes.transitionend.transition;\n    }\n  }\n\n  return prefixes;\n}\nvar vendorPrefixes = getVendorPrefixes(Object(canUseDom["a" /* default */])(), typeof window !== \'undefined\' ? window : {});\nvar motion_style = {};\n\nif (Object(canUseDom["a" /* default */])()) {\n  var _document$createEleme = document.createElement(\'div\');\n\n  motion_style = _document$createEleme.style;\n}\n\nvar prefixedEventNames = {};\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  }\n\n  var prefixMap = vendorPrefixes[eventName];\n\n  if (prefixMap) {\n    var stylePropList = Object.keys(prefixMap);\n    var len = stylePropList.length;\n\n    for (var i = 0; i < len; i += 1) {\n      var styleProp = stylePropList[i];\n\n      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in motion_style) {\n        prefixedEventNames[eventName] = prefixMap[styleProp];\n        return prefixedEventNames[eventName];\n      }\n    }\n  }\n\n  return \'\';\n}\nvar internalAnimationEndName = getVendorPrefixedEventName(\'animationend\');\nvar internalTransitionEndName = getVendorPrefixedEventName(\'transitionend\');\nvar supportTransition = !!(internalAnimationEndName && internalTransitionEndName);\nvar animationEndName = internalAnimationEndName || \'animationend\';\nvar transitionEndName = internalTransitionEndName || \'transitionend\';\nfunction getTransitionName(transitionName, transitionType) {\n  if (!transitionName) return null;\n\n  if (Object(esm_typeof["a" /* default */])(transitionName) === \'object\') {\n    var type = transitionType.replace(/-\\w/g, function (match) {\n      return match[1].toUpperCase();\n    });\n    return transitionName[type];\n  }\n\n  return "".concat(transitionName, "-").concat(transitionType);\n}\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/interface.js\nvar STATUS_NONE = \'none\';\nvar STATUS_APPEAR = \'appear\';\nvar STATUS_ENTER = \'enter\';\nvar STATUS_LEAVE = \'leave\';\nvar STEP_NONE = \'none\';\nvar STEP_PREPARE = \'prepare\';\nvar STEP_START = \'start\';\nvar STEP_ACTIVE = \'active\';\nvar STEP_ACTIVATED = \'end\';\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useState.js\nvar useState = __webpack_require__("dm2S");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/hooks/useNextFrame.js\n\n\n/* harmony default export */ var useNextFrame = (function () {\n  var nextFrameRef = react["useRef"](null);\n\n  function cancelNextFrame() {\n    raf["a" /* default */].cancel(nextFrameRef.current);\n  }\n\n  function nextFrame(callback) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    cancelNextFrame();\n    var nextFrameId = Object(raf["a" /* default */])(function () {\n      if (delay <= 1) {\n        callback({\n          isCanceled: function isCanceled() {\n            return nextFrameId !== nextFrameRef.current;\n          }\n        });\n      } else {\n        nextFrame(callback, delay - 1);\n      }\n    });\n    nextFrameRef.current = nextFrameId;\n  }\n\n  react["useEffect"](function () {\n    return function () {\n      cancelNextFrame();\n    };\n  }, []);\n  return [nextFrame, cancelNextFrame];\n});\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js\n\n // It\'s safe to use `useLayoutEffect` but the warning is annoying\n\nvar useIsomorphicLayoutEffect = Object(canUseDom["a" /* default */])() ? react["useLayoutEffect"] : react["useEffect"];\n/* harmony default export */ var hooks_useIsomorphicLayoutEffect = (useIsomorphicLayoutEffect);\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/hooks/useStepQueue.js\n\n\n\n\n\n\nvar STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];\n/** Skip current step */\n\nvar SkipStep = false;\n/** Current step should be update in */\n\nvar DoStep = true;\nfunction isActive(step) {\n  return step === STEP_ACTIVE || step === STEP_ACTIVATED;\n}\n/* harmony default export */ var useStepQueue = (function (status, callback) {\n  var _useState = Object(useState["a" /* default */])(STEP_NONE),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      step = _useState2[0],\n      setStep = _useState2[1];\n\n  var _useNextFrame = useNextFrame(),\n      _useNextFrame2 = Object(slicedToArray["a" /* default */])(_useNextFrame, 2),\n      nextFrame = _useNextFrame2[0],\n      cancelNextFrame = _useNextFrame2[1];\n\n  function startQueue() {\n    setStep(STEP_PREPARE, true);\n  }\n\n  hooks_useIsomorphicLayoutEffect(function () {\n    if (step !== STEP_NONE && step !== STEP_ACTIVATED) {\n      var index = STEP_QUEUE.indexOf(step);\n      var nextStep = STEP_QUEUE[index + 1];\n      var result = callback(step);\n\n      if (result === SkipStep) {\n        // Skip when no needed\n        setStep(nextStep, true);\n      } else {\n        // Do as frame for step update\n        nextFrame(function (info) {\n          function doNext() {\n            // Skip since current queue is ood\n            if (info.isCanceled()) return;\n            setStep(nextStep, true);\n          }\n\n          if (result === true) {\n            doNext();\n          } else {\n            // Only promise should be async\n            Promise.resolve(result).then(doNext);\n          }\n        });\n      }\n    }\n  }, [status, step]);\n  react["useEffect"](function () {\n    return function () {\n      cancelNextFrame();\n    };\n  }, []);\n  return [startQueue, step];\n});\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/hooks/useDomMotionEvents.js\n\n\n\n/* harmony default export */ var useDomMotionEvents = (function (callback) {\n  var cacheElementRef = Object(react["useRef"])(); // Cache callback\n\n  var callbackRef = Object(react["useRef"])(callback);\n  callbackRef.current = callback; // Internal motion event handler\n\n  var onInternalMotionEnd = react["useCallback"](function (event) {\n    callbackRef.current(event);\n  }, []); // Remove events\n\n  function removeMotionEvents(element) {\n    if (element) {\n      element.removeEventListener(transitionEndName, onInternalMotionEnd);\n      element.removeEventListener(animationEndName, onInternalMotionEnd);\n    }\n  } // Patch events\n\n\n  function patchMotionEvents(element) {\n    if (cacheElementRef.current && cacheElementRef.current !== element) {\n      removeMotionEvents(cacheElementRef.current);\n    }\n\n    if (element && element !== cacheElementRef.current) {\n      element.addEventListener(transitionEndName, onInternalMotionEnd);\n      element.addEventListener(animationEndName, onInternalMotionEnd); // Save as cache in case dom removed trigger by `motionDeadline`\n\n      cacheElementRef.current = element;\n    }\n  } // Clean up when removed\n\n\n  react["useEffect"](function () {\n    return function () {\n      removeMotionEvents(cacheElementRef.current);\n    };\n  }, []);\n  return [patchMotionEvents, removeMotionEvents];\n});\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/hooks/useStatus.js\n\n\n\n\n\n\n\n\n\n\nfunction useStatus(supportMotion, visible, getElement, _ref) {\n  var _ref$motionEnter = _ref.motionEnter,\n      motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter,\n      _ref$motionAppear = _ref.motionAppear,\n      motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear,\n      _ref$motionLeave = _ref.motionLeave,\n      motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave,\n      motionDeadline = _ref.motionDeadline,\n      motionLeaveImmediately = _ref.motionLeaveImmediately,\n      onAppearPrepare = _ref.onAppearPrepare,\n      onEnterPrepare = _ref.onEnterPrepare,\n      onLeavePrepare = _ref.onLeavePrepare,\n      onAppearStart = _ref.onAppearStart,\n      onEnterStart = _ref.onEnterStart,\n      onLeaveStart = _ref.onLeaveStart,\n      onAppearActive = _ref.onAppearActive,\n      onEnterActive = _ref.onEnterActive,\n      onLeaveActive = _ref.onLeaveActive,\n      onAppearEnd = _ref.onAppearEnd,\n      onEnterEnd = _ref.onEnterEnd,\n      onLeaveEnd = _ref.onLeaveEnd,\n      onVisibleChanged = _ref.onVisibleChanged; // Used for outer render usage to avoid `visible: false & status: none` to render nothing\n\n  var _useState = Object(useState["a" /* default */])(),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      asyncVisible = _useState2[0],\n      setAsyncVisible = _useState2[1];\n\n  var _useState3 = Object(useState["a" /* default */])(STATUS_NONE),\n      _useState4 = Object(slicedToArray["a" /* default */])(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = Object(useState["a" /* default */])(null),\n      _useState6 = Object(slicedToArray["a" /* default */])(_useState5, 2),\n      style = _useState6[0],\n      setStyle = _useState6[1];\n\n  var mountedRef = Object(react["useRef"])(false);\n  var deadlineRef = Object(react["useRef"])(null); // =========================== Dom Node ===========================\n\n  function getDomElement() {\n    return getElement();\n  } // ========================== Motion End ==========================\n\n\n  var activeRef = Object(react["useRef"])(false);\n\n  function onInternalMotionEnd(event) {\n    var element = getDomElement();\n\n    if (event && !event.deadline && event.target !== element) {\n      // event exists\n      // not initiated by deadline\n      // transitionEnd not fired by inner elements\n      return;\n    }\n\n    var currentActive = activeRef.current;\n    var canEnd;\n\n    if (status === STATUS_APPEAR && currentActive) {\n      canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);\n    } else if (status === STATUS_ENTER && currentActive) {\n      canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);\n    } else if (status === STATUS_LEAVE && currentActive) {\n      canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);\n    } // Only update status when `canEnd` and not destroyed\n\n\n    if (status !== STATUS_NONE && currentActive && canEnd !== false) {\n      setStatus(STATUS_NONE, true);\n      setStyle(null, true);\n    }\n  }\n\n  var _useDomMotionEvents = useDomMotionEvents(onInternalMotionEnd),\n      _useDomMotionEvents2 = Object(slicedToArray["a" /* default */])(_useDomMotionEvents, 1),\n      patchMotionEvents = _useDomMotionEvents2[0]; // ============================= Step =============================\n\n\n  var eventHandlers = react["useMemo"](function () {\n    var _ref2, _ref3, _ref4;\n\n    switch (status) {\n      case STATUS_APPEAR:\n        return _ref2 = {}, Object(defineProperty["a" /* default */])(_ref2, STEP_PREPARE, onAppearPrepare), Object(defineProperty["a" /* default */])(_ref2, STEP_START, onAppearStart), Object(defineProperty["a" /* default */])(_ref2, STEP_ACTIVE, onAppearActive), _ref2;\n\n      case STATUS_ENTER:\n        return _ref3 = {}, Object(defineProperty["a" /* default */])(_ref3, STEP_PREPARE, onEnterPrepare), Object(defineProperty["a" /* default */])(_ref3, STEP_START, onEnterStart), Object(defineProperty["a" /* default */])(_ref3, STEP_ACTIVE, onEnterActive), _ref3;\n\n      case STATUS_LEAVE:\n        return _ref4 = {}, Object(defineProperty["a" /* default */])(_ref4, STEP_PREPARE, onLeavePrepare), Object(defineProperty["a" /* default */])(_ref4, STEP_START, onLeaveStart), Object(defineProperty["a" /* default */])(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;\n\n      default:\n        return {};\n    }\n  }, [status]);\n\n  var _useStepQueue = useStepQueue(status, function (newStep) {\n    // Only prepare step can be skip\n    if (newStep === STEP_PREPARE) {\n      var onPrepare = eventHandlers[STEP_PREPARE];\n\n      if (!onPrepare) {\n        return SkipStep;\n      }\n\n      return onPrepare(getDomElement());\n    } // Rest step is sync update\n    // Rest step is sync update\n\n\n    if (step in eventHandlers) {\n      var _eventHandlers$step;\n\n      setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);\n    }\n\n    if (step === STEP_ACTIVE) {\n      // Patch events when motion needed\n      patchMotionEvents(getDomElement());\n\n      if (motionDeadline > 0) {\n        clearTimeout(deadlineRef.current);\n        deadlineRef.current = setTimeout(function () {\n          onInternalMotionEnd({\n            deadline: true\n          });\n        }, motionDeadline);\n      }\n    }\n\n    return DoStep;\n  }),\n      _useStepQueue2 = Object(slicedToArray["a" /* default */])(_useStepQueue, 2),\n      startStep = _useStepQueue2[0],\n      step = _useStepQueue2[1];\n\n  var active = isActive(step);\n  activeRef.current = active; // ============================ Status ============================\n  // Update with new status\n\n  hooks_useIsomorphicLayoutEffect(function () {\n    setAsyncVisible(visible);\n    var isMounted = mountedRef.current;\n    mountedRef.current = true;\n\n    if (!supportMotion) {\n      return;\n    }\n\n    var nextStatus; // Appear\n\n    if (!isMounted && visible && motionAppear) {\n      nextStatus = STATUS_APPEAR;\n    } // Enter\n\n\n    if (isMounted && visible && motionEnter) {\n      nextStatus = STATUS_ENTER;\n    } // Leave\n\n\n    if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {\n      nextStatus = STATUS_LEAVE;\n    } // Update to next status\n\n\n    if (nextStatus) {\n      setStatus(nextStatus);\n      startStep();\n    }\n  }, [visible]); // ============================ Effect ============================\n  // Reset when motion changed\n\n  Object(react["useEffect"])(function () {\n    if ( // Cancel appear\n    status === STATUS_APPEAR && !motionAppear || // Cancel enter\n    status === STATUS_ENTER && !motionEnter || // Cancel leave\n    status === STATUS_LEAVE && !motionLeave) {\n      setStatus(STATUS_NONE);\n    }\n  }, [motionAppear, motionEnter, motionLeave]);\n  Object(react["useEffect"])(function () {\n    return function () {\n      mountedRef.current = false;\n      clearTimeout(deadlineRef.current);\n    };\n  }, []); // Trigger `onVisibleChanged`\n\n  Object(react["useEffect"])(function () {\n    if (asyncVisible !== undefined && status === STATUS_NONE) {\n      onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);\n    }\n  }, [asyncVisible, status]); // ============================ Styles ============================\n\n  var mergedStyle = style;\n\n  if (eventHandlers[STEP_PREPARE] && step === STEP_START) {\n    mergedStyle = Object(objectSpread2["a" /* default */])({\n      transition: \'none\'\n    }, mergedStyle);\n  }\n\n  return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/DomWrapper.js\n\n\n\n\n\n\nvar DomWrapper_DomWrapper = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(DomWrapper, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(DomWrapper);\n\n  function DomWrapper() {\n    Object(classCallCheck["a" /* default */])(this, DomWrapper);\n\n    return _super.apply(this, arguments);\n  }\n\n  Object(createClass["a" /* default */])(DomWrapper, [{\n    key: "render",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n\n  return DomWrapper;\n}(react["Component"]);\n\n/* harmony default export */ var es_DomWrapper = (DomWrapper_DomWrapper);\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/CSSMotion.js\n\n\n\n\n/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp, react/prop-types */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * `transitionSupport` is used for none transition test case.\n * Default we use browser transition event support check.\n */\n\nfunction genCSSMotion(config) {\n  var transitionSupport = config;\n\n  if (Object(esm_typeof["a" /* default */])(config) === \'object\') {\n    transitionSupport = config.transitionSupport;\n  }\n\n  function isSupportTransition(props) {\n    return !!(props.motionName && transitionSupport);\n  }\n\n  var CSSMotion = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n    var _props$visible = props.visible,\n        visible = _props$visible === void 0 ? true : _props$visible,\n        _props$removeOnLeave = props.removeOnLeave,\n        removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave,\n        forceRender = props.forceRender,\n        children = props.children,\n        motionName = props.motionName,\n        leavedClassName = props.leavedClassName,\n        eventProps = props.eventProps;\n    var supportMotion = isSupportTransition(props); // Ref to the react node, it may be a HTMLElement\n\n    var nodeRef = Object(react["useRef"])(); // Ref to the dom wrapper in case ref can not pass to HTMLElement\n\n    var wrapperNodeRef = Object(react["useRef"])();\n\n    function getDomElement() {\n      try {\n        // Here we\'re avoiding call for findDOMNode since it\'s deprecated\n        // in strict mode. We\'re calling it only when node ref is not\n        // an instance of DOM HTMLElement. Otherwise use\n        // findDOMNode as a final resort\n        return nodeRef.current instanceof HTMLElement ? nodeRef.current : Object(findDOMNode["a" /* default */])(wrapperNodeRef.current);\n      } catch (e) {\n        // Only happen when `motionDeadline` trigger but element removed.\n        return null;\n      }\n    }\n\n    var _useStatus = useStatus(supportMotion, visible, getDomElement, props),\n        _useStatus2 = Object(slicedToArray["a" /* default */])(_useStatus, 4),\n        status = _useStatus2[0],\n        statusStep = _useStatus2[1],\n        statusStyle = _useStatus2[2],\n        mergedVisible = _useStatus2[3]; // Record whether content has rendered\n    // Will return null for un-rendered even when `removeOnLeave={false}`\n\n\n    var renderedRef = react["useRef"](mergedVisible);\n\n    if (mergedVisible) {\n      renderedRef.current = true;\n    } // ====================== Refs ======================\n\n\n    var setNodeRef = react["useCallback"](function (node) {\n      nodeRef.current = node;\n      Object(es_ref["b" /* fillRef */])(ref, node);\n    }, [ref]); // ===================== Render =====================\n\n    var motionChildren;\n\n    var mergedProps = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, eventProps), {}, {\n      visible: visible\n    });\n\n    if (!children) {\n      // No children\n      motionChildren = null;\n    } else if (status === STATUS_NONE || !isSupportTransition(props)) {\n      // Stable children\n      if (mergedVisible) {\n        motionChildren = children(Object(objectSpread2["a" /* default */])({}, mergedProps), setNodeRef);\n      } else if (!removeOnLeave && renderedRef.current) {\n        motionChildren = children(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, mergedProps), {}, {\n          className: leavedClassName\n        }), setNodeRef);\n      } else if (forceRender) {\n        motionChildren = children(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, mergedProps), {}, {\n          style: {\n            display: \'none\'\n          }\n        }), setNodeRef);\n      } else {\n        motionChildren = null;\n      }\n    } else {\n      var _classNames; // In motion\n\n\n      var statusSuffix;\n\n      if (statusStep === STEP_PREPARE) {\n        statusSuffix = \'prepare\';\n      } else if (isActive(statusStep)) {\n        statusSuffix = \'active\';\n      } else if (statusStep === STEP_START) {\n        statusSuffix = \'start\';\n      }\n\n      motionChildren = children(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, mergedProps), {}, {\n        className: classnames_default()(getTransitionName(motionName, status), (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix)), statusSuffix), Object(defineProperty["a" /* default */])(_classNames, motionName, typeof motionName === \'string\'), _classNames)),\n        style: statusStyle\n      }), setNodeRef);\n    } // Auto inject ref if child node not have `ref` props\n\n\n    if ( /*#__PURE__*/ /*#__PURE__*/react["isValidElement"](motionChildren) && Object(es_ref["c" /* supportRef */])(motionChildren)) {\n      var _motionChildren = motionChildren,\n          originNodeRef = _motionChildren.ref;\n\n      if (!originNodeRef) {\n        motionChildren = /*#__PURE__*/react["cloneElement"](motionChildren, {\n          ref: setNodeRef\n        });\n      }\n    }\n\n    return /*#__PURE__*/react["createElement"](es_DomWrapper, {\n      ref: wrapperNodeRef\n    }, motionChildren);\n  });\n  CSSMotion.displayName = \'CSSMotion\';\n  return CSSMotion;\n}\n/* harmony default export */ var es_CSSMotion = (genCSSMotion(supportTransition));\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/util/diff.js\n\n\nvar STATUS_ADD = \'add\';\nvar STATUS_KEEP = \'keep\';\nvar STATUS_REMOVE = \'remove\';\nvar STATUS_REMOVED = \'removed\';\nfunction wrapKeyToObject(key) {\n  var keyObj;\n\n  if (key && Object(esm_typeof["a" /* default */])(key) === \'object\' && \'key\' in key) {\n    keyObj = key;\n  } else {\n    keyObj = {\n      key: key\n    };\n  }\n\n  return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, keyObj), {}, {\n    key: String(keyObj.key)\n  });\n}\nfunction parseKeys() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return keys.map(wrapKeyToObject);\n}\nfunction diffKeys() {\n  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var list = [];\n  var currentIndex = 0;\n  var currentLen = currentKeys.length;\n  var prevKeyObjects = parseKeys(prevKeys);\n  var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep\n\n  prevKeyObjects.forEach(function (keyObj) {\n    var hit = false;\n\n    for (var i = currentIndex; i < currentLen; i += 1) {\n      var currentKeyObj = currentKeyObjects[i];\n\n      if (currentKeyObj.key === keyObj.key) {\n        // New added keys should add before current key\n        if (currentIndex < i) {\n          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {\n            return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, obj), {}, {\n              status: STATUS_ADD\n            });\n          }));\n          currentIndex = i;\n        }\n\n        list.push(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, currentKeyObj), {}, {\n          status: STATUS_KEEP\n        }));\n        currentIndex += 1;\n        hit = true;\n        break;\n      }\n    } // If not hit, it means key is removed\n\n\n    if (!hit) {\n      list.push(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, keyObj), {}, {\n        status: STATUS_REMOVE\n      }));\n    }\n  }); // Add rest to the list\n\n  if (currentIndex < currentLen) {\n    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {\n      return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, obj), {}, {\n        status: STATUS_ADD\n      });\n    }));\n  }\n  /**\n   * Merge same key when it remove and add again:\n   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]\n   */\n\n\n  var keys = {};\n  list.forEach(function (_ref) {\n    var key = _ref.key;\n    keys[key] = (keys[key] || 0) + 1;\n  });\n  var duplicatedKeys = Object.keys(keys).filter(function (key) {\n    return keys[key] > 1;\n  });\n  duplicatedKeys.forEach(function (matchKey) {\n    // Remove `STATUS_REMOVE` node.\n    list = list.filter(function (_ref2) {\n      var key = _ref2.key,\n          status = _ref2.status;\n      return key !== matchKey || status !== STATUS_REMOVE;\n    }); // Update `STATUS_ADD` to `STATUS_KEEP`\n\n    list.forEach(function (node) {\n      if (node.key === matchKey) {\n        // eslint-disable-next-line no-param-reassign\n        node.status = STATUS_KEEP;\n      }\n    });\n  });\n  return list;\n}\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/CSSMotionList.js\n\n\n\n\n\n\n\nvar _excluded = ["component", "children", "onVisibleChanged", "onAllRemoved"],\n    _excluded2 = ["status"];\n/* eslint react/prop-types: 0 */\n\n\n\n\n\nvar MOTION_PROP_NAMES = [\'eventProps\', \'visible\', \'children\', \'motionName\', \'motionAppear\', \'motionEnter\', \'motionLeave\', \'motionLeaveImmediately\', \'motionDeadline\', \'removeOnLeave\', \'leavedClassName\', \'onAppearStart\', \'onAppearActive\', \'onAppearEnd\', \'onEnterStart\', \'onEnterActive\', \'onEnterEnd\', \'onLeaveStart\', \'onLeaveActive\', \'onLeaveEnd\'];\n/**\n * Generate a CSSMotionList component with config\n * @param transitionSupport No need since CSSMotionList no longer depends on transition support\n * @param CSSMotion CSSMotion component\n */\n\nfunction genCSSMotionList(transitionSupport) {\n  var CSSMotion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : es_CSSMotion;\n\n  var CSSMotionList = /*#__PURE__*/function (_React$Component) {\n    Object(inherits["a" /* default */])(CSSMotionList, _React$Component);\n\n    var _super = Object(createSuper["a" /* default */])(CSSMotionList);\n\n    function CSSMotionList() {\n      var _this;\n\n      Object(classCallCheck["a" /* default */])(this, CSSMotionList);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.state = {\n        keyEntities: []\n      };\n\n      _this.removeKey = function (removeKey) {\n        var keyEntities = _this.state.keyEntities;\n        var nextKeyEntities = keyEntities.map(function (entity) {\n          if (entity.key !== removeKey) return entity;\n          return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, entity), {}, {\n            status: STATUS_REMOVED\n          });\n        });\n\n        _this.setState({\n          keyEntities: nextKeyEntities\n        });\n\n        return nextKeyEntities.filter(function (_ref) {\n          var status = _ref.status;\n          return status !== STATUS_REMOVED;\n        }).length;\n      };\n\n      return _this;\n    }\n\n    Object(createClass["a" /* default */])(CSSMotionList, [{\n      key: "render",\n      value: function render() {\n        var _this2 = this;\n\n        var keyEntities = this.state.keyEntities;\n\n        var _this$props = this.props,\n            component = _this$props.component,\n            children = _this$props.children,\n            _onVisibleChanged = _this$props.onVisibleChanged,\n            onAllRemoved = _this$props.onAllRemoved,\n            restProps = Object(objectWithoutProperties["a" /* default */])(_this$props, _excluded);\n\n        var Component = component || react["Fragment"];\n        var motionProps = {};\n        MOTION_PROP_NAMES.forEach(function (prop) {\n          motionProps[prop] = restProps[prop];\n          delete restProps[prop];\n        });\n        delete restProps.keys;\n        return /*#__PURE__*/react["createElement"](Component, restProps, keyEntities.map(function (_ref2) {\n          var status = _ref2.status,\n              eventProps = Object(objectWithoutProperties["a" /* default */])(_ref2, _excluded2);\n\n          var visible = status === STATUS_ADD || status === STATUS_KEEP;\n          return /*#__PURE__*/react["createElement"](CSSMotion, Object(esm_extends["a" /* default */])({}, motionProps, {\n            key: eventProps.key,\n            visible: visible,\n            eventProps: eventProps,\n            onVisibleChanged: function onVisibleChanged(changedVisible) {\n              _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {\n                key: eventProps.key\n              });\n\n              if (!changedVisible) {\n                var restKeysCount = _this2.removeKey(eventProps.key);\n\n                if (restKeysCount === 0 && onAllRemoved) {\n                  onAllRemoved();\n                }\n              }\n            }\n          }), children);\n        }));\n      }\n    }], [{\n      key: "getDerivedStateFromProps",\n      value: function getDerivedStateFromProps(_ref3, _ref4) {\n        var keys = _ref3.keys;\n        var keyEntities = _ref4.keyEntities;\n        var parsedKeyObjects = parseKeys(keys);\n        var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);\n        return {\n          keyEntities: mixedKeyEntities.filter(function (entity) {\n            var prevEntity = keyEntities.find(function (_ref5) {\n              var key = _ref5.key;\n              return entity.key === key;\n            }); // Remove if already mark as removed\n\n            if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {\n              return false;\n            }\n\n            return true;\n          })\n        };\n      } // ZombieJ: Return the count of rest keys. It\'s safe to refactor if need more info.\n\n    }]);\n\n    return CSSMotionList;\n  }(react["Component"]);\n\n  CSSMotionList.defaultProps = {\n    component: \'div\'\n  };\n  return CSSMotionList;\n}\n/* harmony default export */ var es_CSSMotionList = (genCSSMotionList(supportTransition));\n// CONCATENATED MODULE: ./node_modules/rc-motion/es/index.js\n\n\n\n/* harmony default export */ var es = __webpack_exports__["b"] = (es_CSSMotion);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8XRh\n')},"8tx+":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/React/render.js\nvar React_render = __webpack_require__("bJ/+");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 11 modules\nvar es = __webpack_require__("8XRh");\n\n// EXTERNAL MODULE: ./node_modules/rc-notification/es/Notice.js\nvar Notice = __webpack_require__("EE3K");\n\n// EXTERNAL MODULE: ./node_modules/rc-notification/es/useNotification.js\nvar es_useNotification = __webpack_require__("8HVG");\n\n// CONCATENATED MODULE: ./node_modules/rc-notification/es/Notification.js\n\n\n\n\n\n\n\nvar _excluded = ["getContainer"];\n\n\n\n\n\n\n\nvar seed = 0;\nvar now = Date.now();\n\nfunction getUuid() {\n  var id = seed;\n  seed += 1;\n  return "rcNotification_".concat(now, "_").concat(id);\n}\n\nvar Notification_Notification = /*#__PURE__*/function (_Component) {\n  Object(inherits["a" /* default */])(Notification, _Component);\n\n  var _super = Object(createSuper["a" /* default */])(Notification);\n\n  function Notification() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Notification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      notices: []\n    };\n    _this.hookRefs = new Map();\n\n    _this.add = function (originNotice, holderCallback) {\n      var key = originNotice.key || getUuid();\n\n      var notice = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, originNotice), {}, {\n        key: key\n      });\n\n      var maxCount = _this.props.maxCount;\n\n      _this.setState(function (previousState) {\n        var notices = previousState.notices;\n        var noticeIndex = notices.map(function (v) {\n          return v.notice.key;\n        }).indexOf(key);\n        var updatedNotices = notices.concat();\n\n        if (noticeIndex !== -1) {\n          updatedNotices.splice(noticeIndex, 1, {\n            notice: notice,\n            holderCallback: holderCallback\n          });\n        } else {\n          if (maxCount && notices.length >= maxCount) {\n            // XXX, use key of first item to update new added (let React to move exsiting\n            // instead of remove and mount). Same key was used before for both a) external\n            // manual control and b) internal react \'key\' prop , which is not that good.\n            // eslint-disable-next-line no-param-reassign\n            // zombieJ: Not know why use `updateKey`. This makes Notice infinite loop in jest.\n            // Change to `updateMark` for compare instead.\n            // https://github.com/react-component/notification/commit/32299e6be396f94040bfa82517eea940db947ece\n            notice.key = updatedNotices[0].notice.key;\n            notice.updateMark = getUuid(); // zombieJ: That\'s why. User may close by key directly.\n            // We need record this but not re-render to avoid upper issue\n            // https://github.com/react-component/notification/issues/129\n\n            notice.userPassKey = key;\n            updatedNotices.shift();\n          }\n\n          updatedNotices.push({\n            notice: notice,\n            holderCallback: holderCallback\n          });\n        }\n\n        return {\n          notices: updatedNotices\n        };\n      });\n    };\n\n    _this.remove = function (removeKey) {\n      _this.setState(function (_ref) {\n        var notices = _ref.notices;\n        return {\n          notices: notices.filter(function (_ref2) {\n            var _ref2$notice = _ref2.notice,\n                key = _ref2$notice.key,\n                userPassKey = _ref2$notice.userPassKey;\n            var mergedKey = userPassKey || key;\n            return mergedKey !== removeKey;\n          })\n        };\n      });\n    };\n\n    _this.noticePropsMap = {};\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Notification, [{\n    key: "getTransitionName",\n    value: function getTransitionName() {\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          animation = _this$props.animation;\n      var transitionName = this.props.transitionName;\n\n      if (!transitionName && animation) {\n        transitionName = "".concat(prefixCls, "-").concat(animation);\n      }\n\n      return transitionName;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var notices = this.state.notices;\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          closeIcon = _this$props2.closeIcon,\n          style = _this$props2.style;\n      var noticeKeys = [];\n      notices.forEach(function (_ref3, index) {\n        var notice = _ref3.notice,\n            holderCallback = _ref3.holderCallback;\n        var updateMark = index === notices.length - 1 ? notice.updateMark : undefined;\n        var key = notice.key,\n            userPassKey = notice.userPassKey;\n\n        var noticeProps = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({\n          prefixCls: prefixCls,\n          closeIcon: closeIcon\n        }, notice), notice.props), {}, {\n          key: key,\n          noticeKey: userPassKey || key,\n          updateMark: updateMark,\n          onClose: function onClose(noticeKey) {\n            var _notice$onClose;\n\n            _this2.remove(noticeKey);\n\n            (_notice$onClose = notice.onClose) === null || _notice$onClose === void 0 ? void 0 : _notice$onClose.call(notice);\n          },\n          onClick: notice.onClick,\n          children: notice.content\n        }); // Give to motion\n\n\n        noticeKeys.push(key);\n        _this2.noticePropsMap[key] = {\n          props: noticeProps,\n          holderCallback: holderCallback\n        };\n      });\n      return /*#__PURE__*/react["createElement"]("div", {\n        className: classnames_default()(prefixCls, className),\n        style: style\n      }, /*#__PURE__*/react["createElement"](es["a" /* CSSMotionList */], {\n        keys: noticeKeys,\n        motionName: this.getTransitionName(),\n        onVisibleChanged: function onVisibleChanged(changedVisible, _ref4) {\n          var key = _ref4.key;\n\n          if (!changedVisible) {\n            delete _this2.noticePropsMap[key];\n          }\n        }\n      }, function (_ref5) {\n        var key = _ref5.key,\n            motionClassName = _ref5.className,\n            motionStyle = _ref5.style,\n            visible = _ref5.visible;\n        var _this2$noticePropsMap = _this2.noticePropsMap[key],\n            noticeProps = _this2$noticePropsMap.props,\n            holderCallback = _this2$noticePropsMap.holderCallback;\n\n        if (holderCallback) {\n          return /*#__PURE__*/react["createElement"]("div", {\n            key: key,\n            className: classnames_default()(motionClassName, "".concat(prefixCls, "-hook-holder")),\n            style: Object(objectSpread2["a" /* default */])({}, motionStyle),\n            ref: function ref(div) {\n              if (typeof key === \'undefined\') {\n                return;\n              }\n\n              if (div) {\n                _this2.hookRefs.set(key, div);\n\n                holderCallback(div, noticeProps);\n              } else {\n                _this2.hookRefs["delete"](key);\n              }\n            }\n          });\n        }\n\n        return /*#__PURE__*/react["createElement"](Notice["a" /* default */], Object(esm_extends["a" /* default */])({}, noticeProps, {\n          className: classnames_default()(motionClassName, noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.className),\n          style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, motionStyle), noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.style),\n          visible: visible\n        }));\n      }));\n    }\n  }]);\n\n  return Notification;\n}(react["Component"]);\n\nNotification_Notification.newInstance = void 0;\nNotification_Notification.defaultProps = {\n  prefixCls: \'rc-notification\',\n  animation: \'fade\',\n  style: {\n    top: 65,\n    left: \'50%\'\n  }\n};\n\nNotification_Notification.newInstance = function newNotificationInstance(properties, callback) {\n  var _ref6 = properties || {},\n      getContainer = _ref6.getContainer,\n      props = Object(objectWithoutProperties["a" /* default */])(_ref6, _excluded);\n\n  var div = document.createElement(\'div\');\n\n  if (getContainer) {\n    var root = getContainer();\n    root.appendChild(div);\n  } else {\n    document.body.appendChild(div);\n  }\n\n  var called = false;\n\n  function ref(notification) {\n    if (called) {\n      return;\n    }\n\n    called = true;\n    callback({\n      notice: function notice(noticeProps) {\n        notification.add(noticeProps);\n      },\n      removeNotice: function removeNotice(key) {\n        notification.remove(key);\n      },\n      component: notification,\n      destroy: function destroy() {\n        Object(React_render["b" /* unmount */])(div);\n\n        if (div.parentNode) {\n          div.parentNode.removeChild(div);\n        }\n      },\n      // Hooks\n      useNotification: function useNotification() {\n        return Object(es_useNotification["a" /* default */])(notification);\n      }\n    });\n  } // Only used for test case usage\n\n\n  if (false) {}\n\n  Object(React_render["a" /* render */])( /*#__PURE__*/react["createElement"](Notification_Notification, Object(esm_extends["a" /* default */])({}, props, {\n    ref: ref\n  })), div);\n};\n\n/* harmony default export */ var es_Notification = (Notification_Notification);\n// CONCATENATED MODULE: ./node_modules/rc-notification/es/index.js\n\n/* harmony default export */ var rc_notification_es = __webpack_exports__["a"] = (es_Notification);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8tx+\n')},"9mu1":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/ref.js\nvar es_ref = __webpack_require__("c+Xe");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/isVisible.js\nvar isVisible = __webpack_require__("x/xZ");\n\n// EXTERNAL MODULE: ./node_modules/dom-align/dist-web/index.js\nvar dist_web = __webpack_require__("kaUV");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/addEventListener.js\nvar addEventListener = __webpack_require__("zT1h");\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEqual.js\nvar isEqual = __webpack_require__("Y+p1");\nvar isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);\n\n// EXTERNAL MODULE: ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\nvar ResizeObserver_es = __webpack_require__("bdgK");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/contains.js\nvar contains = __webpack_require__("l4aY");\n\n// CONCATENATED MODULE: ./node_modules/rc-align/es/util.js\n\n\n\nfunction isSamePoint(prev, next) {\n  if (prev === next) return true;\n  if (!prev || !next) return false;\n\n  if (\'pageX\' in next && \'pageY\' in next) {\n    return prev.pageX === next.pageX && prev.pageY === next.pageY;\n  }\n\n  if (\'clientX\' in next && \'clientY\' in next) {\n    return prev.clientX === next.clientX && prev.clientY === next.clientY;\n  }\n\n  return false;\n}\nfunction restoreFocus(activeElement, container) {\n  // Focus back if is in the container\n  if (activeElement !== document.activeElement && Object(contains["a" /* default */])(container, activeElement) && typeof activeElement.focus === \'function\') {\n    activeElement.focus();\n  }\n}\nfunction monitorResize(element, callback) {\n  var prevWidth = null;\n  var prevHeight = null;\n\n  function onResize(_ref) {\n    var _ref2 = Object(slicedToArray["a" /* default */])(_ref, 1),\n        target = _ref2[0].target;\n\n    if (!document.documentElement.contains(target)) return;\n\n    var _target$getBoundingCl = target.getBoundingClientRect(),\n        width = _target$getBoundingCl.width,\n        height = _target$getBoundingCl.height;\n\n    var fixedWidth = Math.floor(width);\n    var fixedHeight = Math.floor(height);\n\n    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {\n      // https://webkit.org/blog/9997/resizeobserver-in-webkit/\n      Promise.resolve().then(function () {\n        callback({\n          width: fixedWidth,\n          height: fixedHeight\n        });\n      });\n    }\n\n    prevWidth = fixedWidth;\n    prevHeight = fixedHeight;\n  }\n\n  var resizeObserver = new ResizeObserver_es["a" /* default */](onResize);\n\n  if (element) {\n    resizeObserver.observe(element);\n  }\n\n  return function () {\n    resizeObserver.disconnect();\n  };\n}\n// CONCATENATED MODULE: ./node_modules/rc-align/es/hooks/useBuffer.js\n\n/* harmony default export */ var useBuffer = (function (callback, buffer) {\n  var calledRef = react_default.a.useRef(false);\n  var timeoutRef = react_default.a.useRef(null);\n\n  function cancelTrigger() {\n    window.clearTimeout(timeoutRef.current);\n  }\n\n  function trigger(force) {\n    cancelTrigger();\n\n    if (!calledRef.current || force === true) {\n      if (callback() === false) {\n        // Not delay since callback cancelled self\n        return;\n      }\n\n      calledRef.current = true;\n      timeoutRef.current = window.setTimeout(function () {\n        calledRef.current = false;\n      }, buffer);\n    } else {\n      timeoutRef.current = window.setTimeout(function () {\n        calledRef.current = false;\n        trigger();\n      }, buffer);\n    }\n  }\n\n  return [trigger, function () {\n    calledRef.current = false;\n    cancelTrigger();\n  }];\n});\n// CONCATENATED MODULE: ./node_modules/rc-align/es/Align.js\n\n\n/**\n * Removed props:\n *  - childrenProps\n */\n\n\n\n\n\n\n\n\n\n\nfunction getElement(func) {\n  if (typeof func !== \'function\') return null;\n  return func();\n}\n\nfunction getPoint(point) {\n  if (Object(esm_typeof["a" /* default */])(point) !== \'object\' || !point) return null;\n  return point;\n}\n\nvar Align_Align = function Align(_ref, ref) {\n  var children = _ref.children,\n      disabled = _ref.disabled,\n      target = _ref.target,\n      align = _ref.align,\n      onAlign = _ref.onAlign,\n      monitorWindowResize = _ref.monitorWindowResize,\n      _ref$monitorBufferTim = _ref.monitorBufferTime,\n      monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;\n  var cacheRef = react_default.a.useRef({});\n  var nodeRef = react_default.a.useRef();\n  var childNode = react_default.a.Children.only(children); // ===================== Align ======================\n  // We save the props here to avoid closure makes props ood\n\n  var forceAlignPropsRef = react_default.a.useRef({});\n  forceAlignPropsRef.current.disabled = disabled;\n  forceAlignPropsRef.current.target = target;\n  forceAlignPropsRef.current.align = align;\n  forceAlignPropsRef.current.onAlign = onAlign;\n\n  var _useBuffer = useBuffer(function () {\n    var _forceAlignPropsRef$c = forceAlignPropsRef.current,\n        latestDisabled = _forceAlignPropsRef$c.disabled,\n        latestTarget = _forceAlignPropsRef$c.target,\n        latestAlign = _forceAlignPropsRef$c.align,\n        latestOnAlign = _forceAlignPropsRef$c.onAlign;\n\n    if (!latestDisabled && latestTarget) {\n      var source = nodeRef.current;\n      var result;\n      var element = getElement(latestTarget);\n      var point = getPoint(latestTarget);\n      cacheRef.current.element = element;\n      cacheRef.current.point = point;\n      cacheRef.current.align = latestAlign; // IE lose focus after element realign\n      // We should record activeElement and restore later\n      // IE lose focus after element realign\n      // We should record activeElement and restore later\n\n      var _document = document,\n          activeElement = _document.activeElement; // We only align when element is visible\n      // We only align when element is visible\n\n      if (element && Object(isVisible["a" /* default */])(element)) {\n        result = Object(dist_web["a" /* alignElement */])(source, element, latestAlign);\n      } else if (point) {\n        result = Object(dist_web["b" /* alignPoint */])(source, point, latestAlign);\n      }\n\n      restoreFocus(activeElement, source);\n\n      if (latestOnAlign && result) {\n        latestOnAlign(source, result);\n      }\n\n      return true;\n    }\n\n    return false;\n  }, monitorBufferTime),\n      _useBuffer2 = Object(slicedToArray["a" /* default */])(_useBuffer, 2),\n      _forceAlign = _useBuffer2[0],\n      cancelForceAlign = _useBuffer2[1]; // ===================== Effect =====================\n  // Listen for target updated\n\n\n  var resizeMonitor = react_default.a.useRef({\n    cancel: function cancel() {}\n  }); // Listen for source updated\n\n  var sourceResizeMonitor = react_default.a.useRef({\n    cancel: function cancel() {}\n  });\n  react_default.a.useEffect(function () {\n    var element = getElement(target);\n    var point = getPoint(target);\n\n    if (nodeRef.current !== sourceResizeMonitor.current.element) {\n      sourceResizeMonitor.current.cancel();\n      sourceResizeMonitor.current.element = nodeRef.current;\n      sourceResizeMonitor.current.cancel = monitorResize(nodeRef.current, _forceAlign);\n    }\n\n    if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point) || !isEqual_default()(cacheRef.current.align, align)) {\n      _forceAlign(); // Add resize observer\n\n\n      if (resizeMonitor.current.element !== element) {\n        resizeMonitor.current.cancel();\n        resizeMonitor.current.element = element;\n        resizeMonitor.current.cancel = monitorResize(element, _forceAlign);\n      }\n    }\n  }); // Listen for disabled change\n\n  react_default.a.useEffect(function () {\n    if (!disabled) {\n      _forceAlign();\n    } else {\n      cancelForceAlign();\n    }\n  }, [disabled]); // Listen for window resize\n\n  var winResizeRef = react_default.a.useRef(null);\n  react_default.a.useEffect(function () {\n    if (monitorWindowResize) {\n      if (!winResizeRef.current) {\n        winResizeRef.current = Object(addEventListener["a" /* default */])(window, \'resize\', _forceAlign);\n      }\n    } else if (winResizeRef.current) {\n      winResizeRef.current.remove();\n      winResizeRef.current = null;\n    }\n  }, [monitorWindowResize]); // Clear all if unmount\n\n  react_default.a.useEffect(function () {\n    return function () {\n      resizeMonitor.current.cancel();\n      sourceResizeMonitor.current.cancel();\n      if (winResizeRef.current) winResizeRef.current.remove();\n      cancelForceAlign();\n    };\n  }, []); // ====================== Ref =======================\n\n  react_default.a.useImperativeHandle(ref, function () {\n    return {\n      forceAlign: function forceAlign() {\n        return _forceAlign(true);\n      }\n    };\n  }); // ===================== Render =====================\n\n  if ( /*#__PURE__*/react_default.a.isValidElement(childNode)) {\n    childNode = /*#__PURE__*/react_default.a.cloneElement(childNode, {\n      ref: Object(es_ref["a" /* composeRef */])(childNode.ref, nodeRef)\n    });\n  }\n\n  return childNode;\n};\n\nvar RcAlign = /*#__PURE__*/react_default.a.forwardRef(Align_Align);\nRcAlign.displayName = \'Align\';\n/* harmony default export */ var es_Align = (RcAlign);\n// CONCATENATED MODULE: ./node_modules/rc-align/es/index.js\n// export this package\'s api\n\n/* harmony default export */ var es = __webpack_exports__["a"] = (es_Align);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9mu1\n')},E1MH:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// UNUSED EXPORTS: Panel\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/shallowequal/index.js\nvar shallowequal = __webpack_require__("Gytx");\nvar shallowequal_default = /*#__PURE__*/__webpack_require__.n(shallowequal);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__("Zm9Q");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 11 modules\nvar es = __webpack_require__("8XRh");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// CONCATENATED MODULE: ./node_modules/rc-collapse/es/PanelContent.js\n\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable react/prop-types */\n\n\n\nvar PanelContent = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var _classnames;\n\n  var prefixCls = props.prefixCls,\n      forceRender = props.forceRender,\n      className = props.className,\n      style = props.style,\n      children = props.children,\n      isActive = props.isActive,\n      role = props.role;\n\n  var _React$useState = react["useState"](isActive || forceRender),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      rendered = _React$useState2[0],\n      setRendered = _React$useState2[1];\n\n  react["useEffect"](function () {\n    if (forceRender || isActive) {\n      setRendered(true);\n    }\n  }, [forceRender, isActive]);\n\n  if (!rendered) {\n    return null;\n  }\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    ref: ref,\n    className: classnames_default()("".concat(prefixCls, "-content"), (_classnames = {}, Object(defineProperty["a" /* default */])(_classnames, "".concat(prefixCls, "-content-active"), isActive), Object(defineProperty["a" /* default */])(_classnames, "".concat(prefixCls, "-content-inactive"), !isActive), _classnames), className),\n    style: style,\n    role: role\n  }, /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-content-box")\n  }, children));\n});\nPanelContent.displayName = \'PanelContent\';\n/* harmony default export */ var es_PanelContent = (PanelContent);\n// CONCATENATED MODULE: ./node_modules/rc-collapse/es/Panel.js\n\n\n\n\n\n\n/* eslint-disable react/prop-types */\n\n\n\n\n\n\n\nvar Panel_CollapsePanel = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(CollapsePanel, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(CollapsePanel);\n\n  function CollapsePanel() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CollapsePanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onItemClick = function () {\n      var _this$props = _this.props,\n          onItemClick = _this$props.onItemClick,\n          panelKey = _this$props.panelKey;\n\n      if (typeof onItemClick === \'function\') {\n        onItemClick(panelKey);\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      if (e.key === \'Enter\' || e.keyCode === 13 || e.which === 13) {\n        _this.onItemClick();\n      }\n    };\n\n    _this.renderIcon = function () {\n      var _this$props2 = _this.props,\n          showArrow = _this$props2.showArrow,\n          expandIcon = _this$props2.expandIcon,\n          prefixCls = _this$props2.prefixCls,\n          collapsible = _this$props2.collapsible;\n\n      if (!showArrow) {\n        return null;\n      }\n\n      var iconNode = typeof expandIcon === \'function\' ? expandIcon(_this.props) : /*#__PURE__*/react["createElement"]("i", {\n        className: "arrow"\n      });\n      return iconNode && /*#__PURE__*/react["createElement"]("div", {\n        className: "".concat(prefixCls, "-expand-icon"),\n        onClick: collapsible === \'header\' ? _this.onItemClick : null\n      }, iconNode);\n    };\n\n    _this.renderTitle = function () {\n      var _this$props3 = _this.props,\n          header = _this$props3.header,\n          prefixCls = _this$props3.prefixCls,\n          collapsible = _this$props3.collapsible;\n      return /*#__PURE__*/react["createElement"]("span", {\n        className: "".concat(prefixCls, "-header-text"),\n        onClick: collapsible === \'header\' ? _this.onItemClick : null\n      }, header);\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CollapsePanel, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps) {\n      return !shallowequal_default()(this.props, nextProps);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          id = _this$props4.id,\n          style = _this$props4.style,\n          prefixCls = _this$props4.prefixCls,\n          headerClass = _this$props4.headerClass,\n          children = _this$props4.children,\n          isActive = _this$props4.isActive,\n          destroyInactivePanel = _this$props4.destroyInactivePanel,\n          accordion = _this$props4.accordion,\n          forceRender = _this$props4.forceRender,\n          openMotion = _this$props4.openMotion,\n          extra = _this$props4.extra,\n          collapsible = _this$props4.collapsible;\n      var disabled = collapsible === \'disabled\';\n      var collapsibleHeader = collapsible === \'header\';\n      var itemCls = classnames_default()((_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-item"), true), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-item-active"), isActive), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-item-disabled"), disabled), _classNames), className);\n      var headerCls = classnames_default()("".concat(prefixCls, "-header"), (_classNames2 = {}, Object(defineProperty["a" /* default */])(_classNames2, headerClass, headerClass), Object(defineProperty["a" /* default */])(_classNames2, "".concat(prefixCls, "-header-collapsible-only"), collapsibleHeader), _classNames2));\n      /** header \u8282\u70b9\u5c5e\u6027 */\n\n      var headerProps = {\n        className: headerCls,\n        \'aria-expanded\': isActive,\n        onKeyPress: this.handleKeyPress\n      };\n\n      if (!collapsibleHeader) {\n        headerProps.onClick = this.onItemClick;\n        headerProps.role = accordion ? \'tab\' : \'button\';\n        headerProps.tabIndex = disabled ? -1 : 0;\n      }\n\n      var ifExtraExist = extra !== null && extra !== undefined && typeof extra !== \'boolean\';\n      return /*#__PURE__*/react["createElement"]("div", {\n        className: itemCls,\n        style: style,\n        id: id\n      }, /*#__PURE__*/react["createElement"]("div", headerProps, this.renderIcon(), this.renderTitle(), ifExtraExist && /*#__PURE__*/react["createElement"]("div", {\n        className: "".concat(prefixCls, "-extra")\n      }, extra)), /*#__PURE__*/react["createElement"](es["b" /* default */], Object(esm_extends["a" /* default */])({\n        visible: isActive,\n        leavedClassName: "".concat(prefixCls, "-content-hidden")\n      }, openMotion, {\n        forceRender: forceRender,\n        removeOnLeave: destroyInactivePanel\n      }), function (_ref, ref) {\n        var motionClassName = _ref.className,\n            motionStyle = _ref.style;\n        return /*#__PURE__*/react["createElement"](es_PanelContent, {\n          ref: ref,\n          prefixCls: prefixCls,\n          className: motionClassName,\n          style: motionStyle,\n          isActive: isActive,\n          forceRender: forceRender,\n          role: accordion ? \'tabpanel\' : null\n        }, children);\n      }));\n    }\n  }]);\n\n  return CollapsePanel;\n}(react["Component"]);\n\nPanel_CollapsePanel.defaultProps = {\n  showArrow: true,\n  isActive: false,\n  onItemClick: function onItemClick() {},\n  headerClass: \'\',\n  forceRender: false\n};\n/* harmony default export */ var Panel = (Panel_CollapsePanel);\n// CONCATENATED MODULE: ./node_modules/rc-collapse/es/Collapse.js\n\n\n\n\n\n\n\n/* eslint-disable react/prop-types */\n\n\n\n\n\n\n\nfunction getActiveKeysArray(activeKey) {\n  var currentActiveKey = activeKey;\n\n  if (!Array.isArray(currentActiveKey)) {\n    var activeKeyType = Object(esm_typeof["a" /* default */])(currentActiveKey);\n\n    currentActiveKey = activeKeyType === \'number\' || activeKeyType === \'string\' ? [currentActiveKey] : [];\n  }\n\n  return currentActiveKey.map(function (key) {\n    return String(key);\n  });\n}\n\nvar Collapse_Collapse = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(Collapse, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(Collapse);\n\n  function Collapse(_props) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Collapse);\n\n    _this = _super.call(this, _props);\n\n    _this.onClickItem = function (key) {\n      var activeKey = _this.state.activeKey;\n\n      if (_this.props.accordion) {\n        activeKey = activeKey[0] === key ? [] : [key];\n      } else {\n        activeKey = Object(toConsumableArray["a" /* default */])(activeKey);\n        var index = activeKey.indexOf(key);\n        var isActive = index > -1;\n\n        if (isActive) {\n          // remove active state\n          activeKey.splice(index, 1);\n        } else {\n          activeKey.push(key);\n        }\n      }\n\n      _this.setActiveKey(activeKey);\n    };\n\n    _this.getNewChild = function (child, index) {\n      if (!child) return null;\n      var activeKey = _this.state.activeKey;\n      var _this$props = _this.props,\n          prefixCls = _this$props.prefixCls,\n          openMotion = _this$props.openMotion,\n          accordion = _this$props.accordion,\n          rootDestroyInactivePanel = _this$props.destroyInactivePanel,\n          expandIcon = _this$props.expandIcon,\n          collapsible = _this$props.collapsible; // If there is no key provide, use the panel order as default key\n\n      var key = child.key || String(index);\n      var _child$props = child.props,\n          header = _child$props.header,\n          headerClass = _child$props.headerClass,\n          destroyInactivePanel = _child$props.destroyInactivePanel,\n          childCollapsible = _child$props.collapsible;\n      var isActive = false;\n\n      if (accordion) {\n        isActive = activeKey[0] === key;\n      } else {\n        isActive = activeKey.indexOf(key) > -1;\n      }\n\n      var mergeCollapsible = childCollapsible !== null && childCollapsible !== void 0 ? childCollapsible : collapsible;\n      var props = {\n        key: key,\n        panelKey: key,\n        header: header,\n        headerClass: headerClass,\n        isActive: isActive,\n        prefixCls: prefixCls,\n        destroyInactivePanel: destroyInactivePanel !== null && destroyInactivePanel !== void 0 ? destroyInactivePanel : rootDestroyInactivePanel,\n        openMotion: openMotion,\n        accordion: accordion,\n        children: child.props.children,\n        onItemClick: mergeCollapsible === \'disabled\' ? null : _this.onClickItem,\n        expandIcon: expandIcon,\n        collapsible: mergeCollapsible\n      }; // https://github.com/ant-design/ant-design/issues/20479\n\n      if (typeof child.type === \'string\') {\n        return child;\n      }\n\n      return /*#__PURE__*/react["cloneElement"](child, props);\n    };\n\n    _this.getItems = function () {\n      var children = _this.props.children;\n      return Object(toArray["a" /* default */])(children).map(_this.getNewChild);\n    };\n\n    _this.setActiveKey = function (activeKey) {\n      if (!(\'activeKey\' in _this.props)) {\n        _this.setState({\n          activeKey: activeKey\n        });\n      }\n\n      _this.props.onChange(_this.props.accordion ? activeKey[0] : activeKey);\n    };\n\n    var _activeKey = _props.activeKey,\n        defaultActiveKey = _props.defaultActiveKey;\n    var currentActiveKey = defaultActiveKey;\n\n    if (\'activeKey\' in _props) {\n      currentActiveKey = _activeKey;\n    }\n\n    _this.state = {\n      activeKey: getActiveKeysArray(currentActiveKey)\n    };\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Collapse, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !shallowequal_default()(this.props, nextProps) || !shallowequal_default()(this.state, nextState);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          style = _this$props2.style,\n          accordion = _this$props2.accordion;\n      var collapseClassName = classnames_default()((_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, prefixCls, true), Object(defineProperty["a" /* default */])(_classNames, className, !!className), _classNames));\n      return /*#__PURE__*/react["createElement"]("div", {\n        className: collapseClassName,\n        style: style,\n        role: accordion ? \'tablist\' : null\n      }, this.getItems());\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps) {\n      var newState = {};\n\n      if (\'activeKey\' in nextProps) {\n        newState.activeKey = getActiveKeysArray(nextProps.activeKey);\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Collapse;\n}(react["Component"]);\n\nCollapse_Collapse.defaultProps = {\n  prefixCls: \'rc-collapse\',\n  onChange: function onChange() {},\n  accordion: false,\n  destroyInactivePanel: false\n};\nCollapse_Collapse.Panel = Panel;\n/* harmony default export */ var es_Collapse = (Collapse_Collapse);\n// CONCATENATED MODULE: ./node_modules/rc-collapse/es/index.js\n\n/* harmony default export */ var rc_collapse_es = __webpack_exports__["a"] = (es_Collapse);\nvar es_Panel = es_Collapse.Panel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///E1MH\n')},EE3K:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Notice; });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("rePB");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("1OyB");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("vuIU");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("Ji7U");\n/* harmony import */ var _babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("LK+K");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("driF");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("TSYQ");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\nvar Notice = /*#__PURE__*/function (_Component) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(Notice, _Component);\n\n  var _super = Object(_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(Notice);\n\n  function Notice() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(this, Notice);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.closeTimer = null;\n\n    _this.close = function (e) {\n      if (e) {\n        e.stopPropagation();\n      }\n\n      _this.clearCloseTimer();\n\n      var _this$props = _this.props,\n          onClose = _this$props.onClose,\n          noticeKey = _this$props.noticeKey;\n\n      if (onClose) {\n        onClose(noticeKey);\n      }\n    };\n\n    _this.startCloseTimer = function () {\n      if (_this.props.duration) {\n        _this.closeTimer = window.setTimeout(function () {\n          _this.close();\n        }, _this.props.duration * 1000);\n      }\n    };\n\n    _this.clearCloseTimer = function () {\n      if (_this.closeTimer) {\n        clearTimeout(_this.closeTimer);\n        _this.closeTimer = null;\n      }\n    };\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(Notice, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.startCloseTimer();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || // Visible again need reset timer\n      this.props.visible !== prevProps.visible && this.props.visible) {\n        this.restartCloseTimer();\n      }\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.clearCloseTimer();\n    }\n  }, {\n    key: "restartCloseTimer",\n    value: function restartCloseTimer() {\n      this.clearCloseTimer();\n      this.startCloseTimer();\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          closable = _this$props2.closable,\n          closeIcon = _this$props2.closeIcon,\n          style = _this$props2.style,\n          onClick = _this$props2.onClick,\n          children = _this$props2.children,\n          holder = _this$props2.holder;\n      var componentClass = "".concat(prefixCls, "-notice");\n      var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function (acc, key) {\n        if (key.substr(0, 5) === \'data-\' || key.substr(0, 5) === \'aria-\' || key === \'role\') {\n          acc[key] = _this2.props[key];\n        }\n\n        return acc;\n      }, {});\n      var node = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__["createElement"]("div", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({\n        className: classnames__WEBPACK_IMPORTED_MODULE_8___default()(componentClass, className, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({}, "".concat(componentClass, "-closable"), closable)),\n        style: style,\n        onMouseEnter: this.clearCloseTimer,\n        onMouseLeave: this.startCloseTimer,\n        onClick: onClick\n      }, dataOrAriaAttributeProps), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__["createElement"]("div", {\n        className: "".concat(componentClass, "-content")\n      }, children), closable ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__["createElement"]("a", {\n        tabIndex: 0,\n        onClick: this.close,\n        className: "".concat(componentClass, "-close")\n      }, closeIcon || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__["createElement"]("span", {\n        className: "".concat(componentClass, "-close-x")\n      })) : null);\n\n      if (holder) {\n        return /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_7___default.a.createPortal(node, holder);\n      }\n\n      return node;\n    }\n  }]);\n\n  return Notice;\n}(react__WEBPACK_IMPORTED_MODULE_6__["Component"]);\n\nNotice.defaultProps = {\n  onClose: function onClose() {},\n  duration: 1.5\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///EE3K\n')},RxwV:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/rc-select/es/hooks/useId.js\nvar useId = __webpack_require__("18yb");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/conductUtil.js\nvar conductUtil = __webpack_require__("NvD2");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js\nvar useMergedState = __webpack_require__("6cGi");\n\n// EXTERNAL MODULE: ./node_modules/rc-select/es/index.js + 27 modules\nvar es = __webpack_require__("LdHM");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/context.js\n\nvar CascaderContext = /*#__PURE__*/react["createContext"](null);\n/* harmony default export */ var context = (CascaderContext);\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/utils/commonUtil.js\nvar VALUE_SPLIT = \'__RC_CASCADER_SPLIT__\';\nvar SHOW_PARENT = \'SHOW_PARENT\';\nvar SHOW_CHILD = \'SHOW_CHILD\';\nfunction toPathKey(value) {\n  return value.join(VALUE_SPLIT);\n}\nfunction toPathKeys(value) {\n  return value.map(toPathKey);\n}\nfunction toPathValueStr(pathKey) {\n  return pathKey.split(VALUE_SPLIT);\n}\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var val = value || \'value\';\n  return {\n    label: label || \'label\',\n    value: val,\n    key: val,\n    children: children || \'children\'\n  };\n}\nfunction isLeaf(option, fieldNames) {\n  var _option$isLeaf, _option$fieldNames$ch;\n\n  return (_option$isLeaf = option.isLeaf) !== null && _option$isLeaf !== void 0 ? _option$isLeaf : !((_option$fieldNames$ch = option[fieldNames.children]) === null || _option$fieldNames$ch === void 0 ? void 0 : _option$fieldNames$ch.length);\n}\nfunction scrollIntoParentView(element) {\n  var parent = element.parentElement;\n\n  if (!parent) {\n    return;\n  }\n\n  var elementToParent = element.offsetTop - parent.offsetTop; // offsetParent may not be parent.\n\n  if (elementToParent - parent.scrollTop < 0) {\n    parent.scrollTo({\n      top: elementToParent\n    });\n  } else if (elementToParent + element.offsetHeight - parent.scrollTop > parent.offsetHeight) {\n    parent.scrollTo({\n      top: elementToParent + element.offsetHeight - parent.offsetHeight\n    });\n  }\n}\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/utils/treeUtil.js\n\nfunction formatStrategyValues(pathKeys, getKeyPathEntities, showCheckedStrategy) {\n  var valueSet = new Set(pathKeys);\n  var keyPathEntities = getKeyPathEntities();\n  return pathKeys.filter(function (key) {\n    var entity = keyPathEntities[key];\n    var parent = entity ? entity.parent : null;\n    var children = entity ? entity.children : null;\n    return showCheckedStrategy === SHOW_CHILD ? !(children && children.some(function (child) {\n      return child.key && valueSet.has(child.key);\n    })) : !(parent && !parent.node.disabled && valueSet.has(parent.key));\n  });\n}\nfunction toPathOptions(valueCells, options, fieldNames) {\n  var stringMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var currentList = options;\n  var valueOptions = [];\n\n  var _loop = function _loop(i) {\n    var _currentList, _currentList2, _foundOption$fieldNam;\n\n    var valueCell = valueCells[i];\n    var foundIndex = (_currentList = currentList) === null || _currentList === void 0 ? void 0 : _currentList.findIndex(function (option) {\n      var val = option[fieldNames.value];\n      return stringMode ? String(val) === String(valueCell) : val === valueCell;\n    });\n    var foundOption = foundIndex !== -1 ? (_currentList2 = currentList) === null || _currentList2 === void 0 ? void 0 : _currentList2[foundIndex] : null;\n    valueOptions.push({\n      value: (_foundOption$fieldNam = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.value]) !== null && _foundOption$fieldNam !== void 0 ? _foundOption$fieldNam : valueCell,\n      index: foundIndex,\n      option: foundOption\n    });\n    currentList = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames.children];\n  };\n\n  for (var i = 0; i < valueCells.length; i += 1) {\n    _loop(i);\n  }\n\n  return valueOptions;\n}\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/OptionList/Checkbox.js\n\n\n\n\nfunction Checkbox(_ref) {\n  var _classNames;\n\n  var prefixCls = _ref.prefixCls,\n      checked = _ref.checked,\n      halfChecked = _ref.halfChecked,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick;\n\n  var _React$useContext = react["useContext"](context),\n      checkable = _React$useContext.checkable;\n\n  var customCheckbox = typeof checkable !== \'boolean\' ? checkable : null;\n  return /*#__PURE__*/react["createElement"]("span", {\n    className: classnames_default()("".concat(prefixCls), (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-checked"), checked), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-indeterminate"), !checked && halfChecked), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames)),\n    onClick: onClick\n  }, customCheckbox);\n}\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useSearchOptions.js\n\n\n\n\nvar SEARCH_MARK = \'__rc_cascader_search_mark__\';\n\nvar defaultFilter = function defaultFilter(search, options, _ref) {\n  var label = _ref.label;\n  return options.some(function (opt) {\n    return String(opt[label]).toLowerCase().includes(search.toLowerCase());\n  });\n};\n\nvar defaultRender = function defaultRender(inputValue, path, prefixCls, fieldNames) {\n  return path.map(function (opt) {\n    return opt[fieldNames.label];\n  }).join(\' / \');\n};\n\n/* harmony default export */ var useSearchOptions = (function (search, options, fieldNames, prefixCls, config, changeOnSelect) {\n  var _config$filter = config.filter,\n      filter = _config$filter === void 0 ? defaultFilter : _config$filter,\n      _config$render = config.render,\n      render = _config$render === void 0 ? defaultRender : _config$render,\n      _config$limit = config.limit,\n      limit = _config$limit === void 0 ? 50 : _config$limit,\n      sort = config.sort;\n  return react["useMemo"](function () {\n    var filteredOptions = [];\n\n    if (!search) {\n      return [];\n    }\n\n    function dig(list, pathOptions) {\n      list.forEach(function (option) {\n        // Perf saving when `sort` is disabled and `limit` is provided\n        if (!sort && limit > 0 && filteredOptions.length >= limit) {\n          return;\n        }\n\n        var connectedPathOptions = [].concat(Object(toConsumableArray["a" /* default */])(pathOptions), [option]);\n        var children = option[fieldNames.children]; // If current option is filterable\n\n        if ( // If is leaf option\n        !children || children.length === 0 || // If is changeOnSelect\n        changeOnSelect) {\n          if (filter(search, connectedPathOptions, {\n            label: fieldNames.label\n          })) {\n            var _objectSpread2;\n\n            filteredOptions.push(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, option), {}, (_objectSpread2 = {}, Object(defineProperty["a" /* default */])(_objectSpread2, fieldNames.label, render(search, connectedPathOptions, prefixCls, fieldNames)), Object(defineProperty["a" /* default */])(_objectSpread2, SEARCH_MARK, connectedPathOptions), _objectSpread2)));\n          }\n        }\n\n        if (children) {\n          dig(option[fieldNames.children], connectedPathOptions);\n        }\n      });\n    }\n\n    dig(options, []); // Do sort\n\n    if (sort) {\n      filteredOptions.sort(function (a, b) {\n        return sort(a[SEARCH_MARK], b[SEARCH_MARK], search, fieldNames);\n      });\n    }\n\n    return limit > 0 ? filteredOptions.slice(0, limit) : filteredOptions;\n  }, [search, options, fieldNames, prefixCls, render, changeOnSelect, filter, sort, limit]);\n});\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/OptionList/Column.js\n\n\n\n\n\n\n\n\nvar FIX_LABEL = \'__cascader_fix_label__\';\nfunction Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = "".concat(prefixCls, "-menu");\n  var menuItemPrefixCls = "".concat(prefixCls, "-menu-item");\n\n  var _React$useContext = react["useContext"](context),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === \'hover\'; // ============================ Option ============================\n\n  var optionInfoList = react["useMemo"](function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(Object(toConsumableArray["a" /* default */])(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/react["createElement"]("ul", {\n    className: menuPrefixCls,\n    role: "menu"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n\n    var disabled = _ref2.disabled,\n        label = _ref2.label,\n        value = _ref2.value,\n        isMergedLeaf = _ref2.isLeaf,\n        isLoading = _ref2.isLoading,\n        checked = _ref2.checked,\n        halfChecked = _ref2.halfChecked,\n        option = _ref2.option,\n        fullPath = _ref2.fullPath,\n        fullPathKey = _ref2.fullPathKey; // >>>>> Open\n\n    var triggerOpenPath = function triggerOpenPath() {\n      if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n        onActive(fullPath);\n      }\n    }; // >>>>> Selection\n\n\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    }; // >>>>> Title\n\n\n    var title;\n\n    if (typeof option.title === \'string\') {\n      title = option.title;\n    } else if (typeof label === \'string\') {\n      title = label;\n    } // >>>>> Render\n\n\n    return /*#__PURE__*/react["createElement"]("li", {\n      key: fullPathKey,\n      className: classnames_default()(menuItemPrefixCls, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(menuItemPrefixCls, "-expand"), !isMergedLeaf), Object(defineProperty["a" /* default */])(_classNames, "".concat(menuItemPrefixCls, "-active"), activeValue === value), Object(defineProperty["a" /* default */])(_classNames, "".concat(menuItemPrefixCls, "-disabled"), disabled), Object(defineProperty["a" /* default */])(_classNames, "".concat(menuItemPrefixCls, "-loading"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: "menuitemcheckbox",\n      title: title,\n      "aria-checked": checked,\n      "data-path-key": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/react["createElement"](Checkbox, {\n      prefixCls: "".concat(prefixCls, "-checkbox"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled,\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/react["createElement"]("div", {\n      className: "".concat(menuItemPrefixCls, "-content")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/react["createElement"]("div", {\n      className: "".concat(menuItemPrefixCls, "-expand-icon")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/react["createElement"]("div", {\n      className: "".concat(menuItemPrefixCls, "-loading-icon")\n    }, loadingIcon));\n  }));\n}\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/OptionList/useActive.js\n\n\n\n\n/**\n * Control the active open options path.\n */\n\n/* harmony default export */ var useActive = (function () {\n  var _useBaseProps = Object(es["e" /* useBaseProps */])(),\n      multiple = _useBaseProps.multiple,\n      open = _useBaseProps.open;\n\n  var _React$useContext = react["useContext"](context),\n      values = _React$useContext.values; // Record current dropdown active options\n  // This also control the open status\n\n\n  var _React$useState = react["useState"]([]),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      activeValueCells = _React$useState2[0],\n      setActiveValueCells = _React$useState2[1];\n\n  react["useEffect"](function () {\n    if (open && !multiple) {\n      var firstValueCells = values[0];\n      setActiveValueCells(firstValueCells || []);\n    }\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [open]);\n  return [activeValueCells, setActiveValueCells];\n});\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/OptionList/useKeyboard.js\n\n\n\n\n\n\n/* harmony default export */ var useKeyboard = (function (ref, options, fieldNames, activeValueCells, setActiveValueCells, onKeyBoardSelect) {\n  var _useBaseProps = Object(es["e" /* useBaseProps */])(),\n      direction = _useBaseProps.direction,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open;\n\n  var rtl = direction === \'rtl\';\n\n  var _React$useMemo = react["useMemo"](function () {\n    var activeIndex = -1;\n    var currentOptions = options;\n    var mergedActiveIndexes = [];\n    var mergedActiveValueCells = [];\n    var len = activeValueCells.length; // Fill validate active value cells and index\n\n    var _loop = function _loop(i) {\n      // Mark the active index for current options\n      var nextActiveIndex = currentOptions.findIndex(function (option) {\n        return option[fieldNames.value] === activeValueCells[i];\n      });\n\n      if (nextActiveIndex === -1) {\n        return "break";\n      }\n\n      activeIndex = nextActiveIndex;\n      mergedActiveIndexes.push(activeIndex);\n      mergedActiveValueCells.push(activeValueCells[i]);\n      currentOptions = currentOptions[activeIndex][fieldNames.children];\n    };\n\n    for (var i = 0; i < len && currentOptions; i += 1) {\n      var _ret = _loop(i);\n\n      if (_ret === "break") break;\n    } // Fill last active options\n\n\n    var activeOptions = options;\n\n    for (var _i = 0; _i < mergedActiveIndexes.length - 1; _i += 1) {\n      activeOptions = activeOptions[mergedActiveIndexes[_i]][fieldNames.children];\n    }\n\n    return [mergedActiveValueCells, activeIndex, activeOptions];\n  }, [activeValueCells, fieldNames, options]),\n      _React$useMemo2 = Object(slicedToArray["a" /* default */])(_React$useMemo, 3),\n      validActiveValueCells = _React$useMemo2[0],\n      lastActiveIndex = _React$useMemo2[1],\n      lastActiveOptions = _React$useMemo2[2]; // Update active value cells and scroll to target element\n\n\n  var internalSetActiveValueCells = function internalSetActiveValueCells(next) {\n    setActiveValueCells(next);\n  }; // Same options offset\n\n\n  var offsetActiveOption = function offsetActiveOption(offset) {\n    var len = lastActiveOptions.length;\n    var currentIndex = lastActiveIndex;\n\n    if (currentIndex === -1 && offset < 0) {\n      currentIndex = len;\n    }\n\n    for (var i = 0; i < len; i += 1) {\n      currentIndex = (currentIndex + offset + len) % len;\n      var option = lastActiveOptions[currentIndex];\n\n      if (option && !option.disabled) {\n        var value = option[fieldNames.value];\n        var nextActiveCells = validActiveValueCells.slice(0, -1).concat(value);\n        internalSetActiveValueCells(nextActiveCells);\n        return;\n      }\n    }\n  }; // Different options offset\n\n\n  var prevColumn = function prevColumn() {\n    if (validActiveValueCells.length > 1) {\n      var nextActiveCells = validActiveValueCells.slice(0, -1);\n      internalSetActiveValueCells(nextActiveCells);\n    } else {\n      toggleOpen(false);\n    }\n  };\n\n  var nextColumn = function nextColumn() {\n    var _lastActiveOptions$la;\n\n    var nextOptions = ((_lastActiveOptions$la = lastActiveOptions[lastActiveIndex]) === null || _lastActiveOptions$la === void 0 ? void 0 : _lastActiveOptions$la[fieldNames.children]) || [];\n    var nextOption = nextOptions.find(function (option) {\n      return !option.disabled;\n    });\n\n    if (nextOption) {\n      var nextActiveCells = [].concat(Object(toConsumableArray["a" /* default */])(validActiveValueCells), [nextOption[fieldNames.value]]);\n      internalSetActiveValueCells(nextActiveCells);\n    }\n  };\n\n  react["useImperativeHandle"](ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode["a" /* default */].UP:\n          case KeyCode["a" /* default */].DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode["a" /* default */].UP) {\n                offset = -1;\n              } else if (which === KeyCode["a" /* default */].DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                offsetActiveOption(offset);\n              }\n\n              break;\n            }\n\n          case KeyCode["a" /* default */].LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode["a" /* default */].RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode["a" /* default */].BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode["a" /* default */].ENTER:\n            {\n              if (validActiveValueCells.length) {\n                var option = lastActiveOptions[lastActiveIndex]; // Search option should revert back of origin options\n\n                var originOptions = (option === null || option === void 0 ? void 0 : option[SEARCH_MARK]) || [];\n\n                if (originOptions.length) {\n                  onKeyBoardSelect(originOptions.map(function (opt) {\n                    return opt[fieldNames.value];\n                  }), originOptions[originOptions.length - 1]);\n                } else {\n                  onKeyBoardSelect(validActiveValueCells, lastActiveOptions[lastActiveIndex]);\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode["a" /* default */].ESC:\n            {\n              toggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  });\n});\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/OptionList/index.js\n\n\n\n\n\n/* eslint-disable default-case */\n\n\n\n\n\n\n\n\n\n\nvar RefOptionList = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _ref3, _classNames;\n\n  var _useBaseProps = Object(es["e" /* useBaseProps */])(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      notFoundContent = _useBaseProps.notFoundContent,\n      direction = _useBaseProps.direction;\n\n  var containerRef = react["useRef"]();\n  var rtl = direction === \'rtl\';\n\n  var _React$useContext = react["useContext"](context),\n      options = _React$useContext.options,\n      values = _React$useContext.values,\n      halfValues = _React$useContext.halfValues,\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      onSelect = _React$useContext.onSelect,\n      searchOptions = _React$useContext.searchOptions,\n      dropdownPrefixCls = _React$useContext.dropdownPrefixCls,\n      loadData = _React$useContext.loadData,\n      expandTrigger = _React$useContext.expandTrigger;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = react["useState"]([]),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(valueCells) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var optionList = toPathOptions(valueCells, options, fieldNames);\n    var rawOptions = optionList.map(function (_ref) {\n      var option = _ref.option;\n      return option;\n    });\n    var lastOption = rawOptions[rawOptions.length - 1];\n\n    if (lastOption && !isLeaf(lastOption, fieldNames)) {\n      var pathKey = toPathKey(valueCells);\n      setLoadingKeys(function (keys) {\n        return [].concat(Object(toConsumableArray["a" /* default */])(keys), [pathKey]);\n      });\n      loadData(rawOptions);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  react["useEffect"](function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var valueStrCells = toPathValueStr(loadingKey);\n        var optionList = toPathOptions(valueStrCells, options, fieldNames, true).map(function (_ref2) {\n          var option = _ref2.option;\n          return option;\n        });\n        var lastOption = optionList[optionList.length - 1];\n\n        if (!lastOption || lastOption[fieldNames.children] || isLeaf(lastOption, fieldNames)) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [options, loadingKeys, fieldNames]); // ========================== Values ==========================\n\n  var checkedSet = react["useMemo"](function () {\n    return new Set(toPathKeys(values));\n  }, [values]);\n  var halfCheckedSet = react["useMemo"](function () {\n    return new Set(toPathKeys(halfValues));\n  }, [halfValues]); // ====================== Accessibility =======================\n\n  var _useActive = useActive(),\n      _useActive2 = Object(slicedToArray["a" /* default */])(_useActive, 2),\n      activeValueCells = _useActive2[0],\n      setActiveValueCells = _useActive2[1]; // =========================== Path ===========================\n\n\n  var onPathOpen = function onPathOpen(nextValueCells) {\n    setActiveValueCells(nextValueCells); // Trigger loadData\n\n    internalLoadData(nextValueCells);\n  };\n\n  var isSelectable = function isSelectable(option) {\n    var disabled = option.disabled;\n    var isMergedLeaf = isLeaf(option, fieldNames);\n    return !disabled && (isMergedLeaf || changeOnSelect || multiple);\n  };\n\n  var onPathSelect = function onPathSelect(valuePath, leaf) {\n    var fromKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    onSelect(valuePath);\n\n    if (!multiple && (leaf || changeOnSelect && (expandTrigger === \'hover\' || fromKeyboard))) {\n      toggleOpen(false);\n    }\n  }; // ========================== Option ==========================\n\n\n  var mergedOptions = react["useMemo"](function () {\n    if (searchValue) {\n      return searchOptions;\n    }\n\n    return options;\n  }, [searchValue, searchOptions, options]); // ========================== Column ==========================\n\n  var optionColumns = react["useMemo"](function () {\n    var optionList = [{\n      options: mergedOptions\n    }];\n    var currentList = mergedOptions;\n\n    var _loop = function _loop(i) {\n      var activeValueCell = activeValueCells[i];\n      var currentOption = currentList.find(function (option) {\n        return option[fieldNames.value] === activeValueCell;\n      });\n      var subOptions = currentOption === null || currentOption === void 0 ? void 0 : currentOption[fieldNames.children];\n\n      if (!(subOptions === null || subOptions === void 0 ? void 0 : subOptions.length)) {\n        return "break";\n      }\n\n      currentList = subOptions;\n      optionList.push({\n        options: subOptions\n      });\n    };\n\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (_ret === "break") break;\n    }\n\n    return optionList;\n  }, [mergedOptions, activeValueCells, fieldNames]); // ========================= Keyboard =========================\n\n  var onKeyboardSelect = function onKeyboardSelect(selectValueCells, option) {\n    if (isSelectable(option)) {\n      onPathSelect(selectValueCells, isLeaf(option, fieldNames), true);\n    }\n  };\n\n  useKeyboard(ref, mergedOptions, fieldNames, activeValueCells, onPathOpen, onKeyboardSelect); // >>>>> Active Scroll\n\n  react["useEffect"](function () {\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      var _containerRef$current;\n\n      var cellPath = activeValueCells.slice(0, i + 1);\n      var cellKeyPath = toPathKey(cellPath);\n      var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector("li[data-path-key=\\"".concat(cellKeyPath.replace(/\\\\{0,2}"/g, \'\\\\"\'), "\\"]"));\n\n      if (ele) {\n        scrollIntoParentView(ele);\n      }\n    }\n  }, [activeValueCells]); // ========================== Render ==========================\n  // >>>>> Empty\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [(_ref3 = {}, Object(defineProperty["a" /* default */])(_ref3, fieldNames.value, \'__EMPTY__\'), Object(defineProperty["a" /* default */])(_ref3, FIX_LABEL, notFoundContent), Object(defineProperty["a" /* default */])(_ref3, "disabled", true), _ref3)];\n\n  var columnProps = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, props), {}, {\n    multiple: !isEmpty && multiple,\n    onSelect: onPathSelect,\n    onActive: onPathOpen,\n    onToggleOpen: toggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys,\n    isSelectable: isSelectable\n  }); // >>>>> Columns\n\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    var prevValuePath = activeValueCells.slice(0, index);\n    var activeValue = activeValueCells[index];\n    return /*#__PURE__*/react["createElement"](Column, Object(esm_extends["a" /* default */])({\n      key: index\n    }, columnProps, {\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      prevValuePath: prevValuePath,\n      activeValue: activeValue\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    className: classnames_default()("".concat(mergedPrefixCls, "-menus"), (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(mergedPrefixCls, "-menu-empty"), isEmpty), Object(defineProperty["a" /* default */])(_classNames, "".concat(mergedPrefixCls, "-rtl"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes);\n});\n/* harmony default export */ var OptionList = (RefOptionList);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useDisplayValues.js\n\n\n\n\n\n/* harmony default export */ var useDisplayValues = (function (rawValues, options, fieldNames, multiple, displayRender) {\n  return react["useMemo"](function () {\n    var mergedDisplayRender = displayRender || // Default displayRender\n    function (labels) {\n      var mergedLabels = multiple ? labels.slice(-1) : labels;\n      var SPLIT = \' / \';\n\n      if (mergedLabels.every(function (label) {\n        return [\'string\', \'number\'].includes(Object(esm_typeof["a" /* default */])(label));\n      })) {\n        return mergedLabels.join(SPLIT);\n      } // If exist non-string value, use ReactNode instead\n\n\n      return mergedLabels.reduce(function (list, label, index) {\n        var keyedLabel = /*#__PURE__*/ /*#__PURE__*/react["isValidElement"](label) ? /*#__PURE__*/react["cloneElement"](label, {\n          key: index\n        }) : label;\n\n        if (index === 0) {\n          return [keyedLabel];\n        }\n\n        return [].concat(Object(toConsumableArray["a" /* default */])(list), [SPLIT, keyedLabel]);\n      }, []);\n    };\n\n    return rawValues.map(function (valueCells) {\n      var valueOptions = toPathOptions(valueCells, options, fieldNames);\n      var label = mergedDisplayRender(valueOptions.map(function (_ref) {\n        var _option$fieldNames$la;\n\n        var option = _ref.option,\n            value = _ref.value;\n        return (_option$fieldNames$la = option === null || option === void 0 ? void 0 : option[fieldNames.label]) !== null && _option$fieldNames$la !== void 0 ? _option$fieldNames$la : value;\n      }), valueOptions.map(function (_ref2) {\n        var option = _ref2.option;\n        return option;\n      }));\n      var value = toPathKey(valueCells);\n      return {\n        label: label,\n        value: value,\n        key: value,\n        valueCells: valueCells\n      };\n    });\n  }, [rawValues, options, fieldNames, displayRender, multiple]);\n});\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useRefFunc.js\n\n/**\n * Same as `React.useCallback` but always return a memoized function\n * but redirect to real function.\n */\n\nfunction useRefFunc(callback) {\n  var funcRef = react["useRef"]();\n  funcRef.current = callback;\n  var cacheFn = react["useCallback"](function () {\n    return funcRef.current.apply(funcRef, arguments);\n  }, []);\n  return cacheFn;\n}\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/treeUtil.js\nvar treeUtil = __webpack_require__("815F");\n\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useEntities.js\n\n\n\n\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\n\n/* harmony default export */ var useEntities = (function (options, fieldNames) {\n  var cacheRef = react["useRef"]({\n    options: null,\n    info: null\n  });\n  var getEntities = react["useCallback"](function () {\n    if (cacheRef.current.options !== options) {\n      cacheRef.current.options = options;\n      cacheRef.current.info = Object(treeUtil["a" /* convertDataToEntities */])(options, {\n        fieldNames: fieldNames,\n        initWrapper: function initWrapper(wrapper) {\n          return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, wrapper), {}, {\n            pathKeyEntities: {}\n          });\n        },\n        processEntity: function processEntity(entity, wrapper) {\n          var pathKey = entity.nodes.map(function (node) {\n            return node[fieldNames.value];\n          }).join(VALUE_SPLIT);\n          wrapper.pathKeyEntities[pathKey] = entity; // Overwrite origin key.\n          // this is very hack but we need let conduct logic work with connect path\n\n          entity.key = pathKey;\n        }\n      });\n    }\n\n    return cacheRef.current.info.pathKeyEntities;\n  }, [fieldNames, options]);\n  return getEntities;\n});\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useSearchConfig.js\n\n\n\n // Convert `showSearch` to unique config\n\nfunction useSearchConfig(showSearch) {\n  return react["useMemo"](function () {\n    if (!showSearch) {\n      return [false, {}];\n    }\n\n    var searchConfig = {\n      matchInputWidth: true,\n      limit: 50\n    };\n\n    if (showSearch && Object(esm_typeof["a" /* default */])(showSearch) === \'object\') {\n      searchConfig = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, searchConfig), showSearch);\n    }\n\n    if (searchConfig.limit <= 0) {\n      delete searchConfig.limit;\n\n      if (false) {}\n    }\n\n    return [true, searchConfig];\n  }, [showSearch]);\n}\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/hooks/useMissingValues.js\n\n\n/* harmony default export */ var useMissingValues = (function (options, fieldNames) {\n  return react["useCallback"](function (rawValues) {\n    var missingValues = [];\n    var existsValues = [];\n    rawValues.forEach(function (valueCell) {\n      var pathOptions = toPathOptions(valueCell, options, fieldNames);\n\n      if (pathOptions.every(function (opt) {\n        return opt.option;\n      })) {\n        existsValues.push(valueCell);\n      } else {\n        missingValues.push(valueCell);\n      }\n    });\n    return [existsValues, missingValues];\n  }, [options, fieldNames]);\n});\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/Cascader.js\n\n\n\n\nvar _excluded = ["id", "prefixCls", "fieldNames", "defaultValue", "value", "changeOnSelect", "onChange", "displayRender", "checkable", "searchValue", "onSearch", "showSearch", "expandTrigger", "options", "dropdownPrefixCls", "loadData", "popupVisible", "open", "popupClassName", "dropdownClassName", "dropdownMenuColumnStyle", "popupPlacement", "placement", "onDropdownVisibleChange", "onPopupVisibleChange", "expandIcon", "loadingIcon", "children", "dropdownMatchSelectWidth", "showCheckedStrategy"];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction isMultipleValue(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\n\nfunction toRawValues(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (isMultipleValue(value)) {\n    return value;\n  }\n\n  return (value.length === 0 ? [] : [value]).map(function (val) {\n    return Array.isArray(val) ? val : [val];\n  });\n}\n\nvar Cascader = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-cascader\' : _props$prefixCls,\n      fieldNames = props.fieldNames,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      changeOnSelect = props.changeOnSelect,\n      onChange = props.onChange,\n      displayRender = props.displayRender,\n      checkable = props.checkable,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      showSearch = props.showSearch,\n      expandTrigger = props.expandTrigger,\n      options = props.options,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      loadData = props.loadData,\n      popupVisible = props.popupVisible,\n      open = props.open,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n      popupPlacement = props.popupPlacement,\n      placement = props.placement,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onPopupVisibleChange = props.onPopupVisibleChange,\n      _props$expandIcon = props.expandIcon,\n      expandIcon = _props$expandIcon === void 0 ? \'>\' : _props$expandIcon,\n      loadingIcon = props.loadingIcon,\n      children = props.children,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT : _props$showCheckedStr,\n      restProps = Object(objectWithoutProperties["a" /* default */])(props, _excluded);\n\n  var mergedId = Object(useId["a" /* default */])(id);\n  var multiple = !!checkable; // =========================== Values ===========================\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(defaultValue, {\n    value: value,\n    postState: toRawValues\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      rawValues = _useMergedState2[0],\n      setRawValues = _useMergedState2[1]; // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = react["useMemo"](function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Option ===========================\n\n  var mergedOptions = react["useMemo"](function () {\n    return options || [];\n  }, [options]); // Only used in multiple mode, this fn will not call in single mode\n\n  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);\n  /** Convert path key back to value format */\n\n  var getValueByKeyPath = react["useCallback"](function (pathKeys) {\n    var keyPathEntities = getPathKeyEntities();\n    return pathKeys.map(function (pathKey) {\n      var nodes = keyPathEntities[pathKey].nodes;\n      return nodes.map(function (node) {\n        return node[mergedFieldNames.value];\n      });\n    });\n  }, [getPathKeyEntities, mergedFieldNames]); // =========================== Search ===========================\n\n  var _useMergedState3 = Object(useMergedState["a" /* default */])(\'\', {\n    value: searchValue,\n    postState: function postState(search) {\n      return search || \'\';\n    }\n  }),\n      _useMergedState4 = Object(slicedToArray["a" /* default */])(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n\n    if (info.source !== \'blur\' && onSearch) {\n      onSearch(searchText);\n    }\n  };\n\n  var _useSearchConfig = useSearchConfig(showSearch),\n      _useSearchConfig2 = Object(slicedToArray["a" /* default */])(_useSearchConfig, 2),\n      mergedShowSearch = _useSearchConfig2[0],\n      searchConfig = _useSearchConfig2[1];\n\n  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect); // =========================== Values ===========================\n\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames); // Fill `rawValues` with checked conduction values\n\n  var _React$useMemo = react["useMemo"](function () {\n    var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = Object(slicedToArray["a" /* default */])(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n\n    var _conductCheck = Object(conductUtil["a" /* conductCheck */])(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys; // Convert key back to value cells\n\n\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]),\n      _React$useMemo2 = Object(slicedToArray["a" /* default */])(_React$useMemo, 3),\n      checkedValues = _React$useMemo2[0],\n      halfCheckedValues = _React$useMemo2[1],\n      missingCheckedValues = _React$useMemo2[2];\n\n  var deDuplicatedValues = react["useMemo"](function () {\n    var checkedKeys = toPathKeys(checkedValues);\n    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n    return [].concat(Object(toConsumableArray["a" /* default */])(missingCheckedValues), Object(toConsumableArray["a" /* default */])(getValueByKeyPath(deduplicateKeys)));\n  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);\n  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender); // =========================== Change ===========================\n\n  var triggerChange = useRefFunc(function (nextValues) {\n    setRawValues(nextValues); // Save perf if no need trigger event\n\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  }); // =========================== Select ===========================\n\n  var onInternalSelect = useRefFunc(function (valuePath) {\n    setSearchValue(\'\');\n\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      }); // Do update\n\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(Object(toConsumableArray["a" /* default */])(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities(); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (existInChecked) {\n          var _conductCheck2 = Object(conductUtil["a" /* conductCheck */])(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } else {\n          var _conductCheck3 = Object(conductUtil["a" /* conductCheck */])(nextRawCheckedKeys, true, pathKeyEntities);\n\n          checkedKeys = _conductCheck3.checkedKeys;\n        } // Roll up to parent level keys\n\n\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n\n      triggerChange([].concat(Object(toConsumableArray["a" /* default */])(nextMissingValues), Object(toConsumableArray["a" /* default */])(nextCheckedValues)));\n    }\n  }); // Display Value change logic\n\n  var onDisplayValuesChange = function onDisplayValuesChange(_, info) {\n    if (info.type === \'clear\') {\n      triggerChange([]);\n      return;\n    } // Cascader do not support `add` type. Only support `remove`\n\n\n    var valueCells = info.values[0].valueCells;\n    onInternalSelect(valueCells);\n  }; // ============================ Open ============================\n\n\n  if (false) {}\n\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  }; // ========================== Context ===========================\n\n\n  var cascaderContext = react["useMemo"](function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: searchOptions,\n      dropdownPrefixCls: dropdownPrefixCls,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]); // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;\n  var dropdownStyle = // Search to match width\n  mergedSearchValue && searchConfig.matchInputWidth || // Empty keep the width\n  emptyOptions ? {} : {\n    minWidth: \'auto\'\n  };\n  return /*#__PURE__*/react["createElement"](context.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/react["createElement"](es["a" /* BaseSelect */], Object(esm_extends["a" /* default */])({}, restProps, {\n    // MISC\n    ref: ref,\n    id: mergedId,\n    prefixCls: prefixCls,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    dropdownStyle: dropdownStyle // Value\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange,\n    mode: multiple ? \'multiple\' : undefined // Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    showSearch: mergedShowSearch // Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: emptyOptions // Open\n    ,\n    open: mergedOpen,\n    dropdownClassName: mergedDropdownClassName,\n    placement: mergedPlacement,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange // Children\n    ,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\n\nif (false) {}\n\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\n/* harmony default export */ var es_Cascader = (Cascader);\n// CONCATENATED MODULE: ./node_modules/rc-cascader/es/index.js\n\n/* harmony default export */ var rc_cascader_es = __webpack_exports__["a"] = (es_Cascader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///RxwV\n')},TOLs:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// UNUSED EXPORTS: BaseInput\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// CONCATENATED MODULE: ./node_modules/rc-input/es/utils/commonUtils.js\nfunction hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nfunction hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\nfunction resolveOnChange(target, e, onChange, targetValue) {\n  if (!onChange) {\n    return;\n  }\n\n  var event = e;\n\n  if (e.type === \'click\') {\n    // Clone a new target for event.\n    // Avoid the following usage, the setQuery method gets the original value.\n    //\n    // const [query, setQuery] = React.useState(\'\');\n    // <Input\n    //   allowClear\n    //   value={query}\n    //   onChange={(e)=> {\n    //     setQuery((prevStatus) => e.target.value);\n    //   }}\n    // />\n    var currentTarget = target.cloneNode(true); // click clear icon\n\n    event = Object.create(e, {\n      target: {\n        value: currentTarget\n      },\n      currentTarget: {\n        value: currentTarget\n      }\n    });\n    currentTarget.value = \'\';\n    onChange(event);\n    return;\n  } // Trigger by composition event, this means we need force change the input value\n\n\n  if (targetValue !== undefined) {\n    event = Object.create(e, {\n      target: {\n        value: target\n      },\n      currentTarget: {\n        value: target\n      }\n    });\n    target.value = targetValue;\n    onChange(event);\n    return;\n  }\n\n  onChange(event);\n}\nfunction commonUtils_triggerFocus(element, option) {\n  if (!element) return;\n  element.focus(option); // Selection content\n\n  var _ref = option || {},\n      cursor = _ref.cursor;\n\n  if (cursor) {\n    var len = element.value.length;\n\n    switch (cursor) {\n      case \'start\':\n        element.setSelectionRange(0, 0);\n        break;\n\n      case \'end\':\n        element.setSelectionRange(len, len);\n        break;\n\n      default:\n        element.setSelectionRange(0, len);\n    }\n  }\n}\nfunction fixControlledValue(value) {\n  if (typeof value === \'undefined\' || value === null) {\n    return \'\';\n  }\n\n  return String(value);\n}\n// CONCATENATED MODULE: ./node_modules/rc-input/es/BaseInput.js\n\n\n\n\n\n\nvar BaseInput_BaseInput = function BaseInput(props) {\n  var inputElement = props.inputElement,\n      prefixCls = props.prefixCls,\n      prefix = props.prefix,\n      suffix = props.suffix,\n      addonBefore = props.addonBefore,\n      addonAfter = props.addonAfter,\n      className = props.className,\n      style = props.style,\n      affixWrapperClassName = props.affixWrapperClassName,\n      groupClassName = props.groupClassName,\n      wrapperClassName = props.wrapperClassName,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      focused = props.focused,\n      triggerFocus = props.triggerFocus,\n      allowClear = props.allowClear,\n      value = props.value,\n      handleReset = props.handleReset,\n      hidden = props.hidden;\n  var containerRef = Object(react["useRef"])(null);\n\n  var onInputMouseDown = function onInputMouseDown(e) {\n    var _containerRef$current;\n\n    if ((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.contains(e.target)) {\n      triggerFocus === null || triggerFocus === void 0 ? void 0 : triggerFocus();\n    }\n  }; // ================== Clear Icon ================== //\n\n\n  var getClearIcon = function getClearIcon() {\n    var _classNames;\n\n    if (!allowClear) {\n      return null;\n    }\n\n    var needClear = !disabled && !readOnly && value;\n    var clearIconCls = "".concat(prefixCls, "-clear-icon");\n    var iconNode = Object(esm_typeof["a" /* default */])(allowClear) === \'object\' && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon) ? allowClear.clearIcon : \'\u2716\';\n    return /*#__PURE__*/react_default.a.createElement("span", {\n      onClick: handleReset,\n      // Do not trigger onBlur when clear input\n      // https://github.com/ant-design/ant-design/issues/31200\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      className: classnames_default()(clearIconCls, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), Object(defineProperty["a" /* default */])(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),\n      role: "button",\n      tabIndex: -1\n    }, iconNode);\n  };\n\n  var element = /*#__PURE__*/Object(react["cloneElement"])(inputElement, {\n    value: value,\n    hidden: hidden\n  }); // ================== Prefix & Suffix ================== //\n\n  if (hasPrefixSuffix(props)) {\n    var _classNames2;\n\n    var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");\n    var affixWrapperCls = classnames_default()(affixWrapperPrefixCls, (_classNames2 = {}, Object(defineProperty["a" /* default */])(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), Object(defineProperty["a" /* default */])(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), Object(defineProperty["a" /* default */])(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), Object(defineProperty["a" /* default */])(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName);\n    var suffixNode = (suffix || allowClear) && /*#__PURE__*/react_default.a.createElement("span", {\n      className: "".concat(prefixCls, "-suffix")\n    }, getClearIcon(), suffix);\n    element = /*#__PURE__*/react_default.a.createElement("span", {\n      className: affixWrapperCls,\n      style: style,\n      hidden: !hasAddon(props) && hidden,\n      onMouseDown: onInputMouseDown,\n      ref: containerRef\n    }, prefix && /*#__PURE__*/react_default.a.createElement("span", {\n      className: "".concat(prefixCls, "-prefix")\n    }, prefix), /*#__PURE__*/Object(react["cloneElement"])(inputElement, {\n      style: null,\n      value: value,\n      hidden: null\n    }), suffixNode);\n  } // ================== Addon ================== //\n\n\n  if (hasAddon(props)) {\n    var wrapperCls = "".concat(prefixCls, "-group");\n    var addonCls = "".concat(wrapperCls, "-addon");\n    var mergedWrapperClassName = classnames_default()("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);\n    var mergedGroupClassName = classnames_default()("".concat(prefixCls, "-group-wrapper"), className, groupClassName); // Need another wrapper for changing display:table to display:inline-block\n    // and put style prop in wrapper\n\n    return /*#__PURE__*/react_default.a.createElement("span", {\n      className: mergedGroupClassName,\n      style: style,\n      hidden: hidden\n    }, /*#__PURE__*/react_default.a.createElement("span", {\n      className: mergedWrapperClassName\n    }, addonBefore && /*#__PURE__*/react_default.a.createElement("span", {\n      className: addonCls\n    }, addonBefore), /*#__PURE__*/Object(react["cloneElement"])(element, {\n      style: null,\n      hidden: null\n    }), addonAfter && /*#__PURE__*/react_default.a.createElement("span", {\n      className: addonCls\n    }, addonAfter)));\n  }\n\n  return element;\n};\n\n/* harmony default export */ var es_BaseInput = (BaseInput_BaseInput);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/omit.js\nvar omit = __webpack_require__("bT9E");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js\nvar useMergedState = __webpack_require__("6cGi");\n\n// CONCATENATED MODULE: ./node_modules/rc-input/es/Input.js\n\n\n\n\n\n\nvar _excluded = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "type", "inputClassName"];\n\n\n\n\n\n\nvar Input = /*#__PURE__*/Object(react["forwardRef"])(function (props, ref) {\n  var autoComplete = props.autoComplete,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onPressEnter = props.onPressEnter,\n      onKeyDown = props.onKeyDown,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-input\' : _props$prefixCls,\n      disabled = props.disabled,\n      htmlSize = props.htmlSize,\n      className = props.className,\n      maxLength = props.maxLength,\n      suffix = props.suffix,\n      showCount = props.showCount,\n      _props$type = props.type,\n      type = _props$type === void 0 ? \'text\' : _props$type,\n      inputClassName = props.inputClassName,\n      rest = Object(objectWithoutProperties["a" /* default */])(props, _excluded);\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(props.defaultValue, {\n    value: props.value\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n\n  var _useState = Object(react["useState"])(false),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var inputRef = Object(react["useRef"])(null);\n\n  var focus = function focus(option) {\n    if (inputRef.current) {\n      commonUtils_triggerFocus(inputRef.current, option);\n    }\n  };\n\n  Object(react["useImperativeHandle"])(ref, function () {\n    return {\n      focus: focus,\n      blur: function blur() {\n        var _inputRef$current;\n\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();\n      },\n      setSelectionRange: function setSelectionRange(start, end, direction) {\n        var _inputRef$current2;\n\n        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.setSelectionRange(start, end, direction);\n      },\n      select: function select() {\n        var _inputRef$current3;\n\n        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();\n      },\n      input: inputRef.current\n    };\n  });\n  Object(react["useEffect"])(function () {\n    setFocused(function (prev) {\n      return prev && disabled ? false : prev;\n    });\n  }, [disabled]);\n\n  var handleChange = function handleChange(e) {\n    if (props.value === undefined) {\n      setValue(e.target.value);\n    }\n\n    if (inputRef.current) {\n      resolveOnChange(inputRef.current, e, onChange);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (onPressEnter && e.key === \'Enter\') {\n      onPressEnter(e);\n    }\n\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    setFocused(true);\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);\n  };\n\n  var handleBlur = function handleBlur(e) {\n    setFocused(false);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n  };\n\n  var handleReset = function handleReset(e) {\n    setValue(\'\');\n    focus();\n\n    if (inputRef.current) {\n      resolveOnChange(inputRef.current, e, onChange);\n    }\n  };\n\n  var getInputElement = function getInputElement() {\n    // Fix https://fb.me/react-unknown-prop\n    var otherProps = Object(omit["a" /* default */])(props, [\'prefixCls\', \'onPressEnter\', \'addonBefore\', \'addonAfter\', \'prefix\', \'suffix\', \'allowClear\', // Input elements must be either controlled or uncontrolled,\n    // specify either the value prop, or the defaultValue prop, but not both.\n    \'defaultValue\', \'showCount\', \'affixWrapperClassName\', \'groupClassName\', \'inputClassName\', \'wrapperClassName\', \'htmlSize\']);\n    return /*#__PURE__*/react_default.a.createElement("input", Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({\n      autoComplete: autoComplete\n    }, otherProps), {}, {\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      className: classnames_default()(prefixCls, Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-disabled"), disabled), inputClassName, !hasAddon(props) && !hasPrefixSuffix(props) && className),\n      ref: inputRef,\n      size: htmlSize,\n      type: type\n    }));\n  };\n\n  var getSuffix = function getSuffix() {\n    // Max length value\n    var hasMaxLength = Number(maxLength) > 0;\n\n    if (suffix || showCount) {\n      var valueLength = Object(toConsumableArray["a" /* default */])(fixControlledValue(value)).length;\n\n      var dataCount = Object(esm_typeof["a" /* default */])(showCount) === \'object\' ? showCount.formatter({\n        count: valueLength,\n        maxLength: maxLength\n      }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : \'\');\n      return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, !!showCount && /*#__PURE__*/react_default.a.createElement("span", {\n        className: classnames_default()("".concat(prefixCls, "-show-count-suffix"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix))\n      }, dataCount), suffix);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/react_default.a.createElement(es_BaseInput, Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, rest), {}, {\n    prefixCls: prefixCls,\n    className: className,\n    inputElement: getInputElement(),\n    handleReset: handleReset,\n    value: fixControlledValue(value),\n    focused: focused,\n    triggerFocus: focus,\n    suffix: getSuffix(),\n    disabled: disabled\n  }));\n});\n/* harmony default export */ var es_Input = (Input);\n// CONCATENATED MODULE: ./node_modules/rc-input/es/index.js\n\n\n\n/* harmony default export */ var es = __webpack_exports__["a"] = (es_Input);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///TOLs\n')},dmUQ:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/ref.js\nvar es_ref = __webpack_require__("c+Xe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/utils/supportUtil.js\nfunction supportBigInt() {\n  return typeof BigInt === \'function\';\n}\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/utils/numberUtil.js\n\n/**\n * Format string number to readable number\n */\n\nfunction trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith(\'-\');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, \'$1\') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, \'\') // Remove integer 0. `0001` => `1`, 000.1\' => `.1`\n  .replace(/^0+/, \'\');\n\n  if (str.startsWith(\'.\')) {\n    str = "0".concat(str);\n  }\n\n  var trimStr = str || \'0\';\n  var splitNumber = trimStr.split(\'.\');\n  var integerStr = splitNumber[0] || \'0\';\n  var decimalStr = splitNumber[1] || \'0\';\n\n  if (integerStr === \'0\' && decimalStr === \'0\') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? \'-\' : \'\';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: "".concat(negativeStr).concat(trimStr)\n  };\n}\nfunction isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes(\'e\');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nfunction getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf(\'e-\') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes(\'.\') && validateNumber(numStr) ? numStr.length - numStr.indexOf(\'.\') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nfunction num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nfunction validateNumber(num) {\n  if (typeof num === \'number\') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/utils/MiniDecimal.js\n\n\n/* eslint-disable max-classes-per-file */\n\n\n\n/**\n * We can remove this when IE not support anymore\n */\n\nvar MiniDecimal_NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    Object(classCallCheck["a" /* default */])(this, NumberDecimal);\n\n    this.origin = \'\';\n    this.number = void 0;\n    this.empty = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  Object(createClass["a" /* default */])(NumberDecimal, [{\n    key: "negate",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: "add",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: "isEmpty",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: "isNaN",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: "isInvalidate",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: "equals",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: "lessEquals",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: "toNumber",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return \'\';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nvar MiniDecimal_BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    Object(classCallCheck["a" /* default */])(this, BigIntDecimal);\n\n    this.origin = \'\';\n    this.negative = void 0;\n    this.integer = void 0;\n    this.decimal = void 0;\n    this.decimalLen = void 0;\n    this.empty = void 0;\n    this.nan = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === \'-\') {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === \'string\' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split(\'.\');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || \'0\';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  Object(createClass["a" /* default */])(BigIntDecimal, [{\n    key: "getMark",\n    value: function getMark() {\n      return this.negative ? \'-\' : \'\';\n    }\n  }, {\n    key: "getIntegerStr",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: "getDecimalStr",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, \'0\');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: "alignDecimal",\n    value: function alignDecimal(decimalLength) {\n      var str = "".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, \'0\'));\n      return BigInt(str);\n    }\n  }, {\n    key: "negate",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: "add",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = "".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, \'0\'));\n      return new BigIntDecimal("".concat(hydrateValueStr.slice(0, -maxDecimalLength), ".").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: "isEmpty",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: "isNaN",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: "isInvalidate",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: "equals",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: "lessEquals",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: "toNumber",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return \'\';\n      }\n\n      return trimNumber("".concat(this.getMark()).concat(this.getIntegerStr(), ".").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nfunction getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new MiniDecimal_BigIntDecimal(value);\n  }\n\n  return new MiniDecimal_NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2\n */\n\nfunction toFixed(numStr, separatorStr, precision) {\n  if (numStr === \'\') {\n    return \'\';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = "".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = "".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5) {\n      var advancedDecimal = getMiniDecimal(numStr).add("".concat(negativeStr, "0.").concat(\'0\'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return "".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, \'0\').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === \'.0\') {\n    return numberWithoutDecimal;\n  }\n\n  return "".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/isMobile.js\nvar isMobile = __webpack_require__("5Z9U");\n\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/StepHandler.js\n\n\n\n\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\n\nvar STEP_INTERVAL = 200;\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\n\nvar STEP_DELAY = 600;\nfunction StepHandler(_ref) {\n  var prefixCls = _ref.prefixCls,\n      upNode = _ref.upNode,\n      downNode = _ref.downNode,\n      upDisabled = _ref.upDisabled,\n      downDisabled = _ref.downDisabled,\n      onStep = _ref.onStep; // ======================== Step ========================\n\n  var stepTimeoutRef = react["useRef"]();\n  var onStepRef = react["useRef"]();\n  onStepRef.current = onStep; // We will interval update step when hold mouse down\n\n  var onStepMouseDown = function onStepMouseDown(e, up) {\n    e.preventDefault();\n    onStepRef.current(up); // Loop step for interval\n\n    function loopStep() {\n      onStepRef.current(up);\n      stepTimeoutRef.current = setTimeout(loopStep, STEP_INTERVAL);\n    } // First time press will wait some time to trigger loop step update\n\n\n    stepTimeoutRef.current = setTimeout(loopStep, STEP_DELAY);\n  };\n\n  var onStopStep = function onStopStep() {\n    clearTimeout(stepTimeoutRef.current);\n  };\n\n  react["useEffect"](function () {\n    return onStopStep;\n  }, []); // ======================= Render =======================\n\n  if (Object(isMobile["a" /* default */])()) {\n    return null;\n  }\n\n  var handlerClassName = "".concat(prefixCls, "-handler");\n  var upClassName = classnames_default()(handlerClassName, "".concat(handlerClassName, "-up"), Object(defineProperty["a" /* default */])({}, "".concat(handlerClassName, "-up-disabled"), upDisabled));\n  var downClassName = classnames_default()(handlerClassName, "".concat(handlerClassName, "-down"), Object(defineProperty["a" /* default */])({}, "".concat(handlerClassName, "-down-disabled"), downDisabled));\n  var sharedHandlerProps = {\n    unselectable: \'on\',\n    role: \'button\',\n    onMouseUp: onStopStep,\n    onMouseLeave: onStopStep\n  };\n  return /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(handlerClassName, "-wrap")\n  }, /*#__PURE__*/react["createElement"]("span", Object(esm_extends["a" /* default */])({}, sharedHandlerProps, {\n    onMouseDown: function onMouseDown(e) {\n      onStepMouseDown(e, true);\n    },\n    "aria-label": "Increase Value",\n    "aria-disabled": upDisabled,\n    className: upClassName\n  }), upNode || /*#__PURE__*/react["createElement"]("span", {\n    unselectable: "on",\n    className: "".concat(prefixCls, "-handler-up-inner")\n  })), /*#__PURE__*/react["createElement"]("span", Object(esm_extends["a" /* default */])({}, sharedHandlerProps, {\n    onMouseDown: function onMouseDown(e) {\n      onStepMouseDown(e, false);\n    },\n    "aria-label": "Decrease Value",\n    "aria-disabled": downDisabled,\n    className: downClassName\n  }), downNode || /*#__PURE__*/react["createElement"]("span", {\n    unselectable: "on",\n    className: "".concat(prefixCls, "-handler-down-inner")\n  })));\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/hooks/useCursor.js\n\n\n/**\n * Keep input cursor in the correct position if possible.\n * Is this necessary since we have `formatter` which may mass the content?\n */\n\nfunction useCursor(input, focused) {\n  var selectionRef = Object(react["useRef"])(null);\n\n  function recordCursor() {\n    // Record position\n    try {\n      var start = input.selectionStart,\n          end = input.selectionEnd,\n          value = input.value;\n      var beforeTxt = value.substring(0, start);\n      var afterTxt = value.substring(end);\n      selectionRef.current = {\n        start: start,\n        end: end,\n        value: value,\n        beforeTxt: beforeTxt,\n        afterTxt: afterTxt\n      };\n    } catch (e) {// Fix error in Chrome:\n      // Failed to read the \'selectionStart\' property from \'HTMLInputElement\'\n      // http://stackoverflow.com/q/21177489/3040605\n    }\n  }\n  /**\n   * Restore logic:\n   *  1. back string same\n   *  2. start string same\n   */\n\n\n  function restoreCursor() {\n    if (input && selectionRef.current && focused) {\n      try {\n        var value = input.value;\n        var _selectionRef$current = selectionRef.current,\n            beforeTxt = _selectionRef$current.beforeTxt,\n            afterTxt = _selectionRef$current.afterTxt,\n            start = _selectionRef$current.start;\n        var startPos = value.length;\n\n        if (value.endsWith(afterTxt)) {\n          startPos = value.length - selectionRef.current.afterTxt.length;\n        } else if (value.startsWith(beforeTxt)) {\n          startPos = beforeTxt.length;\n        } else {\n          var beforeLastChar = beforeTxt[start - 1];\n          var newIndex = value.indexOf(beforeLastChar, start - 1);\n\n          if (newIndex !== -1) {\n            startPos = newIndex + 1;\n          }\n        }\n\n        input.setSelectionRange(startPos, startPos);\n      } catch (e) {\n        Object(warning["a" /* default */])(false, "Something warning of cursor restore. Please fire issue about this: ".concat(e.message));\n      }\n    }\n  }\n\n  return [recordCursor, restoreCursor];\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/canUseDom.js\nvar canUseDom = __webpack_require__("MNnm");\n\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/hooks/useLayoutEffect.js\n\n\nvar useLayoutEffect = Object(canUseDom["a" /* default */])() ? react["useLayoutEffect"] : react["useEffect"];\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/hooks/useUpdateEffect.js\n\n\n/**\n * Work as `componentDidUpdate`\n */\n\nfunction useUpdateEffect(callback, condition) {\n  var initRef = react["useRef"](false);\n  useLayoutEffect(function () {\n    if (!initRef.current) {\n      initRef.current = true;\n      return undefined;\n    }\n\n    return callback();\n  }, condition);\n}\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/hooks/useFrame.js\n\n\n/**\n * Always trigger latest once when call multiple time\n */\n\n/* harmony default export */ var useFrame = (function () {\n  var idRef = Object(react["useRef"])(0);\n\n  var cleanUp = function cleanUp() {\n    raf["a" /* default */].cancel(idRef.current);\n  };\n\n  Object(react["useEffect"])(function () {\n    return cleanUp;\n  }, []);\n  return function (callback) {\n    cleanUp();\n    idRef.current = Object(raf["a" /* default */])(function () {\n      callback();\n    });\n  };\n});\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/InputNumber.js\n\n\n\n\n\nvar _excluded = ["prefixCls", "className", "style", "min", "max", "step", "defaultValue", "value", "disabled", "readOnly", "upHandler", "downHandler", "keyboard", "controls", "stringMode", "parser", "formatter", "precision", "decimalSeparator", "onChange", "onInput", "onPressEnter", "onStep"];\n\n\n\n\n\n\n\n\n\n\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar InputNumber_getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-input-number\' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = Object(objectWithoutProperties["a" /* default */])(props, _excluded);\n\n  var inputClassName = "".concat(prefixCls, "-input");\n  var inputRef = react["useRef"](null);\n\n  var _React$useState = react["useState"](false),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = react["useRef"](false);\n  var compositionRef = react["useRef"](false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = react["useState"](function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = react["useCallback"](function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = react["useCallback"](function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, \'.\');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, \'\');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = react["useRef"](\'\');\n  var mergedFormatter = react["useCallback"](function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === \'number\' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || \'.\';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = react["useState"](function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && [\'string\', \'number\'].includes(Object(esm_typeof["a" /* default */])(initValue))) {\n      return Number.isNaN(initValue) ? \'\' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = Object(slicedToArray["a" /* default */])(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref \'show limited value when input is not focused\' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = react["useMemo"](function () {\n    return InputNumber_getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = react["useMemo"](function () {\n    return InputNumber_getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = react["useMemo"](function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = react["useMemo"](function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = Object(slicedToArray["a" /* default */])(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, \'.\', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/\u3002/g, \'.\');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current; // Ignore step since out of range\n\n\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? \'up\' : \'down\'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode["a" /* default */].ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode["a" /* default */].UP, KeyCode["a" /* default */].DOWN].includes(which)) {\n      onInternalStep(KeyCode["a" /* default */].UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    className: classnames_default()(prefixCls, className, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-focused"), focus), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-disabled"), disabled), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-readonly"), readOnly), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-not-a-number"), decimalValue.isNaN()), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-out-of-range"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, controls && /*#__PURE__*/react["createElement"](StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(inputClassName, "-wrap")\n  }, /*#__PURE__*/react["createElement"]("input", Object(esm_extends["a" /* default */])({\n    autoComplete: "off",\n    role: "spinbutton",\n    "aria-valuemin": min,\n    "aria-valuemax": max,\n    "aria-valuenow": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: Object(es_ref["a" /* composeRef */])(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = \'InputNumber\';\n/* harmony default export */ var es_InputNumber = (InputNumber);\n// CONCATENATED MODULE: ./node_modules/rc-input-number/es/index.js\n\n/* harmony default export */ var es = __webpack_exports__["a"] = (es_InputNumber);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///dmUQ\n')},eDIo:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/rc-trigger/es/index.js + 9 modules\nvar es = __webpack_require__("uciX");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// CONCATENATED MODULE: ./node_modules/rc-dropdown/es/placements.js\nvar autoAdjustOverflow = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar targetOffset = [0, 0];\nvar placements_placements = {\n  topLeft: {\n    points: [\'bl\', \'tl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  topCenter: {\n    points: [\'bc\', \'tc\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  topRight: {\n    points: [\'br\', \'tr\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  bottomLeft: {\n    points: [\'tl\', \'bl\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  bottomCenter: {\n    points: [\'tc\', \'bc\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  bottomRight: {\n    points: [\'tr\', \'br\'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  }\n};\n/* harmony default export */ var es_placements = (placements_placements);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/focus.js\nvar Dom_focus = __webpack_require__("qE6j");\n\n// CONCATENATED MODULE: ./node_modules/rc-dropdown/es/hooks/useAccessibility.js\n\n\n\n\nvar ESC = KeyCode["a" /* default */].ESC,\n    TAB = KeyCode["a" /* default */].TAB;\nfunction useAccessibility(_ref) {\n  var visible = _ref.visible,\n      setTriggerVisible = _ref.setTriggerVisible,\n      triggerRef = _ref.triggerRef,\n      onVisibleChange = _ref.onVisibleChange,\n      autoFocus = _ref.autoFocus;\n  var focusMenuRef = react["useRef"](false);\n\n  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {\n    if (visible && triggerRef.current) {\n      var _triggerRef$current, _triggerRef$current$t, _triggerRef$current$t2, _triggerRef$current$t3;\n\n      (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$t = _triggerRef$current.triggerRef) === null || _triggerRef$current$t === void 0 ? void 0 : (_triggerRef$current$t2 = _triggerRef$current$t.current) === null || _triggerRef$current$t2 === void 0 ? void 0 : (_triggerRef$current$t3 = _triggerRef$current$t2.focus) === null || _triggerRef$current$t3 === void 0 ? void 0 : _triggerRef$current$t3.call(_triggerRef$current$t2);\n      setTriggerVisible(false);\n\n      if (typeof onVisibleChange === \'function\') {\n        onVisibleChange(false);\n      }\n    }\n  };\n\n  var focusMenu = function focusMenu() {\n    var _triggerRef$current2, _triggerRef$current2$, _triggerRef$current2$2, _triggerRef$current2$3;\n\n    var elements = Object(Dom_focus["a" /* getFocusNodeList */])((_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.popupRef) === null || _triggerRef$current2$ === void 0 ? void 0 : (_triggerRef$current2$2 = _triggerRef$current2$.current) === null || _triggerRef$current2$2 === void 0 ? void 0 : (_triggerRef$current2$3 = _triggerRef$current2$2.getElement) === null || _triggerRef$current2$3 === void 0 ? void 0 : _triggerRef$current2$3.call(_triggerRef$current2$2));\n    var firstElement = elements[0];\n\n    if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus) {\n      firstElement.focus();\n      focusMenuRef.current = true;\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    switch (event.keyCode) {\n      case ESC:\n        handleCloseMenuAndReturnFocus();\n        break;\n\n      case TAB:\n        {\n          var focusResult = false;\n\n          if (!focusMenuRef.current) {\n            focusResult = focusMenu();\n          }\n\n          if (focusResult) {\n            event.preventDefault();\n          } else {\n            handleCloseMenuAndReturnFocus();\n          }\n\n          break;\n        }\n    }\n  };\n\n  react["useEffect"](function () {\n    if (visible) {\n      window.addEventListener(\'keydown\', handleKeyDown);\n\n      if (autoFocus) {\n        // FIXME: hack with raf\n        Object(raf["a" /* default */])(focusMenu, 3);\n      }\n\n      return function () {\n        window.removeEventListener(\'keydown\', handleKeyDown);\n        focusMenuRef.current = false;\n      };\n    }\n\n    return function () {\n      focusMenuRef.current = false;\n    };\n  }, [visible]); // eslint-disable-line react-hooks/exhaustive-deps\n}\n// CONCATENATED MODULE: ./node_modules/rc-dropdown/es/Dropdown.js\n\n\n\n\nvar _excluded = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus"];\n\n\n\n\n\n\nfunction Dropdown(props, ref) {\n  var _props$arrow = props.arrow,\n      arrow = _props$arrow === void 0 ? false : _props$arrow,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-dropdown\' : _props$prefixCls,\n      transitionName = props.transitionName,\n      animation = props.animation,\n      align = props.align,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \'bottomLeft\' : _props$placement,\n      _props$placements = props.placements,\n      placements = _props$placements === void 0 ? es_placements : _props$placements,\n      getPopupContainer = props.getPopupContainer,\n      showAction = props.showAction,\n      hideAction = props.hideAction,\n      overlayClassName = props.overlayClassName,\n      overlayStyle = props.overlayStyle,\n      visible = props.visible,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? [\'hover\'] : _props$trigger,\n      autoFocus = props.autoFocus,\n      otherProps = Object(objectWithoutProperties["a" /* default */])(props, _excluded);\n\n  var _React$useState = react["useState"](),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      triggerVisible = _React$useState2[0],\n      setTriggerVisible = _React$useState2[1];\n\n  var mergedVisible = \'visible\' in props ? visible : triggerVisible;\n  var triggerRef = react["useRef"](null);\n  react["useImperativeHandle"](ref, function () {\n    return triggerRef.current;\n  });\n  useAccessibility({\n    visible: mergedVisible,\n    setTriggerVisible: setTriggerVisible,\n    triggerRef: triggerRef,\n    onVisibleChange: props.onVisibleChange,\n    autoFocus: autoFocus\n  });\n\n  var getOverlayElement = function getOverlayElement() {\n    var overlay = props.overlay;\n    var overlayElement;\n\n    if (typeof overlay === \'function\') {\n      overlayElement = overlay();\n    } else {\n      overlayElement = overlay;\n    }\n\n    return overlayElement;\n  };\n\n  var onClick = function onClick(e) {\n    var onOverlayClick = props.onOverlayClick;\n    setTriggerVisible(false);\n\n    if (onOverlayClick) {\n      onOverlayClick(e);\n    }\n  };\n\n  var onVisibleChange = function onVisibleChange(newVisible) {\n    var onVisibleChangeProp = props.onVisibleChange;\n    setTriggerVisible(newVisible);\n\n    if (typeof onVisibleChangeProp === \'function\') {\n      onVisibleChangeProp(newVisible);\n    }\n  };\n\n  var getMenuElement = function getMenuElement() {\n    var overlayElement = getOverlayElement();\n    return /*#__PURE__*/react["createElement"](react["Fragment"], null, arrow && /*#__PURE__*/react["createElement"]("div", {\n      className: "".concat(prefixCls, "-arrow")\n    }), overlayElement);\n  };\n\n  var getMenuElementOrLambda = function getMenuElementOrLambda() {\n    var overlay = props.overlay;\n\n    if (typeof overlay === \'function\') {\n      return getMenuElement;\n    }\n\n    return getMenuElement();\n  };\n\n  var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger() {\n    var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger,\n        alignPoint = props.alignPoint;\n\n    if (\'minOverlayWidthMatchTrigger\' in props) {\n      return minOverlayWidthMatchTrigger;\n    }\n\n    return !alignPoint;\n  };\n\n  var getOpenClassName = function getOpenClassName() {\n    var openClassName = props.openClassName;\n\n    if (openClassName !== undefined) {\n      return openClassName;\n    }\n\n    return "".concat(prefixCls, "-open");\n  };\n\n  var renderChildren = function renderChildren() {\n    var children = props.children;\n    var childrenProps = children.props ? children.props : {};\n    var childClassName = classnames_default()(childrenProps.className, getOpenClassName());\n    return mergedVisible && children ? /*#__PURE__*/react["cloneElement"](children, {\n      className: childClassName\n    }) : children;\n  };\n\n  var triggerHideAction = hideAction;\n\n  if (!triggerHideAction && trigger.indexOf(\'contextMenu\') !== -1) {\n    triggerHideAction = [\'click\'];\n  }\n\n  return /*#__PURE__*/react["createElement"](es["a" /* default */], Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({\n    builtinPlacements: placements\n  }, otherProps), {}, {\n    prefixCls: prefixCls,\n    ref: triggerRef,\n    popupClassName: classnames_default()(overlayClassName, Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-show-arrow"), arrow)),\n    popupStyle: overlayStyle,\n    action: trigger,\n    showAction: showAction,\n    hideAction: triggerHideAction || [],\n    popupPlacement: placement,\n    popupAlign: align,\n    popupTransitionName: transitionName,\n    popupAnimation: animation,\n    popupVisible: mergedVisible,\n    stretch: getMinOverlayWidthMatchTrigger() ? \'minWidth\' : \'\',\n    popup: getMenuElementOrLambda(),\n    onPopupVisibleChange: onVisibleChange,\n    onPopupClick: onClick,\n    getPopupContainer: getPopupContainer\n  }), renderChildren());\n}\n\n/* harmony default export */ var es_Dropdown = (/*#__PURE__*/react["forwardRef"](Dropdown));\n// CONCATENATED MODULE: ./node_modules/rc-dropdown/es/index.js\n\n/* harmony default export */ var rc_dropdown_es = __webpack_exports__["a"] = (es_Dropdown);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///eDIo\n')},fcSX:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 3 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/PortalWrapper.js + 3 modules\nvar PortalWrapper = __webpack_require__("1W/9");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__("JX7q");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/getScrollBarSize.js\nvar getScrollBarSize = __webpack_require__("qx4F");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/omit.js\nvar omit = __webpack_require__("bT9E");\n\n// CONCATENATED MODULE: ./node_modules/rc-drawer/es/utils.js\nfunction dataToArray(vars) {\n  if (Array.isArray(vars)) {\n    return vars;\n  }\n\n  return [vars];\n}\nvar transitionEndObject = {\n  transition: \'transitionend\',\n  WebkitTransition: \'webkitTransitionEnd\',\n  MozTransition: \'transitionend\',\n  OTransition: \'oTransitionEnd otransitionend\'\n};\nvar transitionStr = Object.keys(transitionEndObject).filter(function (key) {\n  if (typeof document === \'undefined\') {\n    return false;\n  }\n\n  var html = document.getElementsByTagName(\'html\')[0];\n  return key in (html ? html.style : {});\n})[0];\nvar transitionEnd = transitionEndObject[transitionStr];\nfunction addEventListener(target, eventType, callback, options) {\n  if (target.addEventListener) {\n    target.addEventListener(eventType, callback, options);\n  } else if (target.attachEvent) {\n    // tslint:disable-line\n    target.attachEvent("on".concat(eventType), callback); // tslint:disable-line\n  }\n}\nfunction removeEventListener(target, eventType, callback, options) {\n  if (target.removeEventListener) {\n    target.removeEventListener(eventType, callback, options);\n  } else if (target.attachEvent) {\n    // tslint:disable-line\n    target.detachEvent("on".concat(eventType), callback); // tslint:disable-line\n  }\n}\nfunction transformArguments(arg, cb) {\n  var result = typeof arg === \'function\' ? arg(cb) : arg;\n\n  if (Array.isArray(result)) {\n    if (result.length === 2) {\n      return result;\n    }\n\n    return [result[0], result[1]];\n  }\n\n  return [result];\n}\nvar isNumeric = function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n};\nvar windowIsUndefined = !(typeof window !== \'undefined\' && window.document && window.document.createElement);\nvar getTouchParentScroll = function getTouchParentScroll(root, currentTarget, differX, differY) {\n  if (!currentTarget || currentTarget === document || currentTarget instanceof Document) {\n    return false;\n  } // root \u4e3a drawer-content \u8bbe\u5b9a\u4e86 overflow, \u5224\u65ad\u4e3a root \u7684 parent \u65f6\u7ed3\u675f\u6eda\u52a8\uff1b\n\n\n  if (currentTarget === root.parentNode) {\n    return true;\n  }\n\n  var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);\n  var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);\n  var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;\n  var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;\n  var style = document.defaultView.getComputedStyle(currentTarget);\n  var overflowY = style.overflowY === \'auto\' || style.overflowY === \'scroll\';\n  var overflowX = style.overflowX === \'auto\' || style.overflowX === \'scroll\';\n  var y = scrollY && overflowY;\n  var x = scrollX && overflowX;\n\n  if (isY && (!y || y && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!x || x && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {\n    return getTouchParentScroll(root, currentTarget.parentNode, differX, differY);\n  }\n\n  return false;\n};\n// CONCATENATED MODULE: ./node_modules/rc-drawer/es/DrawerChild.js\n\n\n\n\n\n\n\n\n\nvar _excluded = ["className", "children", "style", "width", "height", "defaultOpen", "open", "prefixCls", "placement", "level", "levelMove", "ease", "duration", "getContainer", "handler", "onChange", "afterVisibleChange", "showMask", "maskClosable", "maskStyle", "onClose", "onHandleClick", "keyboard", "getOpenCount", "scrollLocker", "contentWrapperStyle"];\n\n\n\n\n\n\nvar currentDrawer = {};\n\nvar DrawerChild_DrawerChild = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(DrawerChild, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(DrawerChild);\n\n  function DrawerChild(props) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, DrawerChild);\n\n    _this = _super.call(this, props);\n    _this.levelDom = void 0;\n    _this.dom = void 0;\n    _this.contentWrapper = void 0;\n    _this.contentDom = void 0;\n    _this.maskDom = void 0;\n    _this.handlerDom = void 0;\n    _this.drawerId = void 0;\n    _this.timeout = void 0;\n    _this.passive = void 0;\n    _this.startPos = void 0;\n\n    _this.domFocus = function () {\n      if (_this.dom) {\n        _this.dom.focus();\n      }\n    };\n\n    _this.removeStartHandler = function (e) {\n      if (e.touches.length > 1) {\n        // need clear the startPos when another touch event happens\n        _this.startPos = null;\n        return;\n      }\n\n      _this.startPos = {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n    };\n\n    _this.removeMoveHandler = function (e) {\n      // the startPos may be null or undefined\n      if (e.changedTouches.length > 1 || !_this.startPos) {\n        return;\n      }\n\n      var currentTarget = e.currentTarget;\n      var differX = e.changedTouches[0].clientX - _this.startPos.x;\n      var differY = e.changedTouches[0].clientY - _this.startPos.y;\n\n      if ((currentTarget === _this.maskDom || currentTarget === _this.handlerDom || currentTarget === _this.contentDom && getTouchParentScroll(currentTarget, e.target, differX, differY)) && e.cancelable) {\n        e.preventDefault();\n      }\n    };\n\n    _this.transitionEnd = function (e) {\n      var dom = e.target;\n      removeEventListener(dom, transitionEnd, _this.transitionEnd);\n      dom.style.transition = \'\';\n    };\n\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === KeyCode["a" /* default */].ESC) {\n        var onClose = _this.props.onClose;\n        e.stopPropagation();\n\n        if (onClose) {\n          onClose(e);\n        }\n      }\n    };\n\n    _this.onWrapperTransitionEnd = function (e) {\n      var _this$props = _this.props,\n          open = _this$props.open,\n          afterVisibleChange = _this$props.afterVisibleChange;\n\n      if (e.target === _this.contentWrapper && e.propertyName.match(/transform$/)) {\n        _this.dom.style.transition = \'\';\n\n        if (!open && _this.getCurrentDrawerSome()) {\n          document.body.style.overflowX = \'\';\n\n          if (_this.maskDom) {\n            _this.maskDom.style.left = \'\';\n            _this.maskDom.style.width = \'\';\n          }\n        }\n\n        if (afterVisibleChange) {\n          afterVisibleChange(!!open);\n        }\n      }\n    };\n\n    _this.openLevelTransition = function () {\n      var _this$props2 = _this.props,\n          open = _this$props2.open,\n          width = _this$props2.width,\n          height = _this$props2.height;\n\n      var _this$getHorizontalBo = _this.getHorizontalBoolAndPlacementName(),\n          isHorizontal = _this$getHorizontalBo.isHorizontal,\n          placementName = _this$getHorizontalBo.placementName;\n\n      var contentValue = _this.contentDom ? _this.contentDom.getBoundingClientRect()[isHorizontal ? \'width\' : \'height\'] : 0;\n      var value = (isHorizontal ? width : height) || contentValue;\n\n      _this.setLevelAndScrolling(open, placementName, value);\n    };\n\n    _this.setLevelTransform = function (open, placementName, value, right) {\n      var _this$props3 = _this.props,\n          placement = _this$props3.placement,\n          levelMove = _this$props3.levelMove,\n          duration = _this$props3.duration,\n          ease = _this$props3.ease,\n          showMask = _this$props3.showMask; // router \u5207\u6362\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f3\u9875\u9762\u5931\u53bb\u6eda\u52a8\u6761\uff0c\u6240\u4ee5\u9700\u8981\u65f6\u65f6\u83b7\u53d6\u3002\n\n      _this.levelDom.forEach(function (dom) {\n        dom.style.transition = "transform ".concat(duration, " ").concat(ease);\n        addEventListener(dom, transitionEnd, _this.transitionEnd);\n        var levelValue = open ? value : 0;\n\n        if (levelMove) {\n          var $levelMove = transformArguments(levelMove, {\n            target: dom,\n            open: open\n          });\n          levelValue = open ? $levelMove[0] : $levelMove[1] || 0;\n        }\n\n        var $value = typeof levelValue === \'number\' ? "".concat(levelValue, "px") : levelValue;\n        var placementPos = placement === \'left\' || placement === \'top\' ? $value : "-".concat($value);\n        placementPos = showMask && placement === \'right\' && right ? "calc(".concat(placementPos, " + ").concat(right, "px)") : placementPos;\n        dom.style.transform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : \'\';\n      });\n    };\n\n    _this.setLevelAndScrolling = function (open, placementName, value) {\n      var onChange = _this.props.onChange;\n\n      if (!windowIsUndefined) {\n        var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? Object(getScrollBarSize["a" /* default */])(true) : 0;\n\n        _this.setLevelTransform(open, placementName, value, right);\n\n        _this.toggleScrollingToDrawerAndBody(right);\n      }\n\n      if (onChange) {\n        onChange(open);\n      }\n    };\n\n    _this.toggleScrollingToDrawerAndBody = function (right) {\n      var _this$props4 = _this.props,\n          getContainer = _this$props4.getContainer,\n          showMask = _this$props4.showMask,\n          open = _this$props4.open;\n      var container = getContainer && getContainer(); // \u5904\u7406 body \u6eda\u52a8\n\n      if (container && container.parentNode === document.body && showMask) {\n        var eventArray = [\'touchstart\'];\n        var domArray = [document.body, _this.maskDom, _this.handlerDom, _this.contentDom];\n\n        if (open && document.body.style.overflow !== \'hidden\') {\n          if (right) {\n            _this.addScrollingEffect(right);\n          }\n\n          document.body.style.touchAction = \'none\'; // \u624b\u673a\u7981\u6eda\n\n          domArray.forEach(function (item, i) {\n            if (!item) {\n              return;\n            }\n\n            addEventListener(item, eventArray[i] || \'touchmove\', i ? _this.removeMoveHandler : _this.removeStartHandler, _this.passive);\n          });\n        } else if (_this.getCurrentDrawerSome()) {\n          document.body.style.touchAction = \'\';\n\n          if (right) {\n            _this.remScrollingEffect(right);\n          } // \u6062\u590d\u4e8b\u4ef6\n\n\n          domArray.forEach(function (item, i) {\n            if (!item) {\n              return;\n            }\n\n            removeEventListener(item, eventArray[i] || \'touchmove\', i ? _this.removeMoveHandler : _this.removeStartHandler, _this.passive);\n          });\n        }\n      }\n    };\n\n    _this.addScrollingEffect = function (right) {\n      var _this$props5 = _this.props,\n          placement = _this$props5.placement,\n          duration = _this$props5.duration,\n          ease = _this$props5.ease;\n      var widthTransition = "width ".concat(duration, " ").concat(ease);\n      var transformTransition = "transform ".concat(duration, " ").concat(ease);\n      _this.dom.style.transition = \'none\';\n\n      switch (placement) {\n        case \'right\':\n          _this.dom.style.transform = "translateX(-".concat(right, "px)");\n          break;\n\n        case \'top\':\n        case \'bottom\':\n          _this.dom.style.width = "calc(100% - ".concat(right, "px)");\n          _this.dom.style.transform = \'translateZ(0)\';\n          break;\n\n        default:\n          break;\n      }\n\n      clearTimeout(_this.timeout);\n      _this.timeout = setTimeout(function () {\n        if (_this.dom) {\n          _this.dom.style.transition = "".concat(transformTransition, ",").concat(widthTransition);\n          _this.dom.style.width = \'\';\n          _this.dom.style.transform = \'\';\n        }\n      });\n    };\n\n    _this.remScrollingEffect = function (right) {\n      var _this$props6 = _this.props,\n          placement = _this$props6.placement,\n          duration = _this$props6.duration,\n          ease = _this$props6.ease;\n\n      if (transitionStr) {\n        document.body.style.overflowX = \'hidden\';\n      }\n\n      _this.dom.style.transition = \'none\';\n      var heightTransition;\n      var widthTransition = "width ".concat(duration, " ").concat(ease);\n      var transformTransition = "transform ".concat(duration, " ").concat(ease);\n\n      switch (placement) {\n        case \'left\':\n          {\n            _this.dom.style.width = \'100%\';\n            widthTransition = "width 0s ".concat(ease, " ").concat(duration);\n            break;\n          }\n\n        case \'right\':\n          {\n            _this.dom.style.transform = "translateX(".concat(right, "px)");\n            _this.dom.style.width = \'100%\';\n            widthTransition = "width 0s ".concat(ease, " ").concat(duration);\n\n            if (_this.maskDom) {\n              _this.maskDom.style.left = "-".concat(right, "px");\n              _this.maskDom.style.width = "calc(100% + ".concat(right, "px)");\n            }\n\n            break;\n          }\n\n        case \'top\':\n        case \'bottom\':\n          {\n            _this.dom.style.width = "calc(100% + ".concat(right, "px)");\n            _this.dom.style.height = \'100%\';\n            _this.dom.style.transform = \'translateZ(0)\';\n            heightTransition = "height 0s ".concat(ease, " ").concat(duration);\n            break;\n          }\n\n        default:\n          break;\n      }\n\n      clearTimeout(_this.timeout);\n      _this.timeout = setTimeout(function () {\n        if (_this.dom) {\n          _this.dom.style.transition = "".concat(transformTransition, ",").concat(heightTransition ? "".concat(heightTransition, ",") : \'\').concat(widthTransition);\n          _this.dom.style.transform = \'\';\n          _this.dom.style.width = \'\';\n          _this.dom.style.height = \'\';\n        }\n      });\n    };\n\n    _this.getCurrentDrawerSome = function () {\n      return !Object.keys(currentDrawer).some(function (key) {\n        return currentDrawer[key];\n      });\n    };\n\n    _this.getLevelDom = function (_ref) {\n      var level = _ref.level,\n          getContainer = _ref.getContainer;\n\n      if (windowIsUndefined) {\n        return;\n      }\n\n      var container = getContainer && getContainer();\n      var parent = container ? container.parentNode : null;\n      _this.levelDom = [];\n\n      if (level === \'all\') {\n        var children = parent ? Array.prototype.slice.call(parent.children) : [];\n        children.forEach(function (child) {\n          if (child.nodeName !== \'SCRIPT\' && child.nodeName !== \'STYLE\' && child.nodeName !== \'LINK\' && child !== container) {\n            _this.levelDom.push(child);\n          }\n        });\n      } else if (level) {\n        dataToArray(level).forEach(function (key) {\n          document.querySelectorAll(key).forEach(function (item) {\n            _this.levelDom.push(item);\n          });\n        });\n      }\n    };\n\n    _this.getHorizontalBoolAndPlacementName = function () {\n      var placement = _this.props.placement;\n      var isHorizontal = placement === \'left\' || placement === \'right\';\n      var placementName = "translate".concat(isHorizontal ? \'X\' : \'Y\');\n      return {\n        isHorizontal: isHorizontal,\n        placementName: placementName\n      };\n    };\n\n    _this.state = {\n      _self: Object(assertThisInitialized["a" /* default */])(_this)\n    };\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(DrawerChild, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (!windowIsUndefined) {\n        var passiveSupported = false;\n\n        try {\n          window.addEventListener(\'test\', null, Object.defineProperty({}, \'passive\', {\n            get: function get() {\n              passiveSupported = true;\n              return null;\n            }\n          }));\n        } catch (err) {}\n\n        this.passive = passiveSupported ? {\n          passive: false\n        } : false;\n      }\n\n      var _this$props7 = this.props,\n          open = _this$props7.open,\n          getContainer = _this$props7.getContainer,\n          showMask = _this$props7.showMask,\n          autoFocus = _this$props7.autoFocus;\n      var container = getContainer && getContainer();\n      this.drawerId = "drawer_id_".concat(Number((Date.now() + Math.random()).toString().replace(\'.\', Math.round(Math.random() * 9).toString())).toString(16));\n      this.getLevelDom(this.props);\n\n      if (open) {\n        if (container && container.parentNode === document.body) {\n          currentDrawer[this.drawerId] = open;\n        } // \u9ed8\u8ba4\u6253\u5f00\u72b6\u6001\u65f6\u63a8\u51fa level;\n\n\n        this.openLevelTransition();\n        this.forceUpdate(function () {\n          if (autoFocus) {\n            _this2.domFocus();\n          }\n        });\n\n        if (showMask) {\n          var _this$props$scrollLoc;\n\n          (_this$props$scrollLoc = this.props.scrollLocker) === null || _this$props$scrollLoc === void 0 ? void 0 : _this$props$scrollLoc.lock();\n        }\n      }\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props8 = this.props,\n          open = _this$props8.open,\n          getContainer = _this$props8.getContainer,\n          scrollLocker = _this$props8.scrollLocker,\n          showMask = _this$props8.showMask,\n          autoFocus = _this$props8.autoFocus;\n      var container = getContainer && getContainer();\n\n      if (open !== prevProps.open) {\n        if (container && container.parentNode === document.body) {\n          currentDrawer[this.drawerId] = !!open;\n        }\n\n        this.openLevelTransition();\n\n        if (open) {\n          if (autoFocus) {\n            this.domFocus();\n          }\n\n          if (showMask) {\n            scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();\n          }\n        } else {\n          scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n        }\n      }\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      var _this$props9 = this.props,\n          open = _this$props9.open,\n          scrollLocker = _this$props9.scrollLocker;\n      delete currentDrawer[this.drawerId];\n\n      if (open) {\n        this.setLevelTransform(false);\n        document.body.style.touchAction = \'\';\n      }\n\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n    }\n  }, {\n    key: "render",\n    value: // tslint:disable-next-line:member-ordering\n    function render() {\n      var _classnames,\n          _this3 = this;\n\n      var _this$props10 = this.props,\n          className = _this$props10.className,\n          children = _this$props10.children,\n          style = _this$props10.style,\n          width = _this$props10.width,\n          height = _this$props10.height,\n          defaultOpen = _this$props10.defaultOpen,\n          $open = _this$props10.open,\n          prefixCls = _this$props10.prefixCls,\n          placement = _this$props10.placement,\n          level = _this$props10.level,\n          levelMove = _this$props10.levelMove,\n          ease = _this$props10.ease,\n          duration = _this$props10.duration,\n          getContainer = _this$props10.getContainer,\n          handler = _this$props10.handler,\n          onChange = _this$props10.onChange,\n          afterVisibleChange = _this$props10.afterVisibleChange,\n          showMask = _this$props10.showMask,\n          maskClosable = _this$props10.maskClosable,\n          maskStyle = _this$props10.maskStyle,\n          onClose = _this$props10.onClose,\n          onHandleClick = _this$props10.onHandleClick,\n          keyboard = _this$props10.keyboard,\n          getOpenCount = _this$props10.getOpenCount,\n          scrollLocker = _this$props10.scrollLocker,\n          contentWrapperStyle = _this$props10.contentWrapperStyle,\n          props = Object(objectWithoutProperties["a" /* default */])(_this$props10, _excluded); // \u9996\u6b21\u6e32\u67d3\u90fd\u5c06\u662f\u5173\u95ed\u72b6\u6001\u3002\n\n\n      var open = this.dom ? $open : false;\n      var wrapperClassName = classnames_default()(prefixCls, (_classnames = {}, Object(defineProperty["a" /* default */])(_classnames, "".concat(prefixCls, "-").concat(placement), true), Object(defineProperty["a" /* default */])(_classnames, "".concat(prefixCls, "-open"), open), Object(defineProperty["a" /* default */])(_classnames, className || \'\', !!className), Object(defineProperty["a" /* default */])(_classnames, \'no-mask\', !showMask), _classnames));\n\n      var _this$getHorizontalBo2 = this.getHorizontalBoolAndPlacementName(),\n          placementName = _this$getHorizontalBo2.placementName; // \u767e\u5206\u6bd4\u4e0e\u50cf\u7d20\u52a8\u753b\u4e0d\u540c\u6b65\uff0c\u7b2c\u4e00\u6b21\u6253\u7528\u540e\u5168\u7528\u50cf\u7d20\u52a8\u753b\u3002\n      // const defaultValue = !this.contentDom || !level ? \'100%\' : `${value}px`;\n\n\n      var placementPos = placement === \'left\' || placement === \'top\' ? \'-100%\' : \'100%\';\n      var transform = open ? \'\' : "".concat(placementName, "(").concat(placementPos, ")");\n      var handlerChildren = handler && /*#__PURE__*/react["cloneElement"](handler, {\n        onClick: function onClick(e) {\n          if (handler.props.onClick) {\n            handler.props.onClick();\n          }\n\n          if (onHandleClick) {\n            onHandleClick(e);\n          }\n        },\n        ref: function ref(c) {\n          _this3.handlerDom = c;\n        }\n      });\n      return /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({}, Object(omit["a" /* default */])(props, [\'switchScrollingEffect\', \'autoFocus\']), {\n        tabIndex: -1,\n        className: wrapperClassName,\n        style: style,\n        ref: function ref(c) {\n          _this3.dom = c;\n        },\n        onKeyDown: open && keyboard ? this.onKeyDown : undefined,\n        onTransitionEnd: this.onWrapperTransitionEnd\n      }), showMask && /*#__PURE__*/react["createElement"]("div", {\n        className: "".concat(prefixCls, "-mask"),\n        onClick: maskClosable ? onClose : undefined,\n        style: maskStyle,\n        ref: function ref(c) {\n          _this3.maskDom = c;\n        }\n      }), /*#__PURE__*/react["createElement"]("div", {\n        className: "".concat(prefixCls, "-content-wrapper"),\n        style: Object(objectSpread2["a" /* default */])({\n          transform: transform,\n          msTransform: transform,\n          width: isNumeric(width) ? "".concat(width, "px") : width,\n          height: isNumeric(height) ? "".concat(height, "px") : height\n        }, contentWrapperStyle),\n        ref: function ref(c) {\n          _this3.contentWrapper = c;\n        }\n      }, /*#__PURE__*/react["createElement"]("div", {\n        className: "".concat(prefixCls, "-content"),\n        ref: function ref(c) {\n          _this3.contentDom = c;\n        }\n      }, children), handlerChildren));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(props, _ref2) {\n      var prevProps = _ref2.prevProps,\n          _self = _ref2._self;\n      var nextState = {\n        prevProps: props\n      };\n\n      if (prevProps !== undefined) {\n        var placement = props.placement,\n            level = props.level;\n\n        if (placement !== prevProps.placement) {\n          // test \u7684 bug, \u6709\u52a8\u753b\u8fc7\u573a\uff0c\u5220\u9664 dom\n          _self.contentDom = null;\n        }\n\n        if (level !== prevProps.level) {\n          _self.getLevelDom(props);\n        }\n      }\n\n      return nextState;\n    }\n  }]);\n\n  return DrawerChild;\n}(react["Component"]);\n\n/* harmony default export */ var es_DrawerChild = (DrawerChild_DrawerChild);\n// CONCATENATED MODULE: ./node_modules/rc-drawer/es/DrawerWrapper.js\n\n\n\n\n\n\nvar DrawerWrapper_excluded = ["defaultOpen", "getContainer", "wrapperClassName", "forceRender", "handler"],\n    _excluded2 = ["visible", "afterClose"];\n\n\n\n\nvar DrawerWrapper_DrawerWrapper = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(DrawerWrapper, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(DrawerWrapper);\n\n  function DrawerWrapper(props) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, DrawerWrapper);\n\n    _this = _super.call(this, props);\n    _this.dom = void 0;\n\n    _this.onHandleClick = function (e) {\n      var _this$props = _this.props,\n          onHandleClick = _this$props.onHandleClick,\n          $open = _this$props.open;\n\n      if (onHandleClick) {\n        onHandleClick(e);\n      }\n\n      if (typeof $open === \'undefined\') {\n        var open = _this.state.open;\n\n        _this.setState({\n          open: !open\n        });\n      }\n    };\n\n    _this.onClose = function (e) {\n      var _this$props2 = _this.props,\n          onClose = _this$props2.onClose,\n          open = _this$props2.open;\n\n      if (onClose) {\n        onClose(e);\n      }\n\n      if (typeof open === \'undefined\') {\n        _this.setState({\n          open: false\n        });\n      }\n    };\n\n    var _open = typeof props.open !== \'undefined\' ? props.open : !!props.defaultOpen;\n\n    _this.state = {\n      open: _open\n    };\n\n    if (\'onMaskClick\' in props) {\n      console.warn(\'`onMaskClick` are removed, please use `onClose` instead.\');\n    }\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(DrawerWrapper, [{\n    key: "render",\n    value: // tslint:disable-next-line:member-ordering\n    function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          defaultOpen = _this$props3.defaultOpen,\n          getContainer = _this$props3.getContainer,\n          wrapperClassName = _this$props3.wrapperClassName,\n          forceRender = _this$props3.forceRender,\n          handler = _this$props3.handler,\n          props = Object(objectWithoutProperties["a" /* default */])(_this$props3, DrawerWrapper_excluded);\n\n      var open = this.state.open; // \u6e32\u67d3\u5728\u5f53\u524d dom \u91cc\uff1b\n\n      if (!getContainer) {\n        return /*#__PURE__*/react["createElement"]("div", {\n          className: wrapperClassName,\n          ref: function ref(c) {\n            _this2.dom = c;\n          }\n        }, /*#__PURE__*/react["createElement"](es_DrawerChild, Object(esm_extends["a" /* default */])({}, props, {\n          open: open,\n          handler: handler,\n          getContainer: function getContainer() {\n            return _this2.dom;\n          },\n          onClose: this.onClose,\n          onHandleClick: this.onHandleClick\n        })));\n      } // \u5982\u679c\u6709 handler \u4e3a\u5185\u7f6e\u5f3a\u5236\u6e32\u67d3\uff1b\n\n\n      var $forceRender = !!handler || forceRender;\n      return /*#__PURE__*/react["createElement"](PortalWrapper["a" /* default */], {\n        visible: open,\n        forceRender: $forceRender,\n        getContainer: getContainer,\n        wrapperClassName: wrapperClassName\n      }, function (_ref) {\n        var visible = _ref.visible,\n            afterClose = _ref.afterClose,\n            rest = Object(objectWithoutProperties["a" /* default */])(_ref, _excluded2);\n\n        return (\n          /*#__PURE__*/\n          // react 15\uff0ccomponentWillUnmount \u65f6 Portal \u8fd4\u56de afterClose, visible.\n          react["createElement"](es_DrawerChild, Object(esm_extends["a" /* default */])({}, props, rest, {\n            open: visible !== undefined ? visible : open,\n            afterVisibleChange: afterClose !== undefined ? afterClose : props.afterVisibleChange,\n            handler: handler,\n            onClose: _this2.onClose,\n            onHandleClick: _this2.onHandleClick\n          }))\n        );\n      });\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(props, _ref2) {\n      var prevProps = _ref2.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      if (typeof prevProps !== \'undefined\' && props.open !== prevProps.open) {\n        newState.open = props.open;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return DrawerWrapper;\n}(react["Component"]);\n\nDrawerWrapper_DrawerWrapper.defaultProps = {\n  prefixCls: \'drawer\',\n  placement: \'left\',\n  getContainer: \'body\',\n  defaultOpen: false,\n  level: \'all\',\n  duration: \'.3s\',\n  ease: \'cubic-bezier(0.78, 0.14, 0.15, 0.86)\',\n  onChange: function onChange() {},\n  afterVisibleChange: function afterVisibleChange() {},\n  handler: /*#__PURE__*/react["createElement"]("div", {\n    className: "drawer-handle"\n  }, /*#__PURE__*/react["createElement"]("i", {\n    className: "drawer-handle-icon"\n  })),\n  showMask: true,\n  maskClosable: true,\n  maskStyle: {},\n  wrapperClassName: \'\',\n  className: \'\',\n  keyboard: true,\n  forceRender: false,\n  autoFocus: true\n};\n/* harmony default export */ var es_DrawerWrapper = (DrawerWrapper_DrawerWrapper);\n// CONCATENATED MODULE: ./node_modules/rc-drawer/es/index.js\n// export this package\'s api\n\n/* harmony default export */ var es = __webpack_exports__["a"] = (es_DrawerWrapper);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///fcSX\n')},hzQT:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// UNUSED EXPORTS: Panel\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/PortalWrapper.js + 3 modules\nvar PortalWrapper = __webpack_require__("1W/9");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useId.js\nvar useId = __webpack_require__("V2Em");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/contains.js\nvar contains = __webpack_require__("l4aY");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/pickAttrs.js\nvar pickAttrs = __webpack_require__("bX4T");\n\n// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 11 modules\nvar es = __webpack_require__("8XRh");\n\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/Dialog/Mask.js\n\n\n\n\n\nfunction Mask(props) {\n  var prefixCls = props.prefixCls,\n      style = props.style,\n      visible = props.visible,\n      maskProps = props.maskProps,\n      motionName = props.motionName;\n  return /*#__PURE__*/react["createElement"](es["b" /* default */], {\n    key: "mask",\n    visible: visible,\n    motionName: motionName,\n    leavedClassName: "".concat(prefixCls, "-mask-hidden")\n  }, function (_ref) {\n    var motionClassName = _ref.className,\n        motionStyle = _ref.style;\n    return /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({\n      style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, motionStyle), style),\n      className: classnames_default()("".concat(prefixCls, "-mask"), motionClassName)\n    }, maskProps));\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/util.js\n// =============================== Motion ===============================\nfunction getMotionName(prefixCls, transitionName, animationName) {\n  var motionName = transitionName;\n\n  if (!motionName && animationName) {\n    motionName = "".concat(prefixCls, "-").concat(animationName);\n  }\n\n  return motionName;\n} // =============================== Offset ===============================\n\nfunction getScroll(w, top) {\n  var ret = w["page".concat(top ? \'Y\' : \'X\', "Offset")];\n  var method = "scroll".concat(top ? \'Top\' : \'Left\');\n\n  if (typeof ret !== \'number\') {\n    var d = w.document;\n    ret = d.documentElement[method];\n\n    if (typeof ret !== \'number\') {\n      ret = d.body[method];\n    }\n  }\n\n  return ret;\n}\n\nfunction offset(el) {\n  var rect = el.getBoundingClientRect();\n  var pos = {\n    left: rect.left,\n    top: rect.top\n  };\n  var doc = el.ownerDocument;\n  var w = doc.defaultView || doc.parentWindow;\n  pos.left += getScroll(w);\n  pos.top += getScroll(w, true);\n  return pos;\n}\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/Dialog/Content/MemoChildren.js\n\n/* harmony default export */ var MemoChildren = (/*#__PURE__*/react["memo"](function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (_, _ref2) {\n  var shouldUpdate = _ref2.shouldUpdate;\n  return !shouldUpdate;\n}));\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/Dialog/Content/Panel.js\n\n\n\n\n\nvar sentinelStyle = {\n  width: 0,\n  height: 0,\n  overflow: \'hidden\',\n  outline: \'none\'\n};\nvar Panel = /*#__PURE__*/react_default.a.forwardRef(function (props, ref) {\n  var prefixCls = props.prefixCls,\n      className = props.className,\n      style = props.style,\n      title = props.title,\n      ariaId = props.ariaId,\n      footer = props.footer,\n      closable = props.closable,\n      closeIcon = props.closeIcon,\n      onClose = props.onClose,\n      children = props.children,\n      bodyStyle = props.bodyStyle,\n      bodyProps = props.bodyProps,\n      modalRender = props.modalRender,\n      onMouseDown = props.onMouseDown,\n      onMouseUp = props.onMouseUp,\n      holderRef = props.holderRef,\n      visible = props.visible,\n      forceRender = props.forceRender,\n      width = props.width,\n      height = props.height; // ================================= Refs =================================\n\n  var sentinelStartRef = Object(react["useRef"])();\n  var sentinelEndRef = Object(react["useRef"])();\n  react_default.a.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _sentinelStartRef$cur;\n\n        (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus();\n      },\n      changeActive: function changeActive(next) {\n        var _document = document,\n            activeElement = _document.activeElement;\n\n        if (next && activeElement === sentinelEndRef.current) {\n          sentinelStartRef.current.focus();\n        } else if (!next && activeElement === sentinelStartRef.current) {\n          sentinelEndRef.current.focus();\n        }\n      }\n    };\n  }); // ================================ Style =================================\n\n  var contentStyle = {};\n\n  if (width !== undefined) {\n    contentStyle.width = width;\n  }\n\n  if (height !== undefined) {\n    contentStyle.height = height;\n  } // ================================ Render ================================\n\n\n  var footerNode;\n\n  if (footer) {\n    footerNode = /*#__PURE__*/react_default.a.createElement("div", {\n      className: "".concat(prefixCls, "-footer")\n    }, footer);\n  }\n\n  var headerNode;\n\n  if (title) {\n    headerNode = /*#__PURE__*/react_default.a.createElement("div", {\n      className: "".concat(prefixCls, "-header")\n    }, /*#__PURE__*/react_default.a.createElement("div", {\n      className: "".concat(prefixCls, "-title"),\n      id: ariaId\n    }, title));\n  }\n\n  var closer;\n\n  if (closable) {\n    closer = /*#__PURE__*/react_default.a.createElement("button", {\n      type: "button",\n      onClick: onClose,\n      "aria-label": "Close",\n      className: "".concat(prefixCls, "-close")\n    }, closeIcon || /*#__PURE__*/react_default.a.createElement("span", {\n      className: "".concat(prefixCls, "-close-x")\n    }));\n  }\n\n  var content = /*#__PURE__*/react_default.a.createElement("div", {\n    className: "".concat(prefixCls, "-content")\n  }, closer, headerNode, /*#__PURE__*/react_default.a.createElement("div", Object(esm_extends["a" /* default */])({\n    className: "".concat(prefixCls, "-body"),\n    style: bodyStyle\n  }, bodyProps), children), footerNode);\n  return /*#__PURE__*/react_default.a.createElement("div", {\n    key: "dialog-element",\n    role: "dialog",\n    "aria-labelledby": title ? ariaId : null,\n    "aria-modal": "true",\n    ref: holderRef,\n    style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, style), contentStyle),\n    className: classnames_default()(prefixCls, className),\n    onMouseDown: onMouseDown,\n    onMouseUp: onMouseUp\n  }, /*#__PURE__*/react_default.a.createElement("div", {\n    tabIndex: 0,\n    ref: sentinelStartRef,\n    style: sentinelStyle,\n    "aria-hidden": "true"\n  }), /*#__PURE__*/react_default.a.createElement(MemoChildren, {\n    shouldUpdate: visible || forceRender\n  }, modalRender ? modalRender(content) : content), /*#__PURE__*/react_default.a.createElement("div", {\n    tabIndex: 0,\n    ref: sentinelEndRef,\n    style: sentinelStyle,\n    "aria-hidden": "true"\n  }));\n});\n\nif (false) {}\n\n/* harmony default export */ var Content_Panel = (Panel);\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/Dialog/Content/index.js\n\n\n\n\n\n\n\n\n\nvar Content = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var prefixCls = props.prefixCls,\n      title = props.title,\n      style = props.style,\n      className = props.className,\n      visible = props.visible,\n      forceRender = props.forceRender,\n      destroyOnClose = props.destroyOnClose,\n      motionName = props.motionName,\n      ariaId = props.ariaId,\n      onVisibleChanged = props.onVisibleChanged,\n      mousePosition = props.mousePosition;\n  var dialogRef = Object(react["useRef"])(); // ============================= Style ==============================\n\n  var _React$useState = react["useState"](),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      transformOrigin = _React$useState2[0],\n      setTransformOrigin = _React$useState2[1];\n\n  var contentStyle = {};\n\n  if (transformOrigin) {\n    contentStyle.transformOrigin = transformOrigin;\n  }\n\n  function onPrepare() {\n    var elementOffset = offset(dialogRef.current);\n    setTransformOrigin(mousePosition ? "".concat(mousePosition.x - elementOffset.left, "px ").concat(mousePosition.y - elementOffset.top, "px") : \'\');\n  } // ============================= Render =============================\n\n\n  return /*#__PURE__*/react["createElement"](es["b" /* default */], {\n    visible: visible,\n    onVisibleChanged: onVisibleChanged,\n    onAppearPrepare: onPrepare,\n    onEnterPrepare: onPrepare,\n    forceRender: forceRender,\n    motionName: motionName,\n    removeOnLeave: destroyOnClose,\n    ref: dialogRef\n  }, function (_ref, motionRef) {\n    var motionClassName = _ref.className,\n        motionStyle = _ref.style;\n    return /*#__PURE__*/react["createElement"](Content_Panel, Object(esm_extends["a" /* default */])({}, props, {\n      ref: ref,\n      title: title,\n      ariaId: ariaId,\n      prefixCls: prefixCls,\n      holderRef: motionRef,\n      style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, motionStyle), style), contentStyle),\n      className: classnames_default()(className, motionClassName)\n    }));\n  });\n});\nContent.displayName = \'Content\';\n/* harmony default export */ var Dialog_Content = (Content);\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/Dialog/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Dialog(props) {\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? \'rc-dialog\' : _props$prefixCls,\n      zIndex = props.zIndex,\n      _props$visible = props.visible,\n      visible = _props$visible === void 0 ? false : _props$visible,\n      _props$keyboard = props.keyboard,\n      keyboard = _props$keyboard === void 0 ? true : _props$keyboard,\n      _props$focusTriggerAf = props.focusTriggerAfterClose,\n      focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf,\n      scrollLocker = props.scrollLocker,\n      wrapStyle = props.wrapStyle,\n      wrapClassName = props.wrapClassName,\n      wrapProps = props.wrapProps,\n      onClose = props.onClose,\n      afterClose = props.afterClose,\n      transitionName = props.transitionName,\n      animation = props.animation,\n      _props$closable = props.closable,\n      closable = _props$closable === void 0 ? true : _props$closable,\n      _props$mask = props.mask,\n      mask = _props$mask === void 0 ? true : _props$mask,\n      maskTransitionName = props.maskTransitionName,\n      maskAnimation = props.maskAnimation,\n      _props$maskClosable = props.maskClosable,\n      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,\n      maskStyle = props.maskStyle,\n      maskProps = props.maskProps,\n      rootClassName = props.rootClassName;\n  var lastOutSideActiveElementRef = Object(react["useRef"])();\n  var wrapperRef = Object(react["useRef"])();\n  var contentRef = Object(react["useRef"])();\n\n  var _React$useState = react["useState"](visible),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      animatedVisible = _React$useState2[0],\n      setAnimatedVisible = _React$useState2[1]; // ========================== Init ==========================\n\n\n  var ariaId = Object(useId["a" /* default */])(); // ========================= Events =========================\n\n  function onDialogVisibleChanged(newVisible) {\n    if (newVisible) {\n      // Try to focus\n      if (!Object(contains["a" /* default */])(wrapperRef.current, document.activeElement)) {\n        var _contentRef$current;\n\n        lastOutSideActiveElementRef.current = document.activeElement;\n        (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.focus();\n      }\n    } else {\n      // Clean up scroll bar & focus back\n      setAnimatedVisible(false);\n\n      if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {\n        try {\n          lastOutSideActiveElementRef.current.focus({\n            preventScroll: true\n          });\n        } catch (e) {// Do nothing\n        }\n\n        lastOutSideActiveElementRef.current = null;\n      } // Trigger afterClose only when change visible from true to false\n\n\n      if (animatedVisible) {\n        afterClose === null || afterClose === void 0 ? void 0 : afterClose();\n      }\n    }\n  }\n\n  function onInternalClose(e) {\n    onClose === null || onClose === void 0 ? void 0 : onClose(e);\n  } // >>> Content\n\n\n  var contentClickRef = Object(react["useRef"])(false);\n  var contentTimeoutRef = Object(react["useRef"])(); // We need record content click incase content popup out of dialog\n\n  var onContentMouseDown = function onContentMouseDown() {\n    clearTimeout(contentTimeoutRef.current);\n    contentClickRef.current = true;\n  };\n\n  var onContentMouseUp = function onContentMouseUp() {\n    contentTimeoutRef.current = setTimeout(function () {\n      contentClickRef.current = false;\n    });\n  }; // >>> Wrapper\n  // Close only when element not on dialog\n\n\n  var onWrapperClick = null;\n\n  if (maskClosable) {\n    onWrapperClick = function onWrapperClick(e) {\n      if (contentClickRef.current) {\n        contentClickRef.current = false;\n      } else if (wrapperRef.current === e.target) {\n        onInternalClose(e);\n      }\n    };\n  }\n\n  function onWrapperKeyDown(e) {\n    if (keyboard && e.keyCode === KeyCode["a" /* default */].ESC) {\n      e.stopPropagation();\n      onInternalClose(e);\n      return;\n    } // keep focus inside dialog\n\n\n    if (visible) {\n      if (e.keyCode === KeyCode["a" /* default */].TAB) {\n        contentRef.current.changeActive(!e.shiftKey);\n      }\n    }\n  } // ========================= Effect =========================\n\n\n  Object(react["useEffect"])(function () {\n    if (visible) {\n      setAnimatedVisible(true);\n    }\n\n    return function () {};\n  }, [visible]); // Remove direct should also check the scroll bar update\n\n  Object(react["useEffect"])(function () {\n    return function () {\n      clearTimeout(contentTimeoutRef.current);\n    };\n  }, []);\n  Object(react["useEffect"])(function () {\n    if (animatedVisible) {\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();\n      return scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock;\n    }\n\n    return function () {};\n  }, [animatedVisible, scrollLocker]); // ========================= Render =========================\n\n  return /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({\n    className: classnames_default()("".concat(prefixCls, "-root"), rootClassName)\n  }, Object(pickAttrs["a" /* default */])(props, {\n    data: true\n  })), /*#__PURE__*/react["createElement"](Mask, {\n    prefixCls: prefixCls,\n    visible: mask && visible,\n    motionName: getMotionName(prefixCls, maskTransitionName, maskAnimation),\n    style: Object(objectSpread2["a" /* default */])({\n      zIndex: zIndex\n    }, maskStyle),\n    maskProps: maskProps\n  }), /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({\n    tabIndex: -1,\n    onKeyDown: onWrapperKeyDown,\n    className: classnames_default()("".concat(prefixCls, "-wrap"), wrapClassName),\n    ref: wrapperRef,\n    onClick: onWrapperClick,\n    style: Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({\n      zIndex: zIndex\n    }, wrapStyle), {}, {\n      display: !animatedVisible ? \'none\' : null\n    })\n  }, wrapProps), /*#__PURE__*/react["createElement"](Dialog_Content, Object(esm_extends["a" /* default */])({}, props, {\n    onMouseDown: onContentMouseDown,\n    onMouseUp: onContentMouseUp,\n    ref: contentRef,\n    closable: closable,\n    ariaId: ariaId,\n    prefixCls: prefixCls,\n    visible: visible,\n    onClose: onInternalClose,\n    onVisibleChanged: onDialogVisibleChanged,\n    motionName: getMotionName(prefixCls, transitionName, animation)\n  }))));\n}\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/DialogWrap.js\n\n\n\n\n // fix issue #10656\n\n/*\n * getContainer remarks\n * Custom container should not be return, because in the Portal component, it will remove the\n * return container element here, if the custom container is the only child of it\'s component,\n * like issue #10656, It will has a conflict with removeChild method in react-dom.\n * So here should add a child (div element) to custom container.\n * */\n\nvar DialogWrap_DialogWrap = function DialogWrap(props) {\n  var visible = props.visible,\n      getContainer = props.getContainer,\n      forceRender = props.forceRender,\n      _props$destroyOnClose = props.destroyOnClose,\n      destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose,\n      _afterClose = props.afterClose;\n\n  var _React$useState = react["useState"](visible),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      animatedVisible = _React$useState2[0],\n      setAnimatedVisible = _React$useState2[1];\n\n  react["useEffect"](function () {\n    if (visible) {\n      setAnimatedVisible(true);\n    }\n  }, [visible]); // \u6e32\u67d3\u5728\u5f53\u524d dom \u91cc\uff1b\n\n  if (getContainer === false) {\n    return /*#__PURE__*/react["createElement"](Dialog, Object(esm_extends["a" /* default */])({}, props, {\n      getOpenCount: function getOpenCount() {\n        return 2;\n      } // \u4e0d\u5bf9 body \u505a\u4efb\u4f55\u64cd\u4f5c\u3002\u3002\n\n    }));\n  } // Destroy on close will remove wrapped div\n\n\n  if (!forceRender && destroyOnClose && !animatedVisible) {\n    return null;\n  }\n\n  return /*#__PURE__*/react["createElement"](PortalWrapper["a" /* default */], {\n    visible: visible,\n    forceRender: forceRender,\n    getContainer: getContainer\n  }, function (childProps) {\n    return /*#__PURE__*/react["createElement"](Dialog, Object(esm_extends["a" /* default */])({}, props, {\n      destroyOnClose: destroyOnClose,\n      afterClose: function afterClose() {\n        _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();\n        setAnimatedVisible(false);\n      }\n    }, childProps));\n  });\n};\n\nDialogWrap_DialogWrap.displayName = \'Dialog\';\n/* harmony default export */ var es_DialogWrap = (DialogWrap_DialogWrap);\n// CONCATENATED MODULE: ./node_modules/rc-dialog/es/index.js\n\n\n\n/* harmony default export */ var rc_dialog_es = __webpack_exports__["a"] = (es_DialogWrap);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///hzQT\n')},lSo8:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/umi/node_modules/react/index.js\nvar react = __webpack_require__("kM82");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/css.js\nvar css = __webpack_require__("y0+3");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js\nvar useMergedState = __webpack_require__("6cGi");\n\n// EXTERNAL MODULE: ./node_modules/rc-dialog/es/index.js + 7 modules\nvar es = __webpack_require__("hzQT");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/addEventListener.js\nvar addEventListener = __webpack_require__("zT1h");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/raf.js\nvar raf = __webpack_require__("wgJM");\n\n// CONCATENATED MODULE: ./node_modules/rc-image/es/hooks/useFrameSetState.js\n\n\n\n\nfunction useFrameSetState(initial) {\n  var frame = react["useRef"](null);\n\n  var _React$useState = react["useState"](initial),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var queue = react["useRef"]([]);\n\n  var setFrameState = function setFrameState(newState) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = Object(raf["a" /* default */])(function () {\n        setState(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, memoState), queueState);\n          });\n          frame.current = null;\n          return memoState;\n        });\n      });\n    }\n\n    queue.current.push(newState);\n  };\n\n  react["useEffect"](function () {\n    return function () {\n      return frame.current && raf["a" /* default */].cancel(frame.current);\n    };\n  }, []);\n  return [state, setFrameState];\n}\n// CONCATENATED MODULE: ./node_modules/rc-image/es/getFixScaleEleTransPosition.js\n\n\n\n\nfunction fixPoint(key, start, width, clientWidth) {\n  var startAddWidth = start + width;\n  var offsetStart = (width - clientWidth) / 2;\n\n  if (width > clientWidth) {\n    if (start > 0) {\n      return Object(defineProperty["a" /* default */])({}, key, offsetStart);\n    }\n\n    if (start < 0 && startAddWidth < clientWidth) {\n      return Object(defineProperty["a" /* default */])({}, key, -offsetStart);\n    }\n  } else if (start < 0 || startAddWidth > clientWidth) {\n    return Object(defineProperty["a" /* default */])({}, key, start < 0 ? offsetStart : -offsetStart);\n  }\n\n  return {};\n}\n/**\n * Fix positon x,y point when\n *\n * Ele width && height < client\n * - Back origin\n *\n * - Ele width | height > clientWidth | clientHeight\n * - left | top > 0 -> Back 0\n * - left | top + width | height < clientWidth | clientHeight -> Back left | top + width | height === clientWidth | clientHeight\n *\n * Regardless of other\n */\n\n\nfunction getFixScaleEleTransPosition(width, height, left, top) {\n  var _getClientSize = Object(css["a" /* getClientSize */])(),\n      clientWidth = _getClientSize.width,\n      clientHeight = _getClientSize.height;\n\n  var fixPos = null;\n\n  if (width <= clientWidth && height <= clientHeight) {\n    fixPos = {\n      x: 0,\n      y: 0\n    };\n  } else if (width > clientWidth || height > clientHeight) {\n    fixPos = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, fixPoint(\'x\', left, width, clientWidth)), fixPoint(\'y\', top, height, clientHeight));\n  }\n\n  return fixPos;\n}\n// CONCATENATED MODULE: ./node_modules/rc-image/es/PreviewGroup.js\n\n\n\n\nvar _excluded = ["visible", "onVisibleChange", "getContainer", "current", "countRender"];\n\n\n\n\n/* istanbul ignore next */\n\nvar context = /*#__PURE__*/react["createContext"]({\n  previewUrls: new Map(),\n  setPreviewUrls: function setPreviewUrls() {\n    return null;\n  },\n  current: null,\n  setCurrent: function setCurrent() {\n    return null;\n  },\n  setShowPreview: function setShowPreview() {\n    return null;\n  },\n  setMousePosition: function setMousePosition() {\n    return null;\n  },\n  registerImage: function registerImage() {\n    return function () {\n      return null;\n    };\n  },\n  rootClassName: \'\'\n});\nvar Provider = context.Provider;\n\nvar PreviewGroup_Group = function Group(_ref) {\n  var _ref$previewPrefixCls = _ref.previewPrefixCls,\n      previewPrefixCls = _ref$previewPrefixCls === void 0 ? \'rc-image-preview\' : _ref$previewPrefixCls,\n      children = _ref.children,\n      _ref$icons = _ref.icons,\n      icons = _ref$icons === void 0 ? {} : _ref$icons,\n      preview = _ref.preview;\n\n  var _ref2 = Object(esm_typeof["a" /* default */])(preview) === \'object\' ? preview : {},\n      _ref2$visible = _ref2.visible,\n      previewVisible = _ref2$visible === void 0 ? undefined : _ref2$visible,\n      _ref2$onVisibleChange = _ref2.onVisibleChange,\n      onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? undefined : _ref2$onVisibleChange,\n      _ref2$getContainer = _ref2.getContainer,\n      getContainer = _ref2$getContainer === void 0 ? undefined : _ref2$getContainer,\n      _ref2$current = _ref2.current,\n      currentIndex = _ref2$current === void 0 ? 0 : _ref2$current,\n      _ref2$countRender = _ref2.countRender,\n      countRender = _ref2$countRender === void 0 ? undefined : _ref2$countRender,\n      dialogProps = Object(objectWithoutProperties["a" /* default */])(_ref2, _excluded);\n\n  var _useState = Object(react["useState"])(new Map()),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      previewUrls = _useState2[0],\n      setPreviewUrls = _useState2[1];\n\n  var _useState3 = Object(react["useState"])(),\n      _useState4 = Object(slicedToArray["a" /* default */])(_useState3, 2),\n      current = _useState4[0],\n      setCurrent = _useState4[1];\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(!!previewVisible, {\n    value: previewVisible,\n    onChange: onPreviewVisibleChange\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      isShowPreview = _useMergedState2[0],\n      setShowPreview = _useMergedState2[1];\n\n  var _useState5 = Object(react["useState"])(null),\n      _useState6 = Object(slicedToArray["a" /* default */])(_useState5, 2),\n      mousePosition = _useState6[0],\n      setMousePosition = _useState6[1];\n\n  var isControlled = previewVisible !== undefined;\n  var previewUrlsKeys = Array.from(previewUrls.keys());\n  var currentControlledKey = previewUrlsKeys[currentIndex];\n  var canPreviewUrls = new Map(Array.from(previewUrls).filter(function (_ref3) {\n    var _ref4 = Object(slicedToArray["a" /* default */])(_ref3, 2),\n        canPreview = _ref4[1].canPreview;\n\n    return !!canPreview;\n  }).map(function (_ref5) {\n    var _ref6 = Object(slicedToArray["a" /* default */])(_ref5, 2),\n        id = _ref6[0],\n        url = _ref6[1].url;\n\n    return [id, url];\n  }));\n\n  var registerImage = function registerImage(id, url) {\n    var canPreview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var unRegister = function unRegister() {\n      setPreviewUrls(function (oldPreviewUrls) {\n        var clonePreviewUrls = new Map(oldPreviewUrls);\n        var deleteResult = clonePreviewUrls["delete"](id);\n        return deleteResult ? clonePreviewUrls : oldPreviewUrls;\n      });\n    };\n\n    setPreviewUrls(function (oldPreviewUrls) {\n      return new Map(oldPreviewUrls).set(id, {\n        url: url,\n        canPreview: canPreview\n      });\n    });\n    return unRegister;\n  };\n\n  var onPreviewClose = function onPreviewClose(e) {\n    e.stopPropagation();\n    setShowPreview(false);\n    setMousePosition(null);\n  };\n\n  react["useEffect"](function () {\n    setCurrent(currentControlledKey);\n  }, [currentControlledKey]);\n  react["useEffect"](function () {\n    if (!isShowPreview && isControlled) {\n      setCurrent(currentControlledKey);\n    }\n  }, [currentControlledKey, isControlled, isShowPreview]);\n  return /*#__PURE__*/react["createElement"](Provider, {\n    value: {\n      isPreviewGroup: true,\n      previewUrls: canPreviewUrls,\n      setPreviewUrls: setPreviewUrls,\n      current: current,\n      setCurrent: setCurrent,\n      setShowPreview: setShowPreview,\n      setMousePosition: setMousePosition,\n      registerImage: registerImage\n    }\n  }, children, /*#__PURE__*/react["createElement"](es_Preview, Object(esm_extends["a" /* default */])({\n    "aria-hidden": !isShowPreview,\n    visible: isShowPreview,\n    prefixCls: previewPrefixCls,\n    onClose: onPreviewClose,\n    mousePosition: mousePosition,\n    src: canPreviewUrls.get(current),\n    icons: icons,\n    getContainer: getContainer,\n    countRender: countRender\n  }, dialogProps)));\n};\n\n/* harmony default export */ var PreviewGroup = (PreviewGroup_Group);\n// CONCATENATED MODULE: ./node_modules/rc-image/es/Preview.js\n\n\n\n\n\nvar Preview_excluded = ["prefixCls", "src", "alt", "onClose", "afterClose", "visible", "icons", "rootClassName", "countRender"];\n\n\n\n\n\n\n\n\n\nvar useState = react["useState"],\n    useEffect = react["useEffect"],\n    useCallback = react["useCallback"],\n    useRef = react["useRef"],\n    useContext = react["useContext"];\nvar initialPosition = {\n  x: 0,\n  y: 0\n};\n\nvar Preview_Preview = function Preview(props) {\n  var _countRender;\n\n  var prefixCls = props.prefixCls,\n      src = props.src,\n      alt = props.alt,\n      onClose = props.onClose,\n      afterClose = props.afterClose,\n      visible = props.visible,\n      _props$icons = props.icons,\n      icons = _props$icons === void 0 ? {} : _props$icons,\n      rootClassName = props.rootClassName,\n      countRender = props.countRender,\n      restProps = Object(objectWithoutProperties["a" /* default */])(props, Preview_excluded);\n\n  var rotateLeft = icons.rotateLeft,\n      rotateRight = icons.rotateRight,\n      zoomIn = icons.zoomIn,\n      zoomOut = icons.zoomOut,\n      close = icons.close,\n      left = icons.left,\n      right = icons.right;\n\n  var _useState = useState(1),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      scale = _useState2[0],\n      setScale = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = Object(slicedToArray["a" /* default */])(_useState3, 2),\n      rotate = _useState4[0],\n      setRotate = _useState4[1];\n\n  var _useFrameSetState = useFrameSetState(initialPosition),\n      _useFrameSetState2 = Object(slicedToArray["a" /* default */])(_useFrameSetState, 2),\n      position = _useFrameSetState2[0],\n      setPosition = _useFrameSetState2[1];\n\n  var imgRef = useRef();\n  var originPositionRef = useRef({\n    originX: 0,\n    originY: 0,\n    deltaX: 0,\n    deltaY: 0\n  });\n\n  var _useState5 = useState(false),\n      _useState6 = Object(slicedToArray["a" /* default */])(_useState5, 2),\n      isMoving = _useState6[0],\n      setMoving = _useState6[1];\n\n  var _useContext = useContext(context),\n      previewUrls = _useContext.previewUrls,\n      current = _useContext.current,\n      isPreviewGroup = _useContext.isPreviewGroup,\n      setCurrent = _useContext.setCurrent;\n\n  var previewGroupCount = previewUrls.size;\n  var previewUrlsKeys = Array.from(previewUrls.keys());\n  var currentPreviewIndex = previewUrlsKeys.indexOf(current);\n  var combinationSrc = isPreviewGroup ? previewUrls.get(current) : src;\n  var showLeftOrRightSwitches = isPreviewGroup && previewGroupCount > 1;\n\n  var _useState7 = useState({\n    wheelDirection: 0\n  }),\n      _useState8 = Object(slicedToArray["a" /* default */])(_useState7, 2),\n      lastWheelZoomDirection = _useState8[0],\n      setLastWheelZoomDirection = _useState8[1];\n\n  var onAfterClose = function onAfterClose() {\n    setScale(1);\n    setRotate(0);\n    setPosition(initialPosition);\n  };\n\n  var onZoomIn = function onZoomIn() {\n    setScale(function (value) {\n      return value + 1;\n    });\n    setPosition(initialPosition);\n  };\n\n  var onZoomOut = function onZoomOut() {\n    if (scale > 1) {\n      setScale(function (value) {\n        return value - 1;\n      });\n    }\n\n    setPosition(initialPosition);\n  };\n\n  var onRotateRight = function onRotateRight() {\n    setRotate(function (value) {\n      return value + 90;\n    });\n  };\n\n  var onRotateLeft = function onRotateLeft() {\n    setRotate(function (value) {\n      return value - 90;\n    });\n  };\n\n  var onSwitchLeft = function onSwitchLeft(event) {\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n\n    if (currentPreviewIndex > 0) {\n      setCurrent(previewUrlsKeys[currentPreviewIndex - 1]);\n    }\n  };\n\n  var onSwitchRight = function onSwitchRight(event) {\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n\n    if (currentPreviewIndex < previewGroupCount - 1) {\n      setCurrent(previewUrlsKeys[currentPreviewIndex + 1]);\n    }\n  };\n\n  var wrapClassName = classnames_default()(Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-moving"), isMoving));\n  var toolClassName = "".concat(prefixCls, "-operations-operation");\n  var iconClassName = "".concat(prefixCls, "-operations-icon");\n  var tools = [{\n    icon: close,\n    onClick: onClose,\n    type: \'close\'\n  }, {\n    icon: zoomIn,\n    onClick: onZoomIn,\n    type: \'zoomIn\'\n  }, {\n    icon: zoomOut,\n    onClick: onZoomOut,\n    type: \'zoomOut\',\n    disabled: scale === 1\n  }, {\n    icon: rotateRight,\n    onClick: onRotateRight,\n    type: \'rotateRight\'\n  }, {\n    icon: rotateLeft,\n    onClick: onRotateLeft,\n    type: \'rotateLeft\'\n  }];\n\n  var onMouseUp = function onMouseUp() {\n    if (visible && isMoving) {\n      var width = imgRef.current.offsetWidth * scale;\n      var height = imgRef.current.offsetHeight * scale; // eslint-disable-next-line @typescript-eslint/no-shadow\n\n      var _imgRef$current$getBo = imgRef.current.getBoundingClientRect(),\n          _left = _imgRef$current$getBo.left,\n          top = _imgRef$current$getBo.top;\n\n      var isRotate = rotate % 180 !== 0;\n      setMoving(false);\n      var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, _left, top);\n\n      if (fixState) {\n        setPosition(Object(objectSpread2["a" /* default */])({}, fixState));\n      }\n    }\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    // Only allow main button\n    if (event.button !== 0) return;\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n    originPositionRef.current.deltaX = event.pageX - position.x;\n    originPositionRef.current.deltaY = event.pageY - position.y;\n    originPositionRef.current.originX = position.x;\n    originPositionRef.current.originY = position.y;\n    setMoving(true);\n  };\n\n  var onMouseMove = function onMouseMove(event) {\n    if (visible && isMoving) {\n      setPosition({\n        x: event.pageX - originPositionRef.current.deltaX,\n        y: event.pageY - originPositionRef.current.deltaY\n      });\n    }\n  };\n\n  var onWheelMove = function onWheelMove(event) {\n    if (!visible) return;\n    event.preventDefault();\n    var wheelDirection = event.deltaY;\n    setLastWheelZoomDirection({\n      wheelDirection: wheelDirection\n    });\n  };\n\n  var onKeyDown = useCallback(function (event) {\n    if (!visible || !showLeftOrRightSwitches) return;\n    event.preventDefault();\n\n    if (event.keyCode === KeyCode["a" /* default */].LEFT) {\n      if (currentPreviewIndex > 0) {\n        setCurrent(previewUrlsKeys[currentPreviewIndex - 1]);\n      }\n    } else if (event.keyCode === KeyCode["a" /* default */].RIGHT) {\n      if (currentPreviewIndex < previewGroupCount - 1) {\n        setCurrent(previewUrlsKeys[currentPreviewIndex + 1]);\n      }\n    }\n  }, [currentPreviewIndex, previewGroupCount, previewUrlsKeys, setCurrent, showLeftOrRightSwitches, visible]);\n\n  var onDoubleClick = function onDoubleClick() {\n    if (visible) {\n      if (scale !== 1) {\n        setScale(1);\n      }\n\n      if (position.x !== initialPosition.x || position.y !== initialPosition.y) {\n        setPosition(initialPosition);\n      }\n    }\n  };\n\n  useEffect(function () {\n    var wheelDirection = lastWheelZoomDirection.wheelDirection;\n\n    if (wheelDirection > 0) {\n      onZoomOut();\n    } else if (wheelDirection < 0) {\n      onZoomIn();\n    }\n  }, [lastWheelZoomDirection]);\n  useEffect(function () {\n    var onTopMouseUpListener;\n    var onTopMouseMoveListener;\n    var onMouseUpListener = Object(addEventListener["a" /* default */])(window, \'mouseup\', onMouseUp, false);\n    var onMouseMoveListener = Object(addEventListener["a" /* default */])(window, \'mousemove\', onMouseMove, false);\n    var onScrollWheelListener = Object(addEventListener["a" /* default */])(window, \'wheel\', onWheelMove, {\n      passive: false\n    });\n    var onKeyDownListener = Object(addEventListener["a" /* default */])(window, \'keydown\', onKeyDown, false);\n\n    try {\n      // Resolve if in iframe lost event\n\n      /* istanbul ignore next */\n      if (window.top !== window.self) {\n        onTopMouseUpListener = Object(addEventListener["a" /* default */])(window.top, \'mouseup\', onMouseUp, false);\n        onTopMouseMoveListener = Object(addEventListener["a" /* default */])(window.top, \'mousemove\', onMouseMove, false);\n      }\n    } catch (error) {\n      /* istanbul ignore next */\n      Object(warning["c" /* warning */])(false, "[rc-image] ".concat(error));\n    }\n\n    return function () {\n      onMouseUpListener.remove();\n      onMouseMoveListener.remove();\n      onScrollWheelListener.remove();\n      onKeyDownListener.remove();\n      /* istanbul ignore next */\n\n      if (onTopMouseUpListener) onTopMouseUpListener.remove();\n      /* istanbul ignore next */\n\n      if (onTopMouseMoveListener) onTopMouseMoveListener.remove();\n    };\n  }, [visible, isMoving, onKeyDown]);\n  return /*#__PURE__*/react["createElement"](es["a" /* default */], Object(esm_extends["a" /* default */])({\n    transitionName: "zoom",\n    maskTransitionName: "fade",\n    closable: false,\n    keyboard: true,\n    prefixCls: prefixCls,\n    onClose: onClose,\n    afterClose: onAfterClose,\n    visible: visible,\n    wrapClassName: wrapClassName,\n    rootClassName: rootClassName\n  }, restProps), /*#__PURE__*/react["createElement"]("ul", {\n    className: "".concat(prefixCls, "-operations")\n  }, showLeftOrRightSwitches && /*#__PURE__*/react["createElement"]("li", {\n    className: "".concat(prefixCls, "-operations-progress")\n  }, (_countRender = countRender === null || countRender === void 0 ? void 0 : countRender(currentPreviewIndex + 1, previewGroupCount)) !== null && _countRender !== void 0 ? _countRender : "".concat(currentPreviewIndex + 1, " / ").concat(previewGroupCount)), tools.map(function (_ref) {\n    var icon = _ref.icon,\n        onClick = _ref.onClick,\n        type = _ref.type,\n        disabled = _ref.disabled;\n    return /*#__PURE__*/react["createElement"]("li", {\n      className: classnames_default()(toolClassName, Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-operations-operation-disabled"), !!disabled)),\n      onClick: onClick,\n      key: type\n    }, /*#__PURE__*/ /*#__PURE__*/react["isValidElement"](icon) ? /*#__PURE__*/react["cloneElement"](icon, {\n      className: iconClassName\n    }) : icon);\n  })), /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-img-wrapper"),\n    style: {\n      transform: "translate3d(".concat(position.x, "px, ").concat(position.y, "px, 0)")\n    }\n  }, /*#__PURE__*/react["createElement"]("img", {\n    onMouseDown: onMouseDown,\n    onDoubleClick: onDoubleClick,\n    ref: imgRef,\n    className: "".concat(prefixCls, "-img"),\n    src: combinationSrc,\n    alt: alt,\n    style: {\n      transform: "scale3d(".concat(scale, ", ").concat(scale, ", 1) rotate(").concat(rotate, "deg)")\n    }\n  })), showLeftOrRightSwitches && /*#__PURE__*/react["createElement"]("div", {\n    className: classnames_default()("".concat(prefixCls, "-switch-left"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-switch-left-disabled"), currentPreviewIndex === 0)),\n    onClick: onSwitchLeft\n  }, left), showLeftOrRightSwitches && /*#__PURE__*/react["createElement"]("div", {\n    className: classnames_default()("".concat(prefixCls, "-switch-right"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-switch-right-disabled"), currentPreviewIndex === previewGroupCount - 1)),\n    onClick: onSwitchRight\n  }, right));\n};\n\n/* harmony default export */ var es_Preview = (Preview_Preview);\n// CONCATENATED MODULE: ./node_modules/rc-image/es/Image.js\n\n\n\n\n\n\nvar Image_excluded = ["src", "alt", "onPreviewClose", "prefixCls", "previewPrefixCls", "placeholder", "fallback", "width", "height", "style", "preview", "className", "onClick", "onError", "wrapperClassName", "wrapperStyle", "rootClassName", "crossOrigin", "decoding", "loading", "referrerPolicy", "sizes", "srcSet", "useMap"],\n    _excluded2 = ["src", "visible", "onVisibleChange", "getContainer", "mask", "maskClassName", "icons"];\n\n\n\n\n\n\n\nvar uuid = 0;\n\nvar Image_ImageInternal = function ImageInternal(_ref) {\n  var imgSrc = _ref.src,\n      alt = _ref.alt,\n      onInitialPreviewClose = _ref.onPreviewClose,\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? \'rc-image\' : _ref$prefixCls,\n      _ref$previewPrefixCls = _ref.previewPrefixCls,\n      previewPrefixCls = _ref$previewPrefixCls === void 0 ? "".concat(prefixCls, "-preview") : _ref$previewPrefixCls,\n      placeholder = _ref.placeholder,\n      fallback = _ref.fallback,\n      width = _ref.width,\n      height = _ref.height,\n      style = _ref.style,\n      _ref$preview = _ref.preview,\n      preview = _ref$preview === void 0 ? true : _ref$preview,\n      className = _ref.className,\n      onClick = _ref.onClick,\n      onImageError = _ref.onError,\n      wrapperClassName = _ref.wrapperClassName,\n      wrapperStyle = _ref.wrapperStyle,\n      rootClassName = _ref.rootClassName,\n      crossOrigin = _ref.crossOrigin,\n      decoding = _ref.decoding,\n      loading = _ref.loading,\n      referrerPolicy = _ref.referrerPolicy,\n      sizes = _ref.sizes,\n      srcSet = _ref.srcSet,\n      useMap = _ref.useMap,\n      otherProps = Object(objectWithoutProperties["a" /* default */])(_ref, Image_excluded);\n\n  var isCustomPlaceholder = placeholder && placeholder !== true;\n\n  var _ref2 = Object(esm_typeof["a" /* default */])(preview) === \'object\' ? preview : {},\n      previewSrc = _ref2.src,\n      _ref2$visible = _ref2.visible,\n      previewVisible = _ref2$visible === void 0 ? undefined : _ref2$visible,\n      _ref2$onVisibleChange = _ref2.onVisibleChange,\n      onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? onInitialPreviewClose : _ref2$onVisibleChange,\n      _ref2$getContainer = _ref2.getContainer,\n      getPreviewContainer = _ref2$getContainer === void 0 ? undefined : _ref2$getContainer,\n      previewMask = _ref2.mask,\n      maskClassName = _ref2.maskClassName,\n      icons = _ref2.icons,\n      dialogProps = Object(objectWithoutProperties["a" /* default */])(_ref2, _excluded2);\n\n  var src = previewSrc !== null && previewSrc !== void 0 ? previewSrc : imgSrc;\n  var isControlled = previewVisible !== undefined;\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(!!previewVisible, {\n    value: previewVisible,\n    onChange: onPreviewVisibleChange\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      isShowPreview = _useMergedState2[0],\n      setShowPreview = _useMergedState2[1];\n\n  var _useState = Object(react["useState"])(isCustomPlaceholder ? \'loading\' : \'normal\'),\n      _useState2 = Object(slicedToArray["a" /* default */])(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var _useState3 = Object(react["useState"])(null),\n      _useState4 = Object(slicedToArray["a" /* default */])(_useState3, 2),\n      mousePosition = _useState4[0],\n      setMousePosition = _useState4[1];\n\n  var isError = status === \'error\';\n\n  var _React$useContext = react["useContext"](context),\n      isPreviewGroup = _React$useContext.isPreviewGroup,\n      setCurrent = _React$useContext.setCurrent,\n      setGroupShowPreview = _React$useContext.setShowPreview,\n      setGroupMousePosition = _React$useContext.setMousePosition,\n      registerImage = _React$useContext.registerImage;\n\n  var _React$useState = react["useState"](function () {\n    uuid += 1;\n    return uuid;\n  }),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 1),\n      currentId = _React$useState2[0];\n\n  var canPreview = preview && !isError;\n  var isLoaded = react["useRef"](false);\n\n  var onLoad = function onLoad() {\n    setStatus(\'normal\');\n  };\n\n  var onError = function onError(e) {\n    if (onImageError) {\n      onImageError(e);\n    }\n\n    setStatus(\'error\');\n  };\n\n  var onPreview = function onPreview(e) {\n    if (!isControlled) {\n      var _getOffset = Object(css["b" /* getOffset */])(e.target),\n          left = _getOffset.left,\n          top = _getOffset.top;\n\n      if (isPreviewGroup) {\n        setCurrent(currentId);\n        setGroupMousePosition({\n          x: left,\n          y: top\n        });\n      } else {\n        setMousePosition({\n          x: left,\n          y: top\n        });\n      }\n    }\n\n    if (isPreviewGroup) {\n      setGroupShowPreview(true);\n    } else {\n      setShowPreview(true);\n    }\n\n    if (onClick) onClick(e);\n  };\n\n  var onPreviewClose = function onPreviewClose(e) {\n    e.stopPropagation();\n    setShowPreview(false);\n\n    if (!isControlled) {\n      setMousePosition(null);\n    }\n  };\n\n  var getImgRef = function getImgRef(img) {\n    isLoaded.current = false;\n    if (status !== \'loading\') return;\n\n    if ((img === null || img === void 0 ? void 0 : img.complete) && (img.naturalWidth || img.naturalHeight)) {\n      isLoaded.current = true;\n      onLoad();\n    }\n  }; // Keep order start\n  // Resolve https://github.com/ant-design/ant-design/issues/28881\n  // Only need unRegister when component unMount\n\n\n  react["useEffect"](function () {\n    var unRegister = registerImage(currentId, src);\n    return unRegister;\n  }, []);\n  react["useEffect"](function () {\n    registerImage(currentId, src, canPreview);\n  }, [src, canPreview]); // Keep order end\n\n  react["useEffect"](function () {\n    if (isError) {\n      setStatus(\'normal\');\n    }\n\n    if (isCustomPlaceholder && !isLoaded.current) {\n      setStatus(\'loading\');\n    }\n  }, [imgSrc]);\n  var wrapperClass = classnames_default()(prefixCls, wrapperClassName, rootClassName, Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-error"), isError));\n  var mergedSrc = isError && fallback ? fallback : src;\n  var imgCommonProps = {\n    crossOrigin: crossOrigin,\n    decoding: decoding,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    sizes: sizes,\n    srcSet: srcSet,\n    useMap: useMap,\n    alt: alt,\n    className: classnames_default()("".concat(prefixCls, "-img"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-img-placeholder"), placeholder === true), className),\n    style: Object(objectSpread2["a" /* default */])({\n      height: height\n    }, style)\n  };\n  return /*#__PURE__*/react["createElement"](react["Fragment"], null, /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({}, otherProps, {\n    className: wrapperClass,\n    onClick: canPreview ? onPreview : onClick,\n    style: Object(objectSpread2["a" /* default */])({\n      width: width,\n      height: height\n    }, wrapperStyle)\n  }), /*#__PURE__*/react["createElement"]("img", Object(esm_extends["a" /* default */])({}, imgCommonProps, {\n    ref: getImgRef\n  }, isError && fallback ? {\n    src: fallback\n  } : {\n    onLoad: onLoad,\n    onError: onError,\n    src: imgSrc\n  })), status === \'loading\' && /*#__PURE__*/react["createElement"]("div", {\n    "aria-hidden": "true",\n    className: "".concat(prefixCls, "-placeholder")\n  }, placeholder), previewMask && canPreview && /*#__PURE__*/react["createElement"]("div", {\n    className: classnames_default()("".concat(prefixCls, "-mask"), maskClassName)\n  }, previewMask)), !isPreviewGroup && canPreview && /*#__PURE__*/react["createElement"](es_Preview, Object(esm_extends["a" /* default */])({\n    "aria-hidden": !isShowPreview,\n    visible: isShowPreview,\n    prefixCls: previewPrefixCls,\n    onClose: onPreviewClose,\n    mousePosition: mousePosition,\n    src: mergedSrc,\n    alt: alt,\n    getContainer: getPreviewContainer,\n    icons: icons,\n    rootClassName: rootClassName\n  }, dialogProps)));\n};\n\nImage_ImageInternal.PreviewGroup = PreviewGroup;\nImage_ImageInternal.displayName = \'Image\';\n/* harmony default export */ var Image = (Image_ImageInternal);\n// CONCATENATED MODULE: ./node_modules/rc-image/es/index.js\n\n\n/* harmony default export */ var rc_image_es = __webpack_exports__["a"] = (Image);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///lSo8\n')},x1Ya:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("wx14");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("rePB");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("Ff2n");\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("VTBJ");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("1OyB");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("vuIU");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("Ji7U");\n/* harmony import */ var _babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("LK+K");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("kM82");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("TSYQ");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-extraneous-dependencies\n\n\n\n\nvar Checkbox = /*#__PURE__*/function (_Component) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(Checkbox, _Component);\n\n  var _super = Object(_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(Checkbox);\n\n  function Checkbox(props) {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(this, Checkbox);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onChange = _this$props.onChange;\n\n      if (disabled) {\n        return;\n      }\n\n      if (!(\'checked\' in _this.props)) {\n        _this.setState({\n          checked: e.target.checked\n        });\n      }\n\n      if (onChange) {\n        onChange({\n          target: Object(_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(Object(_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])({}, _this.props), {}, {\n            checked: e.target.checked\n          }),\n          stopPropagation: function stopPropagation() {\n            e.stopPropagation();\n          },\n          preventDefault: function preventDefault() {\n            e.preventDefault();\n          },\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.saveInput = function (node) {\n      _this.input = node;\n    };\n\n    var checked = \'checked\' in props ? props.checked : props.defaultChecked;\n    _this.state = {\n      checked: checked\n    };\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(Checkbox, [{\n    key: "focus",\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: "blur",\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          style = _this$props2.style,\n          name = _this$props2.name,\n          id = _this$props2.id,\n          type = _this$props2.type,\n          disabled = _this$props2.disabled,\n          readOnly = _this$props2.readOnly,\n          tabIndex = _this$props2.tabIndex,\n          onClick = _this$props2.onClick,\n          onFocus = _this$props2.onFocus,\n          onBlur = _this$props2.onBlur,\n          onKeyDown = _this$props2.onKeyDown,\n          onKeyPress = _this$props2.onKeyPress,\n          onKeyUp = _this$props2.onKeyUp,\n          autoFocus = _this$props2.autoFocus,\n          value = _this$props2.value,\n          required = _this$props2.required,\n          others = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(_this$props2, ["prefixCls", "className", "style", "name", "id", "type", "disabled", "readOnly", "tabIndex", "onClick", "onFocus", "onBlur", "onKeyDown", "onKeyPress", "onKeyUp", "autoFocus", "value", "required"]);\n\n      var globalProps = Object.keys(others).reduce(function (prev, key) {\n        if (key.substr(0, 5) === \'aria-\' || key.substr(0, 5) === \'data-\' || key === \'role\') {\n          // eslint-disable-next-line no-param-reassign\n          prev[key] = others[key];\n        }\n\n        return prev;\n      }, {});\n      var checked = this.state.checked;\n      var classString = classnames__WEBPACK_IMPORTED_MODULE_9___default()(prefixCls, className, (_classNames = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(_classNames, "".concat(prefixCls, "-checked"), checked), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("span", {\n        className: classString,\n        style: style\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("input", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({\n        name: name,\n        id: id,\n        type: type,\n        required: required,\n        readOnly: readOnly,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        className: "".concat(prefixCls, "-input"),\n        checked: !!checked,\n        onClick: onClick,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onKeyUp: onKeyUp,\n        onKeyDown: onKeyDown,\n        onKeyPress: onKeyPress,\n        onChange: this.handleChange,\n        autoFocus: autoFocus,\n        ref: this.saveInput,\n        value: value\n      }, globalProps)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("span", {\n        className: "".concat(prefixCls, "-inner")\n      }));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(props, state) {\n      if (\'checked\' in props) {\n        return Object(_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(Object(_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])({}, state), {}, {\n          checked: props.checked\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return Checkbox;\n}(react__WEBPACK_IMPORTED_MODULE_8__["Component"]);\n\nCheckbox.defaultProps = {\n  prefixCls: \'rc-checkbox\',\n  className: \'\',\n  style: {},\n  type: \'checkbox\',\n  defaultChecked: false,\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  onChange: function onChange() {},\n  onKeyDown: function onKeyDown() {},\n  onKeyPress: function onKeyPress() {},\n  onKeyUp: function onKeyUp() {}\n};\n/* harmony default export */ __webpack_exports__["a"] = (Checkbox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtY2hlY2tib3gvZXMvaW5kZXguanM/Yzc1NiJdLCJuYW1lcyI6WyJDaGVja2JveCIsIl9Db21wb25lbnQiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJwcm9wcyIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiY2FsbCIsImhhbmRsZUNoYW5nZSIsImUiLCJfdGhpcyRwcm9wcyIsImRpc2FibGVkIiwib25DaGFuZ2UiLCJzZXRTdGF0ZSIsImNoZWNrZWQiLCJ0YXJnZXQiLCJfb2JqZWN0U3ByZWFkIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJuYXRpdmVFdmVudCIsInNhdmVJbnB1dCIsIm5vZGUiLCJpbnB1dCIsImRlZmF1bHRDaGVja2VkIiwic3RhdGUiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImZvY3VzIiwiYmx1ciIsInJlbmRlciIsIl9jbGFzc05hbWVzIiwiX3RoaXMkcHJvcHMyIiwicHJlZml4Q2xzIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJuYW1lIiwiaWQiLCJ0eXBlIiwicmVhZE9ubHkiLCJ0YWJJbmRleCIsIm9uQ2xpY2siLCJvbkZvY3VzIiwib25CbHVyIiwib25LZXlEb3duIiwib25LZXlQcmVzcyIsIm9uS2V5VXAiLCJhdXRvRm9jdXMiLCJyZXF1aXJlZCIsIm90aGVycyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImdsb2JhbFByb3BzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInByZXYiLCJzdWJzdHIiLCJjbGFzc1N0cmluZyIsImNsYXNzTmFtZXMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25jYXQiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kcyIsInJlZiIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FFQTs7QUFDQTtBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxhQUFhLFVBQVVDLFVBQVYsRUFBc0I7QUFDaERDLDZGQUFTLENBQUNGLFFBQUQsRUFBV0MsVUFBWCxDQUFUOztBQUVBLE1BQUlFLE1BQU0sR0FBR0MsOEZBQVksQ0FBQ0osUUFBRCxDQUF6Qjs7QUFFQSxXQUFTQSxRQUFULENBQWtCSyxLQUFsQixFQUF5QjtBQUN2QixRQUFJQyxLQUFKOztBQUVBQyxxR0FBZSxDQUFDLElBQUQsRUFBT1AsUUFBUCxDQUFmOztBQUVBTSxTQUFLLEdBQUdILE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLElBQVosRUFBa0JILEtBQWxCLENBQVI7O0FBRUFDLFNBQUssQ0FBQ0csWUFBTixHQUFxQixVQUFVQyxDQUFWLEVBQWE7QUFDaEMsVUFBSUMsV0FBVyxHQUFHTCxLQUFLLENBQUNELEtBQXhCO0FBQUEsVUFDSU8sUUFBUSxHQUFHRCxXQUFXLENBQUNDLFFBRDNCO0FBQUEsVUFFSUMsUUFBUSxHQUFHRixXQUFXLENBQUNFLFFBRjNCOztBQUlBLFVBQUlELFFBQUosRUFBYztBQUNaO0FBQ0Q7O0FBRUQsVUFBSSxFQUFFLGFBQWFOLEtBQUssQ0FBQ0QsS0FBckIsQ0FBSixFQUFpQztBQUMvQkMsYUFBSyxDQUFDUSxRQUFOLENBQWU7QUFDYkMsaUJBQU8sRUFBRUwsQ0FBQyxDQUFDTSxNQUFGLENBQVNEO0FBREwsU0FBZjtBQUdEOztBQUVELFVBQUlGLFFBQUosRUFBYztBQUNaQSxnQkFBUSxDQUFDO0FBQ1BHLGdCQUFNLEVBQUVDLGdHQUFhLENBQUNBLGdHQUFhLENBQUMsRUFBRCxFQUFLWCxLQUFLLENBQUNELEtBQVgsQ0FBZCxFQUFpQyxFQUFqQyxFQUFxQztBQUN4RFUsbUJBQU8sRUFBRUwsQ0FBQyxDQUFDTSxNQUFGLENBQVNEO0FBRHNDLFdBQXJDLENBRGQ7QUFJUEcseUJBQWUsRUFBRSxTQUFTQSxlQUFULEdBQTJCO0FBQzFDUixhQUFDLENBQUNRLGVBQUY7QUFDRCxXQU5NO0FBT1BDLHdCQUFjLEVBQUUsU0FBU0EsY0FBVCxHQUEwQjtBQUN4Q1QsYUFBQyxDQUFDUyxjQUFGO0FBQ0QsV0FUTTtBQVVQQyxxQkFBVyxFQUFFVixDQUFDLENBQUNVO0FBVlIsU0FBRCxDQUFSO0FBWUQ7QUFDRixLQTdCRDs7QUErQkFkLFNBQUssQ0FBQ2UsU0FBTixHQUFrQixVQUFVQyxJQUFWLEVBQWdCO0FBQ2hDaEIsV0FBSyxDQUFDaUIsS0FBTixHQUFjRCxJQUFkO0FBQ0QsS0FGRDs7QUFJQSxRQUFJUCxPQUFPLEdBQUcsYUFBYVYsS0FBYixHQUFxQkEsS0FBSyxDQUFDVSxPQUEzQixHQUFxQ1YsS0FBSyxDQUFDbUIsY0FBekQ7QUFDQWxCLFNBQUssQ0FBQ21CLEtBQU4sR0FBYztBQUNaVixhQUFPLEVBQUVBO0FBREcsS0FBZDtBQUdBLFdBQU9ULEtBQVA7QUFDRDs7QUFFRG9CLGdHQUFZLENBQUMxQixRQUFELEVBQVcsQ0FBQztBQUN0QjJCLE9BQUcsRUFBRSxPQURpQjtBQUV0QkMsU0FBSyxFQUFFLFNBQVNDLEtBQVQsR0FBaUI7QUFDdEIsV0FBS04sS0FBTCxDQUFXTSxLQUFYO0FBQ0Q7QUFKcUIsR0FBRCxFQUtwQjtBQUNERixPQUFHLEVBQUUsTUFESjtBQUVEQyxTQUFLLEVBQUUsU0FBU0UsSUFBVCxHQUFnQjtBQUNyQixXQUFLUCxLQUFMLENBQVdPLElBQVg7QUFDRDtBQUpBLEdBTG9CLEVBVXBCO0FBQ0RILE9BQUcsRUFBRSxRQURKO0FBRURDLFNBQUssRUFBRSxTQUFTRyxNQUFULEdBQWtCO0FBQ3ZCLFVBQUlDLFdBQUo7O0FBRUEsVUFBSUMsWUFBWSxHQUFHLEtBQUs1QixLQUF4QjtBQUFBLFVBQ0k2QixTQUFTLEdBQUdELFlBQVksQ0FBQ0MsU0FEN0I7QUFBQSxVQUVJQyxTQUFTLEdBQUdGLFlBQVksQ0FBQ0UsU0FGN0I7QUFBQSxVQUdJQyxLQUFLLEdBQUdILFlBQVksQ0FBQ0csS0FIekI7QUFBQSxVQUlJQyxJQUFJLEdBQUdKLFlBQVksQ0FBQ0ksSUFKeEI7QUFBQSxVQUtJQyxFQUFFLEdBQUdMLFlBQVksQ0FBQ0ssRUFMdEI7QUFBQSxVQU1JQyxJQUFJLEdBQUdOLFlBQVksQ0FBQ00sSUFOeEI7QUFBQSxVQU9JM0IsUUFBUSxHQUFHcUIsWUFBWSxDQUFDckIsUUFQNUI7QUFBQSxVQVFJNEIsUUFBUSxHQUFHUCxZQUFZLENBQUNPLFFBUjVCO0FBQUEsVUFTSUMsUUFBUSxHQUFHUixZQUFZLENBQUNRLFFBVDVCO0FBQUEsVUFVSUMsT0FBTyxHQUFHVCxZQUFZLENBQUNTLE9BVjNCO0FBQUEsVUFXSUMsT0FBTyxHQUFHVixZQUFZLENBQUNVLE9BWDNCO0FBQUEsVUFZSUMsTUFBTSxHQUFHWCxZQUFZLENBQUNXLE1BWjFCO0FBQUEsVUFhSUMsU0FBUyxHQUFHWixZQUFZLENBQUNZLFNBYjdCO0FBQUEsVUFjSUMsVUFBVSxHQUFHYixZQUFZLENBQUNhLFVBZDlCO0FBQUEsVUFlSUMsT0FBTyxHQUFHZCxZQUFZLENBQUNjLE9BZjNCO0FBQUEsVUFnQklDLFNBQVMsR0FBR2YsWUFBWSxDQUFDZSxTQWhCN0I7QUFBQSxVQWlCSXBCLEtBQUssR0FBR0ssWUFBWSxDQUFDTCxLQWpCekI7QUFBQSxVQWtCSXFCLFFBQVEsR0FBR2hCLFlBQVksQ0FBQ2dCLFFBbEI1QjtBQUFBLFVBbUJJQyxNQUFNLEdBQUdDLDBHQUF3QixDQUFDbEIsWUFBRCxFQUFlLENBQUMsV0FBRCxFQUFjLFdBQWQsRUFBMkIsT0FBM0IsRUFBb0MsTUFBcEMsRUFBNEMsSUFBNUMsRUFBa0QsTUFBbEQsRUFBMEQsVUFBMUQsRUFBc0UsVUFBdEUsRUFBa0YsVUFBbEYsRUFBOEYsU0FBOUYsRUFBeUcsU0FBekcsRUFBb0gsUUFBcEgsRUFBOEgsV0FBOUgsRUFBMkksWUFBM0ksRUFBeUosU0FBekosRUFBb0ssV0FBcEssRUFBaUwsT0FBakwsRUFBMEwsVUFBMUwsQ0FBZixDQW5CckM7O0FBcUJBLFVBQUltQixXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixNQUFaLEVBQW9CSyxNQUFwQixDQUEyQixVQUFVQyxJQUFWLEVBQWdCN0IsR0FBaEIsRUFBcUI7QUFDaEUsWUFBSUEsR0FBRyxDQUFDOEIsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFkLE1BQXFCLE9BQXJCLElBQWdDOUIsR0FBRyxDQUFDOEIsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFkLE1BQXFCLE9BQXJELElBQWdFOUIsR0FBRyxLQUFLLE1BQTVFLEVBQW9GO0FBQ2xGO0FBQ0E2QixjQUFJLENBQUM3QixHQUFELENBQUosR0FBWXVCLE1BQU0sQ0FBQ3ZCLEdBQUQsQ0FBbEI7QUFDRDs7QUFFRCxlQUFPNkIsSUFBUDtBQUNELE9BUGlCLEVBT2YsRUFQZSxDQUFsQjtBQVFBLFVBQUl6QyxPQUFPLEdBQUcsS0FBS1UsS0FBTCxDQUFXVixPQUF6QjtBQUNBLFVBQUkyQyxXQUFXLEdBQUdDLGlEQUFVLENBQUN6QixTQUFELEVBQVlDLFNBQVosR0FBd0JILFdBQVcsR0FBRyxFQUFkLEVBQWtCNEIsaUdBQWUsQ0FBQzVCLFdBQUQsRUFBYyxHQUFHNkIsTUFBSCxDQUFVM0IsU0FBVixFQUFxQixVQUFyQixDQUFkLEVBQWdEbkIsT0FBaEQsQ0FBakMsRUFBMkY2QyxpR0FBZSxDQUFDNUIsV0FBRCxFQUFjLEdBQUc2QixNQUFILENBQVUzQixTQUFWLEVBQXFCLFdBQXJCLENBQWQsRUFBaUR0QixRQUFqRCxDQUExRyxFQUFzS29CLFdBQTlMLEVBQTVCO0FBQ0EsYUFBTyxhQUFhOEIsNENBQUssQ0FBQ0MsYUFBTixDQUFvQixNQUFwQixFQUE0QjtBQUM5QzVCLGlCQUFTLEVBQUV1QixXQURtQztBQUU5Q3RCLGFBQUssRUFBRUE7QUFGdUMsT0FBNUIsRUFHakIsYUFBYTBCLDRDQUFLLENBQUNDLGFBQU4sQ0FBb0IsT0FBcEIsRUFBNkJDLDBGQUFRLENBQUM7QUFDcEQzQixZQUFJLEVBQUVBLElBRDhDO0FBRXBEQyxVQUFFLEVBQUVBLEVBRmdEO0FBR3BEQyxZQUFJLEVBQUVBLElBSDhDO0FBSXBEVSxnQkFBUSxFQUFFQSxRQUowQztBQUtwRFQsZ0JBQVEsRUFBRUEsUUFMMEM7QUFNcEQ1QixnQkFBUSxFQUFFQSxRQU4wQztBQU9wRDZCLGdCQUFRLEVBQUVBLFFBUDBDO0FBUXBETixpQkFBUyxFQUFFLEdBQUcwQixNQUFILENBQVUzQixTQUFWLEVBQXFCLFFBQXJCLENBUnlDO0FBU3BEbkIsZUFBTyxFQUFFLENBQUMsQ0FBQ0EsT0FUeUM7QUFVcEQyQixlQUFPLEVBQUVBLE9BVjJDO0FBV3BEQyxlQUFPLEVBQUVBLE9BWDJDO0FBWXBEQyxjQUFNLEVBQUVBLE1BWjRDO0FBYXBERyxlQUFPLEVBQUVBLE9BYjJDO0FBY3BERixpQkFBUyxFQUFFQSxTQWR5QztBQWVwREMsa0JBQVUsRUFBRUEsVUFmd0M7QUFnQnBEakMsZ0JBQVEsRUFBRSxLQUFLSixZQWhCcUM7QUFpQnBEdUMsaUJBQVMsRUFBRUEsU0FqQnlDO0FBa0JwRGlCLFdBQUcsRUFBRSxLQUFLNUMsU0FsQjBDO0FBbUJwRE8sYUFBSyxFQUFFQTtBQW5CNkMsT0FBRCxFQW9CbER3QixXQXBCa0QsQ0FBckMsQ0FISSxFQXVCRixhQUFhVSw0Q0FBSyxDQUFDQyxhQUFOLENBQW9CLE1BQXBCLEVBQTRCO0FBQ3pENUIsaUJBQVMsRUFBRSxHQUFHMEIsTUFBSCxDQUFVM0IsU0FBVixFQUFxQixRQUFyQjtBQUQ4QyxPQUE1QixDQXZCWCxDQUFwQjtBQTBCRDtBQTlEQSxHQVZvQixDQUFYLEVBeUVSLENBQUM7QUFDSFAsT0FBRyxFQUFFLDBCQURGO0FBRUhDLFNBQUssRUFBRSxTQUFTc0Msd0JBQVQsQ0FBa0M3RCxLQUFsQyxFQUF5Q29CLEtBQXpDLEVBQWdEO0FBQ3JELFVBQUksYUFBYXBCLEtBQWpCLEVBQXdCO0FBQ3RCLGVBQU9ZLGdHQUFhLENBQUNBLGdHQUFhLENBQUMsRUFBRCxFQUFLUSxLQUFMLENBQWQsRUFBMkIsRUFBM0IsRUFBK0I7QUFDakRWLGlCQUFPLEVBQUVWLEtBQUssQ0FBQ1U7QUFEa0MsU0FBL0IsQ0FBcEI7QUFHRDs7QUFFRCxhQUFPLElBQVA7QUFDRDtBQVZFLEdBQUQsQ0F6RVEsQ0FBWjs7QUFzRkEsU0FBT2YsUUFBUDtBQUNELENBN0kyQixDQTZJMUJtRSwrQ0E3STBCLENBQTVCOztBQStJQW5FLFFBQVEsQ0FBQ29FLFlBQVQsR0FBd0I7QUFDdEJsQyxXQUFTLEVBQUUsYUFEVztBQUV0QkMsV0FBUyxFQUFFLEVBRlc7QUFHdEJDLE9BQUssRUFBRSxFQUhlO0FBSXRCRyxNQUFJLEVBQUUsVUFKZ0I7QUFLdEJmLGdCQUFjLEVBQUUsS0FMTTtBQU10Qm1CLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CLENBQUUsQ0FOUjtBQU90QkMsUUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0IsQ0FBRSxDQVBOO0FBUXRCL0IsVUFBUSxFQUFFLFNBQVNBLFFBQVQsR0FBb0IsQ0FBRSxDQVJWO0FBU3RCZ0MsV0FBUyxFQUFFLFNBQVNBLFNBQVQsR0FBcUIsQ0FBRSxDQVRaO0FBVXRCQyxZQUFVLEVBQUUsU0FBU0EsVUFBVCxHQUFzQixDQUFFLENBVmQ7QUFXdEJDLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CLENBQUU7QUFYUixDQUF4QjtBQWFlL0MsaUVBQWYiLCJmaWxlIjoieDFZYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxudmFyIENoZWNrYm94ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDaGVja2JveCwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDaGVja2JveCk7XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3gocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hlY2tib3gpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoISgnY2hlY2tlZCcgaW4gX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjaGVja2VkOiBlLnRhcmdldC5jaGVja2VkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICAgIHRhcmdldDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIHt9LCB7XG4gICAgICAgICAgICBjaGVja2VkOiBlLnRhcmdldC5jaGVja2VkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmF0aXZlRXZlbnQ6IGUubmF0aXZlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNhdmVJbnB1dCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5pbnB1dCA9IG5vZGU7XG4gICAgfTtcblxuICAgIHZhciBjaGVja2VkID0gJ2NoZWNrZWQnIGluIHByb3BzID8gcHJvcHMuY2hlY2tlZCA6IHByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hlY2tlZDogY2hlY2tlZFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENoZWNrYm94LCBbe1xuICAgIGtleTogXCJmb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmx1clwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgdGhpcy5pbnB1dC5ibHVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZSxcbiAgICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMyLm5hbWUsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wczIuaWQsXG4gICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMyLnJlYWRPbmx5LFxuICAgICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMyLnRhYkluZGV4LFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wczIub25DbGljayxcbiAgICAgICAgICBvbkZvY3VzID0gX3RoaXMkcHJvcHMyLm9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMyLm9uQmx1cixcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wczIub25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5UHJlc3MgPSBfdGhpcyRwcm9wczIub25LZXlQcmVzcyxcbiAgICAgICAgICBvbktleVVwID0gX3RoaXMkcHJvcHMyLm9uS2V5VXAsXG4gICAgICAgICAgYXV0b0ZvY3VzID0gX3RoaXMkcHJvcHMyLmF1dG9Gb2N1cyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZSxcbiAgICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzMi5yZXF1aXJlZCxcbiAgICAgICAgICBvdGhlcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcIm5hbWVcIiwgXCJpZFwiLCBcInR5cGVcIiwgXCJkaXNhYmxlZFwiLCBcInJlYWRPbmx5XCIsIFwidGFiSW5kZXhcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uQmx1clwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5UHJlc3NcIiwgXCJvbktleVVwXCIsIFwiYXV0b0ZvY3VzXCIsIFwidmFsdWVcIiwgXCJyZXF1aXJlZFwiXSk7XG5cbiAgICAgIHZhciBnbG9iYWxQcm9wcyA9IE9iamVjdC5rZXlzKG90aGVycykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkgPT09ICdyb2xlJykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIHByZXZba2V5XSA9IG90aGVyc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCB7fSk7XG4gICAgICB2YXIgY2hlY2tlZCA9IHRoaXMuc3RhdGUuY2hlY2tlZDtcbiAgICAgIHZhciBjbGFzc1N0cmluZyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2hlY2tlZFwiKSwgY2hlY2tlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kaXNhYmxlZFwiKSwgZGlzYWJsZWQpLCBfY2xhc3NOYW1lcykpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJpbmcsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5wdXRcIiksXG4gICAgICAgIGNoZWNrZWQ6ICEhY2hlY2tlZCxcbiAgICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICAgICAgb25CbHVyOiBvbkJsdXIsXG4gICAgICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICByZWY6IHRoaXMuc2F2ZUlucHV0LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIGdsb2JhbFByb3BzKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbm5lclwiKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgICBpZiAoJ2NoZWNrZWQnIGluIHByb3BzKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0YXRlKSwge30sIHtcbiAgICAgICAgICBjaGVja2VkOiBwcm9wcy5jaGVja2VkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2hlY2tib3g7XG59KENvbXBvbmVudCk7XG5cbkNoZWNrYm94LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHJlZml4Q2xzOiAncmMtY2hlY2tib3gnLFxuICBjbGFzc05hbWU6ICcnLFxuICBzdHlsZToge30sXG4gIHR5cGU6ICdjaGVja2JveCcsXG4gIGRlZmF1bHRDaGVja2VkOiBmYWxzZSxcbiAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHt9LFxuICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oKSB7fSxcbiAgb25LZXlQcmVzczogZnVuY3Rpb24gb25LZXlQcmVzcygpIHt9LFxuICBvbktleVVwOiBmdW5jdGlvbiBvbktleVVwKCkge31cbn07XG5leHBvcnQgZGVmYXVsdCBDaGVja2JveDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///x1Ya\n')}}]);